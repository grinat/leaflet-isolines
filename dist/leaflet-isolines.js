(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global['leaflet-isolines'] = factory());
}(this, (function () { 'use strict';

    var TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),
        SCRIPT_TYPE = 'application/javascript',
        BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder,
        URL = window.URL || window.webkitURL,
        Worker = window.Worker;

    /**
     * Returns a wrapper around Web Worker code that is constructible.
     *
     * @function shimWorker
     *
     * @param { String }    filename    The name of the file
     * @param { Function }  fn          Function wrapping the code of the worker
     */
    function shimWorker(filename, fn) {
        return function ShimWorker(forceFallback) {
            var o = this;

            if (!fn) {
                return new Worker(filename);
            } else if (Worker && !forceFallback) {
                // Convert the function's inner code to a string to construct the worker
                var source = ('' + fn).replace(/^function.+?{/, '').slice(0, -1),
                    objURL = createSourceObject(source);

                this[TARGET] = new Worker(objURL);
                URL.revokeObjectURL(objURL);
                return this[TARGET];
            } else {
                var selfShim = {
                    postMessage: function postMessage(m) {
                        if (o.onmessage) {
                            setTimeout(function () {
                                return o.onmessage({ data: m, target: selfShim });
                            });
                        }
                    }
                };

                fn.call(selfShim);
                this.postMessage = function (m) {
                    setTimeout(function () {
                        return selfShim.onmessage({ data: m, target: o });
                    });
                };
                this.isThisThread = true;
            }
        };
    }
    // Test Worker capabilities
    if (Worker) {
        var testWorker,
            objURL = createSourceObject('self.onmessage = function () {}'),
            testArray = new Uint8Array(1);

        try {
            // No workers via blobs in Edge 12 and IE 11 and lower :(
            if (/(?:Trident|Edge)\/(?:[567]|12)/i.test(navigator.userAgent)) {
                throw new Error('Not available');
            }
            testWorker = new Worker(objURL);

            // Native browser on some Samsung devices throws for transferables, let's detect it
            testWorker.postMessage(testArray, [testArray.buffer]);
        } catch (e) {
            Worker = null;
        } finally {
            URL.revokeObjectURL(objURL);
            if (testWorker) {
                testWorker.terminate();
            }
        }
    }

    function createSourceObject(str) {
        try {
            return URL.createObjectURL(new Blob([str], { type: SCRIPT_TYPE }));
        } catch (e) {
            var blob = new BlobBuilder();
            blob.append(str);
            return URL.createObjectURL(blob.getBlob(type));
        }
    }

    var IsolinesWorker = new shimWorker("./isolinesWorker.compiled.js", function (window, document) {
    var self = this;
    !function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e():"function"==typeof define&&define.amd?define(e):e();}(0,function(){function t(t,e,n){if(n=n||{},!l(n))throw new Error("options is invalid");var r=n.bbox,i=n.id;if(void 0===t)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");r&&p(r),i&&c(i);var o={type:"Feature"};return i&&(o.id=i),r&&(o.bbox=r),o.properties=e||{},o.geometry=t,o}function e(e,n,r){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!u(e[0])||!u(e[1]))throw new Error("coordinates must contain numbers");return t({type:"Point",coordinates:e},n,r)}function n(e,n,r){if(!e)throw new Error("coordinates is required");for(var i=0;i<e.length;i++){var o=e[i];if(o.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<o[o.length-1].length;s++){if(0===i&&0===s&&!u(o[0][0])||!u(o[0][1]))throw new Error("coordinates must contain numbers");if(o[o.length-1][s]!==o[0][s])throw new Error("First and last Position are not equivalent.")}}return t({type:"Polygon",coordinates:e},n,r)}function r(t,e){if(e=e||{},!l(e))throw new Error("options is invalid");var n=e.bbox,r=e.id;if(!t)throw new Error("No features passed");if(!Array.isArray(t))throw new Error("features must be an Array");n&&p(n),r&&c(r);var i={type:"FeatureCollection"};return r&&(i.id=r),n&&(i.bbox=n),i.features=t,i}function i(e,n,r){if(!e)throw new Error("coordinates is required");return t({type:"MultiLineString",coordinates:e},n,r)}function o(e,n,r){if(!e)throw new Error("coordinates is required");return t({type:"MultiPolygon",coordinates:e},n,r)}function s(t,e){if(void 0===t||null===t)throw new Error("radians is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var n=me[e||"kilometers"];if(!n)throw new Error(e+" units is invalid");return t*n}function a(t){if(null===t||void 0===t)throw new Error("degrees is required");return t%360*Math.PI/180}function u(t){return !isNaN(t)&&null!==t&&!Array.isArray(t)}function l(t){return !!t&&t.constructor===Object}function p(t){if(!t)throw new Error("bbox is required");if(!Array.isArray(t))throw new Error("bbox must be an Array");if(4!==t.length&&6!==t.length)throw new Error("bbox must be an Array of 4 or 6 numbers");t.forEach(function(t){if(!u(t))throw new Error("bbox must only contain numbers")});}function c(t){if(!t)throw new Error("id is required");if(-1===["string","number"].indexOf(void 0===t?"undefined":he(t)))throw new Error("id must be a number or a string")}function h(t,e,n){if(null!==t)for(var r,i,o,s,a,u,l,p,c=0,f=0,g=t.type,d="FeatureCollection"===g,y="Feature"===g,_=d?t.features.length:1,m=0;m<_;m++){l=d?t.features[m].geometry:y?t.geometry:t,p=!!l&&"GeometryCollection"===l.type,a=p?l.geometries.length:1;for(var v=0;v<a;v++){var E=0,I=0;if(null!==(s=p?l.geometries[v]:l)){u=s.coordinates;var x=s.type;switch(c=!n||"Polygon"!==x&&"MultiPolygon"!==x?0:1,x){case null:break;case"Point":e(u,f,m,E,I),f++,E++;break;case"LineString":case"MultiPoint":for(r=0;r<u.length;r++)e(u[r],f,m,E,I),f++,"MultiPoint"===x&&E++;"LineString"===x&&E++;break;case"Polygon":case"MultiLineString":for(r=0;r<u.length;r++){for(i=0;i<u[r].length-c;i++)e(u[r][i],f,m,E,I),f++;"MultiLineString"===x&&E++,"Polygon"===x&&I++;}"Polygon"===x&&E++;break;case"MultiPolygon":for(r=0;r<u.length;r++){for("MultiPolygon"===x&&(I=0),i=0;i<u[r].length;i++){for(o=0;o<u[r][i].length-c;o++)e(u[r][i][o],f,m,E,I),f++;I++;}E++;}break;case"GeometryCollection":for(r=0;r<s.geometries.length;r++)h(s.geometries[r],e,n);break;default:throw new Error("Unknown Geometry Type")}}}}}function f(t,e){if("Feature"===t.type)e(t,0);else if("FeatureCollection"===t.type)for(var n=0;n<t.features.length;n++)e(t.features[n],n);}function g(t,e){var n,r,i,o,s,a,u,l,p,c,h=0,f="FeatureCollection"===t.type,g="Feature"===t.type,d=f?t.features.length:1;for(n=0;n<d;n++){for(a=f?t.features[n].geometry:g?t.geometry:t,l=f?t.features[n].properties:g?t.properties:{},p=f?t.features[n].bbox:g?t.bbox:void 0,c=f?t.features[n].id:g?t.id:void 0,u=!!a&&"GeometryCollection"===a.type,s=u?a.geometries.length:1,i=0;i<s;i++)if(null!==(o=u?a.geometries[i]:a))switch(o.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":e(o,h,l,p,c);break;case"GeometryCollection":for(r=0;r<o.geometries.length;r++)e(o.geometries[r],h,l,p,c);break;default:throw new Error("Unknown Geometry Type")}else e(null,h,l,p,c);h++;}}function d(t,e,n){var r=n;return g(t,function(t,i,o,s,a){r=0===i&&void 0===n?t:e(r,t,i,o,s,a);}),r}function y(t){var e=[1/0,1/0,-1/0,-1/0];return h(t,function(t){e[0]>t[0]&&(e[0]=t[0]),e[1]>t[1]&&(e[1]=t[1]),e[2]<t[0]&&(e[2]=t[0]),e[3]<t[1]&&(e[3]=t[1]);}),e}function _(t){if(!t)throw new Error("obj is required");var e=m(t);if(e.length>1&&u(e[0])&&u(e[1]))return e;throw new Error("Coordinate is not a valid Point")}function m(t){if(!t)throw new Error("obj is required");var e;if(t.length?e=t:t.coordinates?e=t.coordinates:t.geometry&&t.geometry.coordinates&&(e=t.geometry.coordinates),e)return v(e),e;throw new Error("No valid coordinates")}function v(t){if(t.length>1&&u(t[0])&&u(t[1]))return !0;if(Array.isArray(t[0])&&t[0].length)return v(t[0]);throw new Error("coordinates must only contain numbers")}function E(t,e,n){if(!t)throw new Error("No featureCollection passed");if(!n)throw new Error(".collectionOf() requires a name");if(!t||"FeatureCollection"!==t.type)throw new Error("Invalid input to "+n+", FeatureCollection required");for(var r=0;r<t.features.length;r++){var i=t.features[r];if(!i||"Feature"!==i.type||!i.geometry)throw new Error("Invalid input to "+n+", Feature with geometry required");if(!i.geometry||i.geometry.type!==e)throw new Error("Invalid input to "+n+": must be a "+e+", given "+i.geometry.type)}}function I(t){if(!t)throw new Error("geojson is required");if(void 0!==t.geometry)return t.geometry;if(t.coordinates||t.geometries)return t;throw new Error("geojson must be a valid Feature or Geometry Object")}function x(t,e){if(!t)throw new Error((e||"geojson")+" is required");if(t.geometry&&t.geometry.type)return t.geometry.type;if(t.type)return t.type;throw new Error((e||"geojson")+" is invalid")}function N(t,e,n){if(n=n||{},!l(n))throw new Error("options is invalid");var r=n.units,i=_(t),o=_(e),u=a(o[1]-i[1]),p=a(o[0]-i[0]),c=a(i[1]),h=a(o[1]),f=Math.pow(Math.sin(u/2),2)+Math.pow(Math.sin(p/2),2)*Math.cos(c)*Math.cos(h);return s(2*Math.atan2(Math.sqrt(f),Math.sqrt(1-f)),r)}function b(){}function C(t){this.message=t||"";}function w(t){this.message=t||"";}function S(t){this.message=t||"";}function L(){}function P(t){return null===t?Gn:t.color}function O(t){return null===t?null:t.parent}function T(t,e){null!==t&&(t.color=e);}function R(t){return null===t?null:t.left}function D(t){return null===t?null:t.right}function M(){this.root_=null,this.size_=0;}function A(){}function F(){this.array_=[],arguments[0]instanceof Nn&&this.addAll(arguments[0]);}function G(){}function q(){}function k(){}function B(){}function V(){}function z(t){this.message=t||"";}function U(){this.array_=[];}function X(t,e){if(e=e||{},!l(e))throw new Error("options is invalid");var n=e.precision,r=e.coordinates,i=e.mutate;if(n=void 0===n||null===n||isNaN(n)?6:n,r=void 0===r||null===r||isNaN(r)?3:r,!t)throw new Error("<geojson> is required");if("number"!=typeof n)throw new Error("<precision> must be a number");if("number"!=typeof r)throw new Error("<coordinates> must be a number");!1!==i&&void 0!==i||(t=JSON.parse(JSON.stringify(t)));var o=Math.pow(10,n);return h(t,function(t){j(t,o,r);}),t}function j(t,e,n){t.length>n&&t.splice(n,t.length);for(var r=0;r<t.length;r++)t[r]=Math.round(t[r]*e)/e;return t}function Y(e,n){var r="object"===(void 0===n?"undefined":he(n))?n.mutate:n;if(!e)throw new Error("geojson is required");var i=x(e),o=[];switch(i){case"LineString":o=H(e);break;case"MultiLineString":case"Polygon":m(e).forEach(function(t){o.push(H(t));});break;case"MultiPolygon":m(e).forEach(function(t){var e=[];t.forEach(function(t){e.push(H(t));}),o.push(e);});break;case"Point":return e;case"MultiPoint":var s={};m(e).forEach(function(t){var e=t.join("-");s.hasOwnProperty(e)||(o.push(t),s[e]=!0);});break;default:throw new Error(i+" geometry not supported")}return e.coordinates?!0===r?(e.coordinates=o,e):{type:i,coordinates:o}:!0===r?(e.geometry.coordinates=o,e):t({type:i,coordinates:o},e.properties,e.bbox,e.id)}function H(t){var e=m(t);if(2===e.length&&!W(e[0],e[1]))return e;var n,r,i,o=[],s=e.length-1;o.push(e[0]);for(var a=1;a<s;a++)n=e[a-1],r=e[a],i=e[a+1],K(n,i,r)||o.push(r);return o.push(i),o}function W(t,e){return t[0]===e[0]&&t[1]===e[1]}function K(t,e,n){var r=n[0],i=n[1],o=t[0],s=t[1],a=e[0],u=e[1],l=r-o,p=i-s,c=a-o,h=u-s;return 0==l*h-p*c&&(Math.abs(c)>=Math.abs(h)?c>0?o<=r&&r<=a:a<=r&&r<=o:h>0?s<=i&&i<=u:u<=i&&i<=s)}function J(e,n){var r=I(e),i=I(n);if(Y(X(i,{precision:4})).coordinates[0].length<4)return null;if(Y(X(r,{precision:4})).coordinates[0].length<4)return null;var o=new Lr,s=o.read(X(r)),a=o.read(X(i)),u=Ts.intersection(s,a);return u.isEmpty()?null:t((new Pr).write(u))}function Q(t,e,n){if(n=n||{},!l(n))throw new Error("options is invalid");var i=n.properties||{},o=n.triangles,s=n.mask;if(null===e||void 0===e)throw new Error("cellSide is required");if(!u(e))throw new Error("cellSide is invalid");if(!t)throw new Error("bbox is required");if(!Array.isArray(t))throw new Error("bbox must be array");if(4!==t.length)throw new Error("bbox must contain 4 numbers");if(s&&-1===["Polygon","MultiPolygon"].indexOf(x(s)))throw new Error("options.mask must be a (Multi)Polygon");var a=t[0],p=t[1],c=t[2],h=t[3],f=(p+h)/2,g=(a+c)/2,d=2*e/N([a,f],[c,f],n),y=d*(c-a),_=2*e/N([g,p],[g,h],n),m=_*(h-p),v=y/2,E=2*v,I=Math.sqrt(3)/2*m,b=c-a,C=h-p,w=3/4*E,S=I,L=(b-E)/(E-v/2),P=Math.floor(L),O=(P*w-v/2-b)/2-v/2+w/2,T=Math.floor((C-I)/I),R=(C-T*I)/2,D=T*I-C>I/2;D&&(R-=I/4);for(var M=[],A=[],F=0;F<6;F++){var G=2*Math.PI/6*F;M.push(Math.cos(G)),A.push(Math.sin(G));}for(var q=[],k=0;k<=P;k++)for(var B=0;B<=T;B++){var V=k%2==1;if((0!==B||!V)&&(0!==B||!D)){var z=k*w+a-O,U=B*S+p+R;if(V&&(U-=I/2),!0===o)$([z,U],y/2,m/2,i,M,A).forEach(function(t){s?J(s,t)&&q.push(t):q.push(t);});else{var X=Z([z,U],y/2,m/2,i,M,A);s?J(s,X)&&q.push(X):q.push(X);}}}return r(q)}function Z(t,e,r,i,o,s){for(var a=[],u=0;u<6;u++){var l=t[0]+e*o[u],p=t[1]+r*s[u];a.push([l,p]);}return a.push(a[0].slice()),n([a],i)}function $(t,e,r,i,o,s){for(var a=[],u=0;u<6;u++){var l=[];l.push(t),l.push([t[0]+e*o[u],t[1]+r*s[u]]),l.push([t[0]+e*o[(u+1)%6],t[1]+r*s[(u+1)%6]]),l.push(t),a.push(n([l],i));}return a}function tt(t,e,n){n=n||{};var r=n.ignoreEndVertices;if(!l(n))throw new Error("invalid options");if(!t)throw new Error("pt is required");if(!e)throw new Error("line is required");for(var i=_(t),o=m(e),s=0;s<o.length-1;s++){var a=!1;if(r&&(0===s&&(a="start"),s===o.length-2&&(a="end"),0===s&&s+1===o.length-1&&(a="both")),et(o[s],o[s+1],i,a))return !0}return !1}function et(t,e,n,r){var i=n[0],o=n[1],s=t[0],a=t[1],u=e[0],l=e[1],p=n[0]-s,c=n[1]-a,h=u-s,f=l-a;return 0==p*f-c*h&&(r?"start"===r?Math.abs(h)>=Math.abs(f)?h>0?s<i&&i<=u:u<=i&&i<s:f>0?a<o&&o<=l:l<=o&&o<a:"end"===r?Math.abs(h)>=Math.abs(f)?h>0?s<=i&&i<u:u<i&&i<=s:f>0?a<=o&&o<l:l<o&&o<=a:"both"===r?Math.abs(h)>=Math.abs(f)?h>0?s<i&&i<u:u<i&&i<s:f>0?a<o&&o<l:l<o&&o<a:void 0:Math.abs(h)>=Math.abs(f)?h>0?s<=i&&i<=u:u<=i&&i<=s:f>0?a<=o&&o<=l:l<=o&&o<=a)}function nt(t,e,n){if(n=n||{},"object"!==(void 0===n?"undefined":he(n)))throw new Error("options is invalid");var r=n.ignoreBoundary;if(!t)throw new Error("point is required");if(!e)throw new Error("polygon is required");var i=_(t),o=m(e),s=e.geometry?e.geometry.type:e.type,a=e.bbox;if(a&&!1===it(i,a))return !1;"Polygon"===s&&(o=[o]);for(var u=0,l=!1;u<o.length&&!l;u++)if(rt(i,o[u][0],r)){for(var p=!1,c=1;c<o[u].length&&!p;)rt(i,o[u][c],!r)&&(p=!0),c++;p||(l=!0);}return l}function rt(t,e,n){var r=!1;e[0][0]===e[e.length-1][0]&&e[0][1]===e[e.length-1][1]&&(e=e.slice(0,e.length-1));for(var i=0,o=e.length-1;i<e.length;o=i++){var s=e[i][0],a=e[i][1],u=e[o][0],l=e[o][1];if(t[1]*(s-u)+a*(u-t[0])+l*(t[0]-s)==0&&(s-t[0])*(u-t[0])<=0&&(a-t[1])*(l-t[1])<=0)return !n;a>t[1]!=l>t[1]&&t[0]<(u-s)*(t[1]-a)/(l-a)+s&&(r=!r);}return r}function it(t,e){return e[0]<=t[0]&&e[1]<=t[1]&&e[2]>=t[0]&&e[3]>=t[1]}function ot(t,e){var n=x(t),r=x(e),i=I(t),o=I(e);switch(n){case"Point":switch(r){case"MultiPoint":return st(i,o);case"LineString":return tt(i,o,{ignoreEndVertices:!0});case"Polygon":return nt(i,o,{ignoreBoundary:!0});default:throw new Error("feature2 "+r+" geometry not supported")}case"MultiPoint":switch(r){case"MultiPoint":return at(i,o);case"LineString":return ut(i,o);case"Polygon":return lt(i,o);default:throw new Error("feature2 "+r+" geometry not supported")}case"LineString":switch(r){case"LineString":return pt(i,o);case"Polygon":return ct(i,o);default:throw new Error("feature2 "+r+" geometry not supported")}case"Polygon":switch(r){case"Polygon":return ht(i,o);default:throw new Error("feature2 "+r+" geometry not supported")}default:throw new Error("feature1 "+n+" geometry not supported")}}function st(t,e){var n,r=!1;for(n=0;n<e.coordinates.length;n++)if(gt(e.coordinates[n],t.coordinates)){r=!0;break}return r}function at(t,e){for(var n=0;n<t.coordinates.length;n++){for(var r=!1,i=0;i<e.coordinates.length;i++)gt(t.coordinates[n],e.coordinates[i])&&(r=!0);if(!r)return !1}return !0}function ut(t,e){for(var n=!1,r=0;r<t.coordinates.length;r++){if(!tt(t.coordinates[r],e))return !1;n||(n=tt(t.coordinates[r],e,{ignoreEndVertices:!0}));}return n}function lt(t,e){for(var n=!0,r=0;r<t.coordinates.length;r++){var i=nt(t.coordinates[1],e);if(!i){n=!1;break}i=nt(t.coordinates[1],e,{ignoreBoundary:!0});}return n&&i}function pt(t,e){for(var n=0;n<t.coordinates.length;n++)if(!tt(t.coordinates[n],e))return !1;return !0}function ct(t,e){if(!ft(y(e),y(t)))return !1;for(var n=!1,r=0;r<t.coordinates.length-1;r++){if(!nt(t.coordinates[r],e))return !1;if(n||(n=nt(t.coordinates[r],e,{ignoreBoundary:!0})),!n){n=nt(dt(t.coordinates[r],t.coordinates[r+1]),e,{ignoreBoundary:!0});}}return n}function ht(t,e){var n=y(t);if(!ft(y(e),n))return !1;for(var r=0;r<t.coordinates[0].length;r++)if(!nt(t.coordinates[0][r],e))return !1;return !0}function ft(t,e){return !(t[0]>e[0])&&(!(t[2]<e[2])&&(!(t[1]>e[1])&&!(t[3]<e[3])))}function gt(t,e){return t[0]===e[0]&&t[1]===e[1]}function dt(t,e){return [(t[0]+e[0])/2,(t[1]+e[1])/2]}function yt(t,n,i){if(i=i||{},!l(i))throw new Error("options is invalid");var o=i.mask,s=i.properties,a=[];if(null===n||void 0===n)throw new Error("cellSide is required");if(!u(n))throw new Error("cellSide is invalid");if(!t)throw new Error("bbox is required");if(!Array.isArray(t))throw new Error("bbox must be array");if(4!==t.length)throw new Error("bbox must contain 4 numbers");if(o&&-1===["Polygon","MultiPolygon"].indexOf(x(o)))throw new Error("options.mask must be a (Multi)Polygon");for(var p=t[0],c=t[1],h=t[2],f=t[3],g=n/N([p,c],[h,c],i),d=g*(h-p),y=n/N([p,c],[p,f],i),_=y*(f-c),m=h-p,v=f-c,E=Math.floor(m/d),I=Math.floor(v/_),b=(m-E*d)/2,C=(v-I*_)/2,w=p+b;w<=h;){for(var S=c+C;S<=f;){var L=e([w,S],s);o?ot(L,o)&&a.push(L):a.push(L),S+=_;}w+=d;}return r(a)}function _t(t,n){var r=0,i=0,o=0;return h(t,function(t){r+=t[0],i+=t[1],o++;},!0),e([r/o,i/o],n)}function mt(t,e,i){if(i=i||{},!l(i))throw new Error("options is invalid");var o=i.properties,s=i.mask,a=[];if(null===e||void 0===e)throw new Error("cellSide is required");if(!u(e))throw new Error("cellSide is invalid");if(!t)throw new Error("bbox is required");if(!Array.isArray(t))throw new Error("bbox must be array");if(4!==t.length)throw new Error("bbox must contain 4 numbers");if(s&&-1===["Polygon","MultiPolygon"].indexOf(x(s)))throw new Error("options.mask must be a (Multi)Polygon");for(var p=t[0],c=t[1],h=t[2],f=t[3],g=e/N([p,c],[h,c],i),d=g*(h-p),y=e/N([p,c],[p,f],i),_=y*(f-c),m=h-p,v=f-c,E=Math.floor(m/d),I=Math.floor(v/_),b=(m-E*d)/2,C=(v-I*_)/2,w=p+b,S=0;S<E;S++){for(var L=c+C,P=0;P<I;P++){var O=n([[[w,L],[w,L+_],[w+d,L+_],[w+d,L],[w,L]]],o);s?J(s,O)&&a.push(O):a.push(O),L+=_;}w+=d;}return r(a)}function vt(t,e,i){if(i=i||{},!l(i))throw new Error("options is invalid");var o=i.properties,s=i.mask,a=[];if(null===e||void 0===e)throw new Error("cellSide is required");if(!u(e))throw new Error("cellSide is invalid");if(!t)throw new Error("bbox is required");if(!Array.isArray(t))throw new Error("bbox must be array");if(4!==t.length)throw new Error("bbox must contain 4 numbers");if(s&&-1===["Polygon","MultiPolygon"].indexOf(x(s)))throw new Error("options.mask must be a (Multi)Polygon");for(var p=e/N([t[0],t[1]],[t[2],t[1]],i),c=p*(t[2]-t[0]),h=e/N([t[0],t[1]],[t[0],t[3]],i),f=h*(t[3]-t[1]),g=0,d=t[0];d<=t[2];){for(var y=0,_=t[1];_<=t[3];){var m=null,v=null;g%2==0&&y%2==0?(m=n([[[d,_],[d,_+f],[d+c,_],[d,_]]],o),v=n([[[d,_+f],[d+c,_+f],[d+c,_],[d,_+f]]],o)):g%2==0&&y%2==1?(m=n([[[d,_],[d+c,_+f],[d+c,_],[d,_]]],o),v=n([[[d,_],[d,_+f],[d+c,_+f],[d,_]]],o)):y%2==0&&g%2==1?(m=n([[[d,_],[d,_+f],[d+c,_+f],[d,_]]],o),v=n([[[d,_],[d+c,_+f],[d+c,_],[d,_]]],o)):y%2==1&&g%2==1&&(m=n([[[d,_],[d,_+f],[d+c,_],[d,_]]],o),v=n([[[d,_+f],[d+c,_+f],[d+c,_],[d,_+f]]],o)),s?(J(s,m)&&a.push(m),J(s,v)&&a.push(v)):(a.push(m),a.push(v)),_+=f,y++;}g++,d+=c;}return r(a)}function Et(t){if(!t)throw new Error("geojson is required");switch(t.type){case"Feature":return It(t);case"FeatureCollection":return Nt(t);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return bt(t);default:throw new Error("unknown GeoJSON type")}}function It(t){var e={type:"Feature"};return Object.keys(t).forEach(function(n){switch(n){case"type":case"properties":case"geometry":return;default:e[n]=t[n];}}),e.properties=xt(t.properties),e.geometry=bt(t.geometry),e}function xt(t){var e={};return t?(Object.keys(t).forEach(function(n){var r=t[n];"object"===(void 0===r?"undefined":he(r))?null===r?e[n]=null:r.length?e[n]=r.map(function(t){return t}):e[n]=xt(r):e[n]=r;}),e):e}function Nt(t){var e={type:"FeatureCollection"};return Object.keys(t).forEach(function(n){switch(n){case"type":case"features":return;default:e[n]=t[n];}}),e.features=t.features.map(function(t){return It(t)}),e}function bt(t){var e={type:t.type};return t.bbox&&(e.bbox=t.bbox),"GeometryCollection"===t.type?(e.geometries=t.geometries.map(function(t){return bt(t)}),e):(e.coordinates=Ct(t.coordinates),e)}function Ct(t){return "object"!==he(t[0])?t.slice():t.map(function(t){return Ct(t)})}function wt(t,e,n){if(n=n||{},"object"!==(void 0===n?"undefined":he(n)))throw new Error("options is invalid");var i=n.gridType,o=n.property,s=n.weight;if(!t)throw new Error("points is required");if(E(t,"Point","input must contain Points"),!e)throw new Error("cellSize is required");if(void 0!==s&&"number"!=typeof s)throw new Error("weight must be a number");o=o||"elevation",i=i||"square",s=s||1;var a,u=y(t);switch(i){case"point":case"points":a=yt(u,e,n);break;case"square":case"squares":a=mt(u,e,n);break;case"hex":case"hexes":a=Q(u,e,n);break;case"triangle":case"triangles":a=vt(u,e,n);break;default:throw new Error("invalid gridType")}var l=[];return f(a,function(e){var r=0,a=0;f(t,function(t){var u,l="point"===i?e:_t(e),p=N(l,t,n);if(void 0!==o&&(u=t.properties[o]),void 0===u&&(u=t.geometry.coordinates[2]),void 0===u)throw new Error("zValue is missing");0===p&&(r=u);var c=1/Math.pow(p,s);a+=c,r+=c*u;});var u=Et(e);u.properties[o]=r/a,l.push(u);}),r(l)}function St(t){return d(t,function(t,e){return t+Lt(e)},0)}function Lt(t){var e,n=0;switch(t.type){case"Polygon":return Pt(t.coordinates);case"MultiPolygon":for(e=0;e<t.coordinates.length;e++)n+=Pt(t.coordinates[e]);return n;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(e=0;e<t.geometries.length;e++)n+=Lt(t.geometries[e]);return n}}function Pt(t){var e=0;if(t&&t.length>0){e+=Math.abs(Ot(t[0]));for(var n=1;n<t.length;n++)e-=Math.abs(Ot(t[n]));}return e}function Ot(t){var e,n,r,i,o,s,a,u=0,l=t.length;if(l>2){for(a=0;a<l;a++)a===l-2?(i=l-2,o=l-1,s=0):a===l-1?(i=l-1,o=0,s=1):(i=a,o=a+1,s=a+2),e=t[i],n=t[o],r=t[s],u+=(Tt(r[0])-Tt(e[0]))*Math.sin(Tt(n[1]));u=u*Bs*Bs/2;}return u}function Tt(t){return t*Math.PI/180}function Rt(t){var n=[];return "FeatureCollection"===t.type?f(t,function(t){h(t,function(r){n.push(e(r,t.properties));});}):h(t,function(r){n.push(e(r,t.properties));}),r(n)}function Dt(t,e){if(e=e||{},!l(e))throw new Error("options is invalid");var n=e.zProperty||"elevation",r=e.flip,i=e.flags;E(t,"Point","input must contain Points");for(var o=Mt(t,r),s=[],a=0;a<o.length;a++){for(var u=o[a],p=[],c=0;c<u.length;c++){var h=u[c];h.properties[n]?p.push(h.properties[n]):p.push(0),!0===i&&(h.properties.matrixPosition=[a,c]);}s.push(p);}return s}function Mt(t,e){var n={};return f(t,function(t){var e=m(t)[1];n[e]||(n[e]=[]),n[e].push(t);}),Object.keys(n).map(function(t){return n[t].sort(function(t,e){return m(t)[0]-m(e)[0]})}).sort(function(t,n){return e?m(t[0])[1]-m(n[0])[1]:m(n[0])[1]-m(t[0])[1]})}function At(t,e,n,r){r=r||{};for(var i=Object.keys(Vs),o=0;o<i.length;o++){var s=i[o],a=r[s];a=void 0!==a&&null!==a?a:Vs[s],zs[s]=a;}var u,l=qt(t,e,n);return zs.polygons?(u=Xt(l)):(u=kt(l)),"function"==typeof zs.successCallback&&zs.successCallback(u),u}function Ft(t,e,n){return (t-e)/(n-e)}function Gt(t){return t.constructor.toString().indexOf("Array")>-1}function qt(t,e,n){for(var r=t.length-1,i=t[0].length-1,o={rows:r,cols:i,cells:[]},s=e+Math.abs(n),a=0;a<r;++a){o.cells[a]=[];for(var u=0;u<i;++u){var l=0,p=t[a+1][u],c=t[a+1][u+1],h=t[a][u+1],f=t[a][u];if(!(isNaN(p)||isNaN(c)||isNaN(h)||isNaN(f))){l|=p<e?0:p>s?128:64,l|=c<e?0:c>s?32:16,l|=h<e?0:h>s?8:4,l|=f<e?0:f>s?2:1;var g=+l,d=0;if(17===l||18===l||33===l||34===l||38===l||68===l||72===l||98===l||102===l||132===l||136===l||137===l||152===l||153===l){var y=(p+c+h+f)/4;d=y>s?2:y<e?0:1,34===l?1===d?l=35:0===d&&(l=136):136===l?1===d?(l=35,d=4):0===d&&(l=34):17===l?1===d?(l=155,d=4):0===d&&(l=153):68===l?1===d?(l=103,d=4):0===d&&(l=102):153===l?1===d&&(l=155):102===l?1===d&&(l=103):152===l?d<2&&(l=156,d=1):137===l?d<2&&(l=139,d=1):98===l?d<2&&(l=99,d=1):38===l?d<2&&(l=39,d=1):18===l?d>0?(l=156,d=4):l=152:33===l?d>0?(l=139,d=4):l=137:72===l?d>0?(l=99,d=4):l=98:132===l&&(d>0?(l=39,d=4):l=38);}if(0!=l&&170!=l){var _,m,v,E,I,x,N,b;_=m=v=E=I=x=N=b=.5;var C=[];1===l?(v=1-Ft(e,h,f),b=1-Ft(e,p,f),C.push(su[l])):169===l?(v=Ft(s,f,h),b=Ft(s,f,p),C.push(su[l])):4===l?(x=1-Ft(e,c,h),E=Ft(e,f,h),C.push(iu[l])):166===l?(x=Ft(s,h,c),E=1-Ft(s,h,f),C.push(iu[l])):16===l?(I=Ft(e,h,c),m=Ft(e,p,c),C.push(ru[l])):154===l?(I=1-Ft(s,c,h),m=1-Ft(s,c,p),C.push(ru[l])):64===l?(N=Ft(e,f,p),_=1-Ft(e,c,p),C.push(uu[l])):106===l?(N=1-Ft(s,p,f),_=Ft(s,p,c),C.push(uu[l])):168===l?(E=Ft(s,f,h),v=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),C.push(ou[l]),C.push(su[l])):2===l?(E=1-Ft(e,h,f),v=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),C.push(ou[l]),C.push(su[l])):162===l?(I=Ft(s,h,c),x=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),C.push(ou[l]),C.push(su[l])):8===l?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),C.push(ru[l]),C.push(iu[l])):138===l?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),_=1-Ft(s,c,p),m=1-Ft(e,c,p),C.push(ru[l]),C.push(iu[l])):32===l?(I=Ft(s,h,c),x=Ft(e,h,c),_=Ft(e,p,c),m=Ft(s,p,c),C.push(ru[l]),C.push(iu[l])):42===l?(b=1-Ft(s,p,f),N=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c),C.push(au[l]),C.push(uu[l])):128===l&&(b=Ft(e,f,p),N=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p),C.push(au[l]),C.push(uu[l])),5===l?(x=1-Ft(e,c,h),b=1-Ft(e,p,f),C.push(iu[l])):165===l?(x=Ft(s,h,c),b=Ft(s,f,p),C.push(iu[l])):20===l?(E=Ft(e,f,h),m=Ft(e,p,c),C.push(ou[l])):150===l?(E=1-Ft(s,h,f),m=1-Ft(s,c,p),C.push(ou[l])):80===l?(I=Ft(e,h,c),N=Ft(e,f,p),C.push(ru[l])):90===l?(I=1-Ft(s,c,h),N=1-Ft(s,p,f),C.push(ru[l])):65===l?(v=1-Ft(e,h,f),_=1-Ft(e,c,p),C.push(su[l])):105===l?(v=Ft(s,f,h),_=Ft(s,p,c),C.push(su[l])):160===l?(I=Ft(s,h,c),x=Ft(e,h,c),b=Ft(e,f,p),N=Ft(s,f,p),C.push(ru[l]),C.push(iu[l])):10===l?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),b=1-Ft(s,p,f),N=1-Ft(e,p,f),C.push(ru[l]),C.push(iu[l])):130===l?(E=1-Ft(e,h,f),v=1-Ft(s,h,f),_=1-Ft(s,c,p),m=1-Ft(e,c,p),C.push(ou[l]),C.push(su[l])):40===l?(E=Ft(s,f,h),v=Ft(e,f,h),_=Ft(e,p,c),m=Ft(s,p,c),C.push(ou[l]),C.push(su[l])):101===l?(x=Ft(s,h,c),_=Ft(s,p,c),C.push(iu[l])):69===l?(x=1-Ft(e,c,h),_=1-Ft(e,c,p),C.push(iu[l])):149===l?(b=Ft(s,f,p),m=1-Ft(s,c,p),C.push(au[l])):21===l?(b=1-Ft(e,p,f),m=Ft(e,p,c),C.push(au[l])):86===l?(E=1-Ft(s,h,f),N=1-Ft(s,p,f),C.push(ou[l])):84===l?(E=Ft(e,f,h),N=Ft(e,f,p),C.push(ou[l])):89===l?(I=1-Ft(s,c,h),v=Ft(s,f,h),C.push(su[l])):81===l?(I=Ft(e,h,c),v=1-Ft(e,h,f),C.push(su[l])):96===l?(I=Ft(s,h,c),x=Ft(e,h,c),N=Ft(e,f,p),_=Ft(s,p,c),C.push(ru[l]),C.push(iu[l])):74===l?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),N=1-Ft(s,p,f),_=1-Ft(e,c,p),C.push(ru[l]),C.push(iu[l])):24===l?(I=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),m=Ft(e,p,c),C.push(ru[l]),C.push(su[l])):146===l?(I=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),m=1-Ft(s,c,p),C.push(ru[l]),C.push(su[l])):6===l?(x=1-Ft(e,c,h),E=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),C.push(iu[l]),C.push(ou[l])):164===l?(x=Ft(s,h,c),E=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),C.push(iu[l]),C.push(ou[l])):129===l?(v=1-Ft(e,h,f),b=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p),C.push(su[l]),C.push(au[l])):41===l?(v=Ft(s,f,h),b=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c),C.push(su[l]),C.push(au[l])):66===l?(E=1-Ft(e,h,f),v=1-Ft(s,h,f),N=1-Ft(s,p,f),_=1-Ft(e,c,p),C.push(ou[l]),C.push(su[l])):104===l?(E=Ft(s,f,h),v=Ft(e,f,h),N=Ft(e,f,p),_=Ft(s,p,c),C.push(su[l]),C.push(lu[l])):144===l?(I=Ft(e,h,c),b=Ft(e,f,p),N=Ft(s,f,p),m=1-Ft(s,c,p),C.push(ru[l]),C.push(uu[l])):26===l?(I=1-Ft(s,c,h),b=1-Ft(s,p,f),N=1-Ft(e,p,f),m=Ft(e,p,c),C.push(ru[l]),C.push(uu[l])):36===l?(x=Ft(s,h,c),E=Ft(e,f,h),_=Ft(e,p,c),m=Ft(s,p,c),C.push(iu[l]),C.push(ou[l])):134===l?(x=1-Ft(e,c,h),E=1-Ft(s,h,f),_=1-Ft(s,c,p),m=1-Ft(e,c,p),C.push(iu[l]),C.push(ou[l])):9===l?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),v=Ft(s,f,h),b=1-Ft(e,p,f),C.push(ru[l]),C.push(iu[l])):161===l?(I=Ft(s,h,c),x=Ft(e,h,c),v=1-Ft(e,h,f),b=Ft(s,f,p),C.push(ru[l]),C.push(iu[l])):37===l?(x=Ft(s,h,c),b=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c),C.push(iu[l]),C.push(au[l])):133===l?(x=1-Ft(e,c,h),b=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p),C.push(iu[l]),C.push(au[l])):148===l?(E=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),m=1-Ft(s,c,p),C.push(ou[l]),C.push(uu[l])):22===l?(E=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),m=Ft(e,p,c),C.push(ou[l]),C.push(uu[l])):82===l?(I=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),N=1-Ft(s,p,f),C.push(ru[l]),C.push(su[l])):88===l?(I=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),N=Ft(e,f,p),C.push(ru[l]),C.push(su[l])):73===l?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),v=Ft(s,f,h),_=1-Ft(e,c,p),C.push(ru[l]),C.push(iu[l])):97===l?(I=Ft(s,h,c),x=Ft(e,h,c),v=1-Ft(e,h,f),_=Ft(s,p,c),C.push(ru[l]),C.push(iu[l])):145===l?(I=Ft(e,h,c),v=1-Ft(e,h,f),b=Ft(s,f,p),m=1-Ft(s,c,p),C.push(ru[l]),C.push(au[l])):25===l?(I=1-Ft(s,c,h),v=Ft(s,f,h),b=1-Ft(e,p,f),m=Ft(e,p,c),C.push(ru[l]),C.push(au[l])):70===l?(x=1-Ft(e,c,h),E=1-Ft(s,h,f),N=1-Ft(s,p,f),_=1-Ft(e,c,p),C.push(iu[l]),C.push(ou[l])):100===l?(x=Ft(s,h,c),E=Ft(e,f,h),N=Ft(e,f,p),_=Ft(s,p,c),C.push(iu[l]),C.push(ou[l])):34===l?(0===d?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p)):(I=Ft(s,h,c),x=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c)),C.push(ru[l]),C.push(iu[l]),C.push(au[l]),C.push(uu[l])):35===l?(4===d?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p)):(I=Ft(s,h,c),x=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c)),C.push(ru[l]),C.push(iu[l]),C.push(su[l]),C.push(uu[l])):136===l?(0===d?(I=Ft(s,h,c),x=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c)):(I=1-Ft(e,c,h),x=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p)),C.push(ru[l]),C.push(iu[l]),C.push(au[l]),C.push(uu[l])):153===l?(0===d?(I=Ft(e,h,c),v=1-Ft(e,h,f),b=1-Ft(e,p,f),m=Ft(e,p,c)):(I=1-Ft(s,c,h),v=Ft(s,f,h),b=Ft(s,f,p),m=1-Ft(s,c,p)),C.push(ru[l]),C.push(su[l])):102===l?(0===d?(x=1-Ft(e,c,h),E=Ft(e,f,h),N=Ft(e,f,p),_=1-Ft(e,c,p)):(x=Ft(s,h,c),E=1-Ft(s,h,f),N=1-Ft(s,p,f),_=Ft(s,p,c)),C.push(iu[l]),C.push(uu[l])):155===l?(4===d?(I=Ft(e,h,c),v=1-Ft(e,h,f),b=1-Ft(e,p,f),m=Ft(e,p,c)):(I=1-Ft(s,c,h),v=Ft(s,f,h),b=Ft(s,f,p),m=1-Ft(s,c,p)),C.push(ru[l]),C.push(au[l])):103===l?(4===d?(x=1-Ft(e,c,h),E=Ft(e,f,h),N=Ft(e,f,p),_=1-Ft(e,c,p)):(x=Ft(s,h,c),E=1-Ft(s,h,f),N=1-Ft(s,p,f),_=Ft(s,p,c)),C.push(iu[l]),C.push(ou[l])):152===l?(0===d?(I=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),m=Ft(e,p,c)):(I=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),m=1-Ft(s,c,p)),C.push(ru[l]),C.push(ou[l]),C.push(su[l])):156===l?(4===d?(I=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),m=Ft(e,p,c)):(I=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),m=1-Ft(s,c,p)),C.push(ru[l]),C.push(su[l]),C.push(uu[l])):137===l?(0===d?(I=Ft(s,h,c),x=Ft(e,h,c),v=1-Ft(e,h,f),b=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c)):(I=1-Ft(e,c,h),x=1-Ft(s,c,h),v=Ft(s,f,h),b=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p)),C.push(ru[l]),C.push(iu[l]),C.push(su[l])):139===l?(4===d?(I=Ft(s,h,c),x=Ft(e,h,c),v=1-Ft(e,h,f),b=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c)):(I=1-Ft(e,c,h),x=1-Ft(s,c,h),v=Ft(s,f,h),b=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p)),C.push(ru[l]),C.push(iu[l]),C.push(au[l])):98===l?(0===d?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),N=Ft(e,f,p),_=1-Ft(e,c,p)):(I=Ft(s,h,c),x=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),N=1-Ft(s,p,f),_=Ft(s,p,c)),C.push(ru[l]),C.push(iu[l]),C.push(uu[l])):99===l?(4===d?(I=1-Ft(e,c,h),x=1-Ft(s,c,h),E=Ft(s,f,h),v=Ft(e,f,h),N=Ft(e,f,p),_=1-Ft(e,c,p)):(I=Ft(s,h,c),x=Ft(e,h,c),E=1-Ft(e,h,f),v=1-Ft(s,h,f),N=1-Ft(s,p,f),_=Ft(s,p,c)),C.push(ru[l]),C.push(iu[l]),C.push(su[l])):38===l?(0===d?(x=1-Ft(e,c,h),E=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p)):(x=Ft(s,h,c),E=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c)),C.push(iu[l]),C.push(au[l]),C.push(uu[l])):39===l?(4===d?(x=1-Ft(e,c,h),E=Ft(e,f,h),b=Ft(e,f,p),N=Ft(s,f,p),_=1-Ft(s,c,p),m=1-Ft(e,c,p)):(x=Ft(s,h,c),E=1-Ft(s,h,f),b=1-Ft(s,p,f),N=1-Ft(e,p,f),_=Ft(e,p,c),m=Ft(s,p,c)),C.push(iu[l]),C.push(ou[l]),C.push(uu[l])):85===l&&(I=1,x=0,E=1,v=0,b=0,N=1,_=0,m=1),o.cells[a][u]={cval:l,cval_real:g,flipped:d,topleft:_,topright:m,righttop:I,rightbottom:x,bottomright:E,bottomleft:v,leftbottom:b,lefttop:N,edges:C};}}}}return o}function kt(t){for(var e=[],n=t.rows,r=t.cols,i=[],o=0;o<n;o++)for(var s=0;s<r;s++)if(void 0!==t.cells[o][s]&&t.cells[o][s].edges.length>0){var a=t.cells[o][s],u=zt(a),l=null,p=s,c=o;null!==u&&i.push([u.p[0]+p,u.p[1]+c]);do{if(null===(l=Ut(t.cells[c][p],u.x,u.y,u.o)))break;if(i.push([l.p[0]+p,l.p[1]+c]),p+=l.x,c+=l.y,u=l,c<0||c>=n||p<0||p>=r||void 0===t.cells[c][p]){p-=l.x,c-=l.y;var h=Bt(t,p,c,l.x,l.y,l.o);if(null===h)break;h.path.forEach(function(t){i.push(t);}),p=h.i,c=h.j,u=h;}}while(void 0!==t.cells[c][p]&&t.cells[c][p].edges.length>0);e.push(i),i=[],t.cells[o][s].edges.length>0&&s--;}return e}function Bt(t,e,n,r,i,o){for(var s=t.cells[n][e],a=s.cval_real,u=e+r,l=n+i,p=[],c=!1;!c;){if(void 0===t.cells[l]||void 0===t.cells[l][u])if(l-=i,u-=r,s=t.cells[l][u],a=s.cval_real,-1===i)if(0===o)if(a&Ys)p.push([u,l]),r=-1,i=0,o=0;else{if(!(a&js)){p.push([u+s.bottomright,l]),r=0,i=1,o=1,c=!0;break}p.push([u+1,l]),r=1,i=0,o=0;}else{if(!(a&Ys)){if(a&js){p.push([u+s.bottomright,l]),r=0,i=1,o=1,c=!0;break}p.push([u+s.bottomleft,l]),r=0,i=1,o=0,c=!0;break}p.push([u,l]),r=-1,i=0,o=0;}else if(1===i)if(0===o){if(!(a&Xs)){if(a&Us){p.push([u+s.topleft,l+1]),r=0,i=-1,o=0,c=!0;break}p.push([u+s.topright,l+1]),r=0,i=-1,o=1,c=!0;break}p.push([u+1,l+1]),r=1,i=0,o=1;}else p.push([u+1,l+1]),r=1,i=0,
    o=1;else if(-1===r)if(0===o){if(!(a&Us)){if(a&Ys){p.push([u,l+s.leftbottom]),r=1,i=0,o=0,c=!0;break}p.push([u,l+s.lefttop]),r=1,i=0,o=1,c=!0;break}p.push([u,l+1]),r=0,i=1,o=0;}else{if(!(a&Us))break;p.push([u,l+1]),r=0,i=1,o=0;}else{if(1!==r)break;if(0===o){if(!(a&js)){p.push([u+1,l+s.rightbottom]),r=-1,i=0,o=0,c=!0;break}p.push([u+1,l]),r=0,i=-1,o=1;}else{if(!(a&js)){if(a&Xs){p.push([u+1,l+s.righttop]),r=-1,i=0,o=1;break}p.push([u+1,l+s.rightbottom]),r=-1,i=0,o=0,c=!0;break}p.push([u+1,l]),r=0,i=-1,o=1;}}else if(s=t.cells[l][u],a=s.cval_real,-1===r){if(0===o)if(void 0!==t.cells[l-1]&&void 0!==t.cells[l-1][u])r=0,i=-1,o=1;else{if(!(a&Ys)){p.push([u+s.bottomright,l]),r=0,i=1,o=1,c=!0;break}p.push([u,l]);}else if(!(a&Us))break}else if(1===r){if(0===o)break;if(void 0!==t.cells[l+1]&&void 0!==t.cells[l+1][u])r=0,i=1,o=0;else{if(!(a&Xs)){p.push([u+s.topleft,l+1]),r=0,i=-1,o=0,c=!0;break}p.push([u+1,l+1]),r=1,i=0,o=1;}}else if(-1===i){if(1!==o)break;if(void 0!==t.cells[l][u+1])r=1,i=0,o=1;else{if(!(a&js)){p.push([u+1,l+s.righttop]),r=-1,i=0,o=1,c=!0;break}p.push([u+1,l]),r=0,i=-1,o=1;}}else{if(1!==i)break;if(0!==o)break;if(void 0!==t.cells[l][u-1])r=-1,i=0,o=0;else{if(!(a&Us)){p.push([u,l+s.leftbottom]),r=1,i=0,o=0,c=!0;break}p.push([u,l+1]),r=0,i=1,o=0;}}if(u+=r,l+=i,u===e&&l===n)break}return {path:p,i:u,j:l,x:r,y:i,o:o}}function Vt(t,e){delete t.edges[e];for(var n=e+1;n<t.edges.length;n++)t.edges[n-1]=t.edges[n];t.edges.pop();}function zt(t){if(t.edges.length>0){var e=t.edges[t.edges.length-1],n=t.cval_real;switch(e){case 0:return n&Xs?{p:[1,t.righttop],x:-1,y:0,o:1}:{p:[t.topleft,1],x:0,y:-1,o:0};case 1:return n&js?{p:[t.topleft,1],x:0,y:-1,o:0}:{p:[1,t.rightbottom],x:-1,y:0,o:0};case 2:return n&js?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[t.topleft,1],x:0,y:-1,o:0};case 3:return n&Ys?{p:[t.topleft,1],x:0,y:-1,o:0}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 4:return n&Xs?{p:[1,t.righttop],x:-1,y:0,o:1}:{p:[t.topright,1],x:0,y:-1,o:1};case 5:return n&js?{p:[t.topright,1],x:0,y:-1,o:1}:{p:[1,t.rightbottom],x:-1,y:0,o:0};case 6:return n&js?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[t.topright,1],x:0,y:-1,o:1};case 7:return n&Ys?{p:[t.topright,1],x:0,y:-1,o:1}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 8:return n&js?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[1,t.righttop],x:-1,y:0,o:1};case 9:return n&Ys?{p:[1,t.righttop],x:-1,y:0,o:1}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 10:return n&Ys?{p:[0,t.leftbottom],x:1,y:0,o:0}:{p:[1,t.righttop],x:-1,y:0,o:1};case 11:return n&Us?{p:[1,t.righttop],x:-1,y:0,o:1}:{p:[0,t.lefttop],x:1,y:0,o:1};case 12:return n&js?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[1,t.rightbottom],x:-1,y:0,o:0};case 13:return n&Ys?{p:[1,t.rightbottom],x:-1,y:0,o:0}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 14:return n&Ys?{p:[0,t.leftbottom],x:1,y:0,o:0}:{p:[1,t.rightbottom],x:-1,y:0,o:0};case 15:return n&Us?{p:[1,t.rightbottom],x:-1,y:0,o:0}:{p:[0,t.lefttop],x:1,y:0,o:1};case 16:return n&js?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[0,t.leftbottom],x:1,y:0,o:0};case 17:return n&Us?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[0,t.lefttop],x:1,y:0,o:1};case 18:return n&Ys?{p:[0,t.leftbottom],x:1,y:0,o:0}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 19:return n&Us?{p:[t.bottomleft,0],x:0,y:1,o:0}:{p:[0,t.lefttop],x:1,y:0,o:1};case 20:return n&Us?{p:[t.topleft,1],x:0,y:-1,o:0}:{p:[0,t.leftbottom],x:1,y:0,o:0};case 21:return n&Xs?{p:[0,t.leftbottom],x:1,y:0,o:0}:{p:[t.topright,1],x:0,y:-1,o:1};case 22:return n&Us?{p:[t.topleft,1],x:0,y:-1,o:0}:{p:[0,t.lefttop],x:1,y:0,o:1};case 23:return n&Xs?{p:[0,t.lefttop],x:1,y:0,o:1}:{p:[t.topright,1],x:0,y:-1,o:1}}}return null}function Ut(t,e,n,r){var i,o,s,a,u,l=t.cval;switch(e){case-1:switch(r){case 0:i=iu[l],s=na[l],a=ra[l],u=ia[l];break;default:i=ru[l],s=$s[l],a=ta[l],u=ea[l];}break;case 1:switch(r){case 0:i=au[l],s=ga[l],a=da[l],u=ya[l];break;default:i=uu[l],s=ca[l],a=ha[l],u=fa[l];}break;default:switch(n){case-1:switch(r){case 0:i=lu[l],s=Hs[l],a=Ws[l],u=Ks[l];break;default:i=pu[l],s=Js[l],a=Qs[l],u=Zs[l];}break;case 1:switch(r){case 0:i=su[l],s=oa[l],a=sa[l],u=aa[l];break;default:i=ou[l],s=ua[l],a=la[l],u=pa[l];}}}if(o=t.edges.indexOf(i),void 0===t.edges[o])return null;switch(Vt(t,o),l=t.cval_real,i){case 0:l&Xs?(e=t.topleft,n=1):(e=1,n=t.righttop);break;case 1:l&js?(e=1,n=t.rightbottom):(e=t.topleft,n=1);break;case 2:l&js?(e=t.topleft,n=1):(e=t.bottomright,n=0);break;case 3:l&Ys?(e=t.bottomleft,n=0):(e=t.topleft,n=1);break;case 4:l&Xs?(e=t.topright,n=1):(e=1,n=t.righttop);break;case 5:l&js?(e=1,n=t.rightbottom):(e=t.topright,n=1);break;case 6:l&js?(e=t.topright,n=1):(e=t.bottomright,n=0);break;case 7:l&Ys?(e=t.bottomleft,n=0):(e=t.topright,n=1);break;case 8:l&js?(e=1,n=t.righttop):(e=t.bottomright,n=0);break;case 9:l&Ys?(e=t.bottomleft,n=0):(e=1,n=t.righttop);break;case 10:l&Ys?(e=1,n=t.righttop):(e=0,n=t.leftbottom);break;case 11:l&Us?(e=0,n=t.lefttop):(e=1,n=t.righttop);break;case 12:l&js?(e=1,n=t.rightbottom):(e=t.bottomright,n=0);break;case 13:l&Ys?(e=t.bottomleft,n=0):(e=1,n=t.rightbottom);break;case 14:l&Ys?(e=1,n=t.rightbottom):(e=0,n=t.leftbottom);break;case 15:l&Us?(e=0,n=t.lefttop):(e=1,n=t.rightbottom);break;case 16:l&js?(e=0,n=t.leftbottom):(e=t.bottomright,n=0);break;case 17:l&Us?(e=0,n=t.lefttop):(e=t.bottomright,n=0);break;case 18:l&Ys?(e=t.bottomleft,n=0):(e=0,n=t.leftbottom);break;case 19:l&Us?(e=0,n=t.lefttop):(e=t.bottomleft,n=0);break;case 20:l&Us?(e=0,n=t.leftbottom):(e=t.topleft,n=1);break;case 21:l&Xs?(e=t.topright,n=1):(e=0,n=t.leftbottom);break;case 22:l&Us?(e=0,n=t.lefttop):(e=t.topleft,n=1);break;case 23:l&Xs?(e=t.topright,n=1):(e=0,n=t.lefttop);break;default:return null}return {p:[e,n],x:s,y:a,o:u}}function Xt(t){var e=[],n=0;return t.cells.forEach(function(t,r){t.forEach(function(t,i){if(void 0!==t){var o=cu[t.cval](t);"object"===(void 0===o?"undefined":he(o))&&Gt(o)&&"object"===he(o[0])&&Gt(o[0])&&("object"===he(o[0][0])&&Gt(o[0][0])?o.forEach(function(t){t.forEach(function(t){t[0]+=i,t[1]+=r;}),e[n++]=t;}):(o.forEach(function(t){t[0]+=i,t[1]+=r;}),e[n++]=o));}});}),e}function jt(t,e,n){if(n=n||{},!l(n))throw new Error("options is invalid");var i=n.zProperty||"elevation",s=n.commonProperties||{},a=n.breaksProperties||[];if(E(t,"Point","Input must contain Points"),!e)throw new Error("breaks is required");if(!Array.isArray(e))throw new Error("breaks is not an Array");if(!l(s))throw new Error("commonProperties is not an Object");if(!Array.isArray(a))throw new Error("breaksProperties is not an Array");var u=Dt(t,{zProperty:i,flip:!0}),p=Yt(u,e,i);return p=Ht(p,u,t),r(p.map(function(t,e){if(a[e]&&!l(a[e]))throw new Error("Each mappedProperty is required to be an Object");var n=Object.assign({},s,a[e]);return n[i]=t[i],o(t.groupedRings,n)}))}function Yt(t,e,n){for(var r=[],i=1;i<e.length;i++){var o=+e[i-1],s=+e[i],a=At(t,o,s-o),u=Wt(a),l=Kt(u),p={};p.groupedRings=l,p[n]=o+"-"+s,r.push(p);}return r}function Ht(t,e,n){var r=y(n),i=r[2]-r[0],o=r[3]-r[1],s=r[0],a=r[1],u=e[0].length-1,l=e.length-1,p=i/u,c=o/l,h=function(t){t[0]=t[0]*p+s,t[1]=t[1]*c+a;};return t.forEach(function(t){t.groupedRings.forEach(function(t){t.forEach(function(t){t.forEach(h);});});}),t}function Wt(t){var e=[],r=[];t.forEach(function(t){var i=St(n([t]));r.push(i),e.push({ring:t,area:i});}),r.sort(function(t,e){return e-t});var i=[];return r.forEach(function(t){for(var n=0;n<e.length;n++)if(e[n].area===t){i.push(e[n].ring),e.splice(n,1);break}}),i}function Kt(t){for(var e=t.map(function(t){return {lrCoordinates:t,grouped:!1}}),r=[];!Qt(e);)for(var i=0;i<e.length;i++)if(!e[i].grouped){var o=[];o.push(e[i].lrCoordinates),e[i].grouped=!0;for(var s=n([e[i].lrCoordinates]),a=i+1;a<e.length;a++)if(!e[a].grouped){var u=n([e[a].lrCoordinates]);Jt(u,s)&&(o.push(e[a].lrCoordinates),e[a].grouped=!0);}r.push(o);}return r}function Jt(t,e){for(var n=Rt(t),r=0;r<n.features.length;r++)if(!nt(n.features[r],e))return !1;return !0}function Qt(t){for(var e=0;e<t.length;e++)if(!1===t[e].grouped)return !1;return !0}function Zt(t,e,n){n=n||{};for(var r=Object.keys(hu),i=0;i<r.length;i++){var o=r[i],s=n[o];s=void 0!==s&&null!==s?s:hu[o],fu[o]=s;}var a=oe(te(t,e));return "function"==typeof fu.successCallback&&fu.successCallback(a),a}function $t(t,e,n){return (t-e)/(n-e)}function te(t,e){for(var n=t.length-1,r=t[0].length-1,i={rows:n,cols:r,cells:[]},o=0;o<n;++o){i.cells[o]=[];for(var s=0;s<r;++s){var a=0,u=t[o+1][s],l=t[o+1][s+1],p=t[o][s+1],c=t[o][s];if(!(isNaN(u)||isNaN(l)||isNaN(p)||isNaN(c))){a|=u>=e?8:0,a|=l>=e?4:0,a|=p>=e?2:0,a|=c>=e?1:0;var h=!1;if(5===a||10===a){var f=(u+l+p+c)/4;5===a&&f<e?(a=10,h=!0):10===a&&f<e&&(a=5,h=!0);}if(0!==a&&15!==a){var g,d,y,_;g=d=y=_=.5,1===a?(y=1-$t(e,u,c),d=1-$t(e,p,c)):2===a?(d=$t(e,c,p),_=1-$t(e,l,p)):3===a?(y=1-$t(e,u,c),_=1-$t(e,l,p)):4===a?(g=$t(e,u,l),_=$t(e,p,l)):5===a?(g=$t(e,u,l),_=$t(e,p,l),d=1-$t(e,p,c),y=1-$t(e,u,c)):6===a?(d=$t(e,c,p),g=$t(e,u,l)):7===a?(y=1-$t(e,u,c),g=$t(e,u,l)):8===a?(y=$t(e,c,u),g=1-$t(e,l,u)):9===a?(d=1-$t(e,p,c),g=1-$t(e,l,u)):10===a?(g=1-$t(e,l,u),_=1-$t(e,l,p),d=$t(e,c,p),y=$t(e,c,u)):11===a?(g=1-$t(e,l,u),_=1-$t(e,l,p)):12===a?(y=$t(e,c,u),_=$t(e,p,l)):13===a?(d=1-$t(e,p,c),_=$t(e,p,l)):14===a&&(y=$t(e,c,u),d=$t(e,c,p)),i.cells[o][s]={cval:a,flipped:h,top:g,right:_,bottom:d,left:y};}}}}return i}function ee(t){return 5===t.cval||10===t.cval}function ne(t){return 0===t.cval||15===t.cval}function re(t){ne(t)||5===t.cval||10===t.cval||(t.cval=15);}function ie(t,e){return "top"===e?[t.top,1]:"bottom"===e?[t.bottom,0]:"right"===e?[1,t.right]:"left"===e?[0,t.left]:void 0}function oe(t){var e=[],n=0,r=(t.rows,t.cols,1e-7);return t.cells.forEach(function(i,o){i.forEach(function(i,s){if(void 0!==i&&!ee(i)&&!ne(i)){var a=se(t.cells,o,s),u=!1;if("mergeable"===a.info)for(var l=a.path[a.path.length-1][0],p=a.path[a.path.length-1][1],c=n-1;c>=0;c--)if(Math.abs(e[c][0][0]-l)<=r&&Math.abs(e[c][0][1]-p)<=r){for(var h=a.path.length-2;h>=0;--h)e[c].unshift(a.path[h]);u=!0;break}u||(e[n++]=a.path);}});}),e}function se(t,e,n){var r,i,o,s=t.length,a=[],u=[0,0,1,1,0,0,0,0,-1,0,1,1,-1,0,-1,0],l=[0,-1,0,0,1,1,1,1,0,-1,0,0,0,-1,0,0],p=["none","left","bottom","left","right","none","bottom","left","top","top","none","top","right","right","bottom","none"],c=["none","bottom","right","right","top","top","top","top","left","bottom","right","right","left","bottom","left","none"],h=(t[e][n],t[e][n]),f=h.cval,o=p[f],g=ie(h,o);a.push([n+g[0],e+g[1]]),o=c[f],g=ie(h,o),a.push([n+g[0],e+g[1]]),re(h);for(var d=n+u[f],y=e+l[f],_=f;d>=0&&y>=0&&y<s&&(d!=n||y!=e)&&void 0!==(h=t[y][d]);){if(0===(f=h.cval)||15===f)return {path:a,info:"mergeable"};o=c[f],r=u[f],i=l[f],5!==f&&10!==f||(5===f?h.flipped?-1===l[_]?(o="left",r=-1,i=0):(o="right",r=1,i=0):-1===u[_]&&(o="bottom",r=0,i=-1):10===f&&(h.flipped?-1===u[_]?(o="top",r=0,i=1):(o="bottom",r=0,i=-1):1===l[_]&&(o="left",r=-1,i=0))),g=ie(h,o),a.push([d+g[0],y+g[1]]),re(h),d+=r,y+=i,_=f;}return {path:a,info:"closed"}}function ae(t,e){if(e=e||{},!l(e))throw new Error("options is invalid");var n=e.zProperty||"elevation",r=e.flip,i=e.flags;E(t,"Point","input must contain Points");for(var o=ue(t,r),s=[],a=0;a<o.length;a++){for(var u=o[a],p=[],c=0;c<u.length;c++){var h=u[c];h.properties[n]?p.push(h.properties[n]):p.push(0),!0===i&&(h.properties.matrixPosition=[a,c]);}s.push(p);}return s}function ue(t,e){var n={};return f(t,function(t){var e=m(t)[1];n[e]||(n[e]=[]),n[e].push(t);}),Object.keys(n).map(function(t){return n[t].sort(function(t,e){return m(t)[0]-m(e)[0]})}).sort(function(t,n){return e?m(t[0])[1]-m(n[0])[1]:m(n[0])[1]-m(t[0])[1]})}function le(t,e,n){if(n=n||{},!l(n))throw new Error("options is invalid");var i=n.zProperty||"elevation",o=n.commonProperties||{},s=n.breaksProperties||[];if(E(t,"Point","Input must contain Points"),!e)throw new Error("breaks is required");if(!Array.isArray(e))throw new Error("breaks must be an Array");if(!l(o))throw new Error("commonProperties must be an Object");if(!Array.isArray(s))throw new Error("breaksProperties must be an Array");var a=ae(t,{zProperty:i,flip:!0});return r(ce(pe(a,e,i,o,s),a,t))}function pe(t,e,n,r,o){for(var s=[],a=1;a<e.length;a++){var u=+e[a],l=Object.assign({},r,o[a]);l[n]=u;var p=i(Zt(t,u),l);s.push(p);}return s}function ce(t,e,n){var r=y(n),i=r[2]-r[0],o=r[3]-r[1],s=r[0],a=r[1],u=e[0].length-1,l=e.length-1,p=i/u,c=o/l,f=function(t){t[0]=t[0]*p+s,t[1]=t[1]*c+a;};return t.forEach(function(t){h(t,f);}),t}var he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},fe=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},ge=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),de=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},ye=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},_e=6371008.8,me={meters:_e,metres:_e,millimeters:1e3*_e,millimetres:1e3*_e,centimeters:100*_e,centimetres:100*_e,kilometers:_e/1e3,kilometres:_e/1e3,miles:_e/1609.344,nauticalmiles:_e/1852,inches:39.37*_e,yards:_e/1.0936,feet:3.28084*_e,radians:1,degrees:_e/111325};"fill"in Array.prototype||Object.defineProperty(Array.prototype,"fill",{configurable:!0,value:function(t){if(void 0===this||null===this)throw new TypeError(this+" is not an object");var e=Object(this),n=Math.max(Math.min(e.length,9007199254740991),0)||0,r=1 in arguments?parseInt(Number(arguments[1]),10)||0:0;r=r<0?Math.max(n+r,0):Math.min(r,n);var i=2 in arguments&&void 0!==arguments[2]?parseInt(Number(arguments[2]),10)||0:n;for(i=i<0?Math.max(n+arguments[2],0):Math.min(i,n);r<i;)e[r]=t,++r;return e},writable:!0}),Number.isFinite=Number.isFinite||function(t){return "number"==typeof t&&isFinite(t)},Number.isInteger=Number.isInteger||function(t){return "number"==typeof t&&isFinite(t)&&Math.floor(t)===t},Number.parseFloat=Number.parseFloat||parseFloat,Number.isNaN=Number.isNaN||function(t){return t!==t},Math.trunc=Math.trunc||function(t){return t<0?Math.ceil(t):Math.floor(t)};var ve=function(){};ve.prototype.interfaces_=function(){return []},ve.prototype.getClass=function(){return ve},ve.prototype.equalsWithTolerance=function(t,e,n){return Math.abs(t-e)<=n};var Ee=function(t){function e(e){t.call(this,e),this.name="IllegalArgumentException",this.message=e,this.stack=(new t).stack;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Error),Ie=function(){},xe={MAX_VALUE:{configurable:!0}};Ie.isNaN=function(t){return Number.isNaN(t)},Ie.doubleToLongBits=function(t){return t},Ie.longBitsToDouble=function(t){return t},Ie.isInfinite=function(t){return !Number.isFinite(t)},xe.MAX_VALUE.get=function(){return Number.MAX_VALUE},Object.defineProperties(Ie,xe);var Ne=function(){},be=function(){},Ce=function(){},we=function t(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)this.x=0,this.y=0,this.z=t.NULL_ORDINATE;else if(1===arguments.length){var e=arguments[0];this.x=e.x,this.y=e.y,this.z=e.z;}else 2===arguments.length?(this.x=arguments[0],this.y=arguments[1],this.z=t.NULL_ORDINATE):3===arguments.length&&(this.x=arguments[0],this.y=arguments[1],this.z=arguments[2]);},Se={DimensionalComparator:{configurable:!0},serialVersionUID:{configurable:!0},NULL_ORDINATE:{configurable:!0},X:{configurable:!0},Y:{configurable:!0},Z:{configurable:!0}};we.prototype.setOrdinate=function(t,e){switch(t){case we.X:this.x=e;break;case we.Y:this.y=e;break;case we.Z:this.z=e;break;default:throw new Ee("Invalid ordinate index: "+t)}},we.prototype.equals2D=function(){if(1===arguments.length){var t=arguments[0];return this.x===t.x&&this.y===t.y}if(2===arguments.length){var e=arguments[0],n=arguments[1];return !!ve.equalsWithTolerance(this.x,e.x,n)&&!!ve.equalsWithTolerance(this.y,e.y,n)}},we.prototype.getOrdinate=function(t){switch(t){case we.X:return this.x;case we.Y:return this.y;case we.Z:return this.z}throw new Ee("Invalid ordinate index: "+t)},we.prototype.equals3D=function(t){return this.x===t.x&&this.y===t.y&&(this.z===t.z||Ie.isNaN(this.z))&&Ie.isNaN(t.z)},we.prototype.equals=function(t){return t instanceof we&&this.equals2D(t)},we.prototype.equalInZ=function(t,e){return ve.equalsWithTolerance(this.z,t.z,e)},we.prototype.compareTo=function(t){var e=t;return this.x<e.x?-1:this.x>e.x?1:this.y<e.y?-1:this.y>e.y?1:0},we.prototype.clone=function(){},we.prototype.copy=function(){return new we(this)},we.prototype.toString=function(){return "("+this.x+", "+this.y+", "+this.z+")"},we.prototype.distance3D=function(t){var e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return Math.sqrt(e*e+n*n+r*r)},we.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},we.prototype.hashCode=function(){var t=17;return t=37*t+we.hashCode(this.x),t=37*t+we.hashCode(this.y)},we.prototype.setCoordinate=function(t){this.x=t.x,this.y=t.y,this.z=t.z;},we.prototype.interfaces_=function(){return [Ne,be,b]},we.prototype.getClass=function(){return we},we.hashCode=function(){if(1===arguments.length){var t=arguments[0],e=Ie.doubleToLongBits(t);return Math.trunc((e^e)>>>32)}},Se.DimensionalComparator.get=function(){return Le},Se.serialVersionUID.get=function(){return 0x5cbf2c235c7e5800},Se.NULL_ORDINATE.get=function(){return Ie.NaN},Se.X.get=function(){return 0},Se.Y.get=function(){return 1},Se.Z.get=function(){return 2},Object.defineProperties(we,Se);var Le=function(t){if(this._dimensionsToTest=2,0===arguments.length);else if(1===arguments.length){var e=arguments[0];if(2!==e&&3!==e)throw new Ee("only 2 or 3 dimensions may be specified");this._dimensionsToTest=e;}};Le.prototype.compare=function(t,e){var n=t,r=e,i=Le.compare(n.x,r.x);if(0!==i)return i;var o=Le.compare(n.y,r.y);return 0!==o?o:this._dimensionsToTest<=2?0:Le.compare(n.z,r.z)},Le.prototype.interfaces_=function(){return [Ce]},Le.prototype.getClass=function(){return Le},Le.compare=function(t,e){return t<e?-1:t>e?1:Ie.isNaN(t)?Ie.isNaN(e)?0:-1:Ie.isNaN(e)?1:0};var Pe=function(){};Pe.prototype.create=function(){},Pe.prototype.interfaces_=function(){return []},Pe.prototype.getClass=function(){return Pe};var Oe=function(){},Te={INTERIOR:{configurable:!0},BOUNDARY:{configurable:!0},EXTERIOR:{configurable:!0},NONE:{configurable:!0}};Oe.prototype.interfaces_=function(){return []},Oe.prototype.getClass=function(){return Oe},Oe.toLocationSymbol=function(t){switch(t){case Oe.EXTERIOR:return "e";case Oe.BOUNDARY:return "b";case Oe.INTERIOR:return "i";case Oe.NONE:return "-"}throw new Ee("Unknown location value: "+t)},Te.INTERIOR.get=function(){return 0},Te.BOUNDARY.get=function(){return 1},Te.EXTERIOR.get=function(){return 2},Te.NONE.get=function(){return -1},Object.defineProperties(Oe,Te);var Re=function(t,e){return t.interfaces_&&t.interfaces_().indexOf(e)>-1},De=function(){},Me={LOG_10:{configurable:!0}};De.prototype.interfaces_=function(){return []},De.prototype.getClass=function(){return De},De.log10=function(t){var e=Math.log(t);return Ie.isInfinite(e)?e:Ie.isNaN(e)?e:e/De.LOG_10},De.min=function(t,e,n,r){var i=t;return e<i&&(i=e),n<i&&(i=n),r<i&&(i=r),i},De.clamp=function(){if("number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1],n=arguments[2];return t<e?e:t>n?n:t}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var r=arguments[0],i=arguments[1],o=arguments[2];return r<i?i:r>o?o:r}},De.wrap=function(t,e){return t<0?e- -t%e:t%e},De.max=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],r=t;return e>r&&(r=e),n>r&&(r=n),r}if(4===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3],u=i;return o>u&&(u=o),s>u&&(u=s),a>u&&(u=a),u}},De.average=function(t,e){return (t+e)/2},Me.LOG_10.get=function(){return Math.log(10)},Object.defineProperties(De,Me);var Ae=function(t){this.str=t;};Ae.prototype.append=function(t){this.str+=t;},Ae.prototype.setCharAt=function(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1);},Ae.prototype.toString=function(t){return this.str};var Fe=function(t){this.value=t;};Fe.prototype.intValue=function(){return this.value},Fe.prototype.compareTo=function(t){return this.value<t?-1:this.value>t?1:0},Fe.isNaN=function(t){return Number.isNaN(t)};var Ge=function(){};Ge.isWhitespace=function(t){return t<=32&&t>=0||127===t},Ge.toUpperCase=function(t){return t.toUpperCase()};var qe=function t(){if(this._hi=0,this._lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if("number"==typeof arguments[0]){var e=arguments[0];this.init(e);}else if(arguments[0]instanceof t){var n=arguments[0];this.init(n);}else if("string"==typeof arguments[0]){var r=arguments[0];t.call(this,t.parse(r));}}else if(2===arguments.length){var i=arguments[0],o=arguments[1];this.init(i,o);}},ke={PI:{configurable:!0},TWO_PI:{configurable:!0},PI_2:{configurable:!0},E:{configurable:!0},NaN:{configurable:!0},EPS:{configurable:!0},SPLIT:{configurable:!0},MAX_PRINT_DIGITS:{configurable:!0},TEN:{configurable:!0},ONE:{configurable:!0},SCI_NOT_EXPONENT_CHAR:{configurable:!0},SCI_NOT_ZERO:{configurable:!0}};qe.prototype.le=function(t){return (this._hi<t._hi||this._hi===t._hi)&&this._lo<=t._lo},qe.prototype.extractSignificantDigits=function(t,e){var n=this.abs(),r=qe.magnitude(n._hi),i=qe.TEN.pow(r);n=n.divide(i),n.gt(qe.TEN)?(n=n.divide(qe.TEN),r+=1):n.lt(qe.ONE)&&(n=n.multiply(qe.TEN),r-=1);for(var o=r+1,s=new Ae,a=qe.MAX_PRINT_DIGITS-1,u=0;u<=a;u++){t&&u===o&&s.append(".");var l=Math.trunc(n._hi);if(l<0)break;var p=!1,c=0;l>9?(p=!0,c="9"):c="0"+l,s.append(c),n=n.subtract(qe.valueOf(l)).multiply(qe.TEN),p&&n.selfAdd(qe.TEN);var h=!0,f=qe.magnitude(n._hi);if(f<0&&Math.abs(f)>=a-u&&(h=!1),!h)break}return e[0]=r,s.toString()},qe.prototype.sqr=function(){return this.multiply(this)},qe.prototype.doubleValue=function(){return this._hi+this._lo},qe.prototype.subtract=function(){if(arguments[0]instanceof qe){var t=arguments[0];return this.add(t.negate())}if("number"==typeof arguments[0]){var e=arguments[0];return this.add(-e)}},qe.prototype.equals=function(){if(1===arguments.length){var t=arguments[0];return this._hi===t._hi&&this._lo===t._lo}},qe.prototype.isZero=function(){return 0===this._hi&&0===this._lo},qe.prototype.selfSubtract=function(){if(arguments[0]instanceof qe){var t=arguments[0];return this.isNaN()?this:this.selfAdd(-t._hi,-t._lo)}if("number"==typeof arguments[0]){var e=arguments[0];return this.isNaN()?this:this.selfAdd(-e,0)}},qe.prototype.getSpecialNumberString=function(){return this.isZero()?"0.0":this.isNaN()?"NaN ":null},qe.prototype.min=function(t){return this.le(t)?this:t},qe.prototype.selfDivide=function(){if(1===arguments.length){if(arguments[0]instanceof qe){var t=arguments[0];return this.selfDivide(t._hi,t._lo)}if("number"==typeof arguments[0]){var e=arguments[0];return this.selfDivide(e,0)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1],i=null,o=null,s=null,a=null,u=null,l=null,p=null,c=null;return u=this._hi/n,l=qe.SPLIT*u,i=l-u,c=qe.SPLIT*n,i=l-i,o=u-i,s=c-n,p=u*n,s=c-s,a=n-s,c=i*s-p+i*a+o*s+o*a,l=(this._hi-p-c+this._lo-u*r)/n,c=u+l,this._hi=c,this._lo=u-c+l,this}},qe.prototype.dump=function(){return "DD<"+this._hi+", "+this._lo+">"},qe.prototype.divide=function(){if(arguments[0]instanceof qe){var t=arguments[0],e=null,n=null,r=null,i=null,o=null,s=null,a=null,u=null;o=this._hi/t._hi,s=qe.SPLIT*o,e=s-o,u=qe.SPLIT*t._hi,e=s-e,n=o-e,r=u-t._hi,a=o*t._hi,r=u-r,i=t._hi-r,u=e*r-a+e*i+n*r+n*i,s=(this._hi-a-u+this._lo-o*t._lo)/t._hi,u=o+s;return new qe(u,o-u+s)}if("number"==typeof arguments[0]){var l=arguments[0];return Ie.isNaN(l)?qe.createNaN():qe.copy(this).selfDivide(l,0)}},qe.prototype.ge=function(t){return (this._hi>t._hi||this._hi===t._hi)&&this._lo>=t._lo},qe.prototype.pow=function(t){if(0===t)return qe.valueOf(1);var e=new qe(this),n=qe.valueOf(1),r=Math.abs(t);if(r>1)for(;r>0;)r%2==1&&n.selfMultiply(e),(r/=2)>0&&(e=e.sqr());else n=e;return t<0?n.reciprocal():n},qe.prototype.ceil=function(){if(this.isNaN())return qe.NaN;var t=Math.ceil(this._hi),e=0;return t===this._hi&&(e=Math.ceil(this._lo)),new qe(t,e)},qe.prototype.compareTo=function(t){var e=t;return this._hi<e._hi?-1:this._hi>e._hi?1:this._lo<e._lo?-1:this._lo>e._lo?1:0},qe.prototype.rint=function(){return this.isNaN()?this:this.add(.5).floor()},qe.prototype.setValue=function(){if(arguments[0]instanceof qe){var t=arguments[0];return this.init(t),this}if("number"==typeof arguments[0]){var e=arguments[0];return this.init(e),this}},qe.prototype.max=function(t){return this.ge(t)?this:t},qe.prototype.sqrt=function(){if(this.isZero())return qe.valueOf(0);if(this.isNegative())return qe.NaN;var t=1/Math.sqrt(this._hi),e=this._hi*t,n=qe.valueOf(e),r=this.subtract(n.sqr()),i=r._hi*(.5*t);return n.add(i)},qe.prototype.selfAdd=function(){if(1===arguments.length){if(arguments[0]instanceof qe){var t=arguments[0];return this.selfAdd(t._hi,t._lo)}if("number"==typeof arguments[0]){var e=arguments[0],n=null,r=null,i=null,o=null,s=null,a=null;return i=this._hi+e,s=i-this._hi,o=i-s,o=e-s+(this._hi-o),a=o+this._lo,n=i+a,r=a+(i-n),this._hi=n+r,this._lo=r+(n-this._hi),this}}else if(2===arguments.length){var u=arguments[0],l=arguments[1],p=null,c=null,h=null,f=null,g=null,d=null,y=null,_=null;g=this._hi+u,h=this._lo+l,y=g-this._hi,_=h-this._lo,d=g-y,f=h-_,d=u-y+(this._hi-d),f=l-_+(this._lo-f),y=d+h,p=g+y,c=y+(g-p),y=f+c;var m=p+y,v=y+(p-m);return this._hi=m,this._lo=v,this}},qe.prototype.selfMultiply=function(){if(1===arguments.length){if(arguments[0]instanceof qe){var t=arguments[0];return this.selfMultiply(t._hi,t._lo)}if("number"==typeof arguments[0]){var e=arguments[0];return this.selfMultiply(e,0)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1],i=null,o=null,s=null,a=null,u=null,l=null;u=qe.SPLIT*this._hi,i=u-this._hi,l=qe.SPLIT*n,i=u-i,o=this._hi-i,s=l-n,u=this._hi*n,s=l-s,a=n-s,l=i*s-u+i*a+o*s+o*a+(this._hi*r+this._lo*n);var p=u+l;i=u-p;var c=l+i;return this._hi=p,this._lo=c,this}},qe.prototype.selfSqr=function(){return this.selfMultiply(this)},qe.prototype.floor=function(){if(this.isNaN())return qe.NaN;var t=Math.floor(this._hi),e=0;return t===this._hi&&(e=Math.floor(this._lo)),new qe(t,e)},qe.prototype.negate=function(){return this.isNaN()?this:new qe(-this._hi,-this._lo)},qe.prototype.clone=function(){},qe.prototype.multiply=function(){if(arguments[0]instanceof qe){var t=arguments[0];return t.isNaN()?qe.createNaN():qe.copy(this).selfMultiply(t)}if("number"==typeof arguments[0]){var e=arguments[0];return Ie.isNaN(e)?qe.createNaN():qe.copy(this).selfMultiply(e,0)}},qe.prototype.isNaN=function(){return Ie.isNaN(this._hi)},qe.prototype.intValue=function(){return Math.trunc(this._hi)},qe.prototype.toString=function(){var t=qe.magnitude(this._hi);return t>=-3&&t<=20?this.toStandardNotation():this.toSciNotation()},qe.prototype.toStandardNotation=function(){var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!0,e),r=e[0]+1,i=n;if("."===n.charAt(0))i="0"+n;else if(r<0)i="0."+qe.stringOfChar("0",-r)+n;else if(-1===n.indexOf(".")){var o=r-n.length,s=qe.stringOfChar("0",o);i=n+s+".0";}return this.isNegative()?"-"+i:i},qe.prototype.reciprocal=function(){var t=null,e=null,n=null,r=null,i=null,o=null,s=null,a=null;i=1/this._hi,o=qe.SPLIT*i,t=o-i,a=qe.SPLIT*this._hi,t=o-t,e=i-t,n=a-this._hi,s=i*this._hi,n=a-n,r=this._hi-n,a=t*n-s+t*r+e*n+e*r,o=(1-s-a-i*this._lo)/this._hi;var u=i+o;return new qe(u,i-u+o)},qe.prototype.toSciNotation=function(){if(this.isZero())return qe.SCI_NOT_ZERO;var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!1,e),r=qe.SCI_NOT_EXPONENT_CHAR+e[0];if("0"===n.charAt(0))throw new Error("Found leading zero: "+n);var i="";n.length>1&&(i=n.substring(1));var o=n.charAt(0)+"."+i;return this.isNegative()?"-"+o+r:o+r},qe.prototype.abs=function(){return this.isNaN()?qe.NaN:this.isNegative()?this.negate():new qe(this)},qe.prototype.isPositive=function(){return (this._hi>0||0===this._hi)&&this._lo>0},qe.prototype.lt=function(t){return (this._hi<t._hi||this._hi===t._hi)&&this._lo<t._lo},qe.prototype.add=function(){if(arguments[0]instanceof qe){var t=arguments[0];return qe.copy(this).selfAdd(t)}if("number"==typeof arguments[0]){var e=arguments[0];return qe.copy(this).selfAdd(e)}},qe.prototype.init=function(){if(1===arguments.length){if("number"==typeof arguments[0]){var t=arguments[0];this._hi=t,this._lo=0;}else if(arguments[0]instanceof qe){var e=arguments[0];this._hi=e._hi,this._lo=e._lo;}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this._hi=n,this._lo=r;}},qe.prototype.gt=function(t){return (this._hi>t._hi||this._hi===t._hi)&&this._lo>t._lo},qe.prototype.isNegative=function(){return (this._hi<0||0===this._hi)&&this._lo<0},qe.prototype.trunc=function(){return this.isNaN()?qe.NaN:this.isPositive()?this.floor():this.ceil()},qe.prototype.signum=function(){return this._hi>0?1:this._hi<0?-1:this._lo>0?1:this._lo<0?-1:0},qe.prototype.interfaces_=function(){return [b,Ne,be]},qe.prototype.getClass=function(){return qe},qe.sqr=function(t){return qe.valueOf(t).selfMultiply(t)},qe.valueOf=function(){if("string"==typeof arguments[0]){var t=arguments[0];return qe.parse(t)}if("number"==typeof arguments[0]){var e=arguments[0];return new qe(e)}},qe.sqrt=function(t){return qe.valueOf(t).sqrt()},qe.parse=function(t){for(var e=0,n=t.length;Ge.isWhitespace(t.charAt(e));)e++;var r=!1;if(e<n){var i=t.charAt(e);"-"!==i&&"+"!==i||(e++,"-"===i&&(r=!0));}for(var o=new qe,s=0,a=0,u=0;!(e>=n);){var l=t.charAt(e);if(e++,Ge.isDigit(l)){var p=l-"0";o.selfMultiply(qe.TEN),o.selfAdd(p),s++;}else{if("."!==l){if("e"===l||"E"===l){var c=t.substring(e);try{u=Fe.parseInt(c);}catch(e){throw e instanceof Error?new Error("Invalid exponent "+c+" in string "+t):e}break}throw new Error("Unexpected character '"+l+"' at position "+e+" in string "+t)}a=s;}}var h=o,f=s-a-u;if(0===f)h=o;else if(f>0){var g=qe.TEN.pow(f);h=o.divide(g);}else if(f<0){var d=qe.TEN.pow(-f);h=o.multiply(d);}return r?h.negate():h},qe.createNaN=function(){return new qe(Ie.NaN,Ie.NaN)},qe.copy=function(t){return new qe(t)},qe.magnitude=function(t){var e=Math.abs(t),n=Math.log(e)/Math.log(10),r=Math.trunc(Math.floor(n));return 10*Math.pow(10,r)<=e&&(r+=1),r},qe.stringOfChar=function(t,e){for(var n=new Ae,r=0;r<e;r++)n.append(t);return n.toString()},ke.PI.get=function(){return new qe(3.141592653589793,1.2246467991473532e-16)},ke.TWO_PI.get=function(){return new qe(6.283185307179586,2.4492935982947064e-16)},ke.PI_2.get=function(){return new qe(1.5707963267948966,6.123233995736766e-17)},ke.E.get=function(){return new qe(2.718281828459045,1.4456468917292502e-16)},ke.NaN.get=function(){return new qe(Ie.NaN,Ie.NaN)},ke.EPS.get=function(){return 1.23259516440783e-32},ke.SPLIT.get=function(){return 134217729},ke.MAX_PRINT_DIGITS.get=function(){return 32},ke.TEN.get=function(){return qe.valueOf(10)},ke.ONE.get=function(){return qe.valueOf(1)},ke.SCI_NOT_EXPONENT_CHAR.get=function(){return "E"},ke.SCI_NOT_ZERO.get=function(){return "0.0E0"},Object.defineProperties(qe,ke);var Be=function(){},Ve={DP_SAFE_EPSILON:{configurable:!0}};Be.prototype.interfaces_=function(){return []},Be.prototype.getClass=function(){return Be},Be.orientationIndex=function(t,e,n){var r=Be.orientationIndexFilter(t,e,n);if(r<=1)return r;var i=qe.valueOf(e.x).selfAdd(-t.x),o=qe.valueOf(e.y).selfAdd(-t.y),s=qe.valueOf(n.x).selfAdd(-e.x),a=qe.valueOf(n.y).selfAdd(-e.y);return i.selfMultiply(a).selfSubtract(o.selfMultiply(s)).signum()},Be.signOfDet2x2=function(t,e,n,r){return t.multiply(r).selfSubtract(e.multiply(n)).signum()},Be.intersection=function(t,e,n,r){
    var i=qe.valueOf(r.y).selfSubtract(n.y).selfMultiply(qe.valueOf(e.x).selfSubtract(t.x)),o=qe.valueOf(r.x).selfSubtract(n.x).selfMultiply(qe.valueOf(e.y).selfSubtract(t.y)),s=i.subtract(o),a=qe.valueOf(r.x).selfSubtract(n.x).selfMultiply(qe.valueOf(t.y).selfSubtract(n.y)),u=qe.valueOf(r.y).selfSubtract(n.y).selfMultiply(qe.valueOf(t.x).selfSubtract(n.x)),l=a.subtract(u),p=l.selfDivide(s).doubleValue(),c=qe.valueOf(t.x).selfAdd(qe.valueOf(e.x).selfSubtract(t.x).selfMultiply(p)).doubleValue(),h=qe.valueOf(e.x).selfSubtract(t.x).selfMultiply(qe.valueOf(t.y).selfSubtract(n.y)),f=qe.valueOf(e.y).selfSubtract(t.y).selfMultiply(qe.valueOf(t.x).selfSubtract(n.x)),g=h.subtract(f),d=g.selfDivide(s).doubleValue(),y=qe.valueOf(n.y).selfAdd(qe.valueOf(r.y).selfSubtract(n.y).selfMultiply(d)).doubleValue();return new we(c,y)},Be.orientationIndexFilter=function(t,e,n){var r=null,i=(t.x-n.x)*(e.y-n.y),o=(t.y-n.y)*(e.x-n.x),s=i-o;if(i>0){if(o<=0)return Be.signum(s);r=i+o;}else{if(!(i<0))return Be.signum(s);if(o>=0)return Be.signum(s);r=-i-o;}var a=Be.DP_SAFE_EPSILON*r;return s>=a||-s>=a?Be.signum(s):2},Be.signum=function(t){return t>0?1:t<0?-1:0},Ve.DP_SAFE_EPSILON.get=function(){return 1e-15},Object.defineProperties(Be,Ve);var ze=function(){},Ue={X:{configurable:!0},Y:{configurable:!0},Z:{configurable:!0},M:{configurable:!0}};Ue.X.get=function(){return 0},Ue.Y.get=function(){return 1},Ue.Z.get=function(){return 2},Ue.M.get=function(){return 3},ze.prototype.setOrdinate=function(t,e,n){},ze.prototype.size=function(){},ze.prototype.getOrdinate=function(t,e){},ze.prototype.getCoordinate=function(){},ze.prototype.getCoordinateCopy=function(t){},ze.prototype.getDimension=function(){},ze.prototype.getX=function(t){},ze.prototype.clone=function(){},ze.prototype.expandEnvelope=function(t){},ze.prototype.copy=function(){},ze.prototype.getY=function(t){},ze.prototype.toCoordinateArray=function(){},ze.prototype.interfaces_=function(){return [be]},ze.prototype.getClass=function(){return ze},Object.defineProperties(ze,Ue);var Xe=function(){},je=function(t){function e(){t.call(this,"Projective point not representable on the Cartesian plane.");}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(Xe),Ye=function(){};Ye.arraycopy=function(t,e,n,r,i){for(var o=0,s=e;s<e+i;s++)n[r+o]=t[s],o++;},Ye.getProperty=function(t){return {"line.separator":"\n"}[t]};var He=function t(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){var e=arguments[0];this.x=e.x,this.y=e.y,this.w=1;}else if(2===arguments.length){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var n=arguments[0],r=arguments[1];this.x=n,this.y=r,this.w=1;}else if(arguments[0]instanceof t&&arguments[1]instanceof t){var i=arguments[0],o=arguments[1];this.x=i.y*o.w-o.y*i.w,this.y=o.x*i.w-i.x*o.w,this.w=i.x*o.y-o.x*i.y;}else if(arguments[0]instanceof we&&arguments[1]instanceof we){var s=arguments[0],a=arguments[1];this.x=s.y-a.y,this.y=a.x-s.x,this.w=s.x*a.y-a.x*s.y;}}else if(3===arguments.length){var u=arguments[0],l=arguments[1],p=arguments[2];this.x=u,this.y=l,this.w=p;}else if(4===arguments.length){var c=arguments[0],h=arguments[1],f=arguments[2],g=arguments[3],d=c.y-h.y,y=h.x-c.x,_=c.x*h.y-h.x*c.y,m=f.y-g.y,v=g.x-f.x,E=f.x*g.y-g.x*f.y;this.x=y*E-v*_,this.y=m*_-d*E,this.w=d*v-m*y;}};He.prototype.getY=function(){var t=this.y/this.w;if(Ie.isNaN(t)||Ie.isInfinite(t))throw new je;return t},He.prototype.getX=function(){var t=this.x/this.w;if(Ie.isNaN(t)||Ie.isInfinite(t))throw new je;return t},He.prototype.getCoordinate=function(){var t=new we;return t.x=this.getX(),t.y=this.getY(),t},He.prototype.interfaces_=function(){return []},He.prototype.getClass=function(){return He},He.intersection=function(t,e,n,r){var i=t.y-e.y,o=e.x-t.x,s=t.x*e.y-e.x*t.y,a=n.y-r.y,u=r.x-n.x,l=n.x*r.y-r.x*n.y,p=o*l-u*s,c=a*s-i*l,h=i*u-a*o,f=p/h,g=c/h;if(Ie.isNaN(f)||Ie.isInfinite(f)||Ie.isNaN(g)||Ie.isInfinite(g))throw new je;return new we(f,g)};var We=function t(){if(this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof we){var e=arguments[0];this.init(e.x,e.x,e.y,e.y);}else if(arguments[0]instanceof t){var n=arguments[0];this.init(n);}}else if(2===arguments.length){var r=arguments[0],i=arguments[1];this.init(r.x,i.x,r.y,i.y);}else if(4===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2],u=arguments[3];this.init(o,s,a,u);}},Ke={serialVersionUID:{configurable:!0}};We.prototype.getArea=function(){return this.getWidth()*this.getHeight()},We.prototype.equals=function(t){if(!(t instanceof We))return !1;var e=t;return this.isNull()?e.isNull():this._maxx===e.getMaxX()&&this._maxy===e.getMaxY()&&this._minx===e.getMinX()&&this._miny===e.getMinY()},We.prototype.intersection=function(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new We;var e=this._minx>t._minx?this._minx:t._minx,n=this._miny>t._miny?this._miny:t._miny,r=this._maxx<t._maxx?this._maxx:t._maxx,i=this._maxy<t._maxy?this._maxy:t._maxy;return new We(e,r,n,i)},We.prototype.isNull=function(){return this._maxx<this._minx},We.prototype.getMaxX=function(){return this._maxx},We.prototype.covers=function(){if(1===arguments.length){if(arguments[0]instanceof we){var t=arguments[0];return this.covers(t.x,t.y)}if(arguments[0]instanceof We){var e=arguments[0];return !this.isNull()&&!e.isNull()&&(e.getMinX()>=this._minx&&e.getMaxX()<=this._maxx&&e.getMinY()>=this._miny&&e.getMaxY()<=this._maxy)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];return !this.isNull()&&(n>=this._minx&&n<=this._maxx&&r>=this._miny&&r<=this._maxy)}},We.prototype.intersects=function(){if(1===arguments.length){if(arguments[0]instanceof We){var t=arguments[0];return !this.isNull()&&!t.isNull()&&!(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}if(arguments[0]instanceof we){var e=arguments[0];return this.intersects(e.x,e.y)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];return !this.isNull()&&!(n>this._maxx||n<this._minx||r>this._maxy||r<this._miny)}},We.prototype.getMinY=function(){return this._miny},We.prototype.getMinX=function(){return this._minx},We.prototype.expandToInclude=function(){if(1===arguments.length){if(arguments[0]instanceof we){var t=arguments[0];this.expandToInclude(t.x,t.y);}else if(arguments[0]instanceof We){var e=arguments[0];if(e.isNull())return null;this.isNull()?(this._minx=e.getMinX(),this._maxx=e.getMaxX(),this._miny=e.getMinY(),this._maxy=e.getMaxY()):(e._minx<this._minx&&(this._minx=e._minx),e._maxx>this._maxx&&(this._maxx=e._maxx),e._miny<this._miny&&(this._miny=e._miny),e._maxy>this._maxy&&(this._maxy=e._maxy));}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this.isNull()?(this._minx=n,this._maxx=n,this._miny=r,this._maxy=r):(n<this._minx&&(this._minx=n),n>this._maxx&&(this._maxx=n),r<this._miny&&(this._miny=r),r>this._maxy&&(this._maxy=r));}},We.prototype.minExtent=function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t<e?t:e},We.prototype.getWidth=function(){return this.isNull()?0:this._maxx-this._minx},We.prototype.compareTo=function(t){var e=t;return this.isNull()?e.isNull()?0:-1:e.isNull()?1:this._minx<e._minx?-1:this._minx>e._minx?1:this._miny<e._miny?-1:this._miny>e._miny?1:this._maxx<e._maxx?-1:this._maxx>e._maxx?1:this._maxy<e._maxy?-1:this._maxy>e._maxy?1:0},We.prototype.translate=function(t,e){if(this.isNull())return null;this.init(this.getMinX()+t,this.getMaxX()+t,this.getMinY()+e,this.getMaxY()+e);},We.prototype.toString=function(){return "Env["+this._minx+" : "+this._maxx+", "+this._miny+" : "+this._maxy+"]"},We.prototype.setToNull=function(){this._minx=0,this._maxx=-1,this._miny=0,this._maxy=-1;},We.prototype.getHeight=function(){return this.isNull()?0:this._maxy-this._miny},We.prototype.maxExtent=function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t>e?t:e},We.prototype.expandBy=function(){if(1===arguments.length){var t=arguments[0];this.expandBy(t,t);}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this.isNull())return null;this._minx-=e,this._maxx+=e,this._miny-=n,this._maxy+=n,(this._minx>this._maxx||this._miny>this._maxy)&&this.setToNull();}},We.prototype.contains=function(){if(1===arguments.length){if(arguments[0]instanceof We){var t=arguments[0];return this.covers(t)}if(arguments[0]instanceof we){var e=arguments[0];return this.covers(e)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];return this.covers(n,r)}},We.prototype.centre=function(){return this.isNull()?null:new we((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)},We.prototype.init=function(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof we){var t=arguments[0];this.init(t.x,t.x,t.y,t.y);}else if(arguments[0]instanceof We){var e=arguments[0];this._minx=e._minx,this._maxx=e._maxx,this._miny=e._miny,this._maxy=e._maxy;}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this.init(n.x,r.x,n.y,r.y);}else if(4===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3];i<o?(this._minx=i,this._maxx=o):(this._minx=o,this._maxx=i),s<a?(this._miny=s,this._maxy=a):(this._miny=a,this._maxy=s);}},We.prototype.getMaxY=function(){return this._maxy},We.prototype.distance=function(t){if(this.intersects(t))return 0;var e=0;this._maxx<t._minx?e=t._minx-this._maxx:this._minx>t._maxx&&(e=this._minx-t._maxx);var n=0;return this._maxy<t._miny?n=t._miny-this._maxy:this._miny>t._maxy&&(n=this._miny-t._maxy),0===e?n:0===n?e:Math.sqrt(e*e+n*n)},We.prototype.hashCode=function(){var t=17;return t=37*t+we.hashCode(this._minx),t=37*t+we.hashCode(this._maxx),t=37*t+we.hashCode(this._miny),t=37*t+we.hashCode(this._maxy)},We.prototype.interfaces_=function(){return [Ne,b]},We.prototype.getClass=function(){return We},We.intersects=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2];return n.x>=(t.x<e.x?t.x:e.x)&&n.x<=(t.x>e.x?t.x:e.x)&&n.y>=(t.y<e.y?t.y:e.y)&&n.y<=(t.y>e.y?t.y:e.y)}if(4===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2],s=arguments[3],a=Math.min(o.x,s.x),u=Math.max(o.x,s.x),l=Math.min(r.x,i.x),p=Math.max(r.x,i.x);return !(l>u)&&(!(p<a)&&(a=Math.min(o.y,s.y),u=Math.max(o.y,s.y),l=Math.min(r.y,i.y),p=Math.max(r.y,i.y),!(l>u)&&!(p<a)))}},Ke.serialVersionUID.get=function(){return 0x51845cd552189800},Object.defineProperties(We,Ke);var Je={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,emptyTypeStr:/^\s*(\w+)\s*EMPTY\s*$/,spaces:/\s+/,parenComma:/\)\s*,\s*\(/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,trimParens:/^\s*\(?(.*?)\)?\s*$/},Qe=function(t){this.geometryFactory=t||new xr;};Qe.prototype.read=function(t){var e,n,r;t=t.replace(/[\n\r]/g," ");var i=Je.typeStr.exec(t);if(-1!==t.search("EMPTY")&&(i=Je.emptyTypeStr.exec(t),i[2]=void 0),i&&(n=i[1].toLowerCase(),r=i[2],$e[n]&&(e=$e[n].apply(this,[r]))),void 0===e)throw new Error("Could not parse WKT "+t);return e},Qe.prototype.write=function(t){return this.extractGeometry(t)},Qe.prototype.extractGeometry=function(t){var e=t.getGeometryType().toLowerCase();if(!Ze[e])return null;var n=e.toUpperCase();return t.isEmpty()?n+" EMPTY":n+"("+Ze[e].apply(this,[t])+")"};var Ze={coordinate:function(t){return t.x+" "+t.y},point:function(t){return Ze.coordinate.call(this,t._coordinates._coordinates[0])},multipoint:function(t){for(var e=this,n=[],r=0,i=t._geometries.length;r<i;++r)n.push("("+Ze.point.apply(e,[t._geometries[r]])+")");return n.join(",")},linestring:function(t){for(var e=this,n=[],r=0,i=t._points._coordinates.length;r<i;++r)n.push(Ze.coordinate.apply(e,[t._points._coordinates[r]]));return n.join(",")},linearring:function(t){for(var e=this,n=[],r=0,i=t._points._coordinates.length;r<i;++r)n.push(Ze.coordinate.apply(e,[t._points._coordinates[r]]));return n.join(",")},multilinestring:function(t){for(var e=this,n=[],r=0,i=t._geometries.length;r<i;++r)n.push("("+Ze.linestring.apply(e,[t._geometries[r]])+")");return n.join(",")},polygon:function(t){var e=this,n=[];n.push("("+Ze.linestring.apply(this,[t._shell])+")");for(var r=0,i=t._holes.length;r<i;++r)n.push("("+Ze.linestring.apply(e,[t._holes[r]])+")");return n.join(",")},multipolygon:function(t){for(var e=this,n=[],r=0,i=t._geometries.length;r<i;++r)n.push("("+Ze.polygon.apply(e,[t._geometries[r]])+")");return n.join(",")},geometrycollection:function(t){for(var e=this,n=[],r=0,i=t._geometries.length;r<i;++r)n.push(e.extractGeometry(t._geometries[r]));return n.join(",")}},$e={point:function(t){if(void 0===t)return this.geometryFactory.createPoint();var e=t.trim().split(Je.spaces);return this.geometryFactory.createPoint(new we(Number.parseFloat(e[0]),Number.parseFloat(e[1])))},multipoint:function(t){var e=this;if(void 0===t)return this.geometryFactory.createMultiPoint();for(var n,r=t.trim().split(","),i=[],o=0,s=r.length;o<s;++o)n=r[o].replace(Je.trimParens,"$1"),i.push($e.point.apply(e,[n]));return this.geometryFactory.createMultiPoint(i)},linestring:function(t){if(void 0===t)return this.geometryFactory.createLineString();for(var e,n=t.trim().split(","),r=[],i=0,o=n.length;i<o;++i)e=n[i].trim().split(Je.spaces),r.push(new we(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLineString(r)},linearring:function(t){if(void 0===t)return this.geometryFactory.createLinearRing();for(var e,n=t.trim().split(","),r=[],i=0,o=n.length;i<o;++i)e=n[i].trim().split(Je.spaces),r.push(new we(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLinearRing(r)},multilinestring:function(t){var e=this;if(void 0===t)return this.geometryFactory.createMultiLineString();for(var n,r=t.trim().split(Je.parenComma),i=[],o=0,s=r.length;o<s;++o)n=r[o].replace(Je.trimParens,"$1"),i.push($e.linestring.apply(e,[n]));return this.geometryFactory.createMultiLineString(i)},polygon:function(t){var e=this;if(void 0===t)return this.geometryFactory.createPolygon();for(var n,r,i,o,s=t.trim().split(Je.parenComma),a=[],u=0,l=s.length;u<l;++u)n=s[u].replace(Je.trimParens,"$1"),r=$e.linestring.apply(e,[n]),i=e.geometryFactory.createLinearRing(r._points),0===u?o=i:a.push(i);return this.geometryFactory.createPolygon(o,a)},multipolygon:function(t){var e=this;if(void 0===t)return this.geometryFactory.createMultiPolygon();for(var n,r=t.trim().split(Je.doubleParenComma),i=[],o=0,s=r.length;o<s;++o)n=r[o].replace(Je.trimParens,"$1"),i.push($e.polygon.apply(e,[n]));return this.geometryFactory.createMultiPolygon(i)},geometrycollection:function(t){var e=this;if(void 0===t)return this.geometryFactory.createGeometryCollection();t=t.replace(/,\s*([A-Za-z])/g,"|$1");for(var n=t.trim().split("|"),r=[],i=0,o=n.length;i<o;++i)r.push(e.read(n[i]));return this.geometryFactory.createGeometryCollection(r)}},tn=function(t){this.parser=new Qe(t);};tn.prototype.write=function(t){return this.parser.write(t)},tn.toLineString=function(t,e){if(2!==arguments.length)throw new Error("Not implemented");return "LINESTRING ( "+t.x+" "+t.y+", "+e.x+" "+e.y+" )"};var en=function(t){function e(e){t.call(this,e),this.name="RuntimeException",this.message=e,this.stack=(new t).stack;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Error),nn=function(t){function e(){if(t.call(this),0===arguments.length)t.call(this);else if(1===arguments.length){var e=arguments[0];t.call(this,e);}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(en),rn=function(){};rn.prototype.interfaces_=function(){return []},rn.prototype.getClass=function(){return rn},rn.shouldNeverReachHere=function(){if(0===arguments.length)rn.shouldNeverReachHere(null);else if(1===arguments.length){var t=arguments[0];throw new nn("Should never reach here"+(null!==t?": "+t:""))}},rn.isTrue=function(){var t,e;if(1===arguments.length)t=arguments[0],rn.isTrue(t,null);else if(2===arguments.length&&(t=arguments[0],e=arguments[1],!t))throw null===e?new nn:new nn(e)},rn.equals=function(){var t,e,n;if(2===arguments.length)t=arguments[0],e=arguments[1],rn.equals(t,e,null);else if(3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],!e.equals(t)))throw new nn("Expected "+t+" but encountered "+e+(null!==n?": "+n:""))};var on=function(){this._result=null,this._inputLines=Array(2).fill().map(function(){return Array(2)}),this._intPt=new Array(2).fill(null),this._intLineIndex=null,this._isProper=null,this._pa=null,this._pb=null,this._precisionModel=null,this._intPt[0]=new we,this._intPt[1]=new we,this._pa=this._intPt[0],this._pb=this._intPt[1],this._result=0;},sn={DONT_INTERSECT:{configurable:!0},DO_INTERSECT:{configurable:!0},COLLINEAR:{configurable:!0},NO_INTERSECTION:{configurable:!0},POINT_INTERSECTION:{configurable:!0},COLLINEAR_INTERSECTION:{configurable:!0}};on.prototype.getIndexAlongSegment=function(t,e){return this.computeIntLineIndex(),this._intLineIndex[t][e]},on.prototype.getTopologySummary=function(){var t=new Ae;return this.isEndPoint()&&t.append(" endpoint"),this._isProper&&t.append(" proper"),this.isCollinear()&&t.append(" collinear"),t.toString()},on.prototype.computeIntersection=function(t,e,n,r){this._inputLines[0][0]=t,this._inputLines[0][1]=e,this._inputLines[1][0]=n,this._inputLines[1][1]=r,this._result=this.computeIntersect(t,e,n,r);},on.prototype.getIntersectionNum=function(){return this._result},on.prototype.computeIntLineIndex=function(){if(0===arguments.length)null===this._intLineIndex&&(this._intLineIndex=Array(2).fill().map(function(){return Array(2)}),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){var t=arguments[0],e=this.getEdgeDistance(t,0),n=this.getEdgeDistance(t,1);e>n?(this._intLineIndex[t][0]=0,this._intLineIndex[t][1]=1):(this._intLineIndex[t][0]=1,this._intLineIndex[t][1]=0);}},on.prototype.isProper=function(){return this.hasIntersection()&&this._isProper},on.prototype.setPrecisionModel=function(t){this._precisionModel=t;},on.prototype.isInteriorIntersection=function(){var t=this;if(0===arguments.length)return !!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){for(var e=arguments[0],n=0;n<this._result;n++)if(!t._intPt[n].equals2D(t._inputLines[e][0])&&!t._intPt[n].equals2D(t._inputLines[e][1]))return !0;return !1}},on.prototype.getIntersection=function(t){return this._intPt[t]},on.prototype.isEndPoint=function(){return this.hasIntersection()&&!this._isProper},on.prototype.hasIntersection=function(){return this._result!==on.NO_INTERSECTION},on.prototype.getEdgeDistance=function(t,e){return on.computeEdgeDistance(this._intPt[e],this._inputLines[t][0],this._inputLines[t][1])},on.prototype.isCollinear=function(){return this._result===on.COLLINEAR_INTERSECTION},on.prototype.toString=function(){return tn.toLineString(this._inputLines[0][0],this._inputLines[0][1])+" - "+tn.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary()},on.prototype.getEndpoint=function(t,e){return this._inputLines[t][e]},on.prototype.isIntersection=function(t){for(var e=this,n=0;n<this._result;n++)if(e._intPt[n].equals2D(t))return !0;return !1},on.prototype.getIntersectionAlongSegment=function(t,e){return this.computeIntLineIndex(),this._intPt[this._intLineIndex[t][e]]},on.prototype.interfaces_=function(){return []},on.prototype.getClass=function(){return on},on.computeEdgeDistance=function(t,e,n){var r=Math.abs(n.x-e.x),i=Math.abs(n.y-e.y),o=-1;if(t.equals(e))o=0;else if(t.equals(n))o=r>i?r:i;else{var s=Math.abs(t.x-e.x),a=Math.abs(t.y-e.y);o=r>i?s:a,0!==o||t.equals(e)||(o=Math.max(s,a));}return rn.isTrue(!(0===o&&!t.equals(e)),"Bad distance calculation"),o},on.nonRobustComputeEdgeDistance=function(t,e,n){var r=t.x-e.x,i=t.y-e.y,o=Math.sqrt(r*r+i*i);return rn.isTrue(!(0===o&&!t.equals(e)),"Invalid distance calculation"),o},sn.DONT_INTERSECT.get=function(){return 0},sn.DO_INTERSECT.get=function(){return 1},sn.COLLINEAR.get=function(){return 2},sn.NO_INTERSECTION.get=function(){return 0},sn.POINT_INTERSECTION.get=function(){return 1},sn.COLLINEAR_INTERSECTION.get=function(){return 2},Object.defineProperties(on,sn);var an=function(t){function e(){t.apply(this,arguments);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isInSegmentEnvelopes=function(t){var e=new We(this._inputLines[0][0],this._inputLines[0][1]),n=new We(this._inputLines[1][0],this._inputLines[1][1]);return e.contains(t)&&n.contains(t)},e.prototype.computeIntersection=function(){if(3!==arguments.length)return t.prototype.computeIntersection.apply(this,arguments);var e=arguments[0],n=arguments[1],r=arguments[2];if(this._isProper=!1,We.intersects(n,r,e)&&0===pn.orientationIndex(n,r,e)&&0===pn.orientationIndex(r,n,e))return this._isProper=!0,(e.equals(n)||e.equals(r))&&(this._isProper=!1),this._result=t.POINT_INTERSECTION,null;this._result=t.NO_INTERSECTION;},e.prototype.normalizeToMinimum=function(t,e,n,r,i){i.x=this.smallestInAbsValue(t.x,e.x,n.x,r.x),i.y=this.smallestInAbsValue(t.y,e.y,n.y,r.y),t.x-=i.x,t.y-=i.y,e.x-=i.x,e.y-=i.y,n.x-=i.x,n.y-=i.y,r.x-=i.x,r.y-=i.y;},e.prototype.safeHCoordinateIntersection=function(t,n,r,i){var o=null;try{o=He.intersection(t,n,r,i);}catch(s){if(!(s instanceof je))throw s;o=e.nearestEndpoint(t,n,r,i);}return o},e.prototype.intersection=function(t,n,r,i){var o=this.intersectionWithNormalization(t,n,r,i);return this.isInSegmentEnvelopes(o)||(o=new we(e.nearestEndpoint(t,n,r,i))),null!==this._precisionModel&&this._precisionModel.makePrecise(o),o},e.prototype.smallestInAbsValue=function(t,e,n,r){var i=t,o=Math.abs(i);return Math.abs(e)<o&&(i=e,o=Math.abs(e)),Math.abs(n)<o&&(i=n,o=Math.abs(n)),Math.abs(r)<o&&(i=r),i},e.prototype.checkDD=function(t,e,n,r,i){var o=Be.intersection(t,e,n,r),s=this.isInSegmentEnvelopes(o);Ye.out.println("DD in env = "+s+"  --------------------- "+o),i.distance(o)>1e-4&&Ye.out.println("Distance = "+i.distance(o));},e.prototype.intersectionWithNormalization=function(t,e,n,r){var i=new we(t),o=new we(e),s=new we(n),a=new we(r),u=new we;this.normalizeToEnvCentre(i,o,s,a,u);var l=this.safeHCoordinateIntersection(i,o,s,a);return l.x+=u.x,l.y+=u.y,l},e.prototype.computeCollinearIntersection=function(e,n,r,i){var o=We.intersects(e,n,r),s=We.intersects(e,n,i),a=We.intersects(r,i,e),u=We.intersects(r,i,n);return o&&s?(this._intPt[0]=r,this._intPt[1]=i,t.COLLINEAR_INTERSECTION):a&&u?(this._intPt[0]=e,this._intPt[1]=n,t.COLLINEAR_INTERSECTION):o&&a?(this._intPt[0]=r,this._intPt[1]=e,!r.equals(e)||s||u?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):o&&u?(this._intPt[0]=r,this._intPt[1]=n,!r.equals(n)||s||a?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):s&&a?(this._intPt[0]=i,this._intPt[1]=e,!i.equals(e)||o||u?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):s&&u?(this._intPt[0]=i,this._intPt[1]=n,!i.equals(n)||o||a?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):t.NO_INTERSECTION},e.prototype.normalizeToEnvCentre=function(t,e,n,r,i){var o=t.x<e.x?t.x:e.x,s=t.y<e.y?t.y:e.y,a=t.x>e.x?t.x:e.x,u=t.y>e.y?t.y:e.y,l=n.x<r.x?n.x:r.x,p=n.y<r.y?n.y:r.y,c=n.x>r.x?n.x:r.x,h=n.y>r.y?n.y:r.y,f=o>l?o:l,g=a<c?a:c,d=s>p?s:p,y=u<h?u:h,_=(f+g)/2,m=(d+y)/2;i.x=_,i.y=m,t.x-=i.x,t.y-=i.y,e.x-=i.x,e.y-=i.y,n.x-=i.x,n.y-=i.y,r.x-=i.x,r.y-=i.y;},e.prototype.computeIntersect=function(e,n,r,i){if(this._isProper=!1,!We.intersects(e,n,r,i))return t.NO_INTERSECTION;var o=pn.orientationIndex(e,n,r),s=pn.orientationIndex(e,n,i);if(o>0&&s>0||o<0&&s<0)return t.NO_INTERSECTION;var a=pn.orientationIndex(r,i,e),u=pn.orientationIndex(r,i,n);return a>0&&u>0||a<0&&u<0?t.NO_INTERSECTION:0===o&&0===s&&0===a&&0===u?this.computeCollinearIntersection(e,n,r,i):(0===o||0===s||0===a||0===u?(this._isProper=!1,e.equals2D(r)||e.equals2D(i)?this._intPt[0]=e:n.equals2D(r)||n.equals2D(i)?this._intPt[0]=n:0===o?this._intPt[0]=new we(r):0===s?this._intPt[0]=new we(i):0===a?this._intPt[0]=new we(e):0===u&&(this._intPt[0]=new we(n))):(this._isProper=!0,this._intPt[0]=this.intersection(e,n,r,i)),t.POINT_INTERSECTION)},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e.nearestEndpoint=function(t,e,n,r){var i=t,o=pn.distancePointLine(t,n,r),s=pn.distancePointLine(e,n,r);return s<o&&(o=s,i=e),s=pn.distancePointLine(n,t,e),s<o&&(o=s,i=n),s=pn.distancePointLine(r,t,e),s<o&&(o=s,i=r),i},e}(on),un=function(){};un.prototype.interfaces_=function(){return []},un.prototype.getClass=function(){return un},un.orientationIndex=function(t,e,n){var r=e.x-t.x,i=e.y-t.y,o=n.x-e.x,s=n.y-e.y;return un.signOfDet2x2(r,i,o,s)},un.signOfDet2x2=function(t,e,n,r){var i=null,o=null,s=null;if(i=1,0===t||0===r)return 0===e||0===n?0:e>0?n>0?-i:i:n>0?i:-i;if(0===e||0===n)return r>0?t>0?i:-i:t>0?-i:i;if(e>0?r>0?e<=r||(i=-i,o=t,t=n,n=o,o=e,e=r,r=o):e<=-r?(i=-i,n=-n,r=-r):(o=t,t=-n,n=o,o=e,e=-r,r=o):r>0?-e<=r?(i=-i,t=-t,e=-e):(o=-t,t=n,n=o,o=-e,e=r,r=o):e>=r?(t=-t,e=-e,n=-n,r=-r):(i=-i,o=-t,t=-n,n=o,o=-e,e=-r,r=o),t>0){if(!(n>0))return i;if(!(t<=n))return i}else{if(n>0)return -i;if(!(t>=n))return -i;i=-i,t=-t,n=-n;}for(;!0;){if(s=Math.floor(n/t),n-=s*t,(r-=s*e)<0)return -i;if(r>e)return i;if(t>n+n){if(e<r+r)return i}else{if(e>r+r)return -i;n=t-n,r=e-r,i=-i;}if(0===r)return 0===n?0:-i;if(0===n)return i;if(s=Math.floor(t/n),t-=s*n,(e-=s*r)<0)return i;if(e>r)return -i;if(n>t+t){if(r<e+e)return -i}else{if(r>e+e)return i;t=n-t,e=r-e,i=-i;}if(0===e)return 0===t?0:i;if(0===t)return -i}};var ln=function(){this._p=null,this._crossingCount=0,this._isPointOnSegment=!1;var t=arguments[0];this._p=t;};ln.prototype.countSegment=function(t,e){if(t.x<this._p.x&&e.x<this._p.x)return null;if(this._p.x===e.x&&this._p.y===e.y)return this._isPointOnSegment=!0,null;if(t.y===this._p.y&&e.y===this._p.y){var n=t.x,r=e.x;return n>r&&(n=e.x,r=t.x),this._p.x>=n&&this._p.x<=r&&(this._isPointOnSegment=!0),null}if(t.y>this._p.y&&e.y<=this._p.y||e.y>this._p.y&&t.y<=this._p.y){var i=t.x-this._p.x,o=t.y-this._p.y,s=e.x-this._p.x,a=e.y-this._p.y,u=un.signOfDet2x2(i,o,s,a);if(0===u)return this._isPointOnSegment=!0,null;a<o&&(u=-u),u>0&&this._crossingCount++;}},ln.prototype.isPointInPolygon=function(){return this.getLocation()!==Oe.EXTERIOR},ln.prototype.getLocation=function(){return this._isPointOnSegment?Oe.BOUNDARY:this._crossingCount%2==1?Oe.INTERIOR:Oe.EXTERIOR},ln.prototype.isOnSegment=function(){return this._isPointOnSegment},ln.prototype.interfaces_=function(){return []},ln.prototype.getClass=function(){return ln},ln.locatePointInRing=function(){if(arguments[0]instanceof we&&Re(arguments[1],ze)){for(var t=arguments[0],e=arguments[1],n=new ln(t),r=new we,i=new we,o=1;o<e.size();o++)if(e.getCoordinate(o,r),e.getCoordinate(o-1,i),n.countSegment(r,i),n.isOnSegment())return n.getLocation();return n.getLocation()}if(arguments[0]instanceof we&&arguments[1]instanceof Array){for(var s=arguments[0],a=arguments[1],u=new ln(s),l=1;l<a.length;l++){var p=a[l],c=a[l-1];if(u.countSegment(p,c),u.isOnSegment())return u.getLocation()}return u.getLocation()}};var pn=function(){},cn={CLOCKWISE:{configurable:!0},RIGHT:{configurable:!0},COUNTERCLOCKWISE:{configurable:!0},LEFT:{configurable:!0},COLLINEAR:{configurable:!0},STRAIGHT:{configurable:!0}};pn.prototype.interfaces_=function(){return []},pn.prototype.getClass=function(){return pn},pn.orientationIndex=function(t,e,n){return Be.orientationIndex(t,e,n)},pn.signedArea=function(){if(arguments[0]instanceof Array){var t=arguments[0];if(t.length<3)return 0;for(var e=0,n=t[0].x,r=1;r<t.length-1;r++){var i=t[r].x-n,o=t[r+1].y;e+=i*(t[r-1].y-o);}return e/2}if(Re(arguments[0],ze)){var s=arguments[0],a=s.size();if(a<3)return 0;var u=new we,l=new we,p=new we;s.getCoordinate(0,l),s.getCoordinate(1,p);var c=l.x;p.x-=c;for(var h=0,f=1;f<a-1;f++)u.y=l.y,l.x=p.x,l.y=p.y,s.getCoordinate(f+1,p),p.x-=c,h+=l.x*(u.y-p.y);return h/2}},pn.distanceLineLine=function(t,e,n,r){if(t.equals(e))return pn.distancePointLine(t,n,r);if(n.equals(r))return pn.distancePointLine(r,t,e);var i=!1;if(We.intersects(t,e,n,r)){var o=(e.x-t.x)*(r.y-n.y)-(e.y-t.y)*(r.x-n.x);if(0===o)i=!0;else{var s=(t.y-n.y)*(r.x-n.x)-(t.x-n.x)*(r.y-n.y),a=(t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y),u=a/o,l=s/o;(l<0||l>1||u<0||u>1)&&(i=!0);}}else i=!0;return i?De.min(pn.distancePointLine(t,n,r),pn.distancePointLine(e,n,r),pn.distancePointLine(n,t,e),pn.distancePointLine(r,t,e)):0},pn.isPointInRing=function(t,e){return pn.locatePointInRing(t,e)!==Oe.EXTERIOR},pn.computeLength=function(t){var e=t.size();if(e<=1)return 0;var n=0,r=new we;t.getCoordinate(0,r);for(var i=r.x,o=r.y,s=1;s<e;s++){t.getCoordinate(s,r);var a=r.x,u=r.y,l=a-i,p=u-o;n+=Math.sqrt(l*l+p*p),i=a,o=u;}return n},pn.isCCW=function(t){var e=t.length-1;if(e<3)throw new Ee("Ring has fewer than 4 points, so orientation cannot be determined");for(var n=t[0],r=0,i=1;i<=e;i++){var o=t[i];o.y>n.y&&(n=o,r=i);}var s=r;do{(s-=1)<0&&(s=e);}while(t[s].equals2D(n)&&s!==r);var a=r;do{a=(a+1)%e;}while(t[a].equals2D(n)&&a!==r);var u=t[s],l=t[a];if(u.equals2D(n)||l.equals2D(n)||u.equals2D(l))return !1;var p=pn.computeOrientation(u,n,l),c=!1;return c=0===p?u.x>l.x:p>0,c},pn.locatePointInRing=function(t,e){return ln.locatePointInRing(t,e)},pn.distancePointLinePerpendicular=function(t,e,n){var r=(n.x-e.x)*(n.x-e.x)+(n.y-e.y)*(n.y-e.y),i=((e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y))/r;return Math.abs(i)*Math.sqrt(r)},pn.computeOrientation=function(t,e,n){return pn.orientationIndex(t,e,n)},pn.distancePointLine=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(0===e.length)throw new Ee("Line array must contain at least one vertex");for(var n=t.distance(e[0]),r=0;r<e.length-1;r++){var i=pn.distancePointLine(t,e[r],e[r+1]);i<n&&(n=i);}return n}if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];if(s.x===a.x&&s.y===a.y)return o.distance(s);var u=(a.x-s.x)*(a.x-s.x)+(a.y-s.y)*(a.y-s.y),l=((o.x-s.x)*(a.x-s.x)+(o.y-s.y)*(a.y-s.y))/u;if(l<=0)return o.distance(s);if(l>=1)return o.distance(a);var p=((s.y-o.y)*(a.x-s.x)-(s.x-o.x)*(a.y-s.y))/u;return Math.abs(p)*Math.sqrt(u)}},pn.isOnLine=function(t,e){for(var n=new an,r=1;r<e.length;r++){var i=e[r-1],o=e[r];if(n.computeIntersection(t,i,o),n.hasIntersection())return !0}return !1},cn.CLOCKWISE.get=function(){return -1},cn.RIGHT.get=function(){return pn.CLOCKWISE},cn.COUNTERCLOCKWISE.get=function(){return 1},cn.LEFT.get=function(){return pn.COUNTERCLOCKWISE},cn.COLLINEAR.get=function(){return 0},cn.STRAIGHT.get=function(){return pn.COLLINEAR},Object.defineProperties(pn,cn);var hn=function(){};hn.prototype.filter=function(t){},hn.prototype.interfaces_=function(){return []},hn.prototype.getClass=function(){return hn};var fn=function(){var t=arguments[0];this._envelope=null,this._factory=null,this._SRID=null,this._userData=null,this._factory=t,this._SRID=t.getSRID();},gn={serialVersionUID:{configurable:!0},SORTINDEX_POINT:{configurable:!0},SORTINDEX_MULTIPOINT:{configurable:!0},SORTINDEX_LINESTRING:{configurable:!0},SORTINDEX_LINEARRING:{configurable:!0},SORTINDEX_MULTILINESTRING:{configurable:!0},SORTINDEX_POLYGON:{configurable:!0},SORTINDEX_MULTIPOLYGON:{configurable:!0},SORTINDEX_GEOMETRYCOLLECTION:{configurable:!0},geometryChangedFilter:{configurable:!0}};fn.prototype.isGeometryCollection=function(){return this.getSortIndex()===fn.SORTINDEX_GEOMETRYCOLLECTION},fn.prototype.getFactory=function(){return this._factory},fn.prototype.getGeometryN=function(t){return this},fn.prototype.getArea=function(){return 0},fn.prototype.isRectangle=function(){return !1},fn.prototype.equals=function(){if(arguments[0]instanceof fn){var t=arguments[0];return null!==t&&this.equalsTopo(t)}if(arguments[0]instanceof Object){var e=arguments[0];if(!(e instanceof fn))return !1;var n=e;return this.equalsExact(n)}},fn.prototype.equalsExact=function(t){
    return this===t||this.equalsExact(t,0)},fn.prototype.geometryChanged=function(){this.apply(fn.geometryChangedFilter);},fn.prototype.geometryChangedAction=function(){this._envelope=null;},fn.prototype.equalsNorm=function(t){return null!==t&&this.norm().equalsExact(t.norm())},fn.prototype.getLength=function(){return 0},fn.prototype.getNumGeometries=function(){return 1},fn.prototype.compareTo=function(){if(1===arguments.length){var t=arguments[0],e=t;return this.getSortIndex()!==e.getSortIndex()?this.getSortIndex()-e.getSortIndex():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(t)}if(2===arguments.length){var n=arguments[0],r=arguments[1];return this.getSortIndex()!==n.getSortIndex()?this.getSortIndex()-n.getSortIndex():this.isEmpty()&&n.isEmpty()?0:this.isEmpty()?-1:n.isEmpty()?1:this.compareToSameClass(n,r)}},fn.prototype.getUserData=function(){return this._userData},fn.prototype.getSRID=function(){return this._SRID},fn.prototype.getEnvelope=function(){return this.getFactory().toGeometry(this.getEnvelopeInternal())},fn.prototype.checkNotGeometryCollection=function(t){if(t.getSortIndex()===fn.SORTINDEX_GEOMETRYCOLLECTION)throw new Ee("This method does not support GeometryCollection arguments")},fn.prototype.equal=function(t,e,n){return 0===n?t.equals(e):t.distance(e)<=n},fn.prototype.norm=function(){var t=this.copy();return t.normalize(),t},fn.prototype.getPrecisionModel=function(){return this._factory.getPrecisionModel()},fn.prototype.getEnvelopeInternal=function(){return null===this._envelope&&(this._envelope=this.computeEnvelopeInternal()),new We(this._envelope)},fn.prototype.setSRID=function(t){this._SRID=t;},fn.prototype.setUserData=function(t){this._userData=t;},fn.prototype.compare=function(t,e){for(var n=t.iterator(),r=e.iterator();n.hasNext()&&r.hasNext();){var i=n.next(),o=r.next(),s=i.compareTo(o);if(0!==s)return s}return n.hasNext()?1:r.hasNext()?-1:0},fn.prototype.hashCode=function(){return this.getEnvelopeInternal().hashCode()},fn.prototype.isGeometryCollectionOrDerived=function(){return this.getSortIndex()===fn.SORTINDEX_GEOMETRYCOLLECTION||this.getSortIndex()===fn.SORTINDEX_MULTIPOINT||this.getSortIndex()===fn.SORTINDEX_MULTILINESTRING||this.getSortIndex()===fn.SORTINDEX_MULTIPOLYGON},fn.prototype.interfaces_=function(){return [be,Ne,b]},fn.prototype.getClass=function(){return fn},fn.hasNonEmptyElements=function(t){for(var e=0;e<t.length;e++)if(!t[e].isEmpty())return !0;return !1},fn.hasNullElements=function(t){for(var e=0;e<t.length;e++)if(null===t[e])return !0;return !1},gn.serialVersionUID.get=function(){return 0x799ea46522854c00},gn.SORTINDEX_POINT.get=function(){return 0},gn.SORTINDEX_MULTIPOINT.get=function(){return 1},gn.SORTINDEX_LINESTRING.get=function(){return 2},gn.SORTINDEX_LINEARRING.get=function(){return 3},gn.SORTINDEX_MULTILINESTRING.get=function(){return 4},gn.SORTINDEX_POLYGON.get=function(){return 5},gn.SORTINDEX_MULTIPOLYGON.get=function(){return 6},gn.SORTINDEX_GEOMETRYCOLLECTION.get=function(){return 7},gn.geometryChangedFilter.get=function(){return dn},Object.defineProperties(fn,gn);var dn=function(){};dn.interfaces_=function(){return [hn]},dn.filter=function(t){t.geometryChangedAction();};var yn=function(){};yn.prototype.filter=function(t){},yn.prototype.interfaces_=function(){return []},yn.prototype.getClass=function(){return yn};var _n=function(){},mn={Mod2BoundaryNodeRule:{configurable:!0},EndPointBoundaryNodeRule:{configurable:!0},MultiValentEndPointBoundaryNodeRule:{configurable:!0},MonoValentEndPointBoundaryNodeRule:{configurable:!0},MOD2_BOUNDARY_RULE:{configurable:!0},ENDPOINT_BOUNDARY_RULE:{configurable:!0},MULTIVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:!0},MONOVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:!0},OGC_SFS_BOUNDARY_RULE:{configurable:!0}};_n.prototype.isInBoundary=function(t){},_n.prototype.interfaces_=function(){return []},_n.prototype.getClass=function(){return _n},mn.Mod2BoundaryNodeRule.get=function(){return vn},mn.EndPointBoundaryNodeRule.get=function(){return En},mn.MultiValentEndPointBoundaryNodeRule.get=function(){return In},mn.MonoValentEndPointBoundaryNodeRule.get=function(){return xn},mn.MOD2_BOUNDARY_RULE.get=function(){return new vn},mn.ENDPOINT_BOUNDARY_RULE.get=function(){return new En},mn.MULTIVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new In},mn.MONOVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new xn},mn.OGC_SFS_BOUNDARY_RULE.get=function(){return _n.MOD2_BOUNDARY_RULE},Object.defineProperties(_n,mn);var vn=function(){};vn.prototype.isInBoundary=function(t){return t%2==1},vn.prototype.interfaces_=function(){return [_n]},vn.prototype.getClass=function(){return vn};var En=function(){};En.prototype.isInBoundary=function(t){return t>0},En.prototype.interfaces_=function(){return [_n]},En.prototype.getClass=function(){return En};var In=function(){};In.prototype.isInBoundary=function(t){return t>1},In.prototype.interfaces_=function(){return [_n]},In.prototype.getClass=function(){return In};var xn=function(){};xn.prototype.isInBoundary=function(t){return 1===t},xn.prototype.interfaces_=function(){return [_n]},xn.prototype.getClass=function(){return xn};var Nn=function(){};Nn.prototype.add=function(){},Nn.prototype.addAll=function(){},Nn.prototype.isEmpty=function(){},Nn.prototype.iterator=function(){},Nn.prototype.size=function(){},Nn.prototype.toArray=function(){},Nn.prototype.remove=function(){},C.prototype=new Error,C.prototype.name="IndexOutOfBoundsException";var bn=function(){};bn.prototype.hasNext=function(){},bn.prototype.next=function(){},bn.prototype.remove=function(){};var Cn=function(t){function e(){t.apply(this,arguments);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.get=function(){},e.prototype.set=function(){},e.prototype.isEmpty=function(){},e}(Nn);w.prototype=new Error,w.prototype.name="NoSuchElementException";var wn=function(t){function e(){t.call(this),this.array_=[],arguments[0]instanceof Nn&&this.addAll(arguments[0]);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.ensureCapacity=function(){},e.prototype.interfaces_=function(){return [t,Nn]},e.prototype.add=function(t){return 1===arguments.length?this.array_.push(t):this.array_.splice(arguments[0],arguments[1]),!0},e.prototype.clear=function(){this.array_=[];},e.prototype.addAll=function(t){for(var e=this,n=t.iterator();n.hasNext();)e.add(n.next());return !0},e.prototype.set=function(t,e){var n=this.array_[t];return this.array_[t]=e,n},e.prototype.iterator=function(){return new Sn(this)},e.prototype.get=function(t){if(t<0||t>=this.size())throw new C;return this.array_[t]},e.prototype.isEmpty=function(){return 0===this.array_.length},e.prototype.size=function(){return this.array_.length},e.prototype.toArray=function(){for(var t=this,e=[],n=0,r=this.array_.length;n<r;n++)e.push(t.array_[n]);return e},e.prototype.remove=function(t){for(var e=this,n=!1,r=0,i=this.array_.length;r<i;r++)if(e.array_[r]===t){e.array_.splice(r,1),n=!0;break}return n},e}(Cn),Sn=function(t){function e(e){t.call(this),this.arrayList_=e,this.position_=0;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.next=function(){if(this.position_===this.arrayList_.size())throw new w;return this.arrayList_.get(this.position_++)},e.prototype.hasNext=function(){return this.position_<this.arrayList_.size()},e.prototype.set=function(t){return this.arrayList_.set(this.position_-1,t)},e.prototype.remove=function(){this.arrayList_.remove(this.arrayList_.get(this.position_));},e}(bn),Ln=function(t){function e(){if(t.call(this),0===arguments.length);else if(1===arguments.length){var e=arguments[0];this.ensureCapacity(e.length),this.add(e,!0);}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this.ensureCapacity(n.length),this.add(n,r);}}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={coordArrayType:{configurable:!0}};return n.coordArrayType.get=function(){return new Array(0).fill(null)},e.prototype.getCoordinate=function(t){return this.get(t)},e.prototype.addAll=function(){var e=this;if(2===arguments.length){for(var n=arguments[0],r=arguments[1],i=!1,o=n.iterator();o.hasNext();)e.add(o.next(),r),i=!0;return i}return t.prototype.addAll.apply(this,arguments)},e.prototype.clone=function(){for(var e=this,n=t.prototype.clone.call(this),r=0;r<this.size();r++)n.add(r,e.get(r).copy());return n},e.prototype.toCoordinateArray=function(){return this.toArray(e.coordArrayType)},e.prototype.add=function(){var e=this;if(1===arguments.length){var n=arguments[0];t.prototype.add.call(this,n);}else if(2===arguments.length){if(arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){var r=arguments[0],i=arguments[1];return this.add(r,i,!0),!0}if(arguments[0]instanceof we&&"boolean"==typeof arguments[1]){var o=arguments[0],s=arguments[1];if(!s&&this.size()>=1){var a=this.get(this.size()-1);if(a.equals2D(o))return null}t.prototype.add.call(this,o);}else if(arguments[0]instanceof Object&&"boolean"==typeof arguments[1]){var u=arguments[0],l=arguments[1];return this.add(u,l),!0}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){var p=arguments[0],c=arguments[1],h=arguments[2];if(h)for(var f=0;f<p.length;f++)e.add(p[f],c);else for(var g=p.length-1;g>=0;g--)e.add(p[g],c);return !0}if("boolean"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof we){var d=arguments[0],y=arguments[1],_=arguments[2];if(!_){var m=this.size();if(m>0){if(d>0){var v=this.get(d-1);if(v.equals2D(y))return null}if(d<m){var E=this.get(d);if(E.equals2D(y))return null}}}t.prototype.add.call(this,d,y);}}else if(4===arguments.length){var I=arguments[0],x=arguments[1],N=arguments[2],b=arguments[3],C=1;N>b&&(C=-1);for(var w=N;w!==b;w+=C)e.add(I[w],x);return !0}},e.prototype.closeRing=function(){this.size()>0&&this.add(new we(this.get(0)),!1);},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},Object.defineProperties(e,n),e}(wn),Pn=function(){},On={ForwardComparator:{configurable:!0},BidirectionalComparator:{configurable:!0},coordArrayType:{configurable:!0}};On.ForwardComparator.get=function(){return Tn},On.BidirectionalComparator.get=function(){return Rn},On.coordArrayType.get=function(){return new Array(0).fill(null)},Pn.prototype.interfaces_=function(){return []},Pn.prototype.getClass=function(){return Pn},Pn.isRing=function(t){return !(t.length<4)&&!!t[0].equals2D(t[t.length-1])},Pn.ptNotInList=function(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(Pn.indexOf(r,e)<0)return r}return null},Pn.scroll=function(t,e){var n=Pn.indexOf(e,t);if(n<0)return null;var r=new Array(t.length).fill(null);Ye.arraycopy(t,n,r,0,t.length-n),Ye.arraycopy(t,0,r,t.length-n,n),Ye.arraycopy(r,0,t,0,t.length);},Pn.equals=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(t===e)return !0;if(null===t||null===e)return !1;if(t.length!==e.length)return !1;for(var n=0;n<t.length;n++)if(!t[n].equals(e[n]))return !1;return !0}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];if(r===i)return !0;if(null===r||null===i)return !1;if(r.length!==i.length)return !1;for(var s=0;s<r.length;s++)if(0!==o.compare(r[s],i[s]))return !1;return !0}},Pn.intersection=function(t,e){for(var n=new Ln,r=0;r<t.length;r++)e.intersects(t[r])&&n.add(t[r],!0);return n.toCoordinateArray()},Pn.hasRepeatedPoints=function(t){for(var e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return !0;return !1},Pn.removeRepeatedPoints=function(t){return Pn.hasRepeatedPoints(t)?new Ln(t,!1).toCoordinateArray():t},Pn.reverse=function(t){for(var e=t.length-1,n=Math.trunc(e/2),r=0;r<=n;r++){var i=t[r];t[r]=t[e-r],t[e-r]=i;}},Pn.removeNull=function(t){for(var e=0,n=0;n<t.length;n++)null!==t[n]&&e++;var r=new Array(e).fill(null);if(0===e)return r;for(var i=0,o=0;o<t.length;o++)null!==t[o]&&(r[i++]=t[o]);return r},Pn.copyDeep=function(){if(1===arguments.length){for(var t=arguments[0],e=new Array(t.length).fill(null),n=0;n<t.length;n++)e[n]=new we(t[n]);return e}if(5===arguments.length)for(var r=arguments[0],i=arguments[1],o=arguments[2],s=arguments[3],a=arguments[4],u=0;u<a;u++)o[s+u]=new we(r[i+u]);},Pn.isEqualReversed=function(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=e[t.length-n-1];if(0!==r.compareTo(i))return !1}return !0},Pn.envelope=function(t){for(var e=new We,n=0;n<t.length;n++)e.expandToInclude(t[n]);return e},Pn.toCoordinateArray=function(t){return t.toArray(Pn.coordArrayType)},Pn.atLeastNCoordinatesOrNothing=function(t,e){return e.length>=t?e:[]},Pn.indexOf=function(t,e){for(var n=0;n<e.length;n++)if(t.equals(e[n]))return n;return -1},Pn.increasingDirection=function(t){for(var e=0;e<Math.trunc(t.length/2);e++){var n=t.length-1-e,r=t[e].compareTo(t[n]);if(0!==r)return r}return 1},Pn.compare=function(t,e){for(var n=0;n<t.length&&n<e.length;){var r=t[n].compareTo(e[n]);if(0!==r)return r;n++;}return n<e.length?-1:n<t.length?1:0},Pn.minCoordinate=function(t){for(var e=null,n=0;n<t.length;n++)(null===e||e.compareTo(t[n])>0)&&(e=t[n]);return e},Pn.extract=function(t,e,n){e=De.clamp(e,0,t.length),n=De.clamp(n,-1,t.length);var r=n-e+1;n<0&&(r=0),e>=t.length&&(r=0),n<e&&(r=0);var i=new Array(r).fill(null);if(0===r)return i;for(var o=0,s=e;s<=n;s++)i[o++]=t[s];return i},Object.defineProperties(Pn,On);var Tn=function(){};Tn.prototype.compare=function(t,e){return Pn.compare(t,e)},Tn.prototype.interfaces_=function(){return [Ce]},Tn.prototype.getClass=function(){return Tn};var Rn=function(){};Rn.prototype.compare=function(t,e){var n=t,r=e;if(n.length<r.length)return -1;if(n.length>r.length)return 1;if(0===n.length)return 0;var i=Pn.compare(n,r);return Pn.isEqualReversed(n,r)?0:i},Rn.prototype.OLDcompare=function(t,e){var n=t,r=e;if(n.length<r.length)return -1;if(n.length>r.length)return 1;if(0===n.length)return 0;for(var i=Pn.increasingDirection(n),o=Pn.increasingDirection(r),s=i>0?0:n.length-1,a=o>0?0:n.length-1,u=0;u<n.length;u++){var l=n[s].compareTo(r[a]);if(0!==l)return l;s+=i,a+=o;}return 0},Rn.prototype.interfaces_=function(){return [Ce]},Rn.prototype.getClass=function(){return Rn};var Dn=function(){};Dn.prototype.get=function(){},Dn.prototype.put=function(){},Dn.prototype.size=function(){},Dn.prototype.values=function(){},Dn.prototype.entrySet=function(){};var Mn=function(t){function e(){t.apply(this,arguments);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Dn);S.prototype=new Error,S.prototype.name="OperationNotSupported",L.prototype=new Nn,L.prototype.contains=function(){};var An=function(t){function e(){t.call(this),this.array_=[],arguments[0]instanceof Nn&&this.addAll(arguments[0]);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contains=function(t){for(var e=this,n=0,r=this.array_.length;n<r;n++){if(e.array_[n]===t)return !0}return !1},e.prototype.add=function(t){return !this.contains(t)&&(this.array_.push(t),!0)},e.prototype.addAll=function(t){for(var e=this,n=t.iterator();n.hasNext();)e.add(n.next());return !0},e.prototype.remove=function(t){throw new Error},e.prototype.size=function(){return this.array_.length},e.prototype.isEmpty=function(){return 0===this.array_.length},e.prototype.toArray=function(){for(var t=this,e=[],n=0,r=this.array_.length;n<r;n++)e.push(t.array_[n]);return e},e.prototype.iterator=function(){return new Fn(this)},e}(L),Fn=function(t){function e(e){t.call(this),this.hashSet_=e,this.position_=0;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.next=function(){if(this.position_===this.hashSet_.size())throw new w;return this.hashSet_.array_[this.position_++]},e.prototype.hasNext=function(){return this.position_<this.hashSet_.size()},e.prototype.remove=function(){throw new S},e}(bn),Gn=0,qn=1;M.prototype=new Mn,M.prototype.get=function(t){for(var e=this.root_;null!==e;){var n=t.compareTo(e.key);if(n<0)e=e.left;else{if(!(n>0))return e.value;e=e.right;}}return null},M.prototype.put=function(t,e){if(null===this.root_)return this.root_={key:t,value:e,left:null,right:null,parent:null,color:Gn,getValue:function(){return this.value},getKey:function(){return this.key}},this.size_=1,null;var n,r,i=this.root_;do{if(n=i,(r=t.compareTo(i.key))<0)i=i.left;else{if(!(r>0)){var o=i.value;return i.value=e,o}i=i.right;}}while(null!==i);var s={key:t,left:null,right:null,value:e,parent:n,color:Gn,getValue:function(){return this.value},getKey:function(){return this.key}};return r<0?n.left=s:n.right=s,this.fixAfterInsertion(s),this.size_++,null},M.prototype.fixAfterInsertion=function(t){var e=this;for(t.color=qn;null!=t&&t!==this.root_&&t.parent.color===qn;)if(O(t)===R(O(O(t)))){var n=D(O(O(t)));P(n)===qn?(T(O(t),Gn),T(n,Gn),T(O(O(t)),qn),t=O(O(t))):(t===D(O(t))&&(t=O(t),e.rotateLeft(t)),T(O(t),Gn),T(O(O(t)),qn),e.rotateRight(O(O(t))));}else{var r=R(O(O(t)));P(r)===qn?(T(O(t),Gn),T(r,Gn),T(O(O(t)),qn),t=O(O(t))):(t===R(O(t))&&(t=O(t),e.rotateRight(t)),T(O(t),Gn),T(O(O(t)),qn),e.rotateLeft(O(O(t))));}this.root_.color=Gn;},M.prototype.values=function(){var t=new wn,e=this.getFirstEntry();if(null!==e)for(t.add(e.value);null!==(e=M.successor(e));)t.add(e.value);return t},M.prototype.entrySet=function(){var t=new An,e=this.getFirstEntry();if(null!==e)for(t.add(e);null!==(e=M.successor(e));)t.add(e);return t},M.prototype.rotateLeft=function(t){if(null!=t){var e=t.right;t.right=e.left,null!=e.left&&(e.left.parent=t),e.parent=t.parent,null===t.parent?this.root_=e:t.parent.left===t?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e;}},M.prototype.rotateRight=function(t){if(null!=t){var e=t.left;t.left=e.right,null!=e.right&&(e.right.parent=t),e.parent=t.parent,null===t.parent?this.root_=e:t.parent.right===t?t.parent.right=e:t.parent.left=e,e.right=t,t.parent=e;}},M.prototype.getFirstEntry=function(){var t=this.root_;if(null!=t)for(;null!=t.left;)t=t.left;return t},M.successor=function(t){if(null===t)return null;if(null!==t.right){for(var e=t.right;null!==e.left;)e=e.left;return e}for(var n=t.parent,r=t;null!==n&&r===n.right;)r=n,n=n.parent;return n},M.prototype.size=function(){return this.size_};var kn=function(){};kn.prototype.interfaces_=function(){return []},kn.prototype.getClass=function(){return kn},A.prototype=new L,F.prototype=new A,F.prototype.contains=function(t){for(var e=this,n=0,r=this.array_.length;n<r;n++){if(0===e.array_[n].compareTo(t))return !0}return !1},F.prototype.add=function(t){var e=this;if(this.contains(t))return !1;for(var n=0,r=this.array_.length;n<r;n++){if(1===e.array_[n].compareTo(t))return e.array_.splice(n,0,t),!0}return this.array_.push(t),!0},F.prototype.addAll=function(t){for(var e=this,n=t.iterator();n.hasNext();)e.add(n.next());return !0},F.prototype.remove=function(t){throw new S},F.prototype.size=function(){return this.array_.length},F.prototype.isEmpty=function(){return 0===this.array_.length},F.prototype.toArray=function(){for(var t=this,e=[],n=0,r=this.array_.length;n<r;n++)e.push(t.array_[n]);return e},F.prototype.iterator=function(){return new Bn(this)};var Bn=function(t){this.treeSet_=t,this.position_=0;};Bn.prototype.next=function(){if(this.position_===this.treeSet_.size())throw new w;return this.treeSet_.array_[this.position_++]},Bn.prototype.hasNext=function(){return this.position_<this.treeSet_.size()},Bn.prototype.remove=function(){throw new S};var Vn=function(){};Vn.sort=function(){var t,e,n,r,i=arguments[0];if(1===arguments.length)r=function(t,e){return t.compareTo(e)},i.sort(r);else if(2===arguments.length)n=arguments[1],r=function(t,e){return n.compare(t,e)},i.sort(r);else if(3===arguments.length){e=i.slice(arguments[1],arguments[2]),e.sort();var o=i.slice(0,arguments[1]).concat(e,i.slice(arguments[2],i.length));for(i.splice(0,i.length),t=0;t<o.length;t++)i.push(o[t]);}else if(4===arguments.length)for(e=i.slice(arguments[1],arguments[2]),n=arguments[3],r=function(t,e){return n.compare(t,e)},e.sort(r),o=i.slice(0,arguments[1]).concat(e,i.slice(arguments[2],i.length)),i.splice(0,i.length),t=0;t<o.length;t++)i.push(o[t]);},Vn.asList=function(t){for(var e=new wn,n=0,r=t.length;n<r;n++)e.add(t[n]);return e};var zn=function(){},Un={P:{configurable:!0},L:{configurable:!0},A:{configurable:!0},FALSE:{configurable:!0},TRUE:{configurable:!0},DONTCARE:{configurable:!0},SYM_FALSE:{configurable:!0},SYM_TRUE:{configurable:!0},SYM_DONTCARE:{configurable:!0},SYM_P:{configurable:!0},SYM_L:{configurable:!0},SYM_A:{configurable:!0}};Un.P.get=function(){return 0},Un.L.get=function(){return 1},Un.A.get=function(){return 2},Un.FALSE.get=function(){return -1},Un.TRUE.get=function(){return -2},Un.DONTCARE.get=function(){return -3},Un.SYM_FALSE.get=function(){return "F"},Un.SYM_TRUE.get=function(){return "T"},Un.SYM_DONTCARE.get=function(){return "*"},Un.SYM_P.get=function(){return "0"},Un.SYM_L.get=function(){return "1"},Un.SYM_A.get=function(){return "2"},zn.prototype.interfaces_=function(){return []},zn.prototype.getClass=function(){return zn},zn.toDimensionSymbol=function(t){switch(t){case zn.FALSE:return zn.SYM_FALSE;case zn.TRUE:return zn.SYM_TRUE;case zn.DONTCARE:return zn.SYM_DONTCARE;case zn.P:return zn.SYM_P;case zn.L:return zn.SYM_L;case zn.A:return zn.SYM_A}throw new Ee("Unknown dimension value: "+t)},zn.toDimensionValue=function(t){switch(Ge.toUpperCase(t)){case zn.SYM_FALSE:return zn.FALSE;case zn.SYM_TRUE:return zn.TRUE;case zn.SYM_DONTCARE:return zn.DONTCARE;case zn.SYM_P:return zn.P;case zn.SYM_L:return zn.L;case zn.SYM_A:return zn.A}throw new Ee("Unknown dimension symbol: "+t)},Object.defineProperties(zn,Un);var Xn=function(){};Xn.prototype.filter=function(t){},Xn.prototype.interfaces_=function(){return []},Xn.prototype.getClass=function(){return Xn};var jn=function(){};jn.prototype.filter=function(t,e){},jn.prototype.isDone=function(){},jn.prototype.isGeometryChanged=function(){},jn.prototype.interfaces_=function(){return []},jn.prototype.getClass=function(){return jn};var Yn=function(t){function e(e,n){if(t.call(this,n),this._geometries=e||[],t.hasNullElements(this._geometries))throw new Ee("geometries must not contain null elements")}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){for(var t=this,e=new We,n=0;n<this._geometries.length;n++)e.expandToInclude(t._geometries[n].getEnvelopeInternal());return e},e.prototype.getGeometryN=function(t){return this._geometries[t]},e.prototype.getSortIndex=function(){return t.SORTINDEX_GEOMETRYCOLLECTION},e.prototype.getCoordinates=function(){for(var t=this,e=new Array(this.getNumPoints()).fill(null),n=-1,r=0;r<this._geometries.length;r++)for(var i=t._geometries[r].getCoordinates(),o=0;o<i.length;o++)n++,e[n]=i[o];return e},e.prototype.getArea=function(){for(var t=this,e=0,n=0;n<this._geometries.length;n++)e+=t._geometries[n].getArea();return e},e.prototype.equalsExact=function(){var e=this;if(2===arguments.length){var n=arguments[0],r=arguments[1];if(!this.isEquivalentClass(n))return !1;var i=n;if(this._geometries.length!==i._geometries.length)return !1;for(var o=0;o<this._geometries.length;o++)if(!e._geometries[o].equalsExact(i._geometries[o],r))return !1;return !0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){for(var t=this,e=0;e<this._geometries.length;e++)t._geometries[e].normalize();Vn.sort(this._geometries);},e.prototype.getCoordinate=function(){return this.isEmpty()?null:this._geometries[0].getCoordinate()},e.prototype.getBoundaryDimension=function(){for(var t=this,e=zn.FALSE,n=0;n<this._geometries.length;n++)e=Math.max(e,t._geometries[n].getBoundaryDimension());return e},e.prototype.getDimension=function(){for(var t=this,e=zn.FALSE,n=0;n<this._geometries.length;n++)e=Math.max(e,t._geometries[n].getDimension());return e},e.prototype.getLength=function(){for(var t=this,e=0,n=0;n<this._geometries.length;n++)e+=t._geometries[n].getLength();return e},e.prototype.getNumPoints=function(){for(var t=this,e=0,n=0;n<this._geometries.length;n++)e+=t._geometries[n].getNumPoints();return e},e.prototype.getNumGeometries=function(){return this._geometries.length},e.prototype.reverse=function(){for(var t=this,e=this._geometries.length,n=new Array(e).fill(null),r=0;r<this._geometries.length;r++)n[r]=t._geometries[r].reverse();return this.getFactory().createGeometryCollection(n)},e.prototype.compareToSameClass=function(){var t=this;if(1===arguments.length){var e=arguments[0],n=new F(Vn.asList(this._geometries)),r=new F(Vn.asList(e._geometries));return this.compare(n,r)}if(2===arguments.length){for(var i=arguments[0],o=arguments[1],s=i,a=this.getNumGeometries(),u=s.getNumGeometries(),l=0;l<a&&l<u;){var p=t.getGeometryN(l),c=s.getGeometryN(l),h=p.compareToSameClass(c,o);if(0!==h)return h;l++;}return l<a?1:l<u?-1:0}},e.prototype.apply=function(){var t=this;if(Re(arguments[0],yn))for(var e=arguments[0],n=0;n<this._geometries.length;n++)t._geometries[n].apply(e);else if(Re(arguments[0],jn)){var r=arguments[0];if(0===this._geometries.length)return null;for(var i=0;i<this._geometries.length&&(t._geometries[i].apply(r),!r.isDone());i++);r.isGeometryChanged()&&this.geometryChanged();}else if(Re(arguments[0],Xn)){var o=arguments[0];o.filter(this);for(var s=0;s<this._geometries.length;s++)t._geometries[s].apply(o);}else if(Re(arguments[0],hn)){var a=arguments[0];a.filter(this);for(var u=0;u<this._geometries.length;u++)t._geometries[u].apply(a);}},e.prototype.getBoundary=function(){return this.checkNotGeometryCollection(this),rn.shouldNeverReachHere(),null},e.prototype.clone=function(){var e=this,n=t.prototype.clone.call(this);n._geometries=new Array(this._geometries.length).fill(null);for(var r=0;r<this._geometries.length;r++)n._geometries[r]=e._geometries[r].clone();return n},e.prototype.getGeometryType=function(){return "GeometryCollection"},e.prototype.copy=function(){for(var t=this,n=new Array(this._geometries.length).fill(null),r=0;r<n.length;r++)n[r]=t._geometries[r].copy();return new e(n,this._factory)},e.prototype.isEmpty=function(){for(var t=this,e=0;e<this._geometries.length;e++)if(!t._geometries[e].isEmpty())return !1;return !0},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return -0x4f07bcb1f857d800},Object.defineProperties(e,n),e}(fn),Hn=function(t){function e(){t.apply(this,arguments);}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return fn.SORTINDEX_MULTILINESTRING},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return !!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return this.isClosed()?zn.FALSE:0},e.prototype.isClosed=function(){var t=this;if(this.isEmpty())return !1;for(var e=0;e<this._geometries.length;e++)if(!t._geometries[e].isClosed())return !1;return !0},e.prototype.getDimension=function(){return 1},e.prototype.reverse=function(){for(var t=this,e=this._geometries.length,n=new Array(e).fill(null),r=0;r<this._geometries.length;r++)n[e-1-r]=t._geometries[r].reverse();return this.getFactory().createMultiLineString(n)},e.prototype.getBoundary=function(){return new Wn(this).getBoundary()},e.prototype.getGeometryType=function(){return "MultiLineString"},e.prototype.copy=function(){for(var t=this,n=new Array(this._geometries.length).fill(null),r=0;r<n.length;r++)n[r]=t._geometries[r].copy();return new e(n,this._factory)},e.prototype.interfaces_=function(){return [kn]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x7155d2ab4afa8000},Object.defineProperties(e,n),e}(Yn),Wn=function(){if(this._geom=null,this._geomFact=null,this._bnRule=null,this._endpointMap=null,1===arguments.length){var t=arguments[0],e=_n.MOD2_BOUNDARY_RULE;this._geom=t,this._geomFact=t.getFactory(),this._bnRule=e;}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this._geom=n,this._geomFact=n.getFactory(),this._bnRule=r;}};Wn.prototype.boundaryMultiLineString=function(t){if(this._geom.isEmpty())return this.getEmptyMultiPoint();var e=this.computeBoundaryCoordinates(t);return 1===e.length?this._geomFact.createPoint(e[0]):this._geomFact.createMultiPointFromCoords(e)},Wn.prototype.getBoundary=function(){return this._geom instanceof tr?this.boundaryLineString(this._geom):this._geom instanceof Hn?this.boundaryMultiLineString(this._geom):this._geom.getBoundary()},Wn.prototype.boundaryLineString=function(t){if(this._geom.isEmpty())return this.getEmptyMultiPoint();if(t.isClosed()){return this._bnRule.isInBoundary(2)?t.getStartPoint():this._geomFact.createMultiPoint()}return this._geomFact.createMultiPoint([t.getStartPoint(),t.getEndPoint()])},Wn.prototype.getEmptyMultiPoint=function(){return this._geomFact.createMultiPoint()},Wn.prototype.computeBoundaryCoordinates=function(t){var e=this,n=new wn;this._endpointMap=new M;for(var r=0;r<t.getNumGeometries();r++){var i=t.getGeometryN(r);0!==i.getNumPoints()&&(e.addEndpoint(i.getCoordinateN(0)),e.addEndpoint(i.getCoordinateN(i.getNumPoints()-1)));}for(var o=this._endpointMap.entrySet().iterator();o.hasNext();){var s=o.next(),a=s.getValue(),u=a.count;e._bnRule.isInBoundary(u)&&n.add(s.getKey());}return Pn.toCoordinateArray(n)},Wn.prototype.addEndpoint=function(t){var e=this._endpointMap.get(t);null===e&&(e=new Kn,this._endpointMap.put(t,e)),e.count++;},Wn.prototype.interfaces_=function(){return []},Wn.prototype.getClass=function(){return Wn},Wn.getBoundary=function(){if(1===arguments.length){var t=arguments[0];return new Wn(t).getBoundary()}if(2===arguments.length){var e=arguments[0],n=arguments[1];return new Wn(e,n).getBoundary()}};var Kn=function(){this.count=null;};Kn.prototype.interfaces_=function(){return []},Kn.prototype.getClass=function(){return Kn};var Jn=function(){},Qn=function(){},Zn={NEWLINE:{configurable:!0},SIMPLE_ORDINATE_FORMAT:{configurable:!0}};Qn.prototype.interfaces_=function(){return []},Qn.prototype.getClass=function(){return Qn},Qn.chars=function(t,e){for(var n=new Array(e).fill(null),r=0;r<e;r++)n[r]=t;return String(n)},Qn.getStackTrace=function(){if(1===arguments.length){var t=arguments[0],e=new k,n=new G(e);return t.printStackTrace(n),e.toString()}if(2===arguments.length){for(var r=arguments[0],i=arguments[1],o="",s=new q(Qn.getStackTrace(r)),a=new V(s),u=0;u<i;u++)try{o+=a.readLine()+Qn.NEWLINE;}catch(t){if(!(t instanceof B))throw t;rn.shouldNeverReachHere();}return o}},Qn.split=function(t,e){for(var n=e.length,r=new wn,i=""+t,o=i.indexOf(e);o>=0;){var s=i.substring(0,o);r.add(s),i=i.substring(o+n),o=i.indexOf(e);}i.length>0&&r.add(i);for(var a=new Array(r.size()).fill(null),u=0;u<a.length;u++)a[u]=r.get(u);return a},Qn.toString=function(){if(1===arguments.length){var t=arguments[0];return Qn.SIMPLE_ORDINATE_FORMAT.format(t)}},Qn.spaces=function(t){return Qn.chars(" ",t)},Zn.NEWLINE.get=function(){return Ye.getProperty("line.separator")},Zn.SIMPLE_ORDINATE_FORMAT.get=function(){return new Jn("0.#")},Object.defineProperties(Qn,Zn);var $n=function(){};$n.prototype.interfaces_=function(){return []},$n.prototype.getClass=function(){return $n},$n.copyCoord=function(t,e,n,r){for(var i=Math.min(t.getDimension(),n.getDimension()),o=0;o<i;o++)n.setOrdinate(r,o,t.getOrdinate(e,o));},$n.isRing=function(t){var e=t.size();return 0===e||!(e<=3)&&(t.getOrdinate(0,ze.X)===t.getOrdinate(e-1,ze.X)&&t.getOrdinate(0,ze.Y)===t.getOrdinate(e-1,ze.Y))},$n.isEqual=function(t,e){var n=t.size();if(n!==e.size())return !1;for(var r=Math.min(t.getDimension(),e.getDimension()),i=0;i<n;i++)for(var o=0;o<r;o++){var s=t.getOrdinate(i,o),a=e.getOrdinate(i,o);if(t.getOrdinate(i,o)!==e.getOrdinate(i,o)&&(!Ie.isNaN(s)||!Ie.isNaN(a)))return !1}return !0},
    $n.extend=function(t,e,n){var r=t.create(n,e.getDimension()),i=e.size();if($n.copy(e,0,r,0,i),i>0)for(var o=i;o<n;o++)$n.copy(e,i-1,r,o,1);return r},$n.reverse=function(t){for(var e=t.size()-1,n=Math.trunc(e/2),r=0;r<=n;r++)$n.swap(t,r,e-r);},$n.swap=function(t,e,n){if(e===n)return null;for(var r=0;r<t.getDimension();r++){var i=t.getOrdinate(e,r);t.setOrdinate(e,r,t.getOrdinate(n,r)),t.setOrdinate(n,r,i);}},$n.copy=function(t,e,n,r,i){for(var o=0;o<i;o++)$n.copyCoord(t,e+o,n,r+o);},$n.toString=function(){if(1===arguments.length){var t=arguments[0],e=t.size();if(0===e)return "()";var n=t.getDimension(),r=new Ae;r.append("(");for(var i=0;i<e;i++){i>0&&r.append(" ");for(var o=0;o<n;o++)o>0&&r.append(","),r.append(Qn.toString(t.getOrdinate(i,o)));}return r.append(")"),r.toString()}},$n.ensureValidRing=function(t,e){var n=e.size();return 0===n?e:n<=3?$n.createClosedRing(t,e,4):e.getOrdinate(0,ze.X)===e.getOrdinate(n-1,ze.X)&&e.getOrdinate(0,ze.Y)===e.getOrdinate(n-1,ze.Y)?e:$n.createClosedRing(t,e,n+1)},$n.createClosedRing=function(t,e,n){var r=t.create(n,e.getDimension()),i=e.size();$n.copy(e,0,r,0,i);for(var o=i;o<n;o++)$n.copy(e,0,r,o,1);return r};var tr=function(t){function e(e,n){t.call(this,n),this._points=null,this.init(e);}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){return this.isEmpty()?new We:this._points.expandEnvelope(new We)},e.prototype.isRing=function(){return this.isClosed()&&this.isSimple()},e.prototype.getSortIndex=function(){return t.SORTINDEX_LINESTRING},e.prototype.getCoordinates=function(){return this._points.toCoordinateArray()},e.prototype.equalsExact=function(){var e=this;if(2===arguments.length){var n=arguments[0],r=arguments[1];if(!this.isEquivalentClass(n))return !1;var i=n;if(this._points.size()!==i._points.size())return !1;for(var o=0;o<this._points.size();o++)if(!e.equal(e._points.getCoordinate(o),i._points.getCoordinate(o),r))return !1;return !0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){for(var t=this,e=0;e<Math.trunc(this._points.size()/2);e++){var n=t._points.size()-1-e;if(!t._points.getCoordinate(e).equals(t._points.getCoordinate(n)))return t._points.getCoordinate(e).compareTo(t._points.getCoordinate(n))>0&&$n.reverse(t._points),null}},e.prototype.getCoordinate=function(){return this.isEmpty()?null:this._points.getCoordinate(0)},e.prototype.getBoundaryDimension=function(){return this.isClosed()?zn.FALSE:0},e.prototype.isClosed=function(){return !this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))},e.prototype.getEndPoint=function(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)},e.prototype.getDimension=function(){return 1},e.prototype.getLength=function(){return pn.computeLength(this._points)},e.prototype.getNumPoints=function(){return this._points.size()},e.prototype.reverse=function(){var t=this._points.copy();return $n.reverse(t),this.getFactory().createLineString(t)},e.prototype.compareToSameClass=function(){var t=this;if(1===arguments.length){for(var e=arguments[0],n=e,r=0,i=0;r<this._points.size()&&i<n._points.size();){var o=t._points.getCoordinate(r).compareTo(n._points.getCoordinate(i));if(0!==o)return o;r++,i++;}return r<this._points.size()?1:i<n._points.size()?-1:0}if(2===arguments.length){var s=arguments[0],a=arguments[1],u=s;return a.compare(this._points,u._points)}},e.prototype.apply=function(){var t=this;if(Re(arguments[0],yn))for(var e=arguments[0],n=0;n<this._points.size();n++)e.filter(t._points.getCoordinate(n));else if(Re(arguments[0],jn)){var r=arguments[0];if(0===this._points.size())return null;for(var i=0;i<this._points.size()&&(r.filter(t._points,i),!r.isDone());i++);r.isGeometryChanged()&&this.geometryChanged();}else if(Re(arguments[0],Xn)){var o=arguments[0];o.filter(this);}else if(Re(arguments[0],hn)){var s=arguments[0];s.filter(this);}},e.prototype.getBoundary=function(){return new Wn(this).getBoundary()},e.prototype.isEquivalentClass=function(t){return t instanceof e},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e._points=this._points.clone(),e},e.prototype.getCoordinateN=function(t){return this._points.getCoordinate(t)},e.prototype.getGeometryType=function(){return "LineString"},e.prototype.copy=function(){return new e(this._points.copy(),this._factory)},e.prototype.getCoordinateSequence=function(){return this._points},e.prototype.isEmpty=function(){return 0===this._points.size()},e.prototype.init=function(t){if(null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),1===t.size())throw new Ee("Invalid number of points in LineString (found "+t.size()+" - must be 0 or >= 2)");this._points=t;},e.prototype.isCoordinate=function(t){for(var e=this,n=0;n<this._points.size();n++)if(e._points.getCoordinate(n).equals(t))return !0;return !1},e.prototype.getStartPoint=function(){return this.isEmpty()?null:this.getPointN(0)},e.prototype.getPointN=function(t){return this.getFactory().createPoint(this._points.getCoordinate(t))},e.prototype.interfaces_=function(){return [kn]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x2b2b51ba435c8e00},Object.defineProperties(e,n),e}(fn),er=function(){};er.prototype.interfaces_=function(){return []},er.prototype.getClass=function(){return er};var nr=function(t){function e(e,n){t.call(this,n),this._coordinates=e||null,this.init(this._coordinates);}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){if(this.isEmpty())return new We;var t=new We;return t.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0)),t},e.prototype.getSortIndex=function(){return t.SORTINDEX_POINT},e.prototype.getCoordinates=function(){return this.isEmpty()?[]:[this.getCoordinate()]},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return !!this.isEquivalentClass(e)&&(!(!this.isEmpty()||!e.isEmpty())||this.isEmpty()===e.isEmpty()&&this.equal(e.getCoordinate(),this.getCoordinate(),n))}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){},e.prototype.getCoordinate=function(){return 0!==this._coordinates.size()?this._coordinates.getCoordinate(0):null},e.prototype.getBoundaryDimension=function(){return zn.FALSE},e.prototype.getDimension=function(){return 0},e.prototype.getNumPoints=function(){return this.isEmpty()?0:1},e.prototype.reverse=function(){return this.copy()},e.prototype.getX=function(){if(null===this.getCoordinate())throw new Error("getX called on empty Point");return this.getCoordinate().x},e.prototype.compareToSameClass=function(){if(1===arguments.length){var t=arguments[0],e=t;return this.getCoordinate().compareTo(e.getCoordinate())}if(2===arguments.length){var n=arguments[0],r=arguments[1],i=n;return r.compare(this._coordinates,i._coordinates)}},e.prototype.apply=function(){if(Re(arguments[0],yn)){var t=arguments[0];if(this.isEmpty())return null;t.filter(this.getCoordinate());}else if(Re(arguments[0],jn)){var e=arguments[0];if(this.isEmpty())return null;e.filter(this._coordinates,0),e.isGeometryChanged()&&this.geometryChanged();}else if(Re(arguments[0],Xn)){var n=arguments[0];n.filter(this);}else if(Re(arguments[0],hn)){var r=arguments[0];r.filter(this);}},e.prototype.getBoundary=function(){return this.getFactory().createGeometryCollection(null)},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e._coordinates=this._coordinates.clone(),e},e.prototype.getGeometryType=function(){return "Point"},e.prototype.copy=function(){return new e(this._coordinates.copy(),this._factory)},e.prototype.getCoordinateSequence=function(){return this._coordinates},e.prototype.getY=function(){if(null===this.getCoordinate())throw new Error("getY called on empty Point");return this.getCoordinate().y},e.prototype.isEmpty=function(){return 0===this._coordinates.size()},e.prototype.init=function(t){null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),rn.isTrue(t.size()<=1),this._coordinates=t;},e.prototype.isSimple=function(){return !0},e.prototype.interfaces_=function(){return [er]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x44077bad161cbc00},Object.defineProperties(e,n),e}(fn),rr=function(){};rr.prototype.interfaces_=function(){return []},rr.prototype.getClass=function(){return rr};var ir=function(t){function e(e,n,r){if(t.call(this,r),this._shell=null,this._holes=null,null===e&&(e=this.getFactory().createLinearRing()),null===n&&(n=[]),t.hasNullElements(n))throw new Ee("holes must not contain null elements");if(e.isEmpty()&&t.hasNonEmptyElements(n))throw new Ee("shell is empty but holes are not");this._shell=e,this._holes=n;}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){return this._shell.getEnvelopeInternal()},e.prototype.getSortIndex=function(){return t.SORTINDEX_POLYGON},e.prototype.getCoordinates=function(){var t=this;if(this.isEmpty())return [];for(var e=new Array(this.getNumPoints()).fill(null),n=-1,r=this._shell.getCoordinates(),i=0;i<r.length;i++)n++,e[n]=r[i];for(var o=0;o<this._holes.length;o++)for(var s=t._holes[o].getCoordinates(),a=0;a<s.length;a++)n++,e[n]=s[a];return e},e.prototype.getArea=function(){var t=this,e=0;e+=Math.abs(pn.signedArea(this._shell.getCoordinateSequence()));for(var n=0;n<this._holes.length;n++)e-=Math.abs(pn.signedArea(t._holes[n].getCoordinateSequence()));return e},e.prototype.isRectangle=function(){if(0!==this.getNumInteriorRing())return !1;if(null===this._shell)return !1;if(5!==this._shell.getNumPoints())return !1;for(var t=this._shell.getCoordinateSequence(),e=this.getEnvelopeInternal(),n=0;n<5;n++){var r=t.getX(n);if(r!==e.getMinX()&&r!==e.getMaxX())return !1;var i=t.getY(n);if(i!==e.getMinY()&&i!==e.getMaxY())return !1}for(var o=t.getX(0),s=t.getY(0),a=1;a<=4;a++){var u=t.getX(a),l=t.getY(a);if(u!==o===(l!==s))return !1;o=u,s=l;}return !0},e.prototype.equalsExact=function(){var e=this;if(2===arguments.length){var n=arguments[0],r=arguments[1];if(!this.isEquivalentClass(n))return !1;var i=n,o=this._shell,s=i._shell;if(!o.equalsExact(s,r))return !1;if(this._holes.length!==i._holes.length)return !1;for(var a=0;a<this._holes.length;a++)if(!e._holes[a].equalsExact(i._holes[a],r))return !1;return !0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){var t=this;if(0===arguments.length){this.normalize(this._shell,!0);for(var e=0;e<this._holes.length;e++)t.normalize(t._holes[e],!1);Vn.sort(this._holes);}else if(2===arguments.length){var n=arguments[0],r=arguments[1];if(n.isEmpty())return null;var i=new Array(n.getCoordinates().length-1).fill(null);Ye.arraycopy(n.getCoordinates(),0,i,0,i.length);var o=Pn.minCoordinate(n.getCoordinates());Pn.scroll(i,o),Ye.arraycopy(i,0,n.getCoordinates(),0,i.length),n.getCoordinates()[i.length]=i[0],pn.isCCW(n.getCoordinates())===r&&Pn.reverse(n.getCoordinates());}},e.prototype.getCoordinate=function(){return this._shell.getCoordinate()},e.prototype.getNumInteriorRing=function(){return this._holes.length},e.prototype.getBoundaryDimension=function(){return 1},e.prototype.getDimension=function(){return 2},e.prototype.getLength=function(){var t=this,e=0;e+=this._shell.getLength();for(var n=0;n<this._holes.length;n++)e+=t._holes[n].getLength();return e},e.prototype.getNumPoints=function(){for(var t=this,e=this._shell.getNumPoints(),n=0;n<this._holes.length;n++)e+=t._holes[n].getNumPoints();return e},e.prototype.reverse=function(){var t=this,e=this.copy();e._shell=this._shell.copy().reverse(),e._holes=new Array(this._holes.length).fill(null);for(var n=0;n<this._holes.length;n++)e._holes[n]=t._holes[n].copy().reverse();return e},e.prototype.convexHull=function(){return this.getExteriorRing().convexHull()},e.prototype.compareToSameClass=function(){var t=this;if(1===arguments.length){var e=arguments[0],n=this._shell,r=e._shell;return n.compareToSameClass(r)}if(2===arguments.length){var i=arguments[0],o=arguments[1],s=i,a=this._shell,u=s._shell,l=a.compareToSameClass(u,o);if(0!==l)return l;for(var p=this.getNumInteriorRing(),c=s.getNumInteriorRing(),h=0;h<p&&h<c;){var f=t.getInteriorRingN(h),g=s.getInteriorRingN(h),d=f.compareToSameClass(g,o);if(0!==d)return d;h++;}return h<p?1:h<c?-1:0}},e.prototype.apply=function(t){var e=this;if(Re(t,yn)){this._shell.apply(t);for(var n=0;n<this._holes.length;n++)e._holes[n].apply(t);}else if(Re(t,jn)){if(this._shell.apply(t),!t.isDone())for(var r=0;r<this._holes.length&&(e._holes[r].apply(t),!t.isDone());r++);t.isGeometryChanged()&&this.geometryChanged();}else if(Re(t,Xn))t.filter(this);else if(Re(t,hn)){t.filter(this),this._shell.apply(t);for(var i=0;i<this._holes.length;i++)e._holes[i].apply(t);}},e.prototype.getBoundary=function(){var t=this;if(this.isEmpty())return this.getFactory().createMultiLineString();var e=new Array(this._holes.length+1).fill(null);e[0]=this._shell;for(var n=0;n<this._holes.length;n++)e[n+1]=t._holes[n];return e.length<=1?this.getFactory().createLinearRing(e[0].getCoordinateSequence()):this.getFactory().createMultiLineString(e)},e.prototype.clone=function(){var e=this,n=t.prototype.clone.call(this);n._shell=this._shell.clone(),n._holes=new Array(this._holes.length).fill(null);for(var r=0;r<this._holes.length;r++)n._holes[r]=e._holes[r].clone();return n},e.prototype.getGeometryType=function(){return "Polygon"},e.prototype.copy=function(){for(var t=this,n=this._shell.copy(),r=new Array(this._holes.length).fill(null),i=0;i<r.length;i++)r[i]=t._holes[i].copy();return new e(n,r,this._factory)},e.prototype.getExteriorRing=function(){return this._shell},e.prototype.isEmpty=function(){return this._shell.isEmpty()},e.prototype.getInteriorRingN=function(t){return this._holes[t]},e.prototype.interfaces_=function(){return [rr]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return -0x307ffefd8dc97200},Object.defineProperties(e,n),e}(fn),or=function(t){function e(){t.apply(this,arguments);}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return fn.SORTINDEX_MULTIPOINT},e.prototype.isValid=function(){return !0},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return !!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getCoordinate=function(){if(1===arguments.length){var e=arguments[0];return this._geometries[e].getCoordinate()}return t.prototype.getCoordinate.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return zn.FALSE},e.prototype.getDimension=function(){return 0},e.prototype.getBoundary=function(){return this.getFactory().createGeometryCollection(null)},e.prototype.getGeometryType=function(){return "MultiPoint"},e.prototype.copy=function(){for(var t=this,n=new Array(this._geometries.length).fill(null),r=0;r<n.length;r++)n[r]=t._geometries[r].copy();return new e(n,this._factory)},e.prototype.interfaces_=function(){return [er]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return -0x6fb1ed4162e0fc00},Object.defineProperties(e,n),e}(Yn),sr=function(t){function e(e,n){e instanceof we&&n instanceof xr&&(e=n.getCoordinateSequenceFactory().create(e)),t.call(this,e,n),this.validateConstruction();}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={MINIMUM_VALID_SIZE:{configurable:!0},serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return fn.SORTINDEX_LINEARRING},e.prototype.getBoundaryDimension=function(){return zn.FALSE},e.prototype.isClosed=function(){return !!this.isEmpty()||t.prototype.isClosed.call(this)},e.prototype.reverse=function(){var t=this._points.copy();return $n.reverse(t),this.getFactory().createLinearRing(t)},e.prototype.validateConstruction=function(){if(!this.isEmpty()&&!t.prototype.isClosed.call(this))throw new Ee("Points of LinearRing do not form a closed linestring");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<e.MINIMUM_VALID_SIZE)throw new Ee("Invalid number of points in LinearRing (found "+this.getCoordinateSequence().size()+" - must be 0 or >= 4)")},e.prototype.getGeometryType=function(){return "LinearRing"},e.prototype.copy=function(){return new e(this._points.copy(),this._factory)},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},n.MINIMUM_VALID_SIZE.get=function(){return 4},n.serialVersionUID.get=function(){return -0x3b229e262367a600},Object.defineProperties(e,n),e}(tr),ar=function(t){function e(){t.apply(this,arguments);}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return fn.SORTINDEX_MULTIPOLYGON},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return !!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return 1},e.prototype.getDimension=function(){return 2},e.prototype.reverse=function(){for(var t=this,e=this._geometries.length,n=new Array(e).fill(null),r=0;r<this._geometries.length;r++)n[r]=t._geometries[r].reverse();return this.getFactory().createMultiPolygon(n)},e.prototype.getBoundary=function(){var t=this;if(this.isEmpty())return this.getFactory().createMultiLineString();for(var e=new wn,n=0;n<this._geometries.length;n++)for(var r=t._geometries[n],i=r.getBoundary(),o=0;o<i.getNumGeometries();o++)e.add(i.getGeometryN(o));var s=new Array(e.size()).fill(null);return this.getFactory().createMultiLineString(e.toArray(s))},e.prototype.getGeometryType=function(){return "MultiPolygon"},e.prototype.copy=function(){for(var t=this,n=new Array(this._geometries.length).fill(null),r=0;r<n.length;r++)n[r]=t._geometries[r].copy();return new e(n,this._factory)},e.prototype.interfaces_=function(){return [rr]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return -0x7a5aa1369171980},Object.defineProperties(e,n),e}(Yn),ur=function(t){this._factory=t||null,this._isUserDataCopied=!1;},lr={NoOpGeometryOperation:{configurable:!0},CoordinateOperation:{configurable:!0},CoordinateSequenceOperation:{configurable:!0}};ur.prototype.setCopyUserData=function(t){this._isUserDataCopied=t;},ur.prototype.edit=function(t,e){if(null===t)return null;var n=this.editInternal(t,e);return this._isUserDataCopied&&n.setUserData(t.getUserData()),n},ur.prototype.editInternal=function(t,e){return null===this._factory&&(this._factory=t.getFactory()),t instanceof Yn?this.editGeometryCollection(t,e):t instanceof ir?this.editPolygon(t,e):t instanceof nr?e.edit(t,this._factory):t instanceof tr?e.edit(t,this._factory):(rn.shouldNeverReachHere("Unsupported Geometry class: "+t.getClass().getName()),null)},ur.prototype.editGeometryCollection=function(t,e){for(var n=this,r=e.edit(t,this._factory),i=new wn,o=0;o<r.getNumGeometries();o++){var s=n.edit(r.getGeometryN(o),e);null===s||s.isEmpty()||i.add(s);}return r.getClass()===or?this._factory.createMultiPoint(i.toArray([])):r.getClass()===Hn?this._factory.createMultiLineString(i.toArray([])):r.getClass()===ar?this._factory.createMultiPolygon(i.toArray([])):this._factory.createGeometryCollection(i.toArray([]))},ur.prototype.editPolygon=function(t,e){var n=this,r=e.edit(t,this._factory);if(null===r&&(r=this._factory.createPolygon(null)),r.isEmpty())return r;var i=this.edit(r.getExteriorRing(),e);if(null===i||i.isEmpty())return this._factory.createPolygon();for(var o=new wn,s=0;s<r.getNumInteriorRing();s++){var a=n.edit(r.getInteriorRingN(s),e);null===a||a.isEmpty()||o.add(a);}return this._factory.createPolygon(i,o.toArray([]))},ur.prototype.interfaces_=function(){return []},ur.prototype.getClass=function(){return ur},ur.GeometryEditorOperation=function(){},lr.NoOpGeometryOperation.get=function(){return pr},lr.CoordinateOperation.get=function(){return cr},lr.CoordinateSequenceOperation.get=function(){return hr},Object.defineProperties(ur,lr);var pr=function(){};pr.prototype.edit=function(t,e){return t},pr.prototype.interfaces_=function(){return [ur.GeometryEditorOperation]},pr.prototype.getClass=function(){return pr};var cr=function(){};cr.prototype.edit=function(t,e){var n=this.editCoordinates(t.getCoordinates(),t);return null===n?t:t instanceof sr?e.createLinearRing(n):t instanceof tr?e.createLineString(n):t instanceof nr?n.length>0?e.createPoint(n[0]):e.createPoint():t},cr.prototype.interfaces_=function(){return [ur.GeometryEditorOperation]},cr.prototype.getClass=function(){return cr};var hr=function(){};hr.prototype.edit=function(t,e){return t instanceof sr?e.createLinearRing(this.edit(t.getCoordinateSequence(),t)):t instanceof tr?e.createLineString(this.edit(t.getCoordinateSequence(),t)):t instanceof nr?e.createPoint(this.edit(t.getCoordinateSequence(),t)):t},hr.prototype.interfaces_=function(){return [ur.GeometryEditorOperation]},hr.prototype.getClass=function(){return hr};var fr=function(){var t=this;if(this._dimension=3,this._coordinates=null,1===arguments.length){if(arguments[0]instanceof Array)this._coordinates=arguments[0],this._dimension=3;else if(Number.isInteger(arguments[0])){var e=arguments[0];this._coordinates=new Array(e).fill(null);for(var n=0;n<e;n++)t._coordinates[n]=new we;}else if(Re(arguments[0],ze)){var r=arguments[0];if(null===r)return this._coordinates=new Array(0).fill(null),null;this._dimension=r.getDimension(),this._coordinates=new Array(r.size()).fill(null);for(var i=0;i<this._coordinates.length;i++)t._coordinates[i]=r.getCoordinateCopy(i);}}else if(2===arguments.length)if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var o=arguments[0],s=arguments[1];this._coordinates=o,this._dimension=s,null===o&&(this._coordinates=new Array(0).fill(null));}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var a=arguments[0],u=arguments[1];this._coordinates=new Array(a).fill(null),this._dimension=u;for(var l=0;l<a;l++)t._coordinates[l]=new we;}},gr={serialVersionUID:{configurable:!0}};fr.prototype.setOrdinate=function(t,e,n){switch(e){case ze.X:this._coordinates[t].x=n;break;case ze.Y:this._coordinates[t].y=n;break;case ze.Z:this._coordinates[t].z=n;break;default:throw new Ee("invalid ordinateIndex")}},fr.prototype.size=function(){return this._coordinates.length},fr.prototype.getOrdinate=function(t,e){switch(e){case ze.X:return this._coordinates[t].x;case ze.Y:return this._coordinates[t].y;case ze.Z:return this._coordinates[t].z}return Ie.NaN},fr.prototype.getCoordinate=function(){if(1===arguments.length){var t=arguments[0];return this._coordinates[t]}if(2===arguments.length){var e=arguments[0],n=arguments[1];n.x=this._coordinates[e].x,n.y=this._coordinates[e].y,n.z=this._coordinates[e].z;}},fr.prototype.getCoordinateCopy=function(t){return new we(this._coordinates[t])},fr.prototype.getDimension=function(){return this._dimension},fr.prototype.getX=function(t){return this._coordinates[t].x},fr.prototype.clone=function(){for(var t=this,e=new Array(this.size()).fill(null),n=0;n<this._coordinates.length;n++)e[n]=t._coordinates[n].clone();return new fr(e,this._dimension)},fr.prototype.expandEnvelope=function(t){for(var e=this,n=0;n<this._coordinates.length;n++)t.expandToInclude(e._coordinates[n]);return t},fr.prototype.copy=function(){for(var t=this,e=new Array(this.size()).fill(null),n=0;n<this._coordinates.length;n++)e[n]=t._coordinates[n].copy();return new fr(e,this._dimension)},fr.prototype.toString=function(){var t=this;if(this._coordinates.length>0){var e=new Ae(17*this._coordinates.length);e.append("("),e.append(this._coordinates[0]);for(var n=1;n<this._coordinates.length;n++)e.append(", "),e.append(t._coordinates[n]);return e.append(")"),e.toString()}return "()"},fr.prototype.getY=function(t){return this._coordinates[t].y},fr.prototype.toCoordinateArray=function(){return this._coordinates},fr.prototype.interfaces_=function(){return [ze,b]},fr.prototype.getClass=function(){return fr},gr.serialVersionUID.get=function(){return -0xcb44a778db18e00},Object.defineProperties(fr,gr);var dr=function(){},yr={serialVersionUID:{configurable:!0},instanceObject:{configurable:!0}};dr.prototype.readResolve=function(){return dr.instance()},dr.prototype.create=function(){if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new fr(t)}if(Re(arguments[0],ze)){var e=arguments[0];return new fr(e)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];return r>3&&(r=3),r<2?new fr(n):new fr(n,r)}},dr.prototype.interfaces_=function(){return [Pe,b]},dr.prototype.getClass=function(){return dr},dr.instance=function(){return dr.instanceObject},yr.serialVersionUID.get=function(){return -0x38e49fa6cf6f2e00},yr.instanceObject.get=function(){return new dr},Object.defineProperties(dr,yr);var _r=function(t){function e(){t.call(this),this.map_=new Map;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.get=function(t){return this.map_.get(t)||null},e.prototype.put=function(t,e){return this.map_.set(t,e),e},e.prototype.values=function(){for(var t=new wn,e=this.map_.values(),n=e.next();!n.done;)t.add(n.value),n=e.next();return t},e.prototype.entrySet=function(){var t=new An;return this.map_.entries().forEach(function(e){return t.add(e)}),t},e.prototype.size=function(){return this.map_.size()},e}(Dn),mr=function t(){if(this._modelType=null,this._scale=null,0===arguments.length)this._modelType=t.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof Er){var e=arguments[0];this._modelType=e,e===t.FIXED&&this.setScale(1);}else if("number"==typeof arguments[0]){var n=arguments[0];this._modelType=t.FIXED,this.setScale(n);}else if(arguments[0]instanceof t){var r=arguments[0];this._modelType=r._modelType,this._scale=r._scale;}},vr={serialVersionUID:{configurable:!0},maximumPreciseValue:{configurable:!0}};mr.prototype.equals=function(t){if(!(t instanceof mr))return !1;var e=t;return this._modelType===e._modelType&&this._scale===e._scale},mr.prototype.compareTo=function(t){var e=t,n=this.getMaximumSignificantDigits(),r=e.getMaximumSignificantDigits();return new Fe(n).compareTo(new Fe(r))},mr.prototype.getScale=function(){return this._scale},mr.prototype.isFloating=function(){return this._modelType===mr.FLOATING||this._modelType===mr.FLOATING_SINGLE},mr.prototype.getType=function(){return this._modelType},mr.prototype.toString=function(){var t="UNKNOWN";return this._modelType===mr.FLOATING?t="Floating":this._modelType===mr.FLOATING_SINGLE?t="Floating-Single":this._modelType===mr.FIXED&&(t="Fixed (Scale="+this.getScale()+")"),t},mr.prototype.makePrecise=function(){if("number"==typeof arguments[0]){var t=arguments[0];if(Ie.isNaN(t))return t;if(this._modelType===mr.FLOATING_SINGLE){return t}return this._modelType===mr.FIXED?Math.round(t*this._scale)/this._scale:t}if(arguments[0]instanceof we){var e=arguments[0];if(this._modelType===mr.FLOATING)return null;e.x=this.makePrecise(e.x),e.y=this.makePrecise(e.y);}},mr.prototype.getMaximumSignificantDigits=function(){var t=16;return this._modelType===mr.FLOATING?t=16:this._modelType===mr.FLOATING_SINGLE?t=6:this._modelType===mr.FIXED&&(t=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),t},mr.prototype.setScale=function(t){this._scale=Math.abs(t);},mr.prototype.interfaces_=function(){return [b,Ne]},mr.prototype.getClass=function(){return mr},mr.mostPrecise=function(t,e){return t.compareTo(e)>=0?t:e},vr.serialVersionUID.get=function(){return 0x6bee6404e9a25c00},vr.maximumPreciseValue.get=function(){return 9007199254740992},Object.defineProperties(mr,vr);var Er=function t(e){this._name=e||null,t.nameToTypeMap.put(e,this);},Ir={serialVersionUID:{configurable:!0},nameToTypeMap:{configurable:!0}};Er.prototype.readResolve=function(){return Er.nameToTypeMap.get(this._name)},Er.prototype.toString=function(){return this._name},Er.prototype.interfaces_=function(){return [b]},Er.prototype.getClass=function(){return Er},Ir.serialVersionUID.get=function(){return -552860263173159e4},Ir.nameToTypeMap.get=function(){return new _r},Object.defineProperties(Er,Ir),mr.Type=Er,mr.FIXED=new Er("FIXED"),mr.FLOATING=new Er("FLOATING"),mr.FLOATING_SINGLE=new Er("FLOATING SINGLE");var xr=function t(){this._precisionModel=new mr,this._SRID=0,this._coordinateSequenceFactory=t.getDefaultCoordinateSequenceFactory(),0===arguments.length||(1===arguments.length?Re(arguments[0],Pe)?this._coordinateSequenceFactory=arguments[0]:arguments[0]instanceof mr&&(this._precisionModel=arguments[0]):2===arguments.length?(this._precisionModel=arguments[0],this._SRID=arguments[1]):3===arguments.length&&(this._precisionModel=arguments[0],this._SRID=arguments[1],this._coordinateSequenceFactory=arguments[2]));},Nr={serialVersionUID:{configurable:!0}};xr.prototype.toGeometry=function(t){return t.isNull()?this.createPoint(null):t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new we(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new we(t.getMinX(),t.getMinY()),new we(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new we(t.getMinX(),t.getMinY()),new we(t.getMinX(),t.getMaxY()),new we(t.getMaxX(),t.getMaxY()),new we(t.getMaxX(),t.getMinY()),new we(t.getMinX(),t.getMinY())]),null)},xr.prototype.createLineString=function(t){return t?t instanceof Array?new tr(this.getCoordinateSequenceFactory().create(t),this):Re(t,ze)?new tr(t,this):void 0:new tr(this.getCoordinateSequenceFactory().create([]),this)},xr.prototype.createMultiLineString=function(){if(0===arguments.length)return new Hn(null,this);if(1===arguments.length){var t=arguments[0];return new Hn(t,this)}},xr.prototype.buildGeometry=function(t){for(var e=null,n=!1,r=!1,i=t.iterator();i.hasNext();){var o=i.next(),s=o.getClass();null===e&&(e=s),s!==e&&(n=!0),o.isGeometryCollectionOrDerived()&&(r=!0);}if(null===e)return this.createGeometryCollection();if(n||r)return this.createGeometryCollection(xr.toGeometryArray(t));var a=t.iterator().next();if(t.size()>1){if(a instanceof ir)return this.createMultiPolygon(xr.toPolygonArray(t));if(a instanceof tr)return this.createMultiLineString(xr.toLineStringArray(t));if(a instanceof nr)return this.createMultiPoint(xr.toPointArray(t));rn.shouldNeverReachHere("Unhandled class: "+a.getClass().getName());}return a},xr.prototype.createMultiPointFromCoords=function(t){return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)},xr.prototype.createPoint=function(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof we){var t=arguments[0];return this.createPoint(null!==t?this.getCoordinateSequenceFactory().create([t]):null)}if(Re(arguments[0],ze)){var e=arguments[0];return new nr(e,this)}}},xr.prototype.getCoordinateSequenceFactory=function(){return this._coordinateSequenceFactory},xr.prototype.createPolygon=function(){if(0===arguments.length)return new ir(null,null,this);if(1===arguments.length){if(Re(arguments[0],ze)){var t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Array){var e=arguments[0];return this.createPolygon(this.createLinearRing(e))}if(arguments[0]instanceof sr){var n=arguments[0];return this.createPolygon(n,null)}}else if(2===arguments.length){var r=arguments[0],i=arguments[1];return new ir(r,i,this)}},xr.prototype.getSRID=function(){return this._SRID},
    xr.prototype.createGeometryCollection=function(){if(0===arguments.length)return new Yn(null,this);if(1===arguments.length){var t=arguments[0];return new Yn(t,this)}},xr.prototype.createGeometry=function(t){return new ur(this).edit(t,{edit:function(){if(2===arguments.length){var t=arguments[0];return this._coordinateSequenceFactory.create(t)}}})},xr.prototype.getPrecisionModel=function(){return this._precisionModel},xr.prototype.createLinearRing=function(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLinearRing(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(Re(arguments[0],ze)){var e=arguments[0];return new sr(e,this)}}},xr.prototype.createMultiPolygon=function(){if(0===arguments.length)return new ar(null,this);if(1===arguments.length){var t=arguments[0];return new ar(t,this)}},xr.prototype.createMultiPoint=function(){var t=this;if(0===arguments.length)return new or(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){var e=arguments[0];return new or(e,this)}if(arguments[0]instanceof Array){var n=arguments[0];return this.createMultiPoint(null!==n?this.getCoordinateSequenceFactory().create(n):null)}if(Re(arguments[0],ze)){var r=arguments[0];if(null===r)return this.createMultiPoint(new Array(0).fill(null));for(var i=new Array(r.size()).fill(null),o=0;o<r.size();o++){var s=t.getCoordinateSequenceFactory().create(1,r.getDimension());$n.copy(r,o,s,0,1),i[o]=t.createPoint(s);}return this.createMultiPoint(i)}}},xr.prototype.interfaces_=function(){return [b]},xr.prototype.getClass=function(){return xr},xr.toMultiPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},xr.toGeometryArray=function(t){if(null===t)return null;var e=new Array(t.size()).fill(null);return t.toArray(e)},xr.getDefaultCoordinateSequenceFactory=function(){return dr.instance()},xr.toMultiLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},xr.toLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},xr.toMultiPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},xr.toLinearRingArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},xr.toPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},xr.toPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},xr.createPointFromInternalCoord=function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)},Nr.serialVersionUID.get=function(){return -0x5ea75f2051eeb400},Object.defineProperties(xr,Nr);var br=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"],Cr=function(t){this.geometryFactory=t||new xr;};Cr.prototype.read=function(t){var e;e="string"==typeof t?JSON.parse(t):t;var n=e.type;if(!wr[n])throw new Error("Unknown GeoJSON type: "+e.type);return -1!==br.indexOf(n)?wr[n].apply(this,[e.coordinates]):"GeometryCollection"===n?wr[n].apply(this,[e.geometries]):wr[n].apply(this,[e])},Cr.prototype.write=function(t){var e=t.getGeometryType();if(!Sr[e])throw new Error("Geometry is not supported");return Sr[e].apply(this,[t])};var wr={Feature:function(t){var e={};for(var n in t)e[n]=t[n];if(t.geometry){var r=t.geometry.type;if(!wr[r])throw new Error("Unknown GeoJSON type: "+t.type);e.geometry=this.read(t.geometry);}return t.bbox&&(e.bbox=wr.bbox.apply(this,[t.bbox])),e},FeatureCollection:function(t){var e=this,n={};if(t.features){n.features=[];for(var r=0;r<t.features.length;++r)n.features.push(e.read(t.features[r]));}return t.bbox&&(n.bbox=this.parse.bbox.apply(this,[t.bbox])),n},coordinates:function(t){for(var e=[],n=0;n<t.length;++n){var r=t[n];e.push(new we(r[0],r[1]));}return e},bbox:function(t){return this.geometryFactory.createLinearRing([new we(t[0],t[1]),new we(t[2],t[1]),new we(t[2],t[3]),new we(t[0],t[3]),new we(t[0],t[1])])},Point:function(t){var e=new we(t[0],t[1]);return this.geometryFactory.createPoint(e)},MultiPoint:function(t){for(var e=this,n=[],r=0;r<t.length;++r)n.push(wr.Point.apply(e,[t[r]]));return this.geometryFactory.createMultiPoint(n)},LineString:function(t){var e=wr.coordinates.apply(this,[t]);return this.geometryFactory.createLineString(e)},MultiLineString:function(t){for(var e=this,n=[],r=0;r<t.length;++r)n.push(wr.LineString.apply(e,[t[r]]));return this.geometryFactory.createMultiLineString(n)},Polygon:function(t){for(var e=this,n=wr.coordinates.apply(this,[t[0]]),r=this.geometryFactory.createLinearRing(n),i=[],o=1;o<t.length;++o){var s=t[o],a=wr.coordinates.apply(e,[s]),u=e.geometryFactory.createLinearRing(a);i.push(u);}return this.geometryFactory.createPolygon(r,i)},MultiPolygon:function(t){for(var e=this,n=[],r=0;r<t.length;++r){var i=t[r];n.push(wr.Polygon.apply(e,[i]));}return this.geometryFactory.createMultiPolygon(n)},GeometryCollection:function(t){for(var e=this,n=[],r=0;r<t.length;++r){var i=t[r];n.push(e.read(i));}return this.geometryFactory.createGeometryCollection(n)}},Sr={coordinate:function(t){return [t.x,t.y]},Point:function(t){return {type:"Point",coordinates:Sr.coordinate.apply(this,[t.getCoordinate()])}},MultiPoint:function(t){for(var e=this,n=[],r=0;r<t._geometries.length;++r){var i=t._geometries[r],o=Sr.Point.apply(e,[i]);n.push(o.coordinates);}return {type:"MultiPoint",coordinates:n}},LineString:function(t){for(var e=this,n=[],r=t.getCoordinates(),i=0;i<r.length;++i){var o=r[i];n.push(Sr.coordinate.apply(e,[o]));}return {type:"LineString",coordinates:n}},MultiLineString:function(t){for(var e=this,n=[],r=0;r<t._geometries.length;++r){var i=t._geometries[r],o=Sr.LineString.apply(e,[i]);n.push(o.coordinates);}return {type:"MultiLineString",coordinates:n}},Polygon:function(t){var e=this,n=[],r=Sr.LineString.apply(this,[t._shell]);n.push(r.coordinates);for(var i=0;i<t._holes.length;++i){var o=t._holes[i],s=Sr.LineString.apply(e,[o]);n.push(s.coordinates);}return {type:"Polygon",coordinates:n}},MultiPolygon:function(t){for(var e=this,n=[],r=0;r<t._geometries.length;++r){var i=t._geometries[r],o=Sr.Polygon.apply(e,[i]);n.push(o.coordinates);}return {type:"MultiPolygon",coordinates:n}},GeometryCollection:function(t){for(var e=this,n=[],r=0;r<t._geometries.length;++r){var i=t._geometries[r],o=i.getGeometryType();n.push(Sr[o].apply(e,[i]));}return {type:"GeometryCollection",geometries:n}}},Lr=function(t){this.geometryFactory=t||new xr,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new Cr(this.geometryFactory);};Lr.prototype.read=function(t){var e=this.parser.read(t);return this.precisionModel.getType()===mr.FIXED&&this.reducePrecision(e),e},Lr.prototype.reducePrecision=function(t){var e,n,r=this;if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(e=0,n=t.points.length;e<n;e++)r.precisionModel.makePrecise(t.points[e]);else if(t.geometries)for(e=0,n=t.geometries.length;e<n;e++)r.reducePrecision(t.geometries[e]);};var Pr=function(){this.parser=new Cr(this.geometryFactory);};Pr.prototype.write=function(t){return this.parser.write(t)};var Or=function(){},Tr={ON:{configurable:!0},LEFT:{configurable:!0},RIGHT:{configurable:!0}};Or.prototype.interfaces_=function(){return []},Or.prototype.getClass=function(){return Or},Or.opposite=function(t){return t===Or.LEFT?Or.RIGHT:t===Or.RIGHT?Or.LEFT:t},Tr.ON.get=function(){return 0},Tr.LEFT.get=function(){return 1},Tr.RIGHT.get=function(){return 2},Object.defineProperties(Or,Tr),z.prototype=new Error,z.prototype.name="EmptyStackException",U.prototype=new Cn,U.prototype.add=function(t){return this.array_.push(t),!0},U.prototype.get=function(t){if(t<0||t>=this.size())throw new Error;return this.array_[t]},U.prototype.push=function(t){return this.array_.push(t),t},U.prototype.pop=function(t){if(0===this.array_.length)throw new z;return this.array_.pop()},U.prototype.peek=function(){if(0===this.array_.length)throw new z;return this.array_[this.array_.length-1]},U.prototype.empty=function(){return 0===this.array_.length},U.prototype.isEmpty=function(){return this.empty()},U.prototype.search=function(t){return this.array_.indexOf(t)},U.prototype.size=function(){return this.array_.length},U.prototype.toArray=function(){for(var t=this,e=[],n=0,r=this.array_.length;n<r;n++)e.push(t.array_[n]);return e};var Rr=function(){this._minIndex=-1,this._minCoord=null,this._minDe=null,this._orientedDe=null;};Rr.prototype.getCoordinate=function(){return this._minCoord},Rr.prototype.getRightmostSide=function(t,e){var n=this.getRightmostSideOfSegment(t,e);return n<0&&(n=this.getRightmostSideOfSegment(t,e-1)),n<0&&(this._minCoord=null,this.checkForRightmostCoordinate(t)),n},Rr.prototype.findRightmostEdgeAtVertex=function(){var t=this._minDe.getEdge().getCoordinates();rn.isTrue(this._minIndex>0&&this._minIndex<t.length,"rightmost point expected to be interior vertex of edge");var e=t[this._minIndex-1],n=t[this._minIndex+1],r=pn.computeOrientation(this._minCoord,n,e),i=!1;e.y<this._minCoord.y&&n.y<this._minCoord.y&&r===pn.COUNTERCLOCKWISE?i=!0:e.y>this._minCoord.y&&n.y>this._minCoord.y&&r===pn.CLOCKWISE&&(i=!0),i&&(this._minIndex=this._minIndex-1);},Rr.prototype.getRightmostSideOfSegment=function(t,e){var n=t.getEdge(),r=n.getCoordinates();if(e<0||e+1>=r.length)return -1;if(r[e].y===r[e+1].y)return -1;var i=Or.LEFT;return r[e].y<r[e+1].y&&(i=Or.RIGHT),i},Rr.prototype.getEdge=function(){return this._orientedDe},Rr.prototype.checkForRightmostCoordinate=function(t){for(var e=this,n=t.getEdge().getCoordinates(),r=0;r<n.length-1;r++)(null===e._minCoord||n[r].x>e._minCoord.x)&&(e._minDe=t,e._minIndex=r,e._minCoord=n[r]);},Rr.prototype.findRightmostEdgeAtNode=function(){var t=this._minDe.getNode(),e=t.getEdges();this._minDe=e.getRightmostEdge(),this._minDe.isForward()||(this._minDe=this._minDe.getSym(),this._minIndex=this._minDe.getEdge().getCoordinates().length-1);},Rr.prototype.findEdge=function(t){for(var e=this,n=t.iterator();n.hasNext();){var r=n.next();r.isForward()&&e.checkForRightmostCoordinate(r);}rn.isTrue(0!==this._minIndex||this._minCoord.equals(this._minDe.getCoordinate()),"inconsistency in rightmost processing"),0===this._minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this._orientedDe=this._minDe,this.getRightmostSide(this._minDe,this._minIndex)===Or.LEFT&&(this._orientedDe=this._minDe.getSym());},Rr.prototype.interfaces_=function(){return []},Rr.prototype.getClass=function(){return Rr};var Dr=function(t){function e(n,r){t.call(this,e.msgWithCoord(n,r)),this.pt=r?new we(r):null,this.name="TopologyException";}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getCoordinate=function(){return this.pt},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e.msgWithCoord=function(t,e){return e?t:t+" [ "+e+" ]"},e}(en),Mr=function(){this.array_=[];};Mr.prototype.addLast=function(t){this.array_.push(t);},Mr.prototype.removeFirst=function(){return this.array_.shift()},Mr.prototype.isEmpty=function(){return 0===this.array_.length};var Ar=function(){this._finder=null,this._dirEdgeList=new wn,this._nodes=new wn,this._rightMostCoord=null,this._env=null,this._finder=new Rr;};Ar.prototype.clearVisitedEdges=function(){for(var t=this._dirEdgeList.iterator();t.hasNext();){t.next().setVisited(!1);}},Ar.prototype.getRightmostCoordinate=function(){return this._rightMostCoord},Ar.prototype.computeNodeDepth=function(t){for(var e=this,n=null,r=t.getEdges().iterator();r.hasNext();){var i=r.next();if(i.isVisited()||i.getSym().isVisited()){n=i;break}}if(null===n)throw new Dr("unable to find edge to compute depths at "+t.getCoordinate());t.getEdges().computeDepths(n);for(var o=t.getEdges().iterator();o.hasNext();){var s=o.next();s.setVisited(!0),e.copySymDepths(s);}},Ar.prototype.computeDepth=function(t){this.clearVisitedEdges();var e=this._finder.getEdge();e.setEdgeDepths(Or.RIGHT,t),this.copySymDepths(e),this.computeDepths(e);},Ar.prototype.create=function(t){this.addReachable(t),this._finder.findEdge(this._dirEdgeList),this._rightMostCoord=this._finder.getCoordinate();},Ar.prototype.findResultEdges=function(){for(var t=this._dirEdgeList.iterator();t.hasNext();){var e=t.next();e.getDepth(Or.RIGHT)>=1&&e.getDepth(Or.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0);}},Ar.prototype.computeDepths=function(t){var e=this,n=new An,r=new Mr,i=t.getNode();for(r.addLast(i),n.add(i),t.setVisited(!0);!r.isEmpty();){var o=r.removeFirst();n.add(o),e.computeNodeDepth(o);for(var s=o.getEdges().iterator();s.hasNext();){var a=s.next(),u=a.getSym();if(!u.isVisited()){var l=u.getNode();n.contains(l)||(r.addLast(l),n.add(l));}}}},Ar.prototype.compareTo=function(t){var e=t;return this._rightMostCoord.x<e._rightMostCoord.x?-1:this._rightMostCoord.x>e._rightMostCoord.x?1:0},Ar.prototype.getEnvelope=function(){if(null===this._env){for(var t=new We,e=this._dirEdgeList.iterator();e.hasNext();)for(var n=e.next(),r=n.getEdge().getCoordinates(),i=0;i<r.length-1;i++)t.expandToInclude(r[i]);this._env=t;}return this._env},Ar.prototype.addReachable=function(t){var e=this,n=new U;for(n.add(t);!n.empty();){var r=n.pop();e.add(r,n);}},Ar.prototype.copySymDepths=function(t){var e=t.getSym();e.setDepth(Or.LEFT,t.getDepth(Or.RIGHT)),e.setDepth(Or.RIGHT,t.getDepth(Or.LEFT));},Ar.prototype.add=function(t,e){var n=this;t.setVisited(!0),this._nodes.add(t);for(var r=t.getEdges().iterator();r.hasNext();){var i=r.next();n._dirEdgeList.add(i);var o=i.getSym(),s=o.getNode();s.isVisited()||e.push(s);}},Ar.prototype.getNodes=function(){return this._nodes},Ar.prototype.getDirectedEdges=function(){return this._dirEdgeList},Ar.prototype.interfaces_=function(){return [Ne]},Ar.prototype.getClass=function(){return Ar};var Fr=function t(){var e=this;if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){var n=arguments[0];this.init(n.length);}else if(Number.isInteger(arguments[0])){var r=arguments[0];this.init(1),this.location[Or.ON]=r;}else if(arguments[0]instanceof t){var i=arguments[0];if(this.init(i.location.length),null!==i)for(var o=0;o<this.location.length;o++)e.location[o]=i.location[o];}}else if(3===arguments.length){var s=arguments[0],a=arguments[1],u=arguments[2];this.init(3),this.location[Or.ON]=s,this.location[Or.LEFT]=a,this.location[Or.RIGHT]=u;}};Fr.prototype.setAllLocations=function(t){for(var e=this,n=0;n<this.location.length;n++)e.location[n]=t;},Fr.prototype.isNull=function(){for(var t=this,e=0;e<this.location.length;e++)if(t.location[e]!==Oe.NONE)return !1;return !0},Fr.prototype.setAllLocationsIfNull=function(t){for(var e=this,n=0;n<this.location.length;n++)e.location[n]===Oe.NONE&&(e.location[n]=t);},Fr.prototype.isLine=function(){return 1===this.location.length},Fr.prototype.merge=function(t){var e=this;if(t.location.length>this.location.length){var n=new Array(3).fill(null);n[Or.ON]=this.location[Or.ON],n[Or.LEFT]=Oe.NONE,n[Or.RIGHT]=Oe.NONE,this.location=n;}for(var r=0;r<this.location.length;r++)e.location[r]===Oe.NONE&&r<t.location.length&&(e.location[r]=t.location[r]);},Fr.prototype.getLocations=function(){return this.location},Fr.prototype.flip=function(){if(this.location.length<=1)return null;var t=this.location[Or.LEFT];this.location[Or.LEFT]=this.location[Or.RIGHT],this.location[Or.RIGHT]=t;},Fr.prototype.toString=function(){var t=new Ae;return this.location.length>1&&t.append(Oe.toLocationSymbol(this.location[Or.LEFT])),t.append(Oe.toLocationSymbol(this.location[Or.ON])),this.location.length>1&&t.append(Oe.toLocationSymbol(this.location[Or.RIGHT])),t.toString()},Fr.prototype.setLocations=function(t,e,n){this.location[Or.ON]=t,this.location[Or.LEFT]=e,this.location[Or.RIGHT]=n;},Fr.prototype.get=function(t){return t<this.location.length?this.location[t]:Oe.NONE},Fr.prototype.isArea=function(){return this.location.length>1},Fr.prototype.isAnyNull=function(){for(var t=this,e=0;e<this.location.length;e++)if(t.location[e]===Oe.NONE)return !0;return !1},Fr.prototype.setLocation=function(){if(1===arguments.length){var t=arguments[0];this.setLocation(Or.ON,t);}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.location[e]=n;}},Fr.prototype.init=function(t){this.location=new Array(t).fill(null),this.setAllLocations(Oe.NONE);},Fr.prototype.isEqualOnSide=function(t,e){return this.location[e]===t.location[e]},Fr.prototype.allPositionsEqual=function(t){for(var e=this,n=0;n<this.location.length;n++)if(e.location[n]!==t)return !1;return !0},Fr.prototype.interfaces_=function(){return []},Fr.prototype.getClass=function(){return Fr};var Gr=function t(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){var e=arguments[0];this.elt[0]=new Fr(e),this.elt[1]=new Fr(e);}else if(arguments[0]instanceof t){var n=arguments[0];this.elt[0]=new Fr(n.elt[0]),this.elt[1]=new Fr(n.elt[1]);}}else if(2===arguments.length){var r=arguments[0],i=arguments[1];this.elt[0]=new Fr(Oe.NONE),this.elt[1]=new Fr(Oe.NONE),this.elt[r].setLocation(i);}else if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];this.elt[0]=new Fr(o,s,a),this.elt[1]=new Fr(o,s,a);}else if(4===arguments.length){var u=arguments[0],l=arguments[1],p=arguments[2],c=arguments[3];this.elt[0]=new Fr(Oe.NONE,Oe.NONE,Oe.NONE),this.elt[1]=new Fr(Oe.NONE,Oe.NONE,Oe.NONE),this.elt[u].setLocations(l,p,c);}};Gr.prototype.getGeometryCount=function(){var t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t},Gr.prototype.setAllLocations=function(t,e){this.elt[t].setAllLocations(e);},Gr.prototype.isNull=function(t){return this.elt[t].isNull()},Gr.prototype.setAllLocationsIfNull=function(){if(1===arguments.length){var t=arguments[0];this.setAllLocationsIfNull(0,t),this.setAllLocationsIfNull(1,t);}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.elt[e].setAllLocationsIfNull(n);}},Gr.prototype.isLine=function(t){return this.elt[t].isLine()},Gr.prototype.merge=function(t){for(var e=this,n=0;n<2;n++)null===e.elt[n]&&null!==t.elt[n]?e.elt[n]=new Fr(t.elt[n]):e.elt[n].merge(t.elt[n]);},Gr.prototype.flip=function(){this.elt[0].flip(),this.elt[1].flip();},Gr.prototype.getLocation=function(){if(1===arguments.length){var t=arguments[0];return this.elt[t].get(Or.ON)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return this.elt[e].get(n)}},Gr.prototype.toString=function(){var t=new Ae;return null!==this.elt[0]&&(t.append("A:"),t.append(this.elt[0].toString())),null!==this.elt[1]&&(t.append(" B:"),t.append(this.elt[1].toString())),t.toString()},Gr.prototype.isArea=function(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){var t=arguments[0];return this.elt[t].isArea()}},Gr.prototype.isAnyNull=function(t){return this.elt[t].isAnyNull()},Gr.prototype.setLocation=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.elt[t].setLocation(Or.ON,e);}else if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];this.elt[n].setLocation(r,i);}},Gr.prototype.isEqualOnSide=function(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)},Gr.prototype.allPositionsEqual=function(t,e){return this.elt[t].allPositionsEqual(e)},Gr.prototype.toLine=function(t){this.elt[t].isArea()&&(this.elt[t]=new Fr(this.elt[t].location[0]));},Gr.prototype.interfaces_=function(){return []},Gr.prototype.getClass=function(){return Gr},Gr.toLineLabel=function(t){for(var e=new Gr(Oe.NONE),n=0;n<2;n++)e.setLocation(n,t.getLocation(n));return e};var qr=function(){this._startDe=null,this._maxNodeDegree=-1,this._edges=new wn,this._pts=new wn,this._label=new Gr(Oe.NONE),this._ring=null,this._isHole=null,this._shell=null,this._holes=new wn,this._geometryFactory=null;var t=arguments[0],e=arguments[1];this._geometryFactory=e,this.computePoints(t),this.computeRing();};qr.prototype.computeRing=function(){var t=this;if(null!==this._ring)return null;for(var e=new Array(this._pts.size()).fill(null),n=0;n<this._pts.size();n++)e[n]=t._pts.get(n);this._ring=this._geometryFactory.createLinearRing(e),this._isHole=pn.isCCW(this._ring.getCoordinates());},qr.prototype.isIsolated=function(){return 1===this._label.getGeometryCount()},qr.prototype.computePoints=function(t){var e=this;this._startDe=t;var n=t,r=!0;do{if(null===n)throw new Dr("Found null DirectedEdge");if(n.getEdgeRing()===e)throw new Dr("Directed Edge visited twice during ring-building at "+n.getCoordinate());e._edges.add(n);var i=n.getLabel();rn.isTrue(i.isArea()),e.mergeLabel(i),e.addPoints(n.getEdge(),n.isForward(),r),r=!1,e.setEdgeRing(n,e),n=e.getNext(n);}while(n!==this._startDe)},qr.prototype.getLinearRing=function(){return this._ring},qr.prototype.getCoordinate=function(t){return this._pts.get(t)},qr.prototype.computeMaxNodeDegree=function(){var t=this;this._maxNodeDegree=0;var e=this._startDe;do{var n=e.getNode(),r=n.getEdges().getOutgoingDegree(t);r>t._maxNodeDegree&&(t._maxNodeDegree=r),e=t.getNext(e);}while(e!==this._startDe);this._maxNodeDegree*=2;},qr.prototype.addPoints=function(t,e,n){var r=this,i=t.getCoordinates();if(e){var o=1;n&&(o=0);for(var s=o;s<i.length;s++)r._pts.add(i[s]);}else{var a=i.length-2;n&&(a=i.length-1);for(var u=a;u>=0;u--)r._pts.add(i[u]);}},qr.prototype.isHole=function(){return this._isHole},qr.prototype.setInResult=function(){var t=this._startDe;do{t.getEdge().setInResult(!0),t=t.getNext();}while(t!==this._startDe)},qr.prototype.containsPoint=function(t){var e=this.getLinearRing();if(!e.getEnvelopeInternal().contains(t))return !1;if(!pn.isPointInRing(t,e.getCoordinates()))return !1;for(var n=this._holes.iterator();n.hasNext();){if(n.next().containsPoint(t))return !1}return !0},qr.prototype.addHole=function(t){this._holes.add(t);},qr.prototype.isShell=function(){return null===this._shell},qr.prototype.getLabel=function(){return this._label},qr.prototype.getEdges=function(){return this._edges},qr.prototype.getMaxNodeDegree=function(){return this._maxNodeDegree<0&&this.computeMaxNodeDegree(),this._maxNodeDegree},qr.prototype.getShell=function(){return this._shell},qr.prototype.mergeLabel=function(){if(1===arguments.length){var t=arguments[0];this.mergeLabel(t,0),this.mergeLabel(t,1);}else if(2===arguments.length){var e=arguments[0],n=arguments[1],r=e.getLocation(n,Or.RIGHT);if(r===Oe.NONE)return null;if(this._label.getLocation(n)===Oe.NONE)return this._label.setLocation(n,r),null}},qr.prototype.setShell=function(t){this._shell=t,null!==t&&t.addHole(this);},qr.prototype.toPolygon=function(t){for(var e=this,n=new Array(this._holes.size()).fill(null),r=0;r<this._holes.size();r++)n[r]=e._holes.get(r).getLinearRing();return t.createPolygon(this.getLinearRing(),n)},qr.prototype.interfaces_=function(){return []},qr.prototype.getClass=function(){return qr};var kr=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setEdgeRing=function(t,e){t.setMinEdgeRing(e);},e.prototype.getNext=function(t){return t.getNextMin()},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(qr),Br=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.buildMinimalRings=function(){var t=this,e=new wn,n=this._startDe;do{if(null===n.getMinEdgeRing()){var r=new kr(n,t._geometryFactory);e.add(r);}n=n.getNext();}while(n!==this._startDe);return e},e.prototype.setEdgeRing=function(t,e){t.setEdgeRing(e);},e.prototype.linkDirectedEdgesForMinimalEdgeRings=function(){var t=this,e=this._startDe;do{e.getNode().getEdges().linkMinimalDirectedEdges(t),e=e.getNext();}while(e!==this._startDe)},e.prototype.getNext=function(t){return t.getNext()},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(qr),Vr=function(){if(this._label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this._label=t;}};Vr.prototype.setVisited=function(t){this._isVisited=t;},Vr.prototype.setInResult=function(t){this._isInResult=t;},Vr.prototype.isCovered=function(){return this._isCovered},Vr.prototype.isCoveredSet=function(){return this._isCoveredSet},Vr.prototype.setLabel=function(t){this._label=t;},Vr.prototype.getLabel=function(){return this._label},Vr.prototype.setCovered=function(t){this._isCovered=t,this._isCoveredSet=!0;},Vr.prototype.updateIM=function(t){rn.isTrue(this._label.getGeometryCount()>=2,"found partial label"),this.computeIM(t);},Vr.prototype.isInResult=function(){return this._isInResult},Vr.prototype.isVisited=function(){return this._isVisited},Vr.prototype.interfaces_=function(){return []},Vr.prototype.getClass=function(){return Vr};var zr=function(t){function e(){t.call(this),this._coord=null,this._edges=null;var e=arguments[0],n=arguments[1];this._coord=e,this._edges=n,this._label=new Gr(0,Oe.NONE);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isIncidentEdgeInResult=function(){for(var t=this.getEdges().getEdges().iterator();t.hasNext();){if(t.next().getEdge().isInResult())return !0}return !1},e.prototype.isIsolated=function(){return 1===this._label.getGeometryCount()},e.prototype.getCoordinate=function(){return this._coord},e.prototype.print=function(t){t.println("node "+this._coord+" lbl: "+this._label);},e.prototype.computeIM=function(t){},e.prototype.computeMergedLocation=function(t,e){var n=Oe.NONE;if(n=this._label.getLocation(e),!t.isNull(e)){var r=t.getLocation(e);n!==Oe.BOUNDARY&&(n=r);}return n},e.prototype.setLabel=function(){if(2!==arguments.length)return t.prototype.setLabel.apply(this,arguments);var e=arguments[0],n=arguments[1];null===this._label?this._label=new Gr(e,n):this._label.setLocation(e,n);},e.prototype.getEdges=function(){return this._edges},e.prototype.mergeLabel=function(){var t=this;if(arguments[0]instanceof e){var n=arguments[0];this.mergeLabel(n._label);}else if(arguments[0]instanceof Gr)for(var r=arguments[0],i=0;i<2;i++){var o=t.computeMergedLocation(r,i),s=t._label.getLocation(i);s===Oe.NONE&&t._label.setLocation(i,o);}},e.prototype.add=function(t){this._edges.insert(t),t.setNode(this);},e.prototype.setLabelBoundary=function(t){if(null===this._label)return null;var e=Oe.NONE;null!==this._label&&(e=this._label.getLocation(t));var n=null;switch(e){case Oe.BOUNDARY:n=Oe.INTERIOR;break;case Oe.INTERIOR:default:n=Oe.BOUNDARY;}this._label.setLocation(t,n);},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(Vr),Ur=function(){this.nodeMap=new M,this.nodeFact=null;var t=arguments[0];this.nodeFact=t;};Ur.prototype.find=function(t){return this.nodeMap.get(t)},Ur.prototype.addNode=function(){if(arguments[0]instanceof we){var t=arguments[0],e=this.nodeMap.get(t);return null===e&&(e=this.nodeFact.createNode(t),this.nodeMap.put(t,e)),e}if(arguments[0]instanceof zr){var n=arguments[0],r=this.nodeMap.get(n.getCoordinate());return null===r?(this.nodeMap.put(n.getCoordinate(),n),n):(r.mergeLabel(n),r)}},Ur.prototype.print=function(t){for(var e=this.iterator();e.hasNext();){e.next().print(t);}},Ur.prototype.iterator=function(){return this.nodeMap.values().iterator()},Ur.prototype.values=function(){return this.nodeMap.values()},Ur.prototype.getBoundaryNodes=function(t){for(var e=new wn,n=this.iterator();n.hasNext();){var r=n.next();r.getLabel().getLocation(t)===Oe.BOUNDARY&&e.add(r);}return e},Ur.prototype.add=function(t){var e=t.getCoordinate();this.addNode(e).add(t);},Ur.prototype.interfaces_=function(){return []},Ur.prototype.getClass=function(){return Ur};var Xr=function(){},jr={NE:{configurable:!0},NW:{configurable:!0},SW:{configurable:!0},SE:{configurable:!0}};Xr.prototype.interfaces_=function(){return []},Xr.prototype.getClass=function(){return Xr},Xr.isNorthern=function(t){return t===Xr.NE||t===Xr.NW},Xr.isOpposite=function(t,e){return t!==e&&2==(t-e+4)%4},Xr.commonHalfPlane=function(t,e){if(t===e)return t;if(2==(t-e+4)%4)return -1;var n=t<e?t:e,r=t>e?t:e;return 0===n&&3===r?3:n},Xr.isInHalfPlane=function(t,e){return e===Xr.SE?t===Xr.SE||t===Xr.SW:t===e||t===e+1},Xr.quadrant=function(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new Ee("Cannot compute the quadrant for point ( "+t+", "+e+" )");return t>=0?e>=0?Xr.NE:Xr.SE:e>=0?Xr.NW:Xr.SW}if(arguments[0]instanceof we&&arguments[1]instanceof we){var n=arguments[0],r=arguments[1];if(r.x===n.x&&r.y===n.y)throw new Ee("Cannot compute the quadrant for two identical points "+n);return r.x>=n.x?r.y>=n.y?Xr.NE:Xr.SE:r.y>=n.y?Xr.NW:Xr.SW}},jr.NE.get=function(){return 0},jr.NW.get=function(){return 1},jr.SW.get=function(){return 2},jr.SE.get=function(){return 3},Object.defineProperties(Xr,jr);var Yr=function(){if(this._edge=null,this._label=null,this._node=null,this._p0=null,this._p1=null,this._dx=null,this._dy=null,this._quadrant=null,1===arguments.length){var t=arguments[0];this._edge=t;}else if(3===arguments.length){var e=arguments[0],n=arguments[1],r=arguments[2],i=null;this._edge=e,this.init(n,r),this._label=i;}else if(4===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2],u=arguments[3];this._edge=o,this.init(s,a),this._label=u;}};Yr.prototype.compareDirection=function(t){return this._dx===t._dx&&this._dy===t._dy?0:this._quadrant>t._quadrant?1:this._quadrant<t._quadrant?-1:pn.computeOrientation(t._p0,t._p1,this._p1)},Yr.prototype.getDy=function(){return this._dy},Yr.prototype.getCoordinate=function(){return this._p0},Yr.prototype.setNode=function(t){this._node=t;},Yr.prototype.print=function(t){var e=Math.atan2(this._dy,this._dx),n=this.getClass().getName(),r=n.lastIndexOf("."),i=n.substring(r+1);t.print("  "+i+": "+this._p0+" - "+this._p1+" "+this._quadrant+":"+e+"   "+this._label);},Yr.prototype.compareTo=function(t){var e=t;return this.compareDirection(e)},Yr.prototype.getDirectedCoordinate=function(){return this._p1},Yr.prototype.getDx=function(){return this._dx},Yr.prototype.getLabel=function(){return this._label},Yr.prototype.getEdge=function(){return this._edge},Yr.prototype.getQuadrant=function(){return this._quadrant},Yr.prototype.getNode=function(){return this._node},Yr.prototype.toString=function(){var t=Math.atan2(this._dy,this._dx),e=this.getClass().getName(),n=e.lastIndexOf(".");return "  "+e.substring(n+1)+": "+this._p0+" - "+this._p1+" "+this._quadrant+":"+t+"   "+this._label},Yr.prototype.computeLabel=function(t){},Yr.prototype.init=function(t,e){this._p0=t,this._p1=e,this._dx=e.x-t.x,this._dy=e.y-t.y,this._quadrant=Xr.quadrant(this._dx,this._dy),rn.isTrue(!(0===this._dx&&0===this._dy),"EdgeEnd with identical endpoints found");},Yr.prototype.interfaces_=function(){return [Ne]},Yr.prototype.getClass=function(){return Yr};var Hr=function(t){function e(){var e=arguments[0],n=arguments[1];if(t.call(this,e),this._isForward=null,this._isInResult=!1,this._isVisited=!1,this._sym=null,this._next=null,this._nextMin=null,this._edgeRing=null,this._minEdgeRing=null,this._depth=[0,-999,-999],this._isForward=n,n)this.init(e.getCoordinate(0),e.getCoordinate(1));else{var r=e.getNumPoints()-1;this.init(e.getCoordinate(r),e.getCoordinate(r-1));}this.computeDirectedLabel();}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getNextMin=function(){return this._nextMin},e.prototype.getDepth=function(t){return this._depth[t]},e.prototype.setVisited=function(t){this._isVisited=t;},e.prototype.computeDirectedLabel=function(){this._label=new Gr(this._edge.getLabel()),this._isForward||this._label.flip();},e.prototype.getNext=function(){return this._next},e.prototype.setDepth=function(t,e){if(-999!==this._depth[t]&&this._depth[t]!==e)throw new Dr("assigned depths do not match",this.getCoordinate());this._depth[t]=e;},e.prototype.isInteriorAreaEdge=function(){
    for(var t=this,e=!0,n=0;n<2;n++)t._label.isArea(n)&&t._label.getLocation(n,Or.LEFT)===Oe.INTERIOR&&t._label.getLocation(n,Or.RIGHT)===Oe.INTERIOR||(e=!1);return e},e.prototype.setNextMin=function(t){this._nextMin=t;},e.prototype.print=function(e){t.prototype.print.call(this,e),e.print(" "+this._depth[Or.LEFT]+"/"+this._depth[Or.RIGHT]),e.print(" ("+this.getDepthDelta()+")"),this._isInResult&&e.print(" inResult");},e.prototype.setMinEdgeRing=function(t){this._minEdgeRing=t;},e.prototype.isLineEdge=function(){var t=this._label.isLine(0)||this._label.isLine(1),e=!this._label.isArea(0)||this._label.allPositionsEqual(0,Oe.EXTERIOR),n=!this._label.isArea(1)||this._label.allPositionsEqual(1,Oe.EXTERIOR);return t&&e&&n},e.prototype.setEdgeRing=function(t){this._edgeRing=t;},e.prototype.getMinEdgeRing=function(){return this._minEdgeRing},e.prototype.getDepthDelta=function(){var t=this._edge.getDepthDelta();return this._isForward||(t=-t),t},e.prototype.setInResult=function(t){this._isInResult=t;},e.prototype.getSym=function(){return this._sym},e.prototype.isForward=function(){return this._isForward},e.prototype.getEdge=function(){return this._edge},e.prototype.printEdge=function(t){this.print(t),t.print(" "),this._isForward?this._edge.print(t):this._edge.printReverse(t);},e.prototype.setSym=function(t){this._sym=t;},e.prototype.setVisitedEdge=function(t){this.setVisited(t),this._sym.setVisited(t);},e.prototype.setEdgeDepths=function(t,e){var n=this.getEdge().getDepthDelta();this._isForward||(n=-n);var r=1;t===Or.LEFT&&(r=-1);var i=Or.opposite(t),o=n*r,s=e+o;this.setDepth(t,e),this.setDepth(i,s);},e.prototype.getEdgeRing=function(){return this._edgeRing},e.prototype.isInResult=function(){return this._isInResult},e.prototype.setNext=function(t){this._next=t;},e.prototype.isVisited=function(){return this._isVisited},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e.depthFactor=function(t,e){return t===Oe.EXTERIOR&&e===Oe.INTERIOR?1:t===Oe.INTERIOR&&e===Oe.EXTERIOR?-1:0},e}(Yr),Wr=function(){};Wr.prototype.createNode=function(t){return new zr(t,null)},Wr.prototype.interfaces_=function(){return []},Wr.prototype.getClass=function(){return Wr};var Kr=function(){if(this._edges=new wn,this._nodes=null,this._edgeEndList=new wn,0===arguments.length)this._nodes=new Ur(new Wr);else if(1===arguments.length){var t=arguments[0];this._nodes=new Ur(t);}};Kr.prototype.printEdges=function(t){var e=this;t.println("Edges:");for(var n=0;n<this._edges.size();n++){t.println("edge "+n+":");var r=e._edges.get(n);r.print(t),r.eiList.print(t);}},Kr.prototype.find=function(t){return this._nodes.find(t)},Kr.prototype.addNode=function(){if(arguments[0]instanceof zr){var t=arguments[0];return this._nodes.addNode(t)}if(arguments[0]instanceof we){var e=arguments[0];return this._nodes.addNode(e)}},Kr.prototype.getNodeIterator=function(){return this._nodes.iterator()},Kr.prototype.linkResultDirectedEdges=function(){for(var t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkResultDirectedEdges();}},Kr.prototype.debugPrintln=function(t){Ye.out.println(t);},Kr.prototype.isBoundaryNode=function(t,e){var n=this._nodes.find(e);if(null===n)return !1;var r=n.getLabel();return null!==r&&r.getLocation(t)===Oe.BOUNDARY},Kr.prototype.linkAllDirectedEdges=function(){for(var t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkAllDirectedEdges();}},Kr.prototype.matchInSameDirection=function(t,e,n,r){return !!t.equals(n)&&(pn.computeOrientation(t,e,r)===pn.COLLINEAR&&Xr.quadrant(t,e)===Xr.quadrant(n,r))},Kr.prototype.getEdgeEnds=function(){return this._edgeEndList},Kr.prototype.debugPrint=function(t){Ye.out.print(t);},Kr.prototype.getEdgeIterator=function(){return this._edges.iterator()},Kr.prototype.findEdgeInSameDirection=function(t,e){for(var n=this,r=0;r<this._edges.size();r++){var i=n._edges.get(r),o=i.getCoordinates();if(n.matchInSameDirection(t,e,o[0],o[1]))return i;if(n.matchInSameDirection(t,e,o[o.length-1],o[o.length-2]))return i}return null},Kr.prototype.insertEdge=function(t){this._edges.add(t);},Kr.prototype.findEdgeEnd=function(t){for(var e=this.getEdgeEnds().iterator();e.hasNext();){var n=e.next();if(n.getEdge()===t)return n}return null},Kr.prototype.addEdges=function(t){for(var e=this,n=t.iterator();n.hasNext();){var r=n.next();e._edges.add(r);var i=new Hr(r,!0),o=new Hr(r,!1);i.setSym(o),o.setSym(i),e.add(i),e.add(o);}},Kr.prototype.add=function(t){this._nodes.add(t),this._edgeEndList.add(t);},Kr.prototype.getNodes=function(){return this._nodes.values()},Kr.prototype.findEdge=function(t,e){for(var n=this,r=0;r<this._edges.size();r++){var i=n._edges.get(r),o=i.getCoordinates();if(t.equals(o[0])&&e.equals(o[1]))return i}return null},Kr.prototype.interfaces_=function(){return []},Kr.prototype.getClass=function(){return Kr},Kr.linkResultDirectedEdges=function(t){for(var e=t.iterator();e.hasNext();){e.next().getEdges().linkResultDirectedEdges();}};var Jr=function(){this._geometryFactory=null,this._shellList=new wn;var t=arguments[0];this._geometryFactory=t;};Jr.prototype.sortShellsAndHoles=function(t,e,n){for(var r=t.iterator();r.hasNext();){var i=r.next();i.isHole()?n.add(i):e.add(i);}},Jr.prototype.computePolygons=function(t){for(var e=this,n=new wn,r=t.iterator();r.hasNext();){var i=r.next(),o=i.toPolygon(e._geometryFactory);n.add(o);}return n},Jr.prototype.placeFreeHoles=function(t,e){for(var n=this,r=e.iterator();r.hasNext();){var i=r.next();if(null===i.getShell()){var o=n.findEdgeRingContaining(i,t);if(null===o)throw new Dr("unable to assign hole to a shell",i.getCoordinate(0));i.setShell(o);}}},Jr.prototype.buildMinimalEdgeRings=function(t,e,n){for(var r=this,i=new wn,o=t.iterator();o.hasNext();){var s=o.next();if(s.getMaxNodeDegree()>2){s.linkDirectedEdgesForMinimalEdgeRings();var a=s.buildMinimalRings(),u=r.findShell(a);null!==u?(r.placePolygonHoles(u,a),e.add(u)):n.addAll(a);}else i.add(s);}return i},Jr.prototype.containsPoint=function(t){for(var e=this._shellList.iterator();e.hasNext();){if(e.next().containsPoint(t))return !0}return !1},Jr.prototype.buildMaximalEdgeRings=function(t){for(var e=this,n=new wn,r=t.iterator();r.hasNext();){var i=r.next();if(i.isInResult()&&i.getLabel().isArea()&&null===i.getEdgeRing()){var o=new Br(i,e._geometryFactory);n.add(o),o.setInResult();}}return n},Jr.prototype.placePolygonHoles=function(t,e){for(var n=e.iterator();n.hasNext();){var r=n.next();r.isHole()&&r.setShell(t);}},Jr.prototype.getPolygons=function(){return this.computePolygons(this._shellList)},Jr.prototype.findEdgeRingContaining=function(t,e){for(var n=t.getLinearRing(),r=n.getEnvelopeInternal(),i=n.getCoordinateN(0),o=null,s=null,a=e.iterator();a.hasNext();){var u=a.next(),l=u.getLinearRing(),p=l.getEnvelopeInternal();null!==o&&(s=o.getLinearRing().getEnvelopeInternal());var c=!1;p.contains(r)&&pn.isPointInRing(i,l.getCoordinates())&&(c=!0),c&&(null===o||s.contains(p))&&(o=u);}return o},Jr.prototype.findShell=function(t){for(var e=0,n=null,r=t.iterator();r.hasNext();){var i=r.next();i.isHole()||(n=i,e++);}return rn.isTrue(e<=1,"found two shells in MinimalEdgeRing list"),n},Jr.prototype.add=function(){if(1===arguments.length){var t=arguments[0];this.add(t.getEdgeEnds(),t.getNodes());}else if(2===arguments.length){var e=arguments[0],n=arguments[1];Kr.linkResultDirectedEdges(n);var r=this.buildMaximalEdgeRings(e),i=new wn,o=this.buildMinimalEdgeRings(r,this._shellList,i);this.sortShellsAndHoles(o,this._shellList,i),this.placeFreeHoles(this._shellList,i);}},Jr.prototype.interfaces_=function(){return []},Jr.prototype.getClass=function(){return Jr};var Qr=function(){};Qr.prototype.getBounds=function(){},Qr.prototype.interfaces_=function(){return []},Qr.prototype.getClass=function(){return Qr};var Zr=function(){this._bounds=null,this._item=null;var t=arguments[0],e=arguments[1];this._bounds=t,this._item=e;};Zr.prototype.getItem=function(){return this._item},Zr.prototype.getBounds=function(){return this._bounds},Zr.prototype.interfaces_=function(){return [Qr,b]},Zr.prototype.getClass=function(){return Zr};var $r=function(){this._size=null,this._items=null,this._size=0,this._items=new wn,this._items.add(null);};$r.prototype.poll=function(){if(this.isEmpty())return null;var t=this._items.get(1);return this._items.set(1,this._items.get(this._size)),this._size-=1,this.reorder(1),t},$r.prototype.size=function(){return this._size},$r.prototype.reorder=function(t){for(var e=this,n=null,r=this._items.get(t);2*t<=this._size&&(n=2*t,n!==e._size&&e._items.get(n+1).compareTo(e._items.get(n))<0&&n++,e._items.get(n).compareTo(r)<0);t=n)e._items.set(t,e._items.get(n));this._items.set(t,r);},$r.prototype.clear=function(){this._size=0,this._items.clear();},$r.prototype.isEmpty=function(){return 0===this._size},$r.prototype.add=function(t){var e=this;this._items.add(null),this._size+=1;var n=this._size;for(this._items.set(0,t);t.compareTo(this._items.get(Math.trunc(n/2)))<0;n/=2)e._items.set(n,e._items.get(Math.trunc(n/2)));this._items.set(n,t);},$r.prototype.interfaces_=function(){return []},$r.prototype.getClass=function(){return $r};var ti=function(){};ti.prototype.visitItem=function(t){},ti.prototype.interfaces_=function(){return []},ti.prototype.getClass=function(){return ti};var ei=function(){};ei.prototype.insert=function(t,e){},ei.prototype.remove=function(t,e){},ei.prototype.query=function(){},ei.prototype.interfaces_=function(){return []},ei.prototype.getClass=function(){return ei};var ni=function(){if(this._childBoundables=new wn,this._bounds=null,this._level=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this._level=t;}},ri={serialVersionUID:{configurable:!0}};ni.prototype.getLevel=function(){return this._level},ni.prototype.size=function(){return this._childBoundables.size()},ni.prototype.getChildBoundables=function(){return this._childBoundables},ni.prototype.addChildBoundable=function(t){rn.isTrue(null===this._bounds),this._childBoundables.add(t);},ni.prototype.isEmpty=function(){return this._childBoundables.isEmpty()},ni.prototype.getBounds=function(){return null===this._bounds&&(this._bounds=this.computeBounds()),this._bounds},ni.prototype.interfaces_=function(){return [Qr,b]},ni.prototype.getClass=function(){return ni},ri.serialVersionUID.get=function(){return 0x5a1e55ec41369800},Object.defineProperties(ni,ri);var ii=function(){};ii.reverseOrder=function(){return {compare:function(t,e){return e.compareTo(t)}}},ii.min=function(t){return ii.sort(t),t.get(0)},ii.sort=function(t,e){var n=t.toArray();e?Vn.sort(n,e):Vn.sort(n);for(var r=t.iterator(),i=0,o=n.length;i<o;i++)r.next(),r.set(n[i]);},ii.singletonList=function(t){var e=new wn;return e.add(t),e};var oi=function(){this._boundable1=null,this._boundable2=null,this._distance=null,this._itemDistance=null;var t=arguments[0],e=arguments[1],n=arguments[2];this._boundable1=t,this._boundable2=e,this._itemDistance=n,this._distance=this.distance();};oi.prototype.expandToQueue=function(t,e){var n=oi.isComposite(this._boundable1),r=oi.isComposite(this._boundable2);if(n&&r)return oi.area(this._boundable1)>oi.area(this._boundable2)?(this.expand(this._boundable1,this._boundable2,t,e),null):(this.expand(this._boundable2,this._boundable1,t,e),null);if(n)return this.expand(this._boundable1,this._boundable2,t,e),null;if(r)return this.expand(this._boundable2,this._boundable1,t,e),null;throw new Ee("neither boundable is composite")},oi.prototype.isLeaves=function(){return !(oi.isComposite(this._boundable1)||oi.isComposite(this._boundable2))},oi.prototype.compareTo=function(t){var e=t;return this._distance<e._distance?-1:this._distance>e._distance?1:0},oi.prototype.expand=function(t,e,n,r){for(var i=this,o=t.getChildBoundables(),s=o.iterator();s.hasNext();){var a=s.next(),u=new oi(a,e,i._itemDistance);u.getDistance()<r&&n.add(u);}},oi.prototype.getBoundable=function(t){return 0===t?this._boundable1:this._boundable2},oi.prototype.getDistance=function(){return this._distance},oi.prototype.distance=function(){return this.isLeaves()?this._itemDistance.distance(this._boundable1,this._boundable2):this._boundable1.getBounds().distance(this._boundable2.getBounds())},oi.prototype.interfaces_=function(){return [Ne]},oi.prototype.getClass=function(){return oi},oi.area=function(t){return t.getBounds().getArea()},oi.isComposite=function(t){return t instanceof ni};var si=function t(){if(this._root=null,this._built=!1,this._itemBoundables=new wn,this._nodeCapacity=null,0===arguments.length){var e=t.DEFAULT_NODE_CAPACITY;this._nodeCapacity=e;}else if(1===arguments.length){var n=arguments[0];rn.isTrue(n>1,"Node capacity must be greater than 1"),this._nodeCapacity=n;}},ai={IntersectsOp:{configurable:!0},serialVersionUID:{configurable:!0},DEFAULT_NODE_CAPACITY:{configurable:!0}};si.prototype.getNodeCapacity=function(){return this._nodeCapacity},si.prototype.lastNode=function(t){return t.get(t.size()-1)},si.prototype.size=function(){var t=this;if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this._root));if(1===arguments.length){for(var e=arguments[0],n=0,r=e.getChildBoundables().iterator();r.hasNext();){var i=r.next();i instanceof ni?n+=t.size(i):i instanceof Zr&&(n+=1);}return n}},si.prototype.removeItem=function(t,e){for(var n=null,r=t.getChildBoundables().iterator();r.hasNext();){var i=r.next();i instanceof Zr&&i.getItem()===e&&(n=i);}return null!==n&&(t.getChildBoundables().remove(n),!0)},si.prototype.itemsTree=function(){var t=this;if(0===arguments.length){this.build();var e=this.itemsTree(this._root);return null===e?new wn:e}if(1===arguments.length){for(var n=arguments[0],r=new wn,i=n.getChildBoundables().iterator();i.hasNext();){var o=i.next();if(o instanceof ni){var s=t.itemsTree(o);null!==s&&r.add(s);}else o instanceof Zr?r.add(o.getItem()):rn.shouldNeverReachHere();}return r.size()<=0?null:r}},si.prototype.insert=function(t,e){rn.isTrue(!this._built,"Cannot insert items into an STR packed R-tree after it has been built."),this._itemBoundables.add(new Zr(t,e));},si.prototype.boundablesAtLevel=function(){var t=this;if(1===arguments.length){var e=arguments[0],n=new wn;return this.boundablesAtLevel(e,this._root,n),n}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];if(rn.isTrue(r>-2),i.getLevel()===r)return o.add(i),null;for(var s=i.getChildBoundables().iterator();s.hasNext();){var a=s.next();a instanceof ni?t.boundablesAtLevel(r,a,o):(rn.isTrue(a instanceof Zr),-1===r&&o.add(a));}return null}},si.prototype.query=function(){var t=this;if(1===arguments.length){var e=arguments[0];this.build();var n=new wn;return this.isEmpty()?n:(this.getIntersectsOp().intersects(this._root.getBounds(),e)&&this.query(e,this._root,n),n)}if(2===arguments.length){var r=arguments[0],i=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this._root.getBounds(),r)&&this.query(r,this._root,i);}else if(3===arguments.length)if(Re(arguments[2],ti)&&arguments[0]instanceof Object&&arguments[1]instanceof ni)for(var o=arguments[0],s=arguments[1],a=arguments[2],u=s.getChildBoundables(),l=0;l<u.size();l++){var p=u.get(l);t.getIntersectsOp().intersects(p.getBounds(),o)&&(p instanceof ni?t.query(o,p,a):p instanceof Zr?a.visitItem(p.getItem()):rn.shouldNeverReachHere());}else if(Re(arguments[2],Cn)&&arguments[0]instanceof Object&&arguments[1]instanceof ni)for(var c=arguments[0],h=arguments[1],f=arguments[2],g=h.getChildBoundables(),d=0;d<g.size();d++){var y=g.get(d);t.getIntersectsOp().intersects(y.getBounds(),c)&&(y instanceof ni?t.query(c,y,f):y instanceof Zr?f.add(y.getItem()):rn.shouldNeverReachHere());}},si.prototype.build=function(){if(this._built)return null;this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1),this._itemBoundables=null,this._built=!0;},si.prototype.getRoot=function(){return this.build(),this._root},si.prototype.remove=function(){var t=this;if(2===arguments.length){var e=arguments[0],n=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this._root.getBounds(),e)&&this.remove(e,this._root,n)}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2],s=this.removeItem(i,o);if(s)return !0;for(var a=null,u=i.getChildBoundables().iterator();u.hasNext();){var l=u.next();if(t.getIntersectsOp().intersects(l.getBounds(),r)&&(l instanceof ni&&(s=t.remove(r,l,o)))){a=l;break}}return null!==a&&a.getChildBoundables().isEmpty()&&i.getChildBoundables().remove(a),s}},si.prototype.createHigherLevels=function(t,e){rn.isTrue(!t.isEmpty());var n=this.createParentBoundables(t,e+1);return 1===n.size()?n.get(0):this.createHigherLevels(n,e+1)},si.prototype.depth=function(){var t=this;if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this._root));if(1===arguments.length){for(var e=arguments[0],n=0,r=e.getChildBoundables().iterator();r.hasNext();){var i=r.next();if(i instanceof ni){var o=t.depth(i);o>n&&(n=o);}}return n+1}},si.prototype.createParentBoundables=function(t,e){var n=this;rn.isTrue(!t.isEmpty());var r=new wn;r.add(this.createNode(e));var i=new wn(t);ii.sort(i,this.getComparator());for(var o=i.iterator();o.hasNext();){var s=o.next();n.lastNode(r).getChildBoundables().size()===n.getNodeCapacity()&&r.add(n.createNode(e)),n.lastNode(r).addChildBoundable(s);}return r},si.prototype.isEmpty=function(){return this._built?this._root.isEmpty():this._itemBoundables.isEmpty()},si.prototype.interfaces_=function(){return [b]},si.prototype.getClass=function(){return si},si.compareDoubles=function(t,e){return t>e?1:t<e?-1:0},ai.IntersectsOp.get=function(){return ui},ai.serialVersionUID.get=function(){return -0x35ef64c82d4c5400},ai.DEFAULT_NODE_CAPACITY.get=function(){return 10},Object.defineProperties(si,ai);var ui=function(){},li=function(){};li.prototype.distance=function(t,e){},li.prototype.interfaces_=function(){return []},li.prototype.getClass=function(){return li};var pi=function(t){function e(n){n=n||e.DEFAULT_NODE_CAPACITY,t.call(this,n);}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={STRtreeNode:{configurable:!0},serialVersionUID:{configurable:!0},xComparator:{configurable:!0},yComparator:{configurable:!0},intersectsOp:{configurable:!0},DEFAULT_NODE_CAPACITY:{configurable:!0}};return e.prototype.createParentBoundablesFromVerticalSlices=function(t,e){var n=this;rn.isTrue(t.length>0);for(var r=new wn,i=0;i<t.length;i++)r.addAll(n.createParentBoundablesFromVerticalSlice(t[i],e));return r},e.prototype.createNode=function(t){return new ci(t)},e.prototype.size=function(){return 0===arguments.length?t.prototype.size.call(this):t.prototype.size.apply(this,arguments)},e.prototype.insert=function(){if(2!==arguments.length)return t.prototype.insert.apply(this,arguments);var e=arguments[0],n=arguments[1];if(e.isNull())return null;t.prototype.insert.call(this,e,n);},e.prototype.getIntersectsOp=function(){return e.intersectsOp},e.prototype.verticalSlices=function(t,e){for(var n=Math.trunc(Math.ceil(t.size()/e)),r=new Array(e).fill(null),i=t.iterator(),o=0;o<e;o++){r[o]=new wn;for(var s=0;i.hasNext()&&s<n;){var a=i.next();r[o].add(a),s++;}}return r},e.prototype.query=function(){if(1===arguments.length){var e=arguments[0];return t.prototype.query.call(this,e)}if(2===arguments.length){var n=arguments[0],r=arguments[1];t.prototype.query.call(this,n,r);}else if(3===arguments.length)if(Re(arguments[2],ti)&&arguments[0]instanceof Object&&arguments[1]instanceof ni){var i=arguments[0],o=arguments[1],s=arguments[2];t.prototype.query.call(this,i,o,s);}else if(Re(arguments[2],Cn)&&arguments[0]instanceof Object&&arguments[1]instanceof ni){var a=arguments[0],u=arguments[1],l=arguments[2];t.prototype.query.call(this,a,u,l);}},e.prototype.getComparator=function(){return e.yComparator},e.prototype.createParentBoundablesFromVerticalSlice=function(e,n){return t.prototype.createParentBoundables.call(this,e,n)},e.prototype.remove=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return t.prototype.remove.call(this,e,n)}return t.prototype.remove.apply(this,arguments)},e.prototype.depth=function(){return 0===arguments.length?t.prototype.depth.call(this):t.prototype.depth.apply(this,arguments)},e.prototype.createParentBoundables=function(t,n){rn.isTrue(!t.isEmpty());var r=Math.trunc(Math.ceil(t.size()/this.getNodeCapacity())),i=new wn(t);ii.sort(i,e.xComparator);var o=this.verticalSlices(i,Math.trunc(Math.ceil(Math.sqrt(r))));return this.createParentBoundablesFromVerticalSlices(o,n)},e.prototype.nearestNeighbour=function(){if(1===arguments.length){if(Re(arguments[0],li)){var t=arguments[0],n=new oi(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour(n)}if(arguments[0]instanceof oi){var r=arguments[0];return this.nearestNeighbour(r,Ie.POSITIVE_INFINITY)}}else if(2===arguments.length){if(arguments[0]instanceof e&&Re(arguments[1],li)){var i=arguments[0],o=arguments[1],s=new oi(this.getRoot(),i.getRoot(),o);return this.nearestNeighbour(s)}if(arguments[0]instanceof oi&&"number"==typeof arguments[1]){var a=arguments[0],u=arguments[1],l=u,p=null,c=new $r;for(c.add(a);!c.isEmpty()&&l>0;){var h=c.poll(),f=h.getDistance();if(f>=l)break;h.isLeaves()?(l=f,p=h):h.expandToQueue(c,l);}return [p.getBoundable(0).getItem(),p.getBoundable(1).getItem()]}}else if(3===arguments.length){var g=arguments[0],d=arguments[1],y=arguments[2],_=new Zr(g,d),m=new oi(this.getRoot(),_,y);return this.nearestNeighbour(m)[0]}},e.prototype.interfaces_=function(){return [ei,b]},e.prototype.getClass=function(){return e},e.centreX=function(t){return e.avg(t.getMinX(),t.getMaxX())},e.avg=function(t,e){return (t+e)/2},e.centreY=function(t){return e.avg(t.getMinY(),t.getMaxY())},n.STRtreeNode.get=function(){return ci},n.serialVersionUID.get=function(){return 0x39920f7d5f261e0},n.xComparator.get=function(){return {interfaces_:function(){return [Ce]},compare:function(n,r){return t.compareDoubles(e.centreX(n.getBounds()),e.centreX(r.getBounds()))}}},n.yComparator.get=function(){return {interfaces_:function(){return [Ce]},compare:function(n,r){return t.compareDoubles(e.centreY(n.getBounds()),e.centreY(r.getBounds()))}}},n.intersectsOp.get=function(){return {interfaces_:function(){return [t.IntersectsOp]},intersects:function(t,e){return t.intersects(e)}}},n.DEFAULT_NODE_CAPACITY.get=function(){return 10},Object.defineProperties(e,n),e}(si),ci=function(t){function e(){var e=arguments[0];t.call(this,e);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.computeBounds=function(){for(var t=null,e=this.getChildBoundables().iterator();e.hasNext();){var n=e.next();null===t?t=new We(n.getBounds()):t.expandToInclude(n.getBounds());}return t},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(ni),hi=function(){};hi.prototype.interfaces_=function(){return []},hi.prototype.getClass=function(){return hi},hi.relativeSign=function(t,e){return t<e?-1:t>e?1:0},hi.compare=function(t,e,n){if(e.equals2D(n))return 0;var r=hi.relativeSign(e.x,n.x),i=hi.relativeSign(e.y,n.y);switch(t){case 0:return hi.compareValue(r,i);case 1:return hi.compareValue(i,r);case 2:return hi.compareValue(i,-r);case 3:return hi.compareValue(-r,i);case 4:return hi.compareValue(-r,-i);case 5:return hi.compareValue(-i,-r);case 6:return hi.compareValue(-i,r);case 7:return hi.compareValue(r,-i)}return rn.shouldNeverReachHere("invalid octant value"),0},hi.compareValue=function(t,e){return t<0?-1:t>0?1:e<0?-1:e>0?1:0};var fi=function(){this._segString=null,this.coord=null,this.segmentIndex=null,this._segmentOctant=null,this._isInterior=null;var t=arguments[0],e=arguments[1],n=arguments[2],r=arguments[3];this._segString=t,this.coord=new we(e),this.segmentIndex=n,this._segmentOctant=r,this._isInterior=!e.equals2D(t.getCoordinate(n));};fi.prototype.getCoordinate=function(){return this.coord},fi.prototype.print=function(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex);},fi.prototype.compareTo=function(t){var e=t;return this.segmentIndex<e.segmentIndex?-1:this.segmentIndex>e.segmentIndex?1:this.coord.equals2D(e.coord)?0:hi.compare(this._segmentOctant,this.coord,e.coord)},fi.prototype.isEndPoint=function(t){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===t},fi.prototype.isInterior=function(){return this._isInterior},fi.prototype.interfaces_=function(){return [Ne]},fi.prototype.getClass=function(){return fi};var gi=function(){this._nodeMap=new M,this._edge=null;var t=arguments[0];this._edge=t;};gi.prototype.getSplitCoordinates=function(){var t=this,e=new Ln;this.addEndpoints();for(var n=this.iterator(),r=n.next();n.hasNext();){var i=n.next();t.addEdgeCoordinates(r,i,e),r=i;}return e.toCoordinateArray()},gi.prototype.addCollapsedNodes=function(){var t=this,e=new wn;this.findCollapsesFromInsertedNodes(e),this.findCollapsesFromExistingVertices(e);for(var n=e.iterator();n.hasNext();){var r=n.next().intValue();t.add(t._edge.getCoordinate(r),r);}},gi.prototype.print=function(t){t.println("Intersections:");for(var e=this.iterator();e.hasNext();){e.next().print(t);}},gi.prototype.findCollapsesFromExistingVertices=function(t){for(var e=this,n=0;n<this._edge.size()-2;n++){var r=e._edge.getCoordinate(n),i=e._edge.getCoordinate(n+2);r.equals2D(i)&&t.add(new Fe(n+1));}},gi.prototype.addEdgeCoordinates=function(t,e,n){var r=this,i=this._edge.getCoordinate(e.segmentIndex),o=e.isInterior()||!e.coord.equals2D(i);n.add(new we(t.coord),!1);for(var s=t.segmentIndex+1;s<=e.segmentIndex;s++)n.add(r._edge.getCoordinate(s));o&&n.add(new we(e.coord));},gi.prototype.iterator=function(){return this._nodeMap.values().iterator()},gi.prototype.addSplitEdges=function(t){var e=this;this.addEndpoints(),this.addCollapsedNodes();for(var n=this.iterator(),r=n.next();n.hasNext();){var i=n.next(),o=e.createSplitEdge(r,i);t.add(o),r=i;}},gi.prototype.findCollapseIndex=function(t,e,n){if(!t.coord.equals2D(e.coord))return !1;var r=e.segmentIndex-t.segmentIndex;return e.isInterior()||r--,1===r&&(n[0]=t.segmentIndex+1,!0)},gi.prototype.findCollapsesFromInsertedNodes=function(t){for(var e=this,n=new Array(1).fill(null),r=this.iterator(),i=r.next();r.hasNext();){var o=r.next();e.findCollapseIndex(i,o,n)&&t.add(new Fe(n[0])),i=o;}},gi.prototype.getEdge=function(){return this._edge},gi.prototype.addEndpoints=function(){var t=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0),this.add(this._edge.getCoordinate(t),t);},gi.prototype.createSplitEdge=function(t,e){var n=this,r=e.segmentIndex-t.segmentIndex+2,i=this._edge.getCoordinate(e.segmentIndex),o=e.isInterior()||!e.coord.equals2D(i);o||r--;var s=new Array(r).fill(null),a=0;s[a++]=new we(t.coord);for(var u=t.segmentIndex+1;u<=e.segmentIndex;u++)s[a++]=n._edge.getCoordinate(u);return o&&(s[a]=new we(e.coord)),new mi(s,this._edge.getData())},gi.prototype.add=function(t,e){var n=new fi(this._edge,t,e,this._edge.getSegmentOctant(e)),r=this._nodeMap.get(n);return null!==r?(rn.isTrue(r.coord.equals2D(t),"Found equal nodes with different coordinates"),r):(this._nodeMap.put(n,n),n)},gi.prototype.checkSplitEdgesCorrectness=function(t){var e=this._edge.getCoordinates(),n=t.get(0),r=n.getCoordinate(0);if(!r.equals2D(e[0]))throw new en("bad split edge start point at "+r);var i=t.get(t.size()-1),o=i.getCoordinates(),s=o[o.length-1];if(!s.equals2D(e[e.length-1]))throw new en("bad split edge end point at "+s)},gi.prototype.interfaces_=function(){return []},gi.prototype.getClass=function(){return gi};var di=function(){};di.prototype.interfaces_=function(){return []},di.prototype.getClass=function(){return di},di.octant=function(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new Ee("Cannot compute the octant for point ( "+t+", "+e+" )");var n=Math.abs(t),r=Math.abs(e);return t>=0?e>=0?n>=r?0:1:n>=r?7:6:e>=0?n>=r?3:2:n>=r?4:5}if(arguments[0]instanceof we&&arguments[1]instanceof we){var i=arguments[0],o=arguments[1],s=o.x-i.x,a=o.y-i.y;if(0===s&&0===a)throw new Ee("Cannot compute the octant for two identical points "+i);return di.octant(s,a)}};var yi=function(){};yi.prototype.getCoordinates=function(){},yi.prototype.size=function(){},yi.prototype.getCoordinate=function(t){},yi.prototype.isClosed=function(){},yi.prototype.setData=function(t){},yi.prototype.getData=function(){},yi.prototype.interfaces_=function(){return []},yi.prototype.getClass=function(){return yi};var _i=function(){};_i.prototype.addIntersection=function(t,e){},_i.prototype.interfaces_=function(){return [yi]},_i.prototype.getClass=function(){return _i};var mi=function(){this._nodeList=new gi(this),this._pts=null,this._data=null;var t=arguments[0],e=arguments[1];this._pts=t,this._data=e;};mi.prototype.getCoordinates=function(){return this._pts},mi.prototype.size=function(){return this._pts.length},mi.prototype.getCoordinate=function(t){return this._pts[t]},mi.prototype.isClosed=function(){return this._pts[0].equals(this._pts[this._pts.length-1])},mi.prototype.getSegmentOctant=function(t){return t===this._pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))},mi.prototype.setData=function(t){this._data=t;},mi.prototype.safeOctant=function(t,e){return t.equals2D(e)?0:di.octant(t,e)},mi.prototype.getData=function(){return this._data},mi.prototype.addIntersection=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.addIntersectionNode(t,e);}else if(4===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[3],o=new we(n.getIntersection(i));this.addIntersection(o,r);}},mi.prototype.toString=function(){return tn.toLineString(new fr(this._pts))},mi.prototype.getNodeList=function(){return this._nodeList},mi.prototype.addIntersectionNode=function(t,e){var n=e,r=n+1;if(r<this._pts.length){var i=this._pts[r];t.equals2D(i)&&(n=r);}return this._nodeList.add(t,n)},mi.prototype.addIntersections=function(t,e,n){for(var r=this,i=0;i<t.getIntersectionNum();i++)r.addIntersection(t,e,n,i);},mi.prototype.interfaces_=function(){return [_i]},mi.prototype.getClass=function(){return mi},mi.getNodedSubstrings=function(){if(1===arguments.length){var t=arguments[0],e=new wn;return mi.getNodedSubstrings(t,e),e}if(2===arguments.length)for(var n=arguments[0],r=arguments[1],i=n.iterator();i.hasNext();){var o=i.next();o.getNodeList().addSplitEdges(r);}};var vi=function(){if(this.p0=null,this.p1=null,0===arguments.length)this.p0=new we,this.p1=new we;else if(1===arguments.length){var t=arguments[0];this.p0=new we(t.p0),this.p1=new we(t.p1);}else if(2===arguments.length)this.p0=arguments[0],this.p1=arguments[1];else if(4===arguments.length){var e=arguments[0],n=arguments[1],r=arguments[2],i=arguments[3];this.p0=new we(e,n),this.p1=new we(r,i);}},Ei={serialVersionUID:{configurable:!0}};vi.prototype.minX=function(){return Math.min(this.p0.x,this.p1.x)},vi.prototype.orientationIndex=function(){if(arguments[0]instanceof vi){var t=arguments[0],e=pn.orientationIndex(this.p0,this.p1,t.p0),n=pn.orientationIndex(this.p0,this.p1,t.p1);return e>=0&&n>=0?Math.max(e,n):e<=0&&n<=0?Math.max(e,n):0}if(arguments[0]instanceof we){var r=arguments[0];return pn.orientationIndex(this.p0,this.p1,r)}},vi.prototype.toGeometry=function(t){return t.createLineString([this.p0,this.p1])},vi.prototype.isVertical=function(){return this.p0.x===this.p1.x},vi.prototype.equals=function(t){if(!(t instanceof vi))return !1;var e=t;return this.p0.equals(e.p0)&&this.p1.equals(e.p1)},vi.prototype.intersection=function(t){var e=new an;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null},vi.prototype.project=function(){if(arguments[0]instanceof we){var t=arguments[0];if(t.equals(this.p0)||t.equals(this.p1))return new we(t);var e=this.projectionFactor(t),n=new we;return n.x=this.p0.x+e*(this.p1.x-this.p0.x),n.y=this.p0.y+e*(this.p1.y-this.p0.y),n}if(arguments[0]instanceof vi){var r=arguments[0],i=this.projectionFactor(r.p0),o=this.projectionFactor(r.p1);if(i>=1&&o>=1)return null;if(i<=0&&o<=0)return null;var s=this.project(r.p0);i<0&&(s=this.p0),i>1&&(s=this.p1)
    ;var a=this.project(r.p1);return o<0&&(a=this.p0),o>1&&(a=this.p1),new vi(s,a)}},vi.prototype.normalize=function(){this.p1.compareTo(this.p0)<0&&this.reverse();},vi.prototype.angle=function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)},vi.prototype.getCoordinate=function(t){return 0===t?this.p0:this.p1},vi.prototype.distancePerpendicular=function(t){return pn.distancePointLinePerpendicular(t,this.p0,this.p1)},vi.prototype.minY=function(){return Math.min(this.p0.y,this.p1.y)},vi.prototype.midPoint=function(){return vi.midPoint(this.p0,this.p1)},vi.prototype.projectionFactor=function(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;var e=this.p1.x-this.p0.x,n=this.p1.y-this.p0.y,r=e*e+n*n;return r<=0?Ie.NaN:((t.x-this.p0.x)*e+(t.y-this.p0.y)*n)/r},vi.prototype.closestPoints=function(t){var e=this.intersection(t);if(null!==e)return [e,e];var n=new Array(2).fill(null),r=Ie.MAX_VALUE,i=null,o=this.closestPoint(t.p0);r=o.distance(t.p0),n[0]=o,n[1]=t.p0;var s=this.closestPoint(t.p1);(i=s.distance(t.p1))<r&&(r=i,n[0]=s,n[1]=t.p1);var a=t.closestPoint(this.p0);(i=a.distance(this.p0))<r&&(r=i,n[0]=this.p0,n[1]=a);var u=t.closestPoint(this.p1);return i=u.distance(this.p1),i<r&&(r=i,n[0]=this.p1,n[1]=u),n},vi.prototype.closestPoint=function(t){var e=this.projectionFactor(t);return e>0&&e<1?this.project(t):this.p0.distance(t)<this.p1.distance(t)?this.p0:this.p1},vi.prototype.maxX=function(){return Math.max(this.p0.x,this.p1.x)},vi.prototype.getLength=function(){return this.p0.distance(this.p1)},vi.prototype.compareTo=function(t){var e=t,n=this.p0.compareTo(e.p0);return 0!==n?n:this.p1.compareTo(e.p1)},vi.prototype.reverse=function(){var t=this.p0;this.p0=this.p1,this.p1=t;},vi.prototype.equalsTopo=function(t){return this.p0.equals(t.p0)&&(this.p1.equals(t.p1)||this.p0.equals(t.p1))&&this.p1.equals(t.p0)},vi.prototype.lineIntersection=function(t){try{return He.intersection(this.p0,this.p1,t.p0,t.p1)}catch(t){if(!(t instanceof je))throw t}return null},vi.prototype.maxY=function(){return Math.max(this.p0.y,this.p1.y)},vi.prototype.pointAlongOffset=function(t,e){var n=this.p0.x+t*(this.p1.x-this.p0.x),r=this.p0.y+t*(this.p1.y-this.p0.y),i=this.p1.x-this.p0.x,o=this.p1.y-this.p0.y,s=Math.sqrt(i*i+o*o),a=0,u=0;if(0!==e){if(s<=0)throw new Error("Cannot compute offset from zero-length line segment");a=e*i/s,u=e*o/s;}return new we(n-u,r+a)},vi.prototype.setCoordinates=function(){if(1===arguments.length){var t=arguments[0];this.setCoordinates(t.p0,t.p1);}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.p0.x=e.x,this.p0.y=e.y,this.p1.x=n.x,this.p1.y=n.y;}},vi.prototype.segmentFraction=function(t){var e=this.projectionFactor(t);return e<0?e=0:(e>1||Ie.isNaN(e))&&(e=1),e},vi.prototype.toString=function(){return "LINESTRING( "+this.p0.x+" "+this.p0.y+", "+this.p1.x+" "+this.p1.y+")"},vi.prototype.isHorizontal=function(){return this.p0.y===this.p1.y},vi.prototype.distance=function(){if(arguments[0]instanceof vi){var t=arguments[0];return pn.distanceLineLine(this.p0,this.p1,t.p0,t.p1)}if(arguments[0]instanceof we){var e=arguments[0];return pn.distancePointLine(e,this.p0,this.p1)}},vi.prototype.pointAlong=function(t){var e=new we;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e},vi.prototype.hashCode=function(){var t=Ie.doubleToLongBits(this.p0.x);t^=31*Ie.doubleToLongBits(this.p0.y);var e=Math.trunc(t)^Math.trunc(t>>32),n=Ie.doubleToLongBits(this.p1.x);return n^=31*Ie.doubleToLongBits(this.p1.y),e^(Math.trunc(n)^Math.trunc(n>>32))},vi.prototype.interfaces_=function(){return [Ne,b]},vi.prototype.getClass=function(){return vi},vi.midPoint=function(t,e){return new we((t.x+e.x)/2,(t.y+e.y)/2)},Ei.serialVersionUID.get=function(){return 0x2d2172135f411c00},Object.defineProperties(vi,Ei);var Ii=function(){this.tempEnv1=new We,this.tempEnv2=new We,this._overlapSeg1=new vi,this._overlapSeg2=new vi;};Ii.prototype.overlap=function(){if(2===arguments.length);else if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],r=arguments[3];t.getLineSegment(e,this._overlapSeg1),n.getLineSegment(r,this._overlapSeg2),this.overlap(this._overlapSeg1,this._overlapSeg2);}},Ii.prototype.interfaces_=function(){return []},Ii.prototype.getClass=function(){return Ii};var xi=function(){this._pts=null,this._start=null,this._end=null,this._env=null,this._context=null,this._id=null;var t=arguments[0],e=arguments[1],n=arguments[2],r=arguments[3];this._pts=t,this._start=e,this._end=n,this._context=r;};xi.prototype.getLineSegment=function(t,e){e.p0=this._pts[t],e.p1=this._pts[t+1];},xi.prototype.computeSelect=function(t,e,n,r){var i=this._pts[e],o=this._pts[n];if(r.tempEnv1.init(i,o),n-e==1)return r.select(this,e),null;if(!t.intersects(r.tempEnv1))return null;var s=Math.trunc((e+n)/2);e<s&&this.computeSelect(t,e,s,r),s<n&&this.computeSelect(t,s,n,r);},xi.prototype.getCoordinates=function(){for(var t=this,e=new Array(this._end-this._start+1).fill(null),n=0,r=this._start;r<=this._end;r++)e[n++]=t._pts[r];return e},xi.prototype.computeOverlaps=function(t,e){this.computeOverlapsInternal(this._start,this._end,t,t._start,t._end,e);},xi.prototype.setId=function(t){this._id=t;},xi.prototype.select=function(t,e){this.computeSelect(t,this._start,this._end,e);},xi.prototype.getEnvelope=function(){if(null===this._env){var t=this._pts[this._start],e=this._pts[this._end];this._env=new We(t,e);}return this._env},xi.prototype.getEndIndex=function(){return this._end},xi.prototype.getStartIndex=function(){return this._start},xi.prototype.getContext=function(){return this._context},xi.prototype.getId=function(){return this._id},xi.prototype.computeOverlapsInternal=function(t,e,n,r,i,o){var s=this._pts[t],a=this._pts[e],u=n._pts[r],l=n._pts[i];if(e-t==1&&i-r==1)return o.overlap(this,t,n,r),null;if(o.tempEnv1.init(s,a),o.tempEnv2.init(u,l),!o.tempEnv1.intersects(o.tempEnv2))return null;var p=Math.trunc((t+e)/2),c=Math.trunc((r+i)/2);t<p&&(r<c&&this.computeOverlapsInternal(t,p,n,r,c,o),c<i&&this.computeOverlapsInternal(t,p,n,c,i,o)),p<e&&(r<c&&this.computeOverlapsInternal(p,e,n,r,c,o),c<i&&this.computeOverlapsInternal(p,e,n,c,i,o));},xi.prototype.interfaces_=function(){return []},xi.prototype.getClass=function(){return xi};var Ni=function(){};Ni.prototype.interfaces_=function(){return []},Ni.prototype.getClass=function(){return Ni},Ni.getChainStartIndices=function(t){var e=0,n=new wn;n.add(new Fe(e));do{var r=Ni.findChainEnd(t,e);n.add(new Fe(r)),e=r;}while(e<t.length-1);return Ni.toIntArray(n)},Ni.findChainEnd=function(t,e){for(var n=e;n<t.length-1&&t[n].equals2D(t[n+1]);)n++;if(n>=t.length-1)return t.length-1;for(var r=Xr.quadrant(t[n],t[n+1]),i=e+1;i<t.length;){if(!t[i-1].equals2D(t[i])){if(Xr.quadrant(t[i-1],t[i])!==r)break}i++;}return i-1},Ni.getChains=function(){if(1===arguments.length){var t=arguments[0];return Ni.getChains(t,null)}if(2===arguments.length){for(var e=arguments[0],n=arguments[1],r=new wn,i=Ni.getChainStartIndices(e),o=0;o<i.length-1;o++){var s=new xi(e,i[o],i[o+1],n);r.add(s);}return r}},Ni.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e};var bi=function(){};bi.prototype.computeNodes=function(t){},bi.prototype.getNodedSubstrings=function(){},bi.prototype.interfaces_=function(){return []},bi.prototype.getClass=function(){return bi};var Ci=function(){if(this._segInt=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.setSegmentIntersector(t);}};Ci.prototype.setSegmentIntersector=function(t){this._segInt=t;},Ci.prototype.interfaces_=function(){return [bi]},Ci.prototype.getClass=function(){return Ci};var wi=function(t){function e(e){e?t.call(this,e):t.call(this),this._monoChains=new wn,this._index=new pi,this._idCounter=0,this._nodedSegStrings=null,this._nOverlaps=0;}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={SegmentOverlapAction:{configurable:!0}};return e.prototype.getMonotoneChains=function(){return this._monoChains},e.prototype.getNodedSubstrings=function(){return mi.getNodedSubstrings(this._nodedSegStrings)},e.prototype.getIndex=function(){return this._index},e.prototype.add=function(t){for(var e=this,n=Ni.getChains(t.getCoordinates(),t),r=n.iterator();r.hasNext();){var i=r.next();i.setId(e._idCounter++),e._index.insert(i.getEnvelope(),i),e._monoChains.add(i);}},e.prototype.computeNodes=function(t){var e=this;this._nodedSegStrings=t;for(var n=t.iterator();n.hasNext();)e.add(n.next());this.intersectChains();},e.prototype.intersectChains=function(){for(var t=this,e=new Si(this._segInt),n=this._monoChains.iterator();n.hasNext();)for(var r=n.next(),i=t._index.query(r.getEnvelope()),o=i.iterator();o.hasNext();){var s=o.next();if(s.getId()>r.getId()&&(r.computeOverlaps(s,e),t._nOverlaps++),t._segInt.isDone())return null}},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},n.SegmentOverlapAction.get=function(){return Si},Object.defineProperties(e,n),e}(Ci),Si=function(t){function e(){t.call(this),this._si=null;var e=arguments[0];this._si=e;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.overlap=function(){if(4!==arguments.length)return t.prototype.overlap.apply(this,arguments);var e=arguments[0],n=arguments[1],r=arguments[2],i=arguments[3],o=e.getContext(),s=r.getContext();this._si.processIntersections(o,n,s,i);},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(Ii),Li=function t(){if(this._quadrantSegments=t.DEFAULT_QUADRANT_SEGMENTS,this._endCapStyle=t.CAP_ROUND,this._joinStyle=t.JOIN_ROUND,this._mitreLimit=t.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this._simplifyFactor=t.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){var e=arguments[0];this.setQuadrantSegments(e);}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this.setQuadrantSegments(n),this.setEndCapStyle(r);}else if(4===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3];this.setQuadrantSegments(i),this.setEndCapStyle(o),this.setJoinStyle(s),this.setMitreLimit(a);}},Pi={CAP_ROUND:{configurable:!0},CAP_FLAT:{configurable:!0},CAP_SQUARE:{configurable:!0},JOIN_ROUND:{configurable:!0},JOIN_MITRE:{configurable:!0},JOIN_BEVEL:{configurable:!0},DEFAULT_QUADRANT_SEGMENTS:{configurable:!0},DEFAULT_MITRE_LIMIT:{configurable:!0},DEFAULT_SIMPLIFY_FACTOR:{configurable:!0}};Li.prototype.getEndCapStyle=function(){return this._endCapStyle},Li.prototype.isSingleSided=function(){return this._isSingleSided},Li.prototype.setQuadrantSegments=function(t){this._quadrantSegments=t,0===this._quadrantSegments&&(this._joinStyle=Li.JOIN_BEVEL),this._quadrantSegments<0&&(this._joinStyle=Li.JOIN_MITRE,this._mitreLimit=Math.abs(this._quadrantSegments)),t<=0&&(this._quadrantSegments=1),this._joinStyle!==Li.JOIN_ROUND&&(this._quadrantSegments=Li.DEFAULT_QUADRANT_SEGMENTS);},Li.prototype.getJoinStyle=function(){return this._joinStyle},Li.prototype.setJoinStyle=function(t){this._joinStyle=t;},Li.prototype.setSimplifyFactor=function(t){this._simplifyFactor=t<0?0:t;},Li.prototype.getSimplifyFactor=function(){return this._simplifyFactor},Li.prototype.getQuadrantSegments=function(){return this._quadrantSegments},Li.prototype.setEndCapStyle=function(t){this._endCapStyle=t;},Li.prototype.getMitreLimit=function(){return this._mitreLimit},Li.prototype.setMitreLimit=function(t){this._mitreLimit=t;},Li.prototype.setSingleSided=function(t){this._isSingleSided=t;},Li.prototype.interfaces_=function(){return []},Li.prototype.getClass=function(){return Li},Li.bufferDistanceError=function(t){var e=Math.PI/2/t;return 1-Math.cos(e/2)},Pi.CAP_ROUND.get=function(){return 1},Pi.CAP_FLAT.get=function(){return 2},Pi.CAP_SQUARE.get=function(){return 3},Pi.JOIN_ROUND.get=function(){return 1},Pi.JOIN_MITRE.get=function(){return 2},Pi.JOIN_BEVEL.get=function(){return 3},Pi.DEFAULT_QUADRANT_SEGMENTS.get=function(){return 8},Pi.DEFAULT_MITRE_LIMIT.get=function(){return 5},Pi.DEFAULT_SIMPLIFY_FACTOR.get=function(){return .01},Object.defineProperties(Li,Pi);var Oi=function(t){this._distanceTol=null,this._isDeleted=null,this._angleOrientation=pn.COUNTERCLOCKWISE,this._inputLine=t||null;},Ti={INIT:{configurable:!0},DELETE:{configurable:!0},KEEP:{configurable:!0},NUM_PTS_TO_CHECK:{configurable:!0}};Oi.prototype.isDeletable=function(t,e,n,r){var i=this._inputLine[t],o=this._inputLine[e],s=this._inputLine[n];return !!this.isConcave(i,o,s)&&(!!this.isShallow(i,o,s,r)&&this.isShallowSampled(i,o,t,n,r))},Oi.prototype.deleteShallowConcavities=function(){for(var t=this,e=1,n=this.findNextNonDeletedIndex(e),r=this.findNextNonDeletedIndex(n),i=!1;r<this._inputLine.length;){var o=!1;t.isDeletable(e,n,r,t._distanceTol)&&(t._isDeleted[n]=Oi.DELETE,o=!0,i=!0),e=o?r:n,n=t.findNextNonDeletedIndex(e),r=t.findNextNonDeletedIndex(n);}return i},Oi.prototype.isShallowConcavity=function(t,e,n,r){return pn.computeOrientation(t,e,n)===this._angleOrientation&&pn.distancePointLine(e,t,n)<r},Oi.prototype.isShallowSampled=function(t,e,n,r,i){var o=this,s=Math.trunc((r-n)/Oi.NUM_PTS_TO_CHECK);s<=0&&(s=1);for(var a=n;a<r;a+=s)if(!o.isShallow(t,e,o._inputLine[a],i))return !1;return !0},Oi.prototype.isConcave=function(t,e,n){return pn.computeOrientation(t,e,n)===this._angleOrientation},Oi.prototype.simplify=function(t){var e=this;this._distanceTol=Math.abs(t),t<0&&(this._angleOrientation=pn.CLOCKWISE),this._isDeleted=new Array(this._inputLine.length).fill(null);var n=!1;do{n=e.deleteShallowConcavities();}while(n);return this.collapseLine()},Oi.prototype.findNextNonDeletedIndex=function(t){for(var e=t+1;e<this._inputLine.length&&this._isDeleted[e]===Oi.DELETE;)e++;return e},Oi.prototype.isShallow=function(t,e,n,r){return pn.distancePointLine(e,t,n)<r},Oi.prototype.collapseLine=function(){for(var t=this,e=new Ln,n=0;n<this._inputLine.length;n++)t._isDeleted[n]!==Oi.DELETE&&e.add(t._inputLine[n]);return e.toCoordinateArray()},Oi.prototype.interfaces_=function(){return []},Oi.prototype.getClass=function(){return Oi},Oi.simplify=function(t,e){return new Oi(t).simplify(e)},Ti.INIT.get=function(){return 0},Ti.DELETE.get=function(){return 1},Ti.KEEP.get=function(){return 1},Ti.NUM_PTS_TO_CHECK.get=function(){return 10},Object.defineProperties(Oi,Ti);var Ri=function(){this._ptList=null,this._precisionModel=null,this._minimimVertexDistance=0,this._ptList=new wn;},Di={COORDINATE_ARRAY_TYPE:{configurable:!0}};Ri.prototype.getCoordinates=function(){return this._ptList.toArray(Ri.COORDINATE_ARRAY_TYPE)},Ri.prototype.setPrecisionModel=function(t){this._precisionModel=t;},Ri.prototype.addPt=function(t){var e=new we(t);if(this._precisionModel.makePrecise(e),this.isRedundant(e))return null;this._ptList.add(e);},Ri.prototype.revere=function(){},Ri.prototype.addPts=function(t,e){var n=this;if(e)for(var r=0;r<t.length;r++)n.addPt(t[r]);else for(var i=t.length-1;i>=0;i--)n.addPt(t[i]);},Ri.prototype.isRedundant=function(t){if(this._ptList.size()<1)return !1;var e=this._ptList.get(this._ptList.size()-1);return t.distance(e)<this._minimimVertexDistance},Ri.prototype.toString=function(){return (new xr).createLineString(this.getCoordinates()).toString()},Ri.prototype.closeRing=function(){if(this._ptList.size()<1)return null;var t=new we(this._ptList.get(0)),e=this._ptList.get(this._ptList.size()-1);if(t.equals(e))return null;this._ptList.add(t);},Ri.prototype.setMinimumVertexDistance=function(t){this._minimimVertexDistance=t;},Ri.prototype.interfaces_=function(){return []},Ri.prototype.getClass=function(){return Ri},Di.COORDINATE_ARRAY_TYPE.get=function(){return new Array(0).fill(null)},Object.defineProperties(Ri,Di);var Mi=function(){},Ai={PI_TIMES_2:{configurable:!0},PI_OVER_2:{configurable:!0},PI_OVER_4:{configurable:!0},COUNTERCLOCKWISE:{configurable:!0},CLOCKWISE:{configurable:!0},NONE:{configurable:!0}};Mi.prototype.interfaces_=function(){return []},Mi.prototype.getClass=function(){return Mi},Mi.toDegrees=function(t){return 180*t/Math.PI},Mi.normalize=function(t){for(;t>Math.PI;)t-=Mi.PI_TIMES_2;for(;t<=-Math.PI;)t+=Mi.PI_TIMES_2;return t},Mi.angle=function(){if(1===arguments.length){var t=arguments[0];return Math.atan2(t.y,t.x)}if(2===arguments.length){var e=arguments[0],n=arguments[1],r=n.x-e.x,i=n.y-e.y;return Math.atan2(i,r)}},Mi.isAcute=function(t,e,n){var r=t.x-e.x,i=t.y-e.y;return r*(n.x-e.x)+i*(n.y-e.y)>0},Mi.isObtuse=function(t,e,n){var r=t.x-e.x,i=t.y-e.y;return r*(n.x-e.x)+i*(n.y-e.y)<0},Mi.interiorAngle=function(t,e,n){var r=Mi.angle(e,t),i=Mi.angle(e,n);return Math.abs(i-r)},Mi.normalizePositive=function(t){if(t<0){for(;t<0;)t+=Mi.PI_TIMES_2;t>=Mi.PI_TIMES_2&&(t=0);}else{for(;t>=Mi.PI_TIMES_2;)t-=Mi.PI_TIMES_2;t<0&&(t=0);}return t},Mi.angleBetween=function(t,e,n){var r=Mi.angle(e,t),i=Mi.angle(e,n);return Mi.diff(r,i)},Mi.diff=function(t,e){var n=null;return n=t<e?e-t:t-e,n>Math.PI&&(n=2*Math.PI-n),n},Mi.toRadians=function(t){return t*Math.PI/180},Mi.getTurn=function(t,e){var n=Math.sin(e-t);return n>0?Mi.COUNTERCLOCKWISE:n<0?Mi.CLOCKWISE:Mi.NONE},Mi.angleBetweenOriented=function(t,e,n){var r=Mi.angle(e,t),i=Mi.angle(e,n),o=i-r;return o<=-Math.PI?o+Mi.PI_TIMES_2:o>Math.PI?o-Mi.PI_TIMES_2:o},Ai.PI_TIMES_2.get=function(){return 2*Math.PI},Ai.PI_OVER_2.get=function(){return Math.PI/2},Ai.PI_OVER_4.get=function(){return Math.PI/4},Ai.COUNTERCLOCKWISE.get=function(){return pn.COUNTERCLOCKWISE},Ai.CLOCKWISE.get=function(){return pn.CLOCKWISE},Ai.NONE.get=function(){return pn.COLLINEAR},Object.defineProperties(Mi,Ai);var Fi=function t(){this._maxCurveSegmentError=0,this._filletAngleQuantum=null,this._closingSegLengthFactor=1,this._segList=null,this._distance=0,this._precisionModel=null,this._bufParams=null,this._li=null,this._s0=null,this._s1=null,this._s2=null,this._seg0=new vi,this._seg1=new vi,this._offset0=new vi,this._offset1=new vi,this._side=0,this._hasNarrowConcaveAngle=!1;var e=arguments[0],n=arguments[1],r=arguments[2];this._precisionModel=e,this._bufParams=n,this._li=new an,this._filletAngleQuantum=Math.PI/2/n.getQuadrantSegments(),n.getQuadrantSegments()>=8&&n.getJoinStyle()===Li.JOIN_ROUND&&(this._closingSegLengthFactor=t.MAX_CLOSING_SEG_LEN_FACTOR),this.init(r);},Gi={OFFSET_SEGMENT_SEPARATION_FACTOR:{configurable:!0},INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:!0},CURVE_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:!0},MAX_CLOSING_SEG_LEN_FACTOR:{configurable:!0}};Fi.prototype.addNextSegment=function(t,e){if(this._s0=this._s1,this._s1=this._s2,this._s2=t,this._seg0.setCoordinates(this._s0,this._s1),this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0),this._seg1.setCoordinates(this._s1,this._s2),this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1),this._s1.equals(this._s2))return null;var n=pn.computeOrientation(this._s0,this._s1,this._s2),r=n===pn.CLOCKWISE&&this._side===Or.LEFT||n===pn.COUNTERCLOCKWISE&&this._side===Or.RIGHT;0===n?this.addCollinear(e):r?this.addOutsideTurn(n,e):this.addInsideTurn(n,e);},Fi.prototype.addLineEndCap=function(t,e){var n=new vi(t,e),r=new vi;this.computeOffsetSegment(n,Or.LEFT,this._distance,r);var i=new vi;this.computeOffsetSegment(n,Or.RIGHT,this._distance,i);var o=e.x-t.x,s=e.y-t.y,a=Math.atan2(s,o);switch(this._bufParams.getEndCapStyle()){case Li.CAP_ROUND:this._segList.addPt(r.p1),this.addFilletArc(e,a+Math.PI/2,a-Math.PI/2,pn.CLOCKWISE,this._distance),this._segList.addPt(i.p1);break;case Li.CAP_FLAT:this._segList.addPt(r.p1),this._segList.addPt(i.p1);break;case Li.CAP_SQUARE:var u=new we;u.x=Math.abs(this._distance)*Math.cos(a),u.y=Math.abs(this._distance)*Math.sin(a);var l=new we(r.p1.x+u.x,r.p1.y+u.y),p=new we(i.p1.x+u.x,i.p1.y+u.y);this._segList.addPt(l),this._segList.addPt(p);}},Fi.prototype.getCoordinates=function(){return this._segList.getCoordinates()},Fi.prototype.addMitreJoin=function(t,e,n,r){var i=!0,o=null;try{o=He.intersection(e.p0,e.p1,n.p0,n.p1);(r<=0?1:o.distance(t)/Math.abs(r))>this._bufParams.getMitreLimit()&&(i=!1);}catch(t){if(!(t instanceof je))throw t;o=new we(0,0),i=!1;}i?this._segList.addPt(o):this.addLimitedMitreJoin(e,n,r,this._bufParams.getMitreLimit());},Fi.prototype.addFilletCorner=function(t,e,n,r,i){var o=e.x-t.x,s=e.y-t.y,a=Math.atan2(s,o),u=n.x-t.x,l=n.y-t.y,p=Math.atan2(l,u);r===pn.CLOCKWISE?a<=p&&(a+=2*Math.PI):a>=p&&(a-=2*Math.PI),this._segList.addPt(e),this.addFilletArc(t,a,p,r,i),this._segList.addPt(n);},Fi.prototype.addOutsideTurn=function(t,e){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*Fi.OFFSET_SEGMENT_SEPARATION_FACTOR)return this._segList.addPt(this._offset0.p1),null;this._bufParams.getJoinStyle()===Li.JOIN_MITRE?this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance):this._bufParams.getJoinStyle()===Li.JOIN_BEVEL?this.addBevelJoin(this._offset0,this._offset1):(e&&this._segList.addPt(this._offset0.p1),this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,t,this._distance),this._segList.addPt(this._offset1.p0));},Fi.prototype.createSquare=function(t){this._segList.addPt(new we(t.x+this._distance,t.y+this._distance)),this._segList.addPt(new we(t.x+this._distance,t.y-this._distance)),this._segList.addPt(new we(t.x-this._distance,t.y-this._distance)),this._segList.addPt(new we(t.x-this._distance,t.y+this._distance)),this._segList.closeRing();},Fi.prototype.addSegments=function(t,e){this._segList.addPts(t,e);},Fi.prototype.addFirstSegment=function(){this._segList.addPt(this._offset1.p0);},Fi.prototype.addLastSegment=function(){this._segList.addPt(this._offset1.p1);},Fi.prototype.initSideSegments=function(t,e,n){this._s1=t,this._s2=e,this._side=n,this._seg1.setCoordinates(t,e),this.computeOffsetSegment(this._seg1,n,this._distance,this._offset1);},Fi.prototype.addLimitedMitreJoin=function(t,e,n,r){var i=this._seg0.p1,o=Mi.angle(i,this._seg0.p0),s=Mi.angleBetweenOriented(this._seg0.p0,i,this._seg1.p1),a=s/2,u=Mi.normalize(o+a),l=Mi.normalize(u+Math.PI),p=r*n,c=p*Math.abs(Math.sin(a)),h=n-c,f=i.x+p*Math.cos(l),g=i.y+p*Math.sin(l),d=new we(f,g),y=new vi(i,d),_=y.pointAlongOffset(1,h),m=y.pointAlongOffset(1,-h);this._side===Or.LEFT?(this._segList.addPt(_),this._segList.addPt(m)):(this._segList.addPt(m),this._segList.addPt(_));},Fi.prototype.computeOffsetSegment=function(t,e,n,r){var i=e===Or.LEFT?1:-1,o=t.p1.x-t.p0.x,s=t.p1.y-t.p0.y,a=Math.sqrt(o*o+s*s),u=i*n*o/a,l=i*n*s/a;r.p0.x=t.p0.x-l,r.p0.y=t.p0.y+u,r.p1.x=t.p1.x-l,r.p1.y=t.p1.y+u;},Fi.prototype.addFilletArc=function(t,e,n,r,i){var o=this,s=r===pn.CLOCKWISE?-1:1,a=Math.abs(e-n),u=Math.trunc(a/this._filletAngleQuantum+.5);if(u<1)return null;for(var l=0,p=a/u,c=l,h=new we;c<a;){var f=e+s*c;h.x=t.x+i*Math.cos(f),h.y=t.y+i*Math.sin(f),o._segList.addPt(h),c+=p;}},Fi.prototype.addInsideTurn=function(t,e){if(this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1),this._li.hasIntersection())this._segList.addPt(this._li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this._offset0.p1.distance(this._offset1.p0)<this._distance*Fi.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this._segList.addPt(this._offset0.p1);else{if(this._segList.addPt(this._offset0.p1),this._closingSegLengthFactor>0){var n=new we((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(n);var r=new we((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(r);}else this._segList.addPt(this._s1);this._segList.addPt(this._offset1.p0);}},Fi.prototype.createCircle=function(t){var e=new we(t.x+this._distance,t.y);this._segList.addPt(e),this.addFilletArc(t,0,2*Math.PI,-1,this._distance),this._segList.closeRing();},Fi.prototype.addBevelJoin=function(t,e){this._segList.addPt(t.p1),this._segList.addPt(e.p0);},Fi.prototype.init=function(t){this._distance=t,this._maxCurveSegmentError=t*(1-Math.cos(this._filletAngleQuantum/2)),this._segList=new Ri,this._segList.setPrecisionModel(this._precisionModel),this._segList.setMinimumVertexDistance(t*Fi.CURVE_VERTEX_SNAP_DISTANCE_FACTOR);},Fi.prototype.addCollinear=function(t){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2),this._li.getIntersectionNum()>=2&&(this._bufParams.getJoinStyle()===Li.JOIN_BEVEL||this._bufParams.getJoinStyle()===Li.JOIN_MITRE?(t&&this._segList.addPt(this._offset0.p1),this._segList.addPt(this._offset1.p0)):this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,pn.CLOCKWISE,this._distance));},Fi.prototype.closeRing=function(){this._segList.closeRing();},Fi.prototype.hasNarrowConcaveAngle=function(){return this._hasNarrowConcaveAngle},Fi.prototype.interfaces_=function(){return []},Fi.prototype.getClass=function(){return Fi},Gi.OFFSET_SEGMENT_SEPARATION_FACTOR.get=function(){return .001},Gi.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return .001},Gi.CURVE_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return 1e-6},Gi.MAX_CLOSING_SEG_LEN_FACTOR.get=function(){return 80},Object.defineProperties(Fi,Gi);var qi=function(){this._distance=0,this._precisionModel=null,this._bufParams=null;var t=arguments[0],e=arguments[1];this._precisionModel=t,this._bufParams=e;};qi.prototype.getOffsetCurve=function(t,e){if(this._distance=e,0===e)return null;var n=e<0,r=Math.abs(e),i=this.getSegGen(r);t.length<=1?this.computePointCurve(t[0],i):this.computeOffsetCurve(t,n,i);var o=i.getCoordinates();return n&&Pn.reverse(o),o},qi.prototype.computeSingleSidedBufferCurve=function(t,e,n){var r=this.simplifyTolerance(this._distance);if(e){n.addSegments(t,!0);var i=Oi.simplify(t,-r),o=i.length-1;n.initSideSegments(i[o],i[o-1],Or.LEFT),n.addFirstSegment();for(var s=o-2;s>=0;s--)n.addNextSegment(i[s],!0);}else{n.addSegments(t,!1);var a=Oi.simplify(t,r),u=a.length-1;n.initSideSegments(a[0],a[1],Or.LEFT),n.addFirstSegment();for(var l=2;l<=u;l++)n.addNextSegment(a[l],!0);}n.addLastSegment(),n.closeRing();},qi.prototype.computeRingBufferCurve=function(t,e,n){var r=this.simplifyTolerance(this._distance);e===Or.RIGHT&&(r=-r);var i=Oi.simplify(t,r),o=i.length-1;n.initSideSegments(i[o-1],i[0],e);for(var s=1;s<=o;s++){var a=1!==s;n.addNextSegment(i[s],a);}n.closeRing();},qi.prototype.computeLineBufferCurve=function(t,e){var n=this.simplifyTolerance(this._distance),r=Oi.simplify(t,n),i=r.length-1;e.initSideSegments(r[0],r[1],Or.LEFT);for(var o=2;o<=i;o++)e.addNextSegment(r[o],!0);e.addLastSegment(),e.addLineEndCap(r[i-1],r[i]);var s=Oi.simplify(t,-n),a=s.length-1;e.initSideSegments(s[a],s[a-1],Or.LEFT);for(var u=a-2;u>=0;u--)e.addNextSegment(s[u],!0);e.addLastSegment(),e.addLineEndCap(s[1],s[0]),e.closeRing();},qi.prototype.computePointCurve=function(t,e){switch(this._bufParams.getEndCapStyle()){case Li.CAP_ROUND:e.createCircle(t);break;case Li.CAP_SQUARE:e.createSquare(t);}},qi.prototype.getLineCurve=function(t,e){if(this._distance=e,e<0&&!this._bufParams.isSingleSided())return null;if(0===e)return null;var n=Math.abs(e),r=this.getSegGen(n);if(t.length<=1)this.computePointCurve(t[0],r);else if(this._bufParams.isSingleSided()){var i=e<0;this.computeSingleSidedBufferCurve(t,i,r);}else this.computeLineBufferCurve(t,r);return r.getCoordinates()},qi.prototype.getBufferParameters=function(){return this._bufParams},qi.prototype.simplifyTolerance=function(t){return t*this._bufParams.getSimplifyFactor()},qi.prototype.getRingCurve=function(t,e,n){if(this._distance=n,t.length<=2)return this.getLineCurve(t,n);if(0===n)return qi.copyCoordinates(t);var r=this.getSegGen(n);return this.computeRingBufferCurve(t,e,r),r.getCoordinates()},qi.prototype.computeOffsetCurve=function(t,e,n){var r=this.simplifyTolerance(this._distance);if(e){var i=Oi.simplify(t,-r),o=i.length-1;n.initSideSegments(i[o],i[o-1],Or.LEFT),n.addFirstSegment();for(var s=o-2;s>=0;s--)n.addNextSegment(i[s],!0);}else{var a=Oi.simplify(t,r),u=a.length-1;n.initSideSegments(a[0],a[1],Or.LEFT),n.addFirstSegment();for(var l=2;l<=u;l++)n.addNextSegment(a[l],!0);}n.addLastSegment();},qi.prototype.getSegGen=function(t){return new Fi(this._precisionModel,this._bufParams,t)},qi.prototype.interfaces_=function(){return []},qi.prototype.getClass=function(){return qi},qi.copyCoordinates=function(t){for(var e=new Array(t.length).fill(null),n=0;n<e.length;n++)e[n]=new we(t[n]);return e};var ki=function(){this._subgraphs=null,this._seg=new vi,this._cga=new pn;var t=arguments[0];this._subgraphs=t;},Bi={DepthSegment:{configurable:!0}};ki.prototype.findStabbedSegments=function(){var t=this;if(1===arguments.length){for(var e=arguments[0],n=new wn,r=this._subgraphs.iterator();r.hasNext();){var i=r.next(),o=i.getEnvelope();e.y<o.getMinY()||e.y>o.getMaxY()||t.findStabbedSegments(e,i.getDirectedEdges(),n);}return n}if(3===arguments.length)if(Re(arguments[2],Cn)&&arguments[0]instanceof we&&arguments[1]instanceof Hr)for(var s=arguments[0],a=arguments[1],u=arguments[2],l=a.getEdge().getCoordinates(),p=0;p<l.length-1;p++){t._seg.p0=l[p],t._seg.p1=l[p+1],t._seg.p0.y>t._seg.p1.y&&t._seg.reverse();var c=Math.max(t._seg.p0.x,t._seg.p1.x);if(!(c<s.x)&&!(t._seg.isHorizontal()||s.y<t._seg.p0.y||s.y>t._seg.p1.y||pn.computeOrientation(t._seg.p0,t._seg.p1,s)===pn.RIGHT)){var h=a.getDepth(Or.LEFT);t._seg.p0.equals(l[p])||(h=a.getDepth(Or.RIGHT));var f=new Vi(t._seg,h);u.add(f);}}else if(Re(arguments[2],Cn)&&arguments[0]instanceof we&&Re(arguments[1],Cn))for(var g=arguments[0],d=arguments[1],y=arguments[2],_=d.iterator();_.hasNext();){var m=_.next();m.isForward()&&t.findStabbedSegments(g,m,y);}},ki.prototype.getDepth=function(t){var e=this.findStabbedSegments(t);return 0===e.size()?0:ii.min(e)._leftDepth},ki.prototype.interfaces_=function(){return []},ki.prototype.getClass=function(){return ki},Bi.DepthSegment.get=function(){return Vi},Object.defineProperties(ki,Bi);var Vi=function(){this._upwardSeg=null,this._leftDepth=null;var t=arguments[0],e=arguments[1];this._upwardSeg=new vi(t),this._leftDepth=e;};Vi.prototype.compareTo=function(t){var e=t;if(this._upwardSeg.minX()>=e._upwardSeg.maxX())return 1;if(this._upwardSeg.maxX()<=e._upwardSeg.minX())return -1;var n=this._upwardSeg.orientationIndex(e._upwardSeg);return 0!==n?n:(n=-1*e._upwardSeg.orientationIndex(this._upwardSeg),0!==n?n:this._upwardSeg.compareTo(e._upwardSeg))},Vi.prototype.compareX=function(t,e){var n=t.p0.compareTo(e.p0);return 0!==n?n:t.p1.compareTo(e.p1)},Vi.prototype.toString=function(){return this._upwardSeg.toString()},Vi.prototype.interfaces_=function(){return [Ne]},Vi.prototype.getClass=function(){return Vi};var zi=function(t,e,n){this.p0=t||null,this.p1=e||null,this.p2=n||null;};zi.prototype.area=function(){return zi.area(this.p0,this.p1,this.p2)},zi.prototype.signedArea=function(){return zi.signedArea(this.p0,this.p1,this.p2)},zi.prototype.interpolateZ=function(t){if(null===t)throw new Ee("Supplied point is null.");return zi.interpolateZ(t,this.p0,this.p1,this.p2)},zi.prototype.longestSideLength=function(){return zi.longestSideLength(this.p0,this.p1,this.p2)},zi.prototype.isAcute=function(){return zi.isAcute(this.p0,this.p1,this.p2)},zi.prototype.circumcentre=function(){return zi.circumcentre(this.p0,this.p1,this.p2)},zi.prototype.area3D=function(){return zi.area3D(this.p0,this.p1,this.p2)},zi.prototype.centroid=function(){return zi.centroid(this.p0,this.p1,this.p2)},zi.prototype.inCentre=function(){return zi.inCentre(this.p0,this.p1,this.p2)},zi.prototype.interfaces_=function(){return []},zi.prototype.getClass=function(){return zi},zi.area=function(t,e,n){return Math.abs(((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2)},zi.signedArea=function(t,e,n){return ((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2},zi.det=function(t,e,n,r){return t*r-e*n},zi.interpolateZ=function(t,e,n,r){var i=e.x,o=e.y,s=n.x-i,a=r.x-i,u=n.y-o,l=r.y-o,p=s*l-a*u,c=t.x-i,h=t.y-o,f=(l*c-a*h)/p,g=(-u*c+s*h)/p;return e.z+f*(n.z-e.z)+g*(r.z-e.z)},zi.longestSideLength=function(t,e,n){
    var r=t.distance(e),i=e.distance(n),o=n.distance(t),s=r;return i>s&&(s=i),o>s&&(s=o),s},zi.isAcute=function(t,e,n){return !!Mi.isAcute(t,e,n)&&(!!Mi.isAcute(e,n,t)&&!!Mi.isAcute(n,t,e))},zi.circumcentre=function(t,e,n){var r=n.x,i=n.y,o=t.x-r,s=t.y-i,a=e.x-r,u=e.y-i,l=2*zi.det(o,s,a,u),p=zi.det(s,o*o+s*s,u,a*a+u*u),c=zi.det(o,o*o+s*s,a,a*a+u*u);return new we(r-p/l,i+c/l)},zi.perpendicularBisector=function(t,e){var n=e.x-t.x,r=e.y-t.y,i=new He(t.x+n/2,t.y+r/2,1),o=new He(t.x-r+n/2,t.y+n+r/2,1);return new He(i,o)},zi.angleBisector=function(t,e,n){var r=e.distance(t),i=e.distance(n),o=r/(r+i),s=n.x-t.x,a=n.y-t.y;return new we(t.x+o*s,t.y+o*a)},zi.area3D=function(t,e,n){var r=e.x-t.x,i=e.y-t.y,o=e.z-t.z,s=n.x-t.x,a=n.y-t.y,u=n.z-t.z,l=i*u-o*a,p=o*s-r*u,c=r*a-i*s,h=l*l+p*p+c*c;return Math.sqrt(h)/2},zi.centroid=function(t,e,n){var r=(t.x+e.x+n.x)/3,i=(t.y+e.y+n.y)/3;return new we(r,i)},zi.inCentre=function(t,e,n){var r=e.distance(n),i=t.distance(n),o=t.distance(e),s=r+i+o,a=(r*t.x+i*e.x+o*n.x)/s,u=(r*t.y+i*e.y+o*n.y)/s;return new we(a,u)};var Ui=function(){this._inputGeom=null,this._distance=null,this._curveBuilder=null,this._curveList=new wn;var t=arguments[0],e=arguments[1],n=arguments[2];this._inputGeom=t,this._distance=e,this._curveBuilder=n;};Ui.prototype.addPoint=function(t){if(this._distance<=0)return null;var e=t.getCoordinates(),n=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(n,Oe.EXTERIOR,Oe.INTERIOR);},Ui.prototype.addPolygon=function(t){var e=this,n=this._distance,r=Or.LEFT;this._distance<0&&(n=-this._distance,r=Or.RIGHT);var i=t.getExteriorRing(),o=Pn.removeRepeatedPoints(i.getCoordinates());if(this._distance<0&&this.isErodedCompletely(i,this._distance))return null;if(this._distance<=0&&o.length<3)return null;this.addPolygonRing(o,n,r,Oe.EXTERIOR,Oe.INTERIOR);for(var s=0;s<t.getNumInteriorRing();s++){var a=t.getInteriorRingN(s),u=Pn.removeRepeatedPoints(a.getCoordinates());e._distance>0&&e.isErodedCompletely(a,-e._distance)||e.addPolygonRing(u,n,Or.opposite(r),Oe.INTERIOR,Oe.EXTERIOR);}},Ui.prototype.isTriangleErodedCompletely=function(t,e){var n=new zi(t[0],t[1],t[2]),r=n.inCentre();return pn.distancePointLine(r,n.p0,n.p1)<Math.abs(e)},Ui.prototype.addLineString=function(t){if(this._distance<=0&&!this._curveBuilder.getBufferParameters().isSingleSided())return null;var e=Pn.removeRepeatedPoints(t.getCoordinates()),n=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(n,Oe.EXTERIOR,Oe.INTERIOR);},Ui.prototype.addCurve=function(t,e,n){if(null===t||t.length<2)return null;var r=new mi(t,new Gr(0,Oe.BOUNDARY,e,n));this._curveList.add(r);},Ui.prototype.getCurves=function(){return this.add(this._inputGeom),this._curveList},Ui.prototype.addPolygonRing=function(t,e,n,r,i){if(0===e&&t.length<sr.MINIMUM_VALID_SIZE)return null;var o=r,s=i;t.length>=sr.MINIMUM_VALID_SIZE&&pn.isCCW(t)&&(o=i,s=r,n=Or.opposite(n));var a=this._curveBuilder.getRingCurve(t,n,e);this.addCurve(a,o,s);},Ui.prototype.add=function(t){if(t.isEmpty())return null;t instanceof ir?this.addPolygon(t):t instanceof tr?this.addLineString(t):t instanceof nr?this.addPoint(t):t instanceof or?this.addCollection(t):t instanceof Hn?this.addCollection(t):t instanceof ar?this.addCollection(t):t instanceof Yn&&this.addCollection(t);},Ui.prototype.isErodedCompletely=function(t,e){var n=t.getCoordinates();if(n.length<4)return e<0;if(4===n.length)return this.isTriangleErodedCompletely(n,e);var r=t.getEnvelopeInternal(),i=Math.min(r.getHeight(),r.getWidth());return e<0&&2*Math.abs(e)>i},Ui.prototype.addCollection=function(t){for(var e=this,n=0;n<t.getNumGeometries();n++){var r=t.getGeometryN(n);e.add(r);}},Ui.prototype.interfaces_=function(){return []},Ui.prototype.getClass=function(){return Ui};var Xi=function(){};Xi.prototype.locate=function(t){},Xi.prototype.interfaces_=function(){return []},Xi.prototype.getClass=function(){return Xi};var ji=function(){this._parent=null,this._atStart=null,this._max=null,this._index=null,this._subcollectionIterator=null;var t=arguments[0];this._parent=t,this._atStart=!0,this._index=0,this._max=t.getNumGeometries();};ji.prototype.next=function(){if(this._atStart)return this._atStart=!1,ji.isAtomic(this._parent)&&this._index++,this._parent;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return this._subcollectionIterator.next();this._subcollectionIterator=null;}if(this._index>=this._max)throw new w;var t=this._parent.getGeometryN(this._index++);return t instanceof Yn?(this._subcollectionIterator=new ji(t),this._subcollectionIterator.next()):t},ji.prototype.remove=function(){throw new Error(this.getClass().getName())},ji.prototype.hasNext=function(){if(this._atStart)return !0;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return !0;this._subcollectionIterator=null;}return !(this._index>=this._max)},ji.prototype.interfaces_=function(){return [bn]},ji.prototype.getClass=function(){return ji},ji.isAtomic=function(t){return !(t instanceof Yn)};var Yi=function(){this._geom=null;var t=arguments[0];this._geom=t;};Yi.prototype.locate=function(t){return Yi.locate(t,this._geom)},Yi.prototype.interfaces_=function(){return [Xi]},Yi.prototype.getClass=function(){return Yi},Yi.isPointInRing=function(t,e){return !!e.getEnvelopeInternal().intersects(t)&&pn.isPointInRing(t,e.getCoordinates())},Yi.containsPointInPolygon=function(t,e){if(e.isEmpty())return !1;var n=e.getExteriorRing();if(!Yi.isPointInRing(t,n))return !1;for(var r=0;r<e.getNumInteriorRing();r++){var i=e.getInteriorRingN(r);if(Yi.isPointInRing(t,i))return !1}return !0},Yi.containsPoint=function(t,e){if(e instanceof ir)return Yi.containsPointInPolygon(t,e);if(e instanceof Yn)for(var n=new ji(e);n.hasNext();){var r=n.next();if(r!==e&&Yi.containsPoint(t,r))return !0}return !1},Yi.locate=function(t,e){return e.isEmpty()?Oe.EXTERIOR:Yi.containsPoint(t,e)?Oe.INTERIOR:Oe.EXTERIOR};var Hi=function(){this._edgeMap=new M,this._edgeList=null,this._ptInAreaLocation=[Oe.NONE,Oe.NONE];};Hi.prototype.getNextCW=function(t){this.getEdges();var e=this._edgeList.indexOf(t),n=e-1;return 0===e&&(n=this._edgeList.size()-1),this._edgeList.get(n)},Hi.prototype.propagateSideLabels=function(t){for(var e=Oe.NONE,n=this.iterator();n.hasNext();){var r=n.next(),i=r.getLabel();i.isArea(t)&&i.getLocation(t,Or.LEFT)!==Oe.NONE&&(e=i.getLocation(t,Or.LEFT));}if(e===Oe.NONE)return null;for(var o=e,s=this.iterator();s.hasNext();){var a=s.next(),u=a.getLabel();if(u.getLocation(t,Or.ON)===Oe.NONE&&u.setLocation(t,Or.ON,o),u.isArea(t)){var l=u.getLocation(t,Or.LEFT),p=u.getLocation(t,Or.RIGHT);if(p!==Oe.NONE){if(p!==o)throw new Dr("side location conflict",a.getCoordinate());l===Oe.NONE&&rn.shouldNeverReachHere("found single null side (at "+a.getCoordinate()+")"),o=l;}else rn.isTrue(u.getLocation(t,Or.LEFT)===Oe.NONE,"found single null side"),u.setLocation(t,Or.RIGHT,o),u.setLocation(t,Or.LEFT,o);}}},Hi.prototype.getCoordinate=function(){var t=this.iterator();return t.hasNext()?t.next().getCoordinate():null},Hi.prototype.print=function(t){Ye.out.println("EdgeEndStar:   "+this.getCoordinate());for(var e=this.iterator();e.hasNext();){e.next().print(t);}},Hi.prototype.isAreaLabelsConsistent=function(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)},Hi.prototype.checkAreaLabelsConsistent=function(t){var e=this.getEdges();if(e.size()<=0)return !0;var n=e.size()-1,r=e.get(n).getLabel(),i=r.getLocation(t,Or.LEFT);rn.isTrue(i!==Oe.NONE,"Found unlabelled area edge");for(var o=i,s=this.iterator();s.hasNext();){var a=s.next(),u=a.getLabel();rn.isTrue(u.isArea(t),"Found non-area edge");var l=u.getLocation(t,Or.LEFT),p=u.getLocation(t,Or.RIGHT);if(l===p)return !1;if(p!==o)return !1;o=l;}return !0},Hi.prototype.findIndex=function(t){var e=this;this.iterator();for(var n=0;n<this._edgeList.size();n++){if(e._edgeList.get(n)===t)return n}return -1},Hi.prototype.iterator=function(){return this.getEdges().iterator()},Hi.prototype.getEdges=function(){return null===this._edgeList&&(this._edgeList=new wn(this._edgeMap.values())),this._edgeList},Hi.prototype.getLocation=function(t,e,n){return this._ptInAreaLocation[t]===Oe.NONE&&(this._ptInAreaLocation[t]=Yi.locate(e,n[t].getGeometry())),this._ptInAreaLocation[t]},Hi.prototype.toString=function(){var t=new Ae;t.append("EdgeEndStar:   "+this.getCoordinate()),t.append("\n");for(var e=this.iterator();e.hasNext();){var n=e.next();t.append(n),t.append("\n");}return t.toString()},Hi.prototype.computeEdgeEndLabels=function(t){for(var e=this.iterator();e.hasNext();){e.next().computeLabel(t);}},Hi.prototype.computeLabelling=function(t){var e=this;this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);for(var n=[!1,!1],r=this.iterator();r.hasNext();)for(var i=r.next(),o=i.getLabel(),s=0;s<2;s++)o.isLine(s)&&o.getLocation(s)===Oe.BOUNDARY&&(n[s]=!0);for(var a=this.iterator();a.hasNext();)for(var u=a.next(),l=u.getLabel(),p=0;p<2;p++)if(l.isAnyNull(p)){var c=Oe.NONE;if(n[p])c=Oe.EXTERIOR;else{var h=u.getCoordinate();c=e.getLocation(p,h,t);}l.setAllLocationsIfNull(p,c);}},Hi.prototype.getDegree=function(){return this._edgeMap.size()},Hi.prototype.insertEdgeEnd=function(t,e){this._edgeMap.put(t,e),this._edgeList=null;},Hi.prototype.interfaces_=function(){return []},Hi.prototype.getClass=function(){return Hi};var Wi=function(t){function e(){t.call(this),this._resultAreaEdgeList=null,this._label=null,this._SCANNING_FOR_INCOMING=1,this._LINKING_TO_OUTGOING=2;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.linkResultDirectedEdges=function(){var t=this;this.getResultAreaEdges();for(var e=null,n=null,r=this._SCANNING_FOR_INCOMING,i=0;i<this._resultAreaEdgeList.size();i++){var o=t._resultAreaEdgeList.get(i),s=o.getSym();if(o.getLabel().isArea())switch(null===e&&o.isInResult()&&(e=o),r){case t._SCANNING_FOR_INCOMING:if(!s.isInResult())continue;n=s,r=t._LINKING_TO_OUTGOING;break;case t._LINKING_TO_OUTGOING:if(!o.isInResult())continue;n.setNext(o),r=t._SCANNING_FOR_INCOMING;}}if(r===this._LINKING_TO_OUTGOING){if(null===e)throw new Dr("no outgoing dirEdge found",this.getCoordinate());rn.isTrue(e.isInResult(),"unable to link last incoming dirEdge"),n.setNext(e);}},e.prototype.insert=function(t){var e=t;this.insertEdgeEnd(e,e);},e.prototype.getRightmostEdge=function(){var t=this.getEdges(),e=t.size();if(e<1)return null;var n=t.get(0);if(1===e)return n;var r=t.get(e-1),i=n.getQuadrant(),o=r.getQuadrant();return Xr.isNorthern(i)&&Xr.isNorthern(o)?n:Xr.isNorthern(i)||Xr.isNorthern(o)?0!==n.getDy()?n:0!==r.getDy()?r:(rn.shouldNeverReachHere("found two horizontal edges incident on node"),null):r},e.prototype.print=function(t){Ye.out.println("DirectedEdgeStar: "+this.getCoordinate());for(var e=this.iterator();e.hasNext();){var n=e.next();t.print("out "),n.print(t),t.println(),t.print("in "),n.getSym().print(t),t.println();}},e.prototype.getResultAreaEdges=function(){var t=this;if(null!==this._resultAreaEdgeList)return this._resultAreaEdgeList;this._resultAreaEdgeList=new wn;for(var e=this.iterator();e.hasNext();){var n=e.next();(n.isInResult()||n.getSym().isInResult())&&t._resultAreaEdgeList.add(n);}return this._resultAreaEdgeList},e.prototype.updateLabelling=function(t){for(var e=this.iterator();e.hasNext();){var n=e.next(),r=n.getLabel();r.setAllLocationsIfNull(0,t.getLocation(0)),r.setAllLocationsIfNull(1,t.getLocation(1));}},e.prototype.linkAllDirectedEdges=function(){var t=this;this.getEdges();for(var e=null,n=null,r=this._edgeList.size()-1;r>=0;r--){var i=t._edgeList.get(r),o=i.getSym();null===n&&(n=o),null!==e&&o.setNext(e),e=i;}n.setNext(e);},e.prototype.computeDepths=function(){var t=this;if(1===arguments.length){var e=arguments[0],n=this.findIndex(e),r=e.getDepth(Or.LEFT),i=e.getDepth(Or.RIGHT),o=this.computeDepths(n+1,this._edgeList.size(),r);if(this.computeDepths(0,n,o)!==i)throw new Dr("depth mismatch at "+e.getCoordinate())}else if(3===arguments.length){for(var s=arguments[0],a=arguments[1],u=arguments[2],l=u,p=s;p<a;p++){var c=t._edgeList.get(p);c.setEdgeDepths(Or.RIGHT,l),l=c.getDepth(Or.LEFT);}return l}},e.prototype.mergeSymLabels=function(){for(var t=this.iterator();t.hasNext();){var e=t.next();e.getLabel().merge(e.getSym().getLabel());}},e.prototype.linkMinimalDirectedEdges=function(t){for(var e=this,n=null,r=null,i=this._SCANNING_FOR_INCOMING,o=this._resultAreaEdgeList.size()-1;o>=0;o--){var s=e._resultAreaEdgeList.get(o),a=s.getSym();switch(null===n&&s.getEdgeRing()===t&&(n=s),i){case e._SCANNING_FOR_INCOMING:if(a.getEdgeRing()!==t)continue;r=a,i=e._LINKING_TO_OUTGOING;break;case e._LINKING_TO_OUTGOING:if(s.getEdgeRing()!==t)continue;r.setNextMin(s),i=e._SCANNING_FOR_INCOMING;}}i===this._LINKING_TO_OUTGOING&&(rn.isTrue(null!==n,"found null for first outgoing dirEdge"),rn.isTrue(n.getEdgeRing()===t,"unable to link last incoming dirEdge"),r.setNextMin(n));},e.prototype.getOutgoingDegree=function(){if(0===arguments.length){for(var t=0,e=this.iterator();e.hasNext();){e.next().isInResult()&&t++;}return t}if(1===arguments.length){for(var n=arguments[0],r=0,i=this.iterator();i.hasNext();){i.next().getEdgeRing()===n&&r++;}return r}},e.prototype.getLabel=function(){return this._label},e.prototype.findCoveredLineEdges=function(){for(var t=Oe.NONE,e=this.iterator();e.hasNext();){var n=e.next(),r=n.getSym();if(!n.isLineEdge()){if(n.isInResult()){t=Oe.INTERIOR;break}if(r.isInResult()){t=Oe.EXTERIOR;break}}}if(t===Oe.NONE)return null;for(var i=t,o=this.iterator();o.hasNext();){var s=o.next(),a=s.getSym();s.isLineEdge()?s.getEdge().setCovered(i===Oe.INTERIOR):(s.isInResult()&&(i=Oe.EXTERIOR),a.isInResult()&&(i=Oe.INTERIOR));}},e.prototype.computeLabelling=function(e){var n=this;t.prototype.computeLabelling.call(this,e),this._label=new Gr(Oe.NONE);for(var r=this.iterator();r.hasNext();)for(var i=r.next(),o=i.getEdge(),s=o.getLabel(),a=0;a<2;a++){var u=s.getLocation(a);u!==Oe.INTERIOR&&u!==Oe.BOUNDARY||n._label.setLocation(a,Oe.INTERIOR);}},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(Hi),Ki=function(t){function e(){t.apply(this,arguments);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.createNode=function(t){return new zr(t,new Wi)},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(Wr),Ji=function t(){this._pts=null,this._orientation=null;var e=arguments[0];this._pts=e,this._orientation=t.orientation(e);};Ji.prototype.compareTo=function(t){var e=t;return Ji.compareOriented(this._pts,this._orientation,e._pts,e._orientation)},Ji.prototype.interfaces_=function(){return [Ne]},Ji.prototype.getClass=function(){return Ji},Ji.orientation=function(t){return 1===Pn.increasingDirection(t)},Ji.compareOriented=function(t,e,n,r){for(var i=e?1:-1,o=r?1:-1,s=e?t.length:-1,a=r?n.length:-1,u=e?0:t.length-1,l=r?0:n.length-1;!0;){var p=t[u].compareTo(n[l]);if(0!==p)return p;u+=i,l+=o;var c=u===s,h=l===a;if(c&&!h)return -1;if(!c&&h)return 1;if(c&&h)return 0}};var Qi=function(){this._edges=new wn,this._ocaMap=new M;};Qi.prototype.print=function(t){var e=this;t.print("MULTILINESTRING ( ");for(var n=0;n<this._edges.size();n++){var r=e._edges.get(n);n>0&&t.print(","),t.print("(");for(var i=r.getCoordinates(),o=0;o<i.length;o++)o>0&&t.print(","),t.print(i[o].x+" "+i[o].y);t.println(")");}t.print(")  ");},Qi.prototype.addAll=function(t){for(var e=this,n=t.iterator();n.hasNext();)e.add(n.next());},Qi.prototype.findEdgeIndex=function(t){for(var e=this,n=0;n<this._edges.size();n++)if(e._edges.get(n).equals(t))return n;return -1},Qi.prototype.iterator=function(){return this._edges.iterator()},Qi.prototype.getEdges=function(){return this._edges},Qi.prototype.get=function(t){return this._edges.get(t)},Qi.prototype.findEqualEdge=function(t){var e=new Ji(t.getCoordinates());return this._ocaMap.get(e)},Qi.prototype.add=function(t){this._edges.add(t);var e=new Ji(t.getCoordinates());this._ocaMap.put(e,t);},Qi.prototype.interfaces_=function(){return []},Qi.prototype.getClass=function(){return Qi};var Zi=function(){};Zi.prototype.processIntersections=function(t,e,n,r){},Zi.prototype.isDone=function(){},Zi.prototype.interfaces_=function(){return []},Zi.prototype.getClass=function(){return Zi};var $i=function(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._hasInterior=!1,this._properIntersectionPoint=null,this._li=null,this._isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;var t=arguments[0];this._li=t;};$i.prototype.isTrivialIntersection=function(t,e,n,r){if(t===n&&1===this._li.getIntersectionNum()){if($i.isAdjacentSegments(e,r))return !0;if(t.isClosed()){var i=t.size()-1;if(0===e&&r===i||0===r&&e===i)return !0}}return !1},$i.prototype.getProperIntersectionPoint=function(){return this._properIntersectionPoint},$i.prototype.hasProperInteriorIntersection=function(){return this._hasProperInterior},$i.prototype.getLineIntersector=function(){return this._li},$i.prototype.hasProperIntersection=function(){return this._hasProper},$i.prototype.processIntersections=function(t,e,n,r){if(t===n&&e===r)return null;this.numTests++;var i=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[r],a=n.getCoordinates()[r+1];this._li.computeIntersection(i,o,s,a),this._li.hasIntersection()&&(this.numIntersections++,this._li.isInteriorIntersection()&&(this.numInteriorIntersections++,this._hasInterior=!0),this.isTrivialIntersection(t,e,n,r)||(this._hasIntersection=!0,t.addIntersections(this._li,e,0),n.addIntersections(this._li,r,1),this._li.isProper()&&(this.numProperIntersections++,this._hasProper=!0,this._hasProperInterior=!0)));},$i.prototype.hasIntersection=function(){return this._hasIntersection},$i.prototype.isDone=function(){return !1},$i.prototype.hasInteriorIntersection=function(){return this._hasInterior},$i.prototype.interfaces_=function(){return [Zi]},$i.prototype.getClass=function(){return $i},$i.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)};var to=function(){this.coord=null,this.segmentIndex=null,this.dist=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.coord=new we(t),this.segmentIndex=e,this.dist=n;};to.prototype.getSegmentIndex=function(){return this.segmentIndex},to.prototype.getCoordinate=function(){return this.coord},to.prototype.print=function(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex),t.println(" dist = "+this.dist);},to.prototype.compareTo=function(t){var e=t;return this.compare(e.segmentIndex,e.dist)},to.prototype.isEndPoint=function(t){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===t},to.prototype.toString=function(){return this.coord+" seg # = "+this.segmentIndex+" dist = "+this.dist},to.prototype.getDistance=function(){return this.dist},to.prototype.compare=function(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0},to.prototype.interfaces_=function(){return [Ne]},to.prototype.getClass=function(){return to};var eo=function(){this._nodeMap=new M,this.edge=null;var t=arguments[0];this.edge=t;};eo.prototype.print=function(t){t.println("Intersections:");for(var e=this.iterator();e.hasNext();){e.next().print(t);}},eo.prototype.iterator=function(){return this._nodeMap.values().iterator()},eo.prototype.addSplitEdges=function(t){var e=this;this.addEndpoints();for(var n=this.iterator(),r=n.next();n.hasNext();){var i=n.next(),o=e.createSplitEdge(r,i);t.add(o),r=i;}},eo.prototype.addEndpoints=function(){var t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0);},eo.prototype.createSplitEdge=function(t,e){var n=this,r=e.segmentIndex-t.segmentIndex+2,i=this.edge.pts[e.segmentIndex],o=e.dist>0||!e.coord.equals2D(i);o||r--;var s=new Array(r).fill(null),a=0;s[a++]=new we(t.coord);for(var u=t.segmentIndex+1;u<=e.segmentIndex;u++)s[a++]=n.edge.pts[u];return o&&(s[a]=e.coord),new so(s,new Gr(this.edge._label))},eo.prototype.add=function(t,e,n){var r=new to(t,e,n),i=this._nodeMap.get(r);return null!==i?i:(this._nodeMap.put(r,r),r)},eo.prototype.isIntersection=function(t){for(var e=this.iterator();e.hasNext();){if(e.next().coord.equals(t))return !0}return !1},eo.prototype.interfaces_=function(){return []},eo.prototype.getClass=function(){return eo};var no=function(){};no.prototype.getChainStartIndices=function(t){var e=this,n=0,r=new wn;r.add(new Fe(n));do{var i=e.findChainEnd(t,n);r.add(new Fe(i)),n=i;}while(n<t.length-1);return no.toIntArray(r)},no.prototype.findChainEnd=function(t,e){for(var n=Xr.quadrant(t[e],t[e+1]),r=e+1;r<t.length;){if(Xr.quadrant(t[r-1],t[r])!==n)break;r++;}return r-1},no.prototype.interfaces_=function(){return []},no.prototype.getClass=function(){return no},no.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e};var ro=function(){this.e=null,this.pts=null,this.startIndex=null,this.env1=new We,this.env2=new We;var t=arguments[0];this.e=t,this.pts=t.getCoordinates();var e=new no;this.startIndex=e.getChainStartIndices(this.pts);};ro.prototype.getCoordinates=function(){return this.pts},ro.prototype.getMaxX=function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e>n?e:n},ro.prototype.getMinX=function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e<n?e:n},ro.prototype.computeIntersectsForChain=function(){if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],r=arguments[3];this.computeIntersectsForChain(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[n],e.startIndex[n+1],r);}else if(6===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3],u=arguments[4],l=arguments[5],p=this.pts[i],c=this.pts[o],h=s.pts[a],f=s.pts[u];if(o-i==1&&u-a==1)return l.addIntersections(this.e,i,s.e,a),null;if(this.env1.init(p,c),this.env2.init(h,f),!this.env1.intersects(this.env2))return null;var g=Math.trunc((i+o)/2),d=Math.trunc((a+u)/2);i<g&&(a<d&&this.computeIntersectsForChain(i,g,s,a,d,l),d<u&&this.computeIntersectsForChain(i,g,s,d,u,l)),g<o&&(a<d&&this.computeIntersectsForChain(g,o,s,a,d,l),d<u&&this.computeIntersectsForChain(g,o,s,d,u,l));}},ro.prototype.getStartIndexes=function(){return this.startIndex},ro.prototype.computeIntersects=function(t,e){for(var n=this,r=0;r<this.startIndex.length-1;r++)for(var i=0;i<t.startIndex.length-1;i++)n.computeIntersectsForChain(r,t,i,e);},ro.prototype.interfaces_=function(){return []},ro.prototype.getClass=function(){return ro};var io=function t(){var e=this;this._depth=Array(2).fill().map(function(){return Array(3)});for(var n=0;n<2;n++)for(var r=0;r<3;r++)e._depth[n][r]=t.NULL_VALUE;},oo={NULL_VALUE:{configurable:!0}};io.prototype.getDepth=function(t,e){return this._depth[t][e]},io.prototype.setDepth=function(t,e,n){this._depth[t][e]=n;},io.prototype.isNull=function(){var t=this;if(0===arguments.length){for(var e=0;e<2;e++)for(var n=0;n<3;n++)if(t._depth[e][n]!==io.NULL_VALUE)return !1;return !0}if(1===arguments.length){var r=arguments[0];return this._depth[r][1]===io.NULL_VALUE}if(2===arguments.length){var i=arguments[0],o=arguments[1];return this._depth[i][o]===io.NULL_VALUE}},io.prototype.normalize=function(){for(var t=this,e=0;e<2;e++)if(!t.isNull(e)){var n=t._depth[e][1];t._depth[e][2]<n&&(n=t._depth[e][2]),n<0&&(n=0);for(var r=1;r<3;r++){var i=0;t._depth[e][r]>n&&(i=1),t._depth[e][r]=i;}}},io.prototype.getDelta=function(t){return this._depth[t][Or.RIGHT]-this._depth[t][Or.LEFT]},io.prototype.getLocation=function(t,e){return this._depth[t][e]<=0?Oe.EXTERIOR:Oe.INTERIOR},io.prototype.toString=function(){return "A: "+this._depth[0][1]+","+this._depth[0][2]+" B: "+this._depth[1][1]+","+this._depth[1][2]},io.prototype.add=function(){var t=this;if(1===arguments.length)for(var e=arguments[0],n=0;n<2;n++)for(var r=1;r<3;r++){var i=e.getLocation(n,r);i!==Oe.EXTERIOR&&i!==Oe.INTERIOR||(t.isNull(n,r)?t._depth[n][r]=io.depthAtLocation(i):t._depth[n][r]+=io.depthAtLocation(i));}else if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];a===Oe.INTERIOR&&this._depth[o][s]++;}},io.prototype.interfaces_=function(){return []},io.prototype.getClass=function(){return io},io.depthAtLocation=function(t){return t===Oe.EXTERIOR?0:t===Oe.INTERIOR?1:io.NULL_VALUE},oo.NULL_VALUE.get=function(){return -1},Object.defineProperties(io,oo);var so=function(t){function e(){if(t.call(this),this.pts=null,this._env=null,this.eiList=new eo(this),this._name=null,this._mce=null,this._isIsolated=!0,this._depth=new io,this._depthDelta=0,1===arguments.length){var n=arguments[0];e.call(this,n,null);}else if(2===arguments.length){var r=arguments[0],i=arguments[1];this.pts=r,this._label=i;}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getDepth=function(){return this._depth},e.prototype.getCollapsedEdge=function(){var t=new Array(2).fill(null);return t[0]=this.pts[0],t[1]=this.pts[1],new e(t,Gr.toLineLabel(this._label))},e.prototype.isIsolated=function(){return this._isIsolated},e.prototype.getCoordinates=function(){return this.pts},e.prototype.setIsolated=function(t){this._isIsolated=t;},e.prototype.setName=function(t){this._name=t;},e.prototype.equals=function(t){var n=this;if(!(t instanceof e))return !1;var r=t;if(this.pts.length!==r.pts.length)return !1;for(var i=!0,o=!0,s=this.pts.length,a=0;a<this.pts.length;a++)if(n.pts[a].equals2D(r.pts[a])||(i=!1),n.pts[a].equals2D(r.pts[--s])||(o=!1),!i&&!o)return !1;return !0},e.prototype.getCoordinate=function(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){var t=arguments[0];return this.pts[t]}},e.prototype.print=function(t){var e=this;t.print("edge "+this._name+": "),t.print("LINESTRING (");for(var n=0;n<this.pts.length;n++)n>0&&t.print(","),t.print(e.pts[n].x+" "+e.pts[n].y);t.print(")  "+this._label+" "+this._depthDelta);},e.prototype.computeIM=function(t){e.updateIM(this._label,t);},e.prototype.isCollapsed=function(){return !!this._label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))},e.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1])},e.prototype.getMaximumSegmentIndex=function(){return this.pts.length-1},e.prototype.getDepthDelta=function(){return this._depthDelta},e.prototype.getNumPoints=function(){return this.pts.length},e.prototype.printReverse=function(t){var e=this;t.print("edge "+this._name+": ");for(var n=this.pts.length-1;n>=0;n--)t.print(e.pts[n]+" ");t.println("");},e.prototype.getMonotoneChainEdge=function(){return null===this._mce&&(this._mce=new ro(this)),this._mce},e.prototype.getEnvelope=function(){var t=this;if(null===this._env){this._env=new We;for(var e=0;e<this.pts.length;e++)t._env.expandToInclude(t.pts[e]);}return this._env},e.prototype.addIntersection=function(t,e,n,r){var i=new we(t.getIntersection(r)),o=e,s=t.getEdgeDistance(n,r),a=o+1;if(a<this.pts.length){var u=this.pts[a];i.equals2D(u)&&(o=a,s=0);}this.eiList.add(i,o,s);},e.prototype.toString=function(){var t=this,e=new Ae;e.append("edge "+this._name+": "),e.append("LINESTRING (");for(var n=0;n<this.pts.length;n++)n>0&&e.append(","),e.append(t.pts[n].x+" "+t.pts[n].y);return e.append(")  "+this._label+" "+this._depthDelta),e.toString()},e.prototype.isPointwiseEqual=function(t){var e=this;if(this.pts.length!==t.pts.length)return !1;for(var n=0;n<this.pts.length;n++)if(!e.pts[n].equals2D(t.pts[n]))return !1;return !0},e.prototype.setDepthDelta=function(t){this._depthDelta=t;},e.prototype.getEdgeIntersectionList=function(){return this.eiList},e.prototype.addIntersections=function(t,e,n){for(var r=this,i=0;i<t.getIntersectionNum();i++)r.addIntersection(t,e,n,i);},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e.updateIM=function(){if(2!==arguments.length)return t.prototype.updateIM.apply(this,arguments);var e=arguments[0],n=arguments[1];n.setAtLeastIfValid(e.getLocation(0,Or.ON),e.getLocation(1,Or.ON),1),e.isArea()&&(n.setAtLeastIfValid(e.getLocation(0,Or.LEFT),e.getLocation(1,Or.LEFT),2),n.setAtLeastIfValid(e.getLocation(0,Or.RIGHT),e.getLocation(1,Or.RIGHT),2));},e}(Vr),ao=function(t){this._workingPrecisionModel=null,this._workingNoder=null,this._geomFact=null,this._graph=null,this._edgeList=new Qi,this._bufParams=t||null;};ao.prototype.setWorkingPrecisionModel=function(t){this._workingPrecisionModel=t;},ao.prototype.insertUniqueEdge=function(t){var e=this._edgeList.findEqualEdge(t);if(null!==e){var n=e.getLabel(),r=t.getLabel();e.isPointwiseEqual(t)||(r=new Gr(t.getLabel()),r.flip()),n.merge(r);var i=ao.depthDelta(r),o=e.getDepthDelta(),s=o+i;e.setDepthDelta(s);}else this._edgeList.add(t),t.setDepthDelta(ao.depthDelta(t.getLabel()));},ao.prototype.buildSubgraphs=function(t,e){for(var n=new wn,r=t.iterator();r.hasNext();){var i=r.next(),o=i.getRightmostCoordinate(),s=new ki(n),a=s.getDepth(o);i.computeDepth(a),i.findResultEdges(),n.add(i),e.add(i.getDirectedEdges(),i.getNodes());}},ao.prototype.createSubgraphs=function(t){for(var e=new wn,n=t.getNodes().iterator();n.hasNext();){var r=n.next();if(!r.isVisited()){var i=new Ar;i.create(r),e.add(i);}}return ii.sort(e,ii.reverseOrder()),e},ao.prototype.createEmptyResultGeometry=function(){return this._geomFact.createPolygon()},ao.prototype.getNoder=function(t){if(null!==this._workingNoder)return this._workingNoder;var e=new wi,n=new an;return n.setPrecisionModel(t),e.setSegmentIntersector(new $i(n)),e},ao.prototype.buffer=function(t,e){var n=this._workingPrecisionModel;null===n&&(n=t.getPrecisionModel()),this._geomFact=t.getFactory();var r=new qi(n,this._bufParams),i=new Ui(t,e,r),o=i.getCurves();if(o.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(o,n),this._graph=new Kr(new Ki),this._graph.addEdges(this._edgeList.getEdges());var s=this.createSubgraphs(this._graph),a=new Jr(this._geomFact);this.buildSubgraphs(s,a);var u=a.getPolygons();return u.size()<=0?this.createEmptyResultGeometry():this._geomFact.buildGeometry(u)},ao.prototype.computeNodedEdges=function(t,e){var n=this,r=this.getNoder(e);r.computeNodes(t);for(var i=r.getNodedSubstrings(),o=i.iterator();o.hasNext();){var s=o.next(),a=s.getCoordinates();if(2!==a.length||!a[0].equals2D(a[1])){var u=s.getData(),l=new so(s.getCoordinates(),new Gr(u));n.insertUniqueEdge(l);}}},ao.prototype.setNoder=function(t){this._workingNoder=t;},ao.prototype.interfaces_=function(){return []},ao.prototype.getClass=function(){return ao},ao.depthDelta=function(t){var e=t.getLocation(0,Or.LEFT),n=t.getLocation(0,Or.RIGHT);return e===Oe.INTERIOR&&n===Oe.EXTERIOR?1:e===Oe.EXTERIOR&&n===Oe.INTERIOR?-1:0},ao.convertSegStrings=function(t){for(var e=new xr,n=new wn;t.hasNext();){var r=t.next(),i=e.createLineString(r.getCoordinates());n.add(i);}return e.buildGeometry(n)};var uo=function(){if(this._noder=null,this._scaleFactor=null,this._offsetX=null,this._offsetY=null,this._isScaled=!1,2===arguments.length){var t=arguments[0],e=arguments[1];this._noder=t,this._scaleFactor=e,this._offsetX=0,this._offsetY=0,this._isScaled=!this.isIntegerPrecision();}else if(4===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2],o=arguments[3];this._noder=n,this._scaleFactor=r,this._offsetX=i,this._offsetY=o,this._isScaled=!this.isIntegerPrecision();}};uo.prototype.rescale=function(){var t=this;if(Re(arguments[0],Nn))for(var e=arguments[0],n=e.iterator();n.hasNext();){var r=n.next();t.rescale(r.getCoordinates());}else if(arguments[0]instanceof Array){for(var i=arguments[0],o=0;o<i.length;o++)i[o].x=i[o].x/t._scaleFactor+t._offsetX,i[o].y=i[o].y/t._scaleFactor+t._offsetY;2===i.length&&i[0].equals2D(i[1])&&Ye.out.println(i);}},uo.prototype.scale=function(){var t=this;if(Re(arguments[0],Nn)){for(var e=arguments[0],n=new wn,r=e.iterator();r.hasNext();){var i=r.next();n.add(new mi(t.scale(i.getCoordinates()),i.getData()));}return n}if(arguments[0]instanceof Array){
    for(var o=arguments[0],s=new Array(o.length).fill(null),a=0;a<o.length;a++)s[a]=new we(Math.round((o[a].x-t._offsetX)*t._scaleFactor),Math.round((o[a].y-t._offsetY)*t._scaleFactor),o[a].z);return Pn.removeRepeatedPoints(s)}},uo.prototype.isIntegerPrecision=function(){return 1===this._scaleFactor},uo.prototype.getNodedSubstrings=function(){var t=this._noder.getNodedSubstrings();return this._isScaled&&this.rescale(t),t},uo.prototype.computeNodes=function(t){var e=t;this._isScaled&&(e=this.scale(t)),this._noder.computeNodes(e);},uo.prototype.interfaces_=function(){return [bi]},uo.prototype.getClass=function(){return uo};var lo=function(){this._li=new an,this._segStrings=null;var t=arguments[0];this._segStrings=t;},po={fact:{configurable:!0}};lo.prototype.checkEndPtVertexIntersections=function(){var t=this;if(0===arguments.length)for(var e=this._segStrings.iterator();e.hasNext();){var n=e.next(),r=n.getCoordinates();t.checkEndPtVertexIntersections(r[0],t._segStrings),t.checkEndPtVertexIntersections(r[r.length-1],t._segStrings);}else if(2===arguments.length)for(var i=arguments[0],o=arguments[1],s=o.iterator();s.hasNext();)for(var a=s.next(),u=a.getCoordinates(),l=1;l<u.length-1;l++)if(u[l].equals(i))throw new en("found endpt/interior pt intersection at index "+l+" :pt "+i)},lo.prototype.checkInteriorIntersections=function(){var t=this;if(0===arguments.length)for(var e=this._segStrings.iterator();e.hasNext();)for(var n=e.next(),r=this._segStrings.iterator();r.hasNext();){var i=r.next();t.checkInteriorIntersections(n,i);}else if(2===arguments.length)for(var o=arguments[0],s=arguments[1],a=o.getCoordinates(),u=s.getCoordinates(),l=0;l<a.length-1;l++)for(var p=0;p<u.length-1;p++)t.checkInteriorIntersections(o,l,s,p);else if(4===arguments.length){var c=arguments[0],h=arguments[1],f=arguments[2],g=arguments[3];if(c===f&&h===g)return null;var d=c.getCoordinates()[h],y=c.getCoordinates()[h+1],_=f.getCoordinates()[g],m=f.getCoordinates()[g+1];if(this._li.computeIntersection(d,y,_,m),this._li.hasIntersection()&&(this._li.isProper()||this.hasInteriorIntersection(this._li,d,y)||this.hasInteriorIntersection(this._li,_,m)))throw new en("found non-noded intersection at "+d+"-"+y+" and "+_+"-"+m)}},lo.prototype.checkValid=function(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses();},lo.prototype.checkCollapses=function(){var t=this;if(0===arguments.length)for(var e=this._segStrings.iterator();e.hasNext();){var n=e.next();t.checkCollapses(n);}else if(1===arguments.length)for(var r=arguments[0],i=r.getCoordinates(),o=0;o<i.length-2;o++)t.checkCollapse(i[o],i[o+1],i[o+2]);},lo.prototype.hasInteriorIntersection=function(t,e,n){for(var r=0;r<t.getIntersectionNum();r++){var i=t.getIntersection(r);if(!i.equals(e)&&!i.equals(n))return !0}return !1},lo.prototype.checkCollapse=function(t,e,n){if(t.equals(n))throw new en("found non-noded collapse at "+lo.fact.createLineString([t,e,n]))},lo.prototype.interfaces_=function(){return []},lo.prototype.getClass=function(){return lo},po.fact.get=function(){return new xr},Object.defineProperties(lo,po);var co=function(){this._li=null,this._pt=null,this._originalPt=null,this._ptScaled=null,this._p0Scaled=null,this._p1Scaled=null,this._scaleFactor=null,this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,this._corner=new Array(4).fill(null),this._safeEnv=null;var t=arguments[0],e=arguments[1],n=arguments[2];if(this._originalPt=t,this._pt=t,this._scaleFactor=e,this._li=n,e<=0)throw new Ee("Scale factor must be non-zero");1!==e&&(this._pt=new we(this.scale(t.x),this.scale(t.y)),this._p0Scaled=new we,this._p1Scaled=new we),this.initCorners(this._pt);},ho={SAFE_ENV_EXPANSION_FACTOR:{configurable:!0}};co.prototype.intersectsScaled=function(t,e){var n=Math.min(t.x,e.x),r=Math.max(t.x,e.x),i=Math.min(t.y,e.y),o=Math.max(t.y,e.y),s=this._maxx<n||this._minx>r||this._maxy<i||this._miny>o;if(s)return !1;var a=this.intersectsToleranceSquare(t,e);return rn.isTrue(!(s&&a),"Found bad envelope test"),a},co.prototype.initCorners=function(t){var e=.5;this._minx=t.x-e,this._maxx=t.x+e,this._miny=t.y-e,this._maxy=t.y+e,this._corner[0]=new we(this._maxx,this._maxy),this._corner[1]=new we(this._minx,this._maxy),this._corner[2]=new we(this._minx,this._miny),this._corner[3]=new we(this._maxx,this._miny);},co.prototype.intersects=function(t,e){return 1===this._scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this._p0Scaled),this.copyScaled(e,this._p1Scaled),this.intersectsScaled(this._p0Scaled,this._p1Scaled))},co.prototype.scale=function(t){return Math.round(t*this._scaleFactor)},co.prototype.getCoordinate=function(){return this._originalPt},co.prototype.copyScaled=function(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y);},co.prototype.getSafeEnvelope=function(){if(null===this._safeEnv){var t=co.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new We(this._originalPt.x-t,this._originalPt.x+t,this._originalPt.y-t,this._originalPt.y+t);}return this._safeEnv},co.prototype.intersectsPixelClosure=function(t,e){return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.hasIntersection())))},co.prototype.intersectsToleranceSquare=function(t,e){var n=!1,r=!1;return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.isProper()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.isProper()||(this._li.hasIntersection()&&(n=!0),this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.isProper()||(this._li.hasIntersection()&&(r=!0),this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.isProper()||(!(!n||!r)||(!!t.equals(this._pt)||!!e.equals(this._pt))))))},co.prototype.addSnappedNode=function(t,e){var n=t.getCoordinate(e),r=t.getCoordinate(e+1);return !!this.intersects(n,r)&&(t.addIntersection(this.getCoordinate(),e),!0)},co.prototype.interfaces_=function(){return []},co.prototype.getClass=function(){return co},ho.SAFE_ENV_EXPANSION_FACTOR.get=function(){return .75},Object.defineProperties(co,ho);var fo=function(){this.tempEnv1=new We,this.selectedSegment=new vi;};fo.prototype.select=function(){if(1===arguments.length);else if(2===arguments.length){var t=arguments[0],e=arguments[1];t.getLineSegment(e,this.selectedSegment),this.select(this.selectedSegment);}},fo.prototype.interfaces_=function(){return []},fo.prototype.getClass=function(){return fo};var go=function(){this._index=null;var t=arguments[0];this._index=t;},yo={HotPixelSnapAction:{configurable:!0}};go.prototype.snap=function(){if(1===arguments.length){var t=arguments[0];return this.snap(t,null,-1)}if(3===arguments.length){var e=arguments[0],n=arguments[1],r=arguments[2],i=e.getSafeEnvelope(),o=new _o(e,n,r);return this._index.query(i,{interfaces_:function(){return [ti]},visitItem:function(t){t.select(i,o);}}),o.isNodeAdded()}},go.prototype.interfaces_=function(){return []},go.prototype.getClass=function(){return go},yo.HotPixelSnapAction.get=function(){return _o},Object.defineProperties(go,yo);var _o=function(t){function e(){t.call(this),this._hotPixel=null,this._parentEdge=null,this._hotPixelVertexIndex=null,this._isNodeAdded=!1;var e=arguments[0],n=arguments[1],r=arguments[2];this._hotPixel=e,this._parentEdge=n,this._hotPixelVertexIndex=r;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isNodeAdded=function(){return this._isNodeAdded},e.prototype.select=function(){if(2!==arguments.length)return t.prototype.select.apply(this,arguments);var e=arguments[0],n=arguments[1],r=e.getContext();if(null!==this._parentEdge&&r===this._parentEdge&&n===this._hotPixelVertexIndex)return null;this._isNodeAdded=this._hotPixel.addSnappedNode(r,n);},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(fo),mo=function(){this._li=null,this._interiorIntersections=null;var t=arguments[0];this._li=t,this._interiorIntersections=new wn;};mo.prototype.processIntersections=function(t,e,n,r){var i=this;if(t===n&&e===r)return null;var o=t.getCoordinates()[e],s=t.getCoordinates()[e+1],a=n.getCoordinates()[r],u=n.getCoordinates()[r+1];if(this._li.computeIntersection(o,s,a,u),this._li.hasIntersection()&&this._li.isInteriorIntersection()){for(var l=0;l<this._li.getIntersectionNum();l++)i._interiorIntersections.add(i._li.getIntersection(l));t.addIntersections(this._li,e,0),n.addIntersections(this._li,r,1);}},mo.prototype.isDone=function(){return !1},mo.prototype.getInteriorIntersections=function(){return this._interiorIntersections},mo.prototype.interfaces_=function(){return [Zi]},mo.prototype.getClass=function(){return mo};var vo=function(){this._pm=null,this._li=null,this._scaleFactor=null,this._noder=null,this._pointSnapper=null,this._nodedSegStrings=null;var t=arguments[0];this._pm=t,this._li=new an,this._li.setPrecisionModel(t),this._scaleFactor=t.getScale();};vo.prototype.checkCorrectness=function(t){var e=mi.getNodedSubstrings(t),n=new lo(e);try{n.checkValid();}catch(t){if(!(t instanceof Xe))throw t;t.printStackTrace();}},vo.prototype.getNodedSubstrings=function(){return mi.getNodedSubstrings(this._nodedSegStrings)},vo.prototype.snapRound=function(t,e){var n=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(n),this.computeVertexSnaps(t);},vo.prototype.findInteriorIntersections=function(t,e){var n=new mo(e);return this._noder.setSegmentIntersector(n),this._noder.computeNodes(t),n.getInteriorIntersections()},vo.prototype.computeVertexSnaps=function(){var t=this;if(Re(arguments[0],Nn))for(var e=arguments[0],n=e.iterator();n.hasNext();){var r=n.next();t.computeVertexSnaps(r);}else if(arguments[0]instanceof mi)for(var i=arguments[0],o=i.getCoordinates(),s=0;s<o.length;s++){var a=new co(o[s],t._scaleFactor,t._li),u=t._pointSnapper.snap(a,i,s);u&&i.addIntersection(o[s],s);}},vo.prototype.computeNodes=function(t){this._nodedSegStrings=t,this._noder=new wi,this._pointSnapper=new go(this._noder.getIndex()),this.snapRound(t,this._li);},vo.prototype.computeIntersectionSnaps=function(t){for(var e=this,n=t.iterator();n.hasNext();){var r=n.next(),i=new co(r,e._scaleFactor,e._li);e._pointSnapper.snap(i);}},vo.prototype.interfaces_=function(){return [bi]},vo.prototype.getClass=function(){return vo};var Eo=function(){if(this._argGeom=null,this._distance=null,this._bufParams=new Li,this._resultGeometry=null,this._saveException=null,1===arguments.length){var t=arguments[0];this._argGeom=t;}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this._argGeom=e,this._bufParams=n;}},Io={CAP_ROUND:{configurable:!0},CAP_BUTT:{configurable:!0},CAP_FLAT:{configurable:!0},CAP_SQUARE:{configurable:!0},MAX_PRECISION_DIGITS:{configurable:!0}};Eo.prototype.bufferFixedPrecision=function(t){var e=new uo(new vo(new mr(1)),t.getScale()),n=new ao(this._bufParams);n.setWorkingPrecisionModel(t),n.setNoder(e),this._resultGeometry=n.buffer(this._argGeom,this._distance);},Eo.prototype.bufferReducedPrecision=function(){var t=this;if(0===arguments.length){for(var e=Eo.MAX_PRECISION_DIGITS;e>=0;e--){try{t.bufferReducedPrecision(e);}catch(e){if(!(e instanceof Dr))throw e;t._saveException=e;}if(null!==t._resultGeometry)return null}throw this._saveException}if(1===arguments.length){var n=arguments[0],r=Eo.precisionScaleFactor(this._argGeom,this._distance,n),i=new mr(r);this.bufferFixedPrecision(i);}},Eo.prototype.computeGeometry=function(){if(this.bufferOriginalPrecision(),null!==this._resultGeometry)return null;var t=this._argGeom.getFactory().getPrecisionModel();t.getType()===mr.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision();},Eo.prototype.setQuadrantSegments=function(t){this._bufParams.setQuadrantSegments(t);},Eo.prototype.bufferOriginalPrecision=function(){try{var t=new ao(this._bufParams);this._resultGeometry=t.buffer(this._argGeom,this._distance);}catch(t){if(!(t instanceof en))throw t;this._saveException=t;}},Eo.prototype.getResultGeometry=function(t){return this._distance=t,this.computeGeometry(),this._resultGeometry},Eo.prototype.setEndCapStyle=function(t){this._bufParams.setEndCapStyle(t);},Eo.prototype.interfaces_=function(){return []},Eo.prototype.getClass=function(){return Eo},Eo.bufferOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return new Eo(t).getResultGeometry(e)}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof fn&&"number"==typeof arguments[1]){var n=arguments[0],r=arguments[1],i=arguments[2],o=new Eo(n);o.setQuadrantSegments(i);return o.getResultGeometry(r)}if(arguments[2]instanceof Li&&arguments[0]instanceof fn&&"number"==typeof arguments[1]){var s=arguments[0],a=arguments[1],u=arguments[2];return new Eo(s,u).getResultGeometry(a)}}else if(4===arguments.length){var l=arguments[0],p=arguments[1],c=arguments[2],h=arguments[3],f=new Eo(l);f.setQuadrantSegments(c),f.setEndCapStyle(h);var g=f.getResultGeometry(p);return g}},Eo.precisionScaleFactor=function(t,e,n){var r=t.getEnvelopeInternal(),i=De.max(Math.abs(r.getMaxX()),Math.abs(r.getMaxY()),Math.abs(r.getMinX()),Math.abs(r.getMinY())),o=e>0?e:0,s=i+2*o,a=Math.trunc(Math.log(s)/Math.log(10)+1),u=n-a;return Math.pow(10,u)},Io.CAP_ROUND.get=function(){return Li.CAP_ROUND},Io.CAP_BUTT.get=function(){return Li.CAP_FLAT},Io.CAP_FLAT.get=function(){return Li.CAP_FLAT},Io.CAP_SQUARE.get=function(){return Li.CAP_SQUARE},Io.MAX_PRECISION_DIGITS.get=function(){return 12},Object.defineProperties(Eo,Io);var xo=function(){this._pt=[new we,new we],this._distance=Ie.NaN,this._isNull=!0;};xo.prototype.getCoordinates=function(){return this._pt},xo.prototype.getCoordinate=function(t){return this._pt[t]},xo.prototype.setMinimum=function(){if(1===arguments.length){var t=arguments[0];this.setMinimum(t._pt[0],t._pt[1]);}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var r=e.distance(n);r<this._distance&&this.initialize(e,n,r);}},xo.prototype.initialize=function(){if(0===arguments.length)this._isNull=!0;else if(2===arguments.length){var t=arguments[0],e=arguments[1];this._pt[0].setCoordinate(t),this._pt[1].setCoordinate(e),this._distance=t.distance(e),this._isNull=!1;}else if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];this._pt[0].setCoordinate(n),this._pt[1].setCoordinate(r),this._distance=i,this._isNull=!1;}},xo.prototype.getDistance=function(){return this._distance},xo.prototype.setMaximum=function(){if(1===arguments.length){var t=arguments[0];this.setMaximum(t._pt[0],t._pt[1]);}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var r=e.distance(n);r>this._distance&&this.initialize(e,n,r);}},xo.prototype.interfaces_=function(){return []},xo.prototype.getClass=function(){return xo};var No=function(){};No.prototype.interfaces_=function(){return []},No.prototype.getClass=function(){return No},No.computeDistance=function(){if(arguments[2]instanceof xo&&arguments[0]instanceof tr&&arguments[1]instanceof we)for(var t=arguments[0],e=arguments[1],n=arguments[2],r=t.getCoordinates(),i=new vi,o=0;o<r.length-1;o++){i.setCoordinates(r[o],r[o+1]);var s=i.closestPoint(e);n.setMinimum(s,e);}else if(arguments[2]instanceof xo&&arguments[0]instanceof ir&&arguments[1]instanceof we){var a=arguments[0],u=arguments[1],l=arguments[2];No.computeDistance(a.getExteriorRing(),u,l);for(var p=0;p<a.getNumInteriorRing();p++)No.computeDistance(a.getInteriorRingN(p),u,l);}else if(arguments[2]instanceof xo&&arguments[0]instanceof fn&&arguments[1]instanceof we){var c=arguments[0],h=arguments[1],f=arguments[2];if(c instanceof tr)No.computeDistance(c,h,f);else if(c instanceof ir)No.computeDistance(c,h,f);else if(c instanceof Yn)for(var g=c,d=0;d<g.getNumGeometries();d++){var y=g.getGeometryN(d);No.computeDistance(y,h,f);}else f.setMinimum(c.getCoordinate(),h);}else if(arguments[2]instanceof xo&&arguments[0]instanceof vi&&arguments[1]instanceof we){var _=arguments[0],m=arguments[1],v=arguments[2],E=_.closestPoint(m);v.setMinimum(E,m);}};var bo=function(t){this._maxPtDist=new xo,this._inputGeom=t||null;},Co={MaxPointDistanceFilter:{configurable:!0},MaxMidpointDistanceFilter:{configurable:!0}};bo.prototype.computeMaxMidpointDistance=function(t){var e=new So(this._inputGeom);t.apply(e),this._maxPtDist.setMaximum(e.getMaxPointDistance());},bo.prototype.computeMaxVertexDistance=function(t){var e=new wo(this._inputGeom);t.apply(e),this._maxPtDist.setMaximum(e.getMaxPointDistance());},bo.prototype.findDistance=function(t){return this.computeMaxVertexDistance(t),this.computeMaxMidpointDistance(t),this._maxPtDist.getDistance()},bo.prototype.getDistancePoints=function(){return this._maxPtDist},bo.prototype.interfaces_=function(){return []},bo.prototype.getClass=function(){return bo},Co.MaxPointDistanceFilter.get=function(){return wo},Co.MaxMidpointDistanceFilter.get=function(){return So},Object.defineProperties(bo,Co);var wo=function(t){this._maxPtDist=new xo,this._minPtDist=new xo,this._geom=t||null;};wo.prototype.filter=function(t){this._minPtDist.initialize(),No.computeDistance(this._geom,t,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist);},wo.prototype.getMaxPointDistance=function(){return this._maxPtDist},wo.prototype.interfaces_=function(){return [yn]},wo.prototype.getClass=function(){return wo};var So=function(t){this._maxPtDist=new xo,this._minPtDist=new xo,this._geom=t||null;};So.prototype.filter=function(t,e){if(0===e)return null;var n=t.getCoordinate(e-1),r=t.getCoordinate(e),i=new we((n.x+r.x)/2,(n.y+r.y)/2);this._minPtDist.initialize(),No.computeDistance(this._geom,i,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist);},So.prototype.isDone=function(){return !1},So.prototype.isGeometryChanged=function(){return !1},So.prototype.getMaxPointDistance=function(){return this._maxPtDist},So.prototype.interfaces_=function(){return [jn]},So.prototype.getClass=function(){return So};var Lo=function(t){this._comps=t||null;};Lo.prototype.filter=function(t){t instanceof ir&&this._comps.add(t);},Lo.prototype.interfaces_=function(){return [Xn]},Lo.prototype.getClass=function(){return Lo},Lo.getPolygons=function(){if(1===arguments.length){var t=arguments[0];return Lo.getPolygons(t,new wn)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e instanceof ir?n.add(e):e instanceof Yn&&e.apply(new Lo(n)),n}};var Po=function(){if(this._lines=null,this._isForcedToLineString=!1,1===arguments.length){var t=arguments[0];this._lines=t;}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this._lines=e,this._isForcedToLineString=n;}};Po.prototype.filter=function(t){if(this._isForcedToLineString&&t instanceof sr){var e=t.getFactory().createLineString(t.getCoordinateSequence());return this._lines.add(e),null}t instanceof tr&&this._lines.add(t);},Po.prototype.setForceToLineString=function(t){this._isForcedToLineString=t;},Po.prototype.interfaces_=function(){return [hn]},Po.prototype.getClass=function(){return Po},Po.getGeometry=function(){if(1===arguments.length){var t=arguments[0];return t.getFactory().buildGeometry(Po.getLines(t))}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e.getFactory().buildGeometry(Po.getLines(e,n))}},Po.getLines=function(){if(1===arguments.length){var t=arguments[0];return Po.getLines(t,!1)}if(2===arguments.length){if(Re(arguments[0],Nn)&&Re(arguments[1],Nn)){for(var e=arguments[0],n=arguments[1],r=e.iterator();r.hasNext();){var i=r.next();Po.getLines(i,n);}return n}if(arguments[0]instanceof fn&&"boolean"==typeof arguments[1]){var o=arguments[0],s=arguments[1],a=new wn;return o.apply(new Po(a,s)),a}if(arguments[0]instanceof fn&&Re(arguments[1],Nn)){var u=arguments[0],l=arguments[1];return u instanceof tr?l.add(u):u.apply(new Po(l)),l}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&Re(arguments[0],Nn)&&Re(arguments[1],Nn)){for(var p=arguments[0],c=arguments[1],h=arguments[2],f=p.iterator();f.hasNext();){var g=f.next();Po.getLines(g,c,h);}return c}if("boolean"==typeof arguments[2]&&arguments[0]instanceof fn&&Re(arguments[1],Nn)){var d=arguments[0],y=arguments[1],_=arguments[2];return d.apply(new Po(y,_)),y}}};var Oo=function(){if(this._boundaryRule=_n.OGC_SFS_BOUNDARY_RULE,this._isIn=null,this._numBoundaries=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];if(null===t)throw new Ee("Rule must be non-null");this._boundaryRule=t;}};Oo.prototype.locateInternal=function(){var t=this;if(arguments[0]instanceof we&&arguments[1]instanceof ir){var e=arguments[0],n=arguments[1];if(n.isEmpty())return Oe.EXTERIOR;var r=n.getExteriorRing(),i=this.locateInPolygonRing(e,r);if(i===Oe.EXTERIOR)return Oe.EXTERIOR;if(i===Oe.BOUNDARY)return Oe.BOUNDARY;for(var o=0;o<n.getNumInteriorRing();o++){var s=n.getInteriorRingN(o),a=t.locateInPolygonRing(e,s);if(a===Oe.INTERIOR)return Oe.EXTERIOR;if(a===Oe.BOUNDARY)return Oe.BOUNDARY}return Oe.INTERIOR}if(arguments[0]instanceof we&&arguments[1]instanceof tr){var u=arguments[0],l=arguments[1];if(!l.getEnvelopeInternal().intersects(u))return Oe.EXTERIOR;var p=l.getCoordinates();return l.isClosed()||!u.equals(p[0])&&!u.equals(p[p.length-1])?pn.isOnLine(u,p)?Oe.INTERIOR:Oe.EXTERIOR:Oe.BOUNDARY}if(arguments[0]instanceof we&&arguments[1]instanceof nr){var c=arguments[0];return arguments[1].getCoordinate().equals2D(c)?Oe.INTERIOR:Oe.EXTERIOR}},Oo.prototype.locateInPolygonRing=function(t,e){return e.getEnvelopeInternal().intersects(t)?pn.locatePointInRing(t,e.getCoordinates()):Oe.EXTERIOR},Oo.prototype.intersects=function(t,e){return this.locate(t,e)!==Oe.EXTERIOR},Oo.prototype.updateLocationInfo=function(t){t===Oe.INTERIOR&&(this._isIn=!0),t===Oe.BOUNDARY&&this._numBoundaries++;},Oo.prototype.computeLocation=function(t,e){var n=this;if(e instanceof nr&&this.updateLocationInfo(this.locateInternal(t,e)),e instanceof tr)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof ir)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof Hn)for(var r=e,i=0;i<r.getNumGeometries();i++){var o=r.getGeometryN(i);n.updateLocationInfo(n.locateInternal(t,o));}else if(e instanceof ar)for(var s=e,a=0;a<s.getNumGeometries();a++){var u=s.getGeometryN(a);n.updateLocationInfo(n.locateInternal(t,u));}else if(e instanceof Yn)for(var l=new ji(e);l.hasNext();){var p=l.next();p!==e&&n.computeLocation(t,p);}},Oo.prototype.locate=function(t,e){return e.isEmpty()?Oe.EXTERIOR:e instanceof tr?this.locateInternal(t,e):e instanceof ir?this.locateInternal(t,e):(this._isIn=!1,this._numBoundaries=0,this.computeLocation(t,e),this._boundaryRule.isInBoundary(this._numBoundaries)?Oe.BOUNDARY:this._numBoundaries>0||this._isIn?Oe.INTERIOR:Oe.EXTERIOR)},Oo.prototype.interfaces_=function(){return []},Oo.prototype.getClass=function(){return Oo};var To=function t(){if(this._component=null,this._segIndex=null,this._pt=null,2===arguments.length){var e=arguments[0],n=arguments[1];t.call(this,e,t.INSIDE_AREA,n);}else if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];this._component=r,this._segIndex=i,this._pt=o;}},Ro={INSIDE_AREA:{configurable:!0}};To.prototype.isInsideArea=function(){return this._segIndex===To.INSIDE_AREA},To.prototype.getCoordinate=function(){return this._pt},To.prototype.getGeometryComponent=function(){return this._component},To.prototype.getSegmentIndex=function(){return this._segIndex},To.prototype.interfaces_=function(){return []},To.prototype.getClass=function(){return To},Ro.INSIDE_AREA.get=function(){return -1},Object.defineProperties(To,Ro);var Do=function(t){this._pts=t||null;};Do.prototype.filter=function(t){t instanceof nr&&this._pts.add(t);},Do.prototype.interfaces_=function(){return [Xn]},Do.prototype.getClass=function(){return Do},Do.getPoints=function(){if(1===arguments.length){var t=arguments[0];return t instanceof nr?ii.singletonList(t):Do.getPoints(t,new wn)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e instanceof nr?n.add(e):e instanceof Yn&&e.apply(new Do(n)),n}};var Mo=function(){this._locations=null;var t=arguments[0];this._locations=t;};Mo.prototype.filter=function(t){(t instanceof nr||t instanceof tr||t instanceof ir)&&this._locations.add(new To(t,0,t.getCoordinate()));},Mo.prototype.interfaces_=function(){return [Xn]},Mo.prototype.getClass=function(){return Mo},Mo.getLocations=function(t){var e=new wn;return t.apply(new Mo(e)),e};var Ao=function(){if(this._geom=null,this._terminateDistance=0,this._ptLocator=new Oo,this._minDistanceLocation=null,this._minDistance=Ie.MAX_VALUE,2===arguments.length){var t=arguments[0],e=arguments[1];this._geom=[t,e],this._terminateDistance=0;}else if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];this._geom=new Array(2).fill(null),this._geom[0]=n,this._geom[1]=r,this._terminateDistance=i;}};Ao.prototype.computeContainmentDistance=function(){var t=this;if(0===arguments.length){var e=new Array(2).fill(null);if(this.computeContainmentDistance(0,e),this._minDistance<=this._terminateDistance)return null;this.computeContainmentDistance(1,e);}else if(2===arguments.length){var n=arguments[0],r=arguments[1],i=1-n,o=Lo.getPolygons(this._geom[n]);if(o.size()>0){var s=Mo.getLocations(this._geom[i]);if(this.computeContainmentDistance(s,o,r),this._minDistance<=this._terminateDistance)return this._minDistanceLocation[i]=r[0],this._minDistanceLocation[n]=r[1],null}}else if(3===arguments.length)if(arguments[2]instanceof Array&&Re(arguments[0],Cn)&&Re(arguments[1],Cn)){for(var a=arguments[0],u=arguments[1],l=arguments[2],p=0;p<a.size();p++)for(var c=a.get(p),h=0;h<u.size();h++)if(t.computeContainmentDistance(c,u.get(h),l),t._minDistance<=t._terminateDistance)return null}else if(arguments[2]instanceof Array&&arguments[0]instanceof To&&arguments[1]instanceof ir){var f=arguments[0],g=arguments[1],d=arguments[2],y=f.getCoordinate();if(Oe.EXTERIOR!==this._ptLocator.locate(y,g))return this._minDistance=0,d[0]=f,d[1]=new To(g,y),null}},Ao.prototype.computeMinDistanceLinesPoints=function(t,e,n){for(var r=this,i=0;i<t.size();i++)for(var o=t.get(i),s=0;s<e.size();s++){var a=e.get(s);if(r.computeMinDistance(o,a,n),r._minDistance<=r._terminateDistance)return null}},Ao.prototype.computeFacetDistance=function(){var t=new Array(2).fill(null),e=Po.getLines(this._geom[0]),n=Po.getLines(this._geom[1]),r=Do.getPoints(this._geom[0]),i=Do.getPoints(this._geom[1]);return this.computeMinDistanceLines(e,n,t),this.updateMinDistance(t,!1),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(e,i,t),this.updateMinDistance(t,!1),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(n,r,t),this.updateMinDistance(t,!0),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistancePoints(r,i,t),void this.updateMinDistance(t,!1))))},Ao.prototype.nearestLocations=function(){return this.computeMinDistance(),this._minDistanceLocation},Ao.prototype.updateMinDistance=function(t,e){if(null===t[0])return null;e?(this._minDistanceLocation[0]=t[1],this._minDistanceLocation[1]=t[0]):(this._minDistanceLocation[0]=t[0],this._minDistanceLocation[1]=t[1]);},Ao.prototype.nearestPoints=function(){return this.computeMinDistance(),[this._minDistanceLocation[0].getCoordinate(),this._minDistanceLocation[1].getCoordinate()]},Ao.prototype.computeMinDistance=function(){var t=this;if(0===arguments.length){if(null!==this._minDistanceLocation)return null;if(this._minDistanceLocation=new Array(2).fill(null),this.computeContainmentDistance(),this._minDistance<=this._terminateDistance)return null;this.computeFacetDistance();}else if(3===arguments.length)if(arguments[2]instanceof Array&&arguments[0]instanceof tr&&arguments[1]instanceof nr){var e=arguments[0],n=arguments[1],r=arguments[2];if(e.getEnvelopeInternal().distance(n.getEnvelopeInternal())>this._minDistance)return null;for(var i=e.getCoordinates(),o=n.getCoordinate(),s=0;s<i.length-1;s++){var a=pn.distancePointLine(o,i[s],i[s+1]);if(a<t._minDistance){t._minDistance=a;var u=new vi(i[s],i[s+1]),l=u.closestPoint(o);r[0]=new To(e,s,l),r[1]=new To(n,0,o);}if(t._minDistance<=t._terminateDistance)return null}}else if(arguments[2]instanceof Array&&arguments[0]instanceof tr&&arguments[1]instanceof tr){var p=arguments[0],c=arguments[1],h=arguments[2];if(p.getEnvelopeInternal().distance(c.getEnvelopeInternal())>this._minDistance)return null;for(var f=p.getCoordinates(),g=c.getCoordinates(),d=0;d<f.length-1;d++)for(var y=0;y<g.length-1;y++){var _=pn.distanceLineLine(f[d],f[d+1],g[y],g[y+1]);if(_<t._minDistance){t._minDistance=_;var m=new vi(f[d],f[d+1]),v=new vi(g[y],g[y+1]),E=m.closestPoints(v);h[0]=new To(p,d,E[0]),h[1]=new To(c,y,E[1]);}if(t._minDistance<=t._terminateDistance)return null}}},Ao.prototype.computeMinDistancePoints=function(t,e,n){for(var r=this,i=0;i<t.size();i++)for(var o=t.get(i),s=0;s<e.size();s++){var a=e.get(s),u=o.getCoordinate().distance(a.getCoordinate());if(u<r._minDistance&&(r._minDistance=u,n[0]=new To(o,0,o.getCoordinate()),n[1]=new To(a,0,a.getCoordinate())),r._minDistance<=r._terminateDistance)return null}},Ao.prototype.distance=function(){if(null===this._geom[0]||null===this._geom[1])throw new Ee("null geometries are not supported");return this._geom[0].isEmpty()||this._geom[1].isEmpty()?0:(this.computeMinDistance(),this._minDistance)},Ao.prototype.computeMinDistanceLines=function(t,e,n){for(var r=this,i=0;i<t.size();i++)for(var o=t.get(i),s=0;s<e.size();s++){var a=e.get(s);if(r.computeMinDistance(o,a,n),r._minDistance<=r._terminateDistance)return null}},Ao.prototype.interfaces_=function(){return []},Ao.prototype.getClass=function(){return Ao},Ao.distance=function(t,e){return new Ao(t,e).distance()},Ao.isWithinDistance=function(t,e,n){return new Ao(t,e,n).distance()<=n},Ao.nearestPoints=function(t,e){return new Ao(t,e).nearestPoints()};var Fo=function(){this._pt=[new we,new we],this._distance=Ie.NaN,this._isNull=!0;};Fo.prototype.getCoordinates=function(){return this._pt},Fo.prototype.getCoordinate=function(t){return this._pt[t]},Fo.prototype.setMinimum=function(){if(1===arguments.length){var t=arguments[0];this.setMinimum(t._pt[0],t._pt[1]);}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var r=e.distance(n);r<this._distance&&this.initialize(e,n,r);}},Fo.prototype.initialize=function(){if(0===arguments.length)this._isNull=!0;else if(2===arguments.length){var t=arguments[0],e=arguments[1];this._pt[0].setCoordinate(t),this._pt[1].setCoordinate(e),this._distance=t.distance(e),this._isNull=!1;}else if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];this._pt[0].setCoordinate(n),this._pt[1].setCoordinate(r),this._distance=i,this._isNull=!1;}},Fo.prototype.toString=function(){return tn.toLineString(this._pt[0],this._pt[1])},Fo.prototype.getDistance=function(){return this._distance},Fo.prototype.setMaximum=function(){if(1===arguments.length){var t=arguments[0];this.setMaximum(t._pt[0],t._pt[1]);}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var r=e.distance(n);r>this._distance&&this.initialize(e,n,r);}},Fo.prototype.interfaces_=function(){return []},Fo.prototype.getClass=function(){return Fo};var Go=function(){};Go.prototype.interfaces_=function(){return []},Go.prototype.getClass=function(){return Go},Go.computeDistance=function(){if(arguments[2]instanceof Fo&&arguments[0]instanceof tr&&arguments[1]instanceof we)for(var t=arguments[0],e=arguments[1],n=arguments[2],r=new vi,i=t.getCoordinates(),o=0;o<i.length-1;o++){r.setCoordinates(i[o],i[o+1]);var s=r.closestPoint(e);n.setMinimum(s,e);}else if(arguments[2]instanceof Fo&&arguments[0]instanceof ir&&arguments[1]instanceof we){
    var a=arguments[0],u=arguments[1],l=arguments[2];Go.computeDistance(a.getExteriorRing(),u,l);for(var p=0;p<a.getNumInteriorRing();p++)Go.computeDistance(a.getInteriorRingN(p),u,l);}else if(arguments[2]instanceof Fo&&arguments[0]instanceof fn&&arguments[1]instanceof we){var c=arguments[0],h=arguments[1],f=arguments[2];if(c instanceof tr)Go.computeDistance(c,h,f);else if(c instanceof ir)Go.computeDistance(c,h,f);else if(c instanceof Yn)for(var g=c,d=0;d<g.getNumGeometries();d++){var y=g.getGeometryN(d);Go.computeDistance(y,h,f);}else f.setMinimum(c.getCoordinate(),h);}else if(arguments[2]instanceof Fo&&arguments[0]instanceof vi&&arguments[1]instanceof we){var _=arguments[0],m=arguments[1],v=arguments[2],E=_.closestPoint(m);v.setMinimum(E,m);}};var qo=function(){this._g0=null,this._g1=null,this._ptDist=new Fo,this._densifyFrac=0;var t=arguments[0],e=arguments[1];this._g0=t,this._g1=e;},ko={MaxPointDistanceFilter:{configurable:!0},MaxDensifiedByFractionDistanceFilter:{configurable:!0}};qo.prototype.getCoordinates=function(){return this._ptDist.getCoordinates()},qo.prototype.setDensifyFraction=function(t){if(t>1||t<=0)throw new Ee("Fraction is not in range (0.0 - 1.0]");this._densifyFrac=t;},qo.prototype.compute=function(t,e){this.computeOrientedDistance(t,e,this._ptDist),this.computeOrientedDistance(e,t,this._ptDist);},qo.prototype.distance=function(){return this.compute(this._g0,this._g1),this._ptDist.getDistance()},qo.prototype.computeOrientedDistance=function(t,e,n){var r=new Bo(e);if(t.apply(r),n.setMaximum(r.getMaxPointDistance()),this._densifyFrac>0){var i=new Vo(e,this._densifyFrac);t.apply(i),n.setMaximum(i.getMaxPointDistance());}},qo.prototype.orientedDistance=function(){return this.computeOrientedDistance(this._g0,this._g1,this._ptDist),this._ptDist.getDistance()},qo.prototype.interfaces_=function(){return []},qo.prototype.getClass=function(){return qo},qo.distance=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return new qo(t,e).distance()}if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2],o=new qo(n,r);return o.setDensifyFraction(i),o.distance()}},ko.MaxPointDistanceFilter.get=function(){return Bo},ko.MaxDensifiedByFractionDistanceFilter.get=function(){return Vo},Object.defineProperties(qo,ko);var Bo=function(){this._maxPtDist=new Fo,this._minPtDist=new Fo,this._euclideanDist=new Go,this._geom=null;var t=arguments[0];this._geom=t;};Bo.prototype.filter=function(t){this._minPtDist.initialize(),Go.computeDistance(this._geom,t,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist);},Bo.prototype.getMaxPointDistance=function(){return this._maxPtDist},Bo.prototype.interfaces_=function(){return [yn]},Bo.prototype.getClass=function(){return Bo};var Vo=function(){this._maxPtDist=new Fo,this._minPtDist=new Fo,this._geom=null,this._numSubSegs=0;var t=arguments[0],e=arguments[1];this._geom=t,this._numSubSegs=Math.trunc(Math.round(1/e));};Vo.prototype.filter=function(t,e){var n=this;if(0===e)return null;for(var r=t.getCoordinate(e-1),i=t.getCoordinate(e),o=(i.x-r.x)/this._numSubSegs,s=(i.y-r.y)/this._numSubSegs,a=0;a<this._numSubSegs;a++){var u=r.x+a*o,l=r.y+a*s,p=new we(u,l);n._minPtDist.initialize(),Go.computeDistance(n._geom,p,n._minPtDist),n._maxPtDist.setMaximum(n._minPtDist);}},Vo.prototype.isDone=function(){return !1},Vo.prototype.isGeometryChanged=function(){return !1},Vo.prototype.getMaxPointDistance=function(){return this._maxPtDist},Vo.prototype.interfaces_=function(){return [jn]},Vo.prototype.getClass=function(){return Vo};var zo=function(t,e,n){this._minValidDistance=null,this._maxValidDistance=null,this._minDistanceFound=null,this._maxDistanceFound=null,this._isValid=!0,this._errMsg=null,this._errorLocation=null,this._errorIndicator=null,this._input=t||null,this._bufDistance=e||null,this._result=n||null;},Uo={VERBOSE:{configurable:!0},MAX_DISTANCE_DIFF_FRAC:{configurable:!0}};zo.prototype.checkMaximumDistance=function(t,e,n){var r=new qo(e,t);if(r.setDensifyFraction(.25),this._maxDistanceFound=r.orientedDistance(),this._maxDistanceFound>n){this._isValid=!1;var i=r.getCoordinates();this._errorLocation=i[1],this._errorIndicator=t.getFactory().createLineString(i),this._errMsg="Distance between buffer curve and input is too large ("+this._maxDistanceFound+" at "+tn.toLineString(i[0],i[1])+")";}},zo.prototype.isValid=function(){var t=Math.abs(this._bufDistance),e=zo.MAX_DISTANCE_DIFF_FRAC*t;return this._minValidDistance=t-e,this._maxValidDistance=t+e,!(!this._input.isEmpty()&&!this._result.isEmpty())||(this._bufDistance>0?this.checkPositiveValid():this.checkNegativeValid(),zo.VERBOSE&&Ye.out.println("Min Dist= "+this._minDistanceFound+"  err= "+(1-this._minDistanceFound/this._bufDistance)+"  Max Dist= "+this._maxDistanceFound+"  err= "+(this._maxDistanceFound/this._bufDistance-1)),this._isValid)},zo.prototype.checkNegativeValid=function(){if(!(this._input instanceof ir||this._input instanceof ar||this._input instanceof Yn))return null;var t=this.getPolygonLines(this._input);if(this.checkMinimumDistance(t,this._result,this._minValidDistance),!this._isValid)return null;this.checkMaximumDistance(t,this._result,this._maxValidDistance);},zo.prototype.getErrorIndicator=function(){return this._errorIndicator},zo.prototype.checkMinimumDistance=function(t,e,n){var r=new Ao(t,e,n);if(this._minDistanceFound=r.distance(),this._minDistanceFound<n){this._isValid=!1;var i=r.nearestPoints();this._errorLocation=r.nearestPoints()[1],this._errorIndicator=t.getFactory().createLineString(i),this._errMsg="Distance between buffer curve and input is too small ("+this._minDistanceFound+" at "+tn.toLineString(i[0],i[1])+" )";}},zo.prototype.checkPositiveValid=function(){var t=this._result.getBoundary();if(this.checkMinimumDistance(this._input,t,this._minValidDistance),!this._isValid)return null;this.checkMaximumDistance(this._input,t,this._maxValidDistance);},zo.prototype.getErrorLocation=function(){return this._errorLocation},zo.prototype.getPolygonLines=function(t){for(var e=new wn,n=new Po(e),r=Lo.getPolygons(t),i=r.iterator();i.hasNext();){i.next().apply(n);}return t.getFactory().buildGeometry(e)},zo.prototype.getErrorMessage=function(){return this._errMsg},zo.prototype.interfaces_=function(){return []},zo.prototype.getClass=function(){return zo},Uo.VERBOSE.get=function(){return !1},Uo.MAX_DISTANCE_DIFF_FRAC.get=function(){return .012},Object.defineProperties(zo,Uo);var Xo=function(t,e,n){this._isValid=!0,this._errorMsg=null,this._errorLocation=null,this._errorIndicator=null,this._input=t||null,this._distance=e||null,this._result=n||null;},jo={VERBOSE:{configurable:!0},MAX_ENV_DIFF_FRAC:{configurable:!0}};Xo.prototype.isValid=function(){return this.checkPolygonal(),this._isValid?(this.checkExpectedEmpty(),this._isValid?(this.checkEnvelope(),this._isValid?(this.checkArea(),this._isValid?(this.checkDistance(),this._isValid):this._isValid):this._isValid):this._isValid):this._isValid},Xo.prototype.checkEnvelope=function(){if(this._distance<0)return null;var t=this._distance*Xo.MAX_ENV_DIFF_FRAC;0===t&&(t=.001);var e=new We(this._input.getEnvelopeInternal());e.expandBy(this._distance);var n=new We(this._result.getEnvelopeInternal());n.expandBy(t),n.contains(e)||(this._isValid=!1,this._errorMsg="Buffer envelope is incorrect",this._errorIndicator=this._input.getFactory().toGeometry(n)),this.report("Envelope");},Xo.prototype.checkDistance=function(){var t=new zo(this._input,this._distance,this._result);t.isValid()||(this._isValid=!1,this._errorMsg=t.getErrorMessage(),this._errorLocation=t.getErrorLocation(),this._errorIndicator=t.getErrorIndicator()),this.report("Distance");},Xo.prototype.checkArea=function(){var t=this._input.getArea(),e=this._result.getArea();this._distance>0&&t>e&&(this._isValid=!1,this._errorMsg="Area of positive buffer is smaller than input",this._errorIndicator=this._result),this._distance<0&&t<e&&(this._isValid=!1,this._errorMsg="Area of negative buffer is larger than input",this._errorIndicator=this._result),this.report("Area");},Xo.prototype.checkPolygonal=function(){this._result instanceof ir||this._result instanceof ar||(this._isValid=!1),this._errorMsg="Result is not polygonal",this._errorIndicator=this._result,this.report("Polygonal");},Xo.prototype.getErrorIndicator=function(){return this._errorIndicator},Xo.prototype.getErrorLocation=function(){return this._errorLocation},Xo.prototype.checkExpectedEmpty=function(){return this._input.getDimension()>=2?null:this._distance>0?null:(this._result.isEmpty()||(this._isValid=!1,this._errorMsg="Result is non-empty",this._errorIndicator=this._result),void this.report("ExpectedEmpty"))},Xo.prototype.report=function(t){if(!Xo.VERBOSE)return null;Ye.out.println("Check "+t+": "+(this._isValid?"passed":"FAILED"));},Xo.prototype.getErrorMessage=function(){return this._errorMsg},Xo.prototype.interfaces_=function(){return []},Xo.prototype.getClass=function(){return Xo},Xo.isValidMsg=function(t,e,n){var r=new Xo(t,e,n);return r.isValid()?null:r.getErrorMessage()},Xo.isValid=function(t,e,n){return !!new Xo(t,e,n).isValid()},jo.VERBOSE.get=function(){return !1},jo.MAX_ENV_DIFF_FRAC.get=function(){return .012},Object.defineProperties(Xo,jo);var Yo=function(){this._pts=null,this._data=null;var t=arguments[0],e=arguments[1];this._pts=t,this._data=e;};Yo.prototype.getCoordinates=function(){return this._pts},Yo.prototype.size=function(){return this._pts.length},Yo.prototype.getCoordinate=function(t){return this._pts[t]},Yo.prototype.isClosed=function(){return this._pts[0].equals(this._pts[this._pts.length-1])},Yo.prototype.getSegmentOctant=function(t){return t===this._pts.length-1?-1:di.octant(this.getCoordinate(t),this.getCoordinate(t+1))},Yo.prototype.setData=function(t){this._data=t;},Yo.prototype.getData=function(){return this._data},Yo.prototype.toString=function(){return tn.toLineString(new fr(this._pts))},Yo.prototype.interfaces_=function(){return [yi]},Yo.prototype.getClass=function(){return Yo};var Ho=function(){this._findAllIntersections=!1,this._isCheckEndSegmentsOnly=!1,this._li=null,this._interiorIntersection=null,this._intSegments=null,this._intersections=new wn,this._intersectionCount=0,this._keepIntersections=!0;var t=arguments[0];this._li=t,this._interiorIntersection=null;};Ho.prototype.getInteriorIntersection=function(){return this._interiorIntersection},Ho.prototype.setCheckEndSegmentsOnly=function(t){this._isCheckEndSegmentsOnly=t;},Ho.prototype.getIntersectionSegments=function(){return this._intSegments},Ho.prototype.count=function(){return this._intersectionCount},Ho.prototype.getIntersections=function(){return this._intersections},Ho.prototype.setFindAllIntersections=function(t){this._findAllIntersections=t;},Ho.prototype.setKeepIntersections=function(t){this._keepIntersections=t;},Ho.prototype.processIntersections=function(t,e,n,r){if(!this._findAllIntersections&&this.hasIntersection())return null;if(t===n&&e===r)return null;if(this._isCheckEndSegmentsOnly){if(!(this.isEndSegment(t,e)||this.isEndSegment(n,r)))return null}var i=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[r],a=n.getCoordinates()[r+1];this._li.computeIntersection(i,o,s,a),this._li.hasIntersection()&&this._li.isInteriorIntersection()&&(this._intSegments=new Array(4).fill(null),this._intSegments[0]=i,this._intSegments[1]=o,this._intSegments[2]=s,this._intSegments[3]=a,this._interiorIntersection=this._li.getIntersection(0),this._keepIntersections&&this._intersections.add(this._interiorIntersection),this._intersectionCount++);},Ho.prototype.isEndSegment=function(t,e){return 0===e||e>=t.size()-2},Ho.prototype.hasIntersection=function(){return null!==this._interiorIntersection},Ho.prototype.isDone=function(){return !this._findAllIntersections&&null!==this._interiorIntersection},Ho.prototype.interfaces_=function(){return [Zi]},Ho.prototype.getClass=function(){return Ho},Ho.createAllIntersectionsFinder=function(t){var e=new Ho(t);return e.setFindAllIntersections(!0),e},Ho.createAnyIntersectionFinder=function(t){return new Ho(t)},Ho.createIntersectionCounter=function(t){var e=new Ho(t);return e.setFindAllIntersections(!0),e.setKeepIntersections(!1),e};var Wo=function(){this._li=new an,this._segStrings=null,this._findAllIntersections=!1,this._segInt=null,this._isValid=!0;var t=arguments[0];this._segStrings=t;};Wo.prototype.execute=function(){if(null!==this._segInt)return null;this.checkInteriorIntersections();},Wo.prototype.getIntersections=function(){return this._segInt.getIntersections()},Wo.prototype.isValid=function(){return this.execute(),this._isValid},Wo.prototype.setFindAllIntersections=function(t){this._findAllIntersections=t;},Wo.prototype.checkInteriorIntersections=function(){this._isValid=!0,this._segInt=new Ho(this._li),this._segInt.setFindAllIntersections(this._findAllIntersections);var t=new wi;if(t.setSegmentIntersector(this._segInt),t.computeNodes(this._segStrings),this._segInt.hasIntersection())return this._isValid=!1,null},Wo.prototype.checkValid=function(){if(this.execute(),!this._isValid)throw new Dr(this.getErrorMessage(),this._segInt.getInteriorIntersection())},Wo.prototype.getErrorMessage=function(){if(this._isValid)return "no intersections found";var t=this._segInt.getIntersectionSegments();return "found non-noded intersection between "+tn.toLineString(t[0],t[1])+" and "+tn.toLineString(t[2],t[3])},Wo.prototype.interfaces_=function(){return []},Wo.prototype.getClass=function(){return Wo},Wo.computeIntersections=function(t){var e=new Wo(t);return e.setFindAllIntersections(!0),e.isValid(),e.getIntersections()};var Ko=function t(){this._nv=null;var e=arguments[0];this._nv=new Wo(t.toSegmentStrings(e));};Ko.prototype.checkValid=function(){this._nv.checkValid();},Ko.prototype.interfaces_=function(){return []},Ko.prototype.getClass=function(){return Ko},Ko.toSegmentStrings=function(t){for(var e=new wn,n=t.iterator();n.hasNext();){var r=n.next();e.add(new Yo(r.getCoordinates(),r));}return e},Ko.checkValid=function(t){new Ko(t).checkValid();};var Jo=function(t){this._mapOp=t;};Jo.prototype.map=function(t){for(var e=this,n=new wn,r=0;r<t.getNumGeometries();r++){var i=e._mapOp.map(t.getGeometryN(r));i.isEmpty()||n.add(i);}return t.getFactory().createGeometryCollection(xr.toGeometryArray(n))},Jo.prototype.interfaces_=function(){return []},Jo.prototype.getClass=function(){return Jo},Jo.map=function(t,e){return new Jo(e).map(t)};var Qo=function(){this._op=null,this._geometryFactory=null,this._ptLocator=null,this._lineEdgesList=new wn,this._resultLineList=new wn;var t=arguments[0],e=arguments[1],n=arguments[2];this._op=t,this._geometryFactory=e,this._ptLocator=n;};Qo.prototype.collectLines=function(t){for(var e=this,n=this._op.getGraph().getEdgeEnds().iterator();n.hasNext();){var r=n.next();e.collectLineEdge(r,t,e._lineEdgesList),e.collectBoundaryTouchEdge(r,t,e._lineEdgesList);}},Qo.prototype.labelIsolatedLine=function(t,e){var n=this._ptLocator.locate(t.getCoordinate(),this._op.getArgGeometry(e));t.getLabel().setLocation(e,n);},Qo.prototype.build=function(t){return this.findCoveredLineEdges(),this.collectLines(t),this.buildLines(t),this._resultLineList},Qo.prototype.collectLineEdge=function(t,e,n){var r=t.getLabel(),i=t.getEdge();t.isLineEdge()&&(t.isVisited()||!Ts.isResultOfOp(r,e)||i.isCovered()||(n.add(i),t.setVisitedEdge(!0)));},Qo.prototype.findCoveredLineEdges=function(){for(var t=this,e=this._op.getGraph().getNodes().iterator();e.hasNext();){e.next().getEdges().findCoveredLineEdges();}for(var n=this._op.getGraph().getEdgeEnds().iterator();n.hasNext();){var r=n.next(),i=r.getEdge();if(r.isLineEdge()&&!i.isCoveredSet()){var o=t._op.isCoveredByA(r.getCoordinate());i.setCovered(o);}}},Qo.prototype.labelIsolatedLines=function(t){for(var e=this,n=t.iterator();n.hasNext();){var r=n.next(),i=r.getLabel();r.isIsolated()&&(i.isNull(0)?e.labelIsolatedLine(r,0):e.labelIsolatedLine(r,1));}},Qo.prototype.buildLines=function(t){for(var e=this,n=this._lineEdgesList.iterator();n.hasNext();){var r=n.next(),i=e._geometryFactory.createLineString(r.getCoordinates());e._resultLineList.add(i),r.setInResult(!0);}},Qo.prototype.collectBoundaryTouchEdge=function(t,e,n){var r=t.getLabel();return t.isLineEdge()?null:t.isVisited()?null:t.isInteriorAreaEdge()?null:t.getEdge().isInResult()?null:(rn.isTrue(!(t.isInResult()||t.getSym().isInResult())||!t.getEdge().isInResult()),void(Ts.isResultOfOp(r,e)&&e===Ts.INTERSECTION&&(n.add(t.getEdge()),t.setVisitedEdge(!0))))},Qo.prototype.interfaces_=function(){return []},Qo.prototype.getClass=function(){return Qo};var Zo=function(){this._op=null,this._geometryFactory=null,this._resultPointList=new wn;var t=arguments[0],e=arguments[1];this._op=t,this._geometryFactory=e;};Zo.prototype.filterCoveredNodeToPoint=function(t){var e=t.getCoordinate();if(!this._op.isCoveredByLA(e)){var n=this._geometryFactory.createPoint(e);this._resultPointList.add(n);}},Zo.prototype.extractNonCoveredResultNodes=function(t){for(var e=this,n=this._op.getGraph().getNodes().iterator();n.hasNext();){var r=n.next();if(!r.isInResult()&&(!r.isIncidentEdgeInResult()&&(0===r.getEdges().getDegree()||t===Ts.INTERSECTION))){var i=r.getLabel();Ts.isResultOfOp(i,t)&&e.filterCoveredNodeToPoint(r);}}},Zo.prototype.build=function(t){return this.extractNonCoveredResultNodes(t),this._resultPointList},Zo.prototype.interfaces_=function(){return []},Zo.prototype.getClass=function(){return Zo};var $o=function(){this._inputGeom=null,this._factory=null,this._pruneEmptyGeometry=!0,this._preserveGeometryCollectionType=!0,this._preserveCollections=!1,this._preserveType=!1;};$o.prototype.transformPoint=function(t,e){return this._factory.createPoint(this.transformCoordinates(t.getCoordinateSequence(),t))},$o.prototype.transformPolygon=function(t,e){var n=this,r=!0,i=this.transformLinearRing(t.getExteriorRing(),t);null!==i&&i instanceof sr&&!i.isEmpty()||(r=!1);for(var o=new wn,s=0;s<t.getNumInteriorRing();s++){var a=n.transformLinearRing(t.getInteriorRingN(s),t);null===a||a.isEmpty()||(a instanceof sr||(r=!1),o.add(a));}if(r)return this._factory.createPolygon(i,o.toArray([]));var u=new wn;return null!==i&&u.add(i),u.addAll(o),this._factory.buildGeometry(u)},$o.prototype.createCoordinateSequence=function(t){return this._factory.getCoordinateSequenceFactory().create(t)},$o.prototype.getInputGeometry=function(){return this._inputGeom},$o.prototype.transformMultiLineString=function(t,e){for(var n=this,r=new wn,i=0;i<t.getNumGeometries();i++){var o=n.transformLineString(t.getGeometryN(i),t);null!==o&&(o.isEmpty()||r.add(o));}return this._factory.buildGeometry(r)},$o.prototype.transformCoordinates=function(t,e){return this.copy(t)},$o.prototype.transformLineString=function(t,e){return this._factory.createLineString(this.transformCoordinates(t.getCoordinateSequence(),t))},$o.prototype.transformMultiPoint=function(t,e){for(var n=this,r=new wn,i=0;i<t.getNumGeometries();i++){var o=n.transformPoint(t.getGeometryN(i),t);null!==o&&(o.isEmpty()||r.add(o));}return this._factory.buildGeometry(r)},$o.prototype.transformMultiPolygon=function(t,e){for(var n=this,r=new wn,i=0;i<t.getNumGeometries();i++){var o=n.transformPolygon(t.getGeometryN(i),t);null!==o&&(o.isEmpty()||r.add(o));}return this._factory.buildGeometry(r)},$o.prototype.copy=function(t){return t.copy()},$o.prototype.transformGeometryCollection=function(t,e){for(var n=this,r=new wn,i=0;i<t.getNumGeometries();i++){var o=n.transform(t.getGeometryN(i));null!==o&&(n._pruneEmptyGeometry&&o.isEmpty()||r.add(o));}return this._preserveGeometryCollectionType?this._factory.createGeometryCollection(xr.toGeometryArray(r)):this._factory.buildGeometry(r)},$o.prototype.transform=function(t){if(this._inputGeom=t,this._factory=t.getFactory(),t instanceof nr)return this.transformPoint(t,null);if(t instanceof or)return this.transformMultiPoint(t,null);if(t instanceof sr)return this.transformLinearRing(t,null);if(t instanceof tr)return this.transformLineString(t,null);if(t instanceof Hn)return this.transformMultiLineString(t,null);if(t instanceof ir)return this.transformPolygon(t,null);if(t instanceof ar)return this.transformMultiPolygon(t,null);if(t instanceof Yn)return this.transformGeometryCollection(t,null);throw new Ee("Unknown Geometry subtype: "+t.getClass().getName())},$o.prototype.transformLinearRing=function(t,e){var n=this.transformCoordinates(t.getCoordinateSequence(),t);if(null===n)return this._factory.createLinearRing(null);var r=n.size();return r>0&&r<4&&!this._preserveType?this._factory.createLineString(n):this._factory.createLinearRing(n)},$o.prototype.interfaces_=function(){return []},$o.prototype.getClass=function(){return $o};var ts=function t(){if(this._snapTolerance=0,this._srcPts=null,this._seg=new vi,this._allowSnappingToSourceVertices=!1,this._isClosed=!1,arguments[0]instanceof tr&&"number"==typeof arguments[1]){var e=arguments[0],n=arguments[1];t.call(this,e.getCoordinates(),n);}else if(arguments[0]instanceof Array&&"number"==typeof arguments[1]){var r=arguments[0],i=arguments[1];this._srcPts=r,this._isClosed=t.isClosed(r),this._snapTolerance=i;}};ts.prototype.snapVertices=function(t,e){for(var n=this,r=this._isClosed?t.size()-1:t.size(),i=0;i<r;i++){var o=t.get(i),s=n.findSnapForVertex(o,e);null!==s&&(t.set(i,new we(s)),0===i&&n._isClosed&&t.set(t.size()-1,new we(s)));}},ts.prototype.findSnapForVertex=function(t,e){for(var n=this,r=0;r<e.length;r++){if(t.equals2D(e[r]))return null;if(t.distance(e[r])<n._snapTolerance)return e[r]}return null},ts.prototype.snapTo=function(t){var e=new Ln(this._srcPts);return this.snapVertices(e,t),this.snapSegments(e,t),e.toCoordinateArray()},ts.prototype.snapSegments=function(t,e){var n=this;if(0===e.length)return null;var r=e.length;e[0].equals2D(e[e.length-1])&&(r=e.length-1);for(var i=0;i<r;i++){var o=e[i],s=n.findSegmentIndexToSnap(o,t);s>=0&&t.add(s+1,new we(o),!1);}},ts.prototype.findSegmentIndexToSnap=function(t,e){for(var n=this,r=Ie.MAX_VALUE,i=-1,o=0;o<e.size()-1;o++){if(n._seg.p0=e.get(o),n._seg.p1=e.get(o+1),n._seg.p0.equals2D(t)||n._seg.p1.equals2D(t)){if(n._allowSnappingToSourceVertices)continue;return -1}var s=n._seg.distance(t);s<n._snapTolerance&&s<r&&(r=s,i=o);}return i},ts.prototype.setAllowSnappingToSourceVertices=function(t){this._allowSnappingToSourceVertices=t;},ts.prototype.interfaces_=function(){return []},ts.prototype.getClass=function(){return ts},ts.isClosed=function(t){return !(t.length<=1)&&t[0].equals2D(t[t.length-1])};var es=function(t){this._srcGeom=t||null;},ns={SNAP_PRECISION_FACTOR:{configurable:!0}};es.prototype.snapTo=function(t,e){var n=this.extractTargetCoordinates(t);return new rs(e,n).transform(this._srcGeom)},es.prototype.snapToSelf=function(t,e){var n=this.extractTargetCoordinates(this._srcGeom),r=new rs(t,n,!0),i=r.transform(this._srcGeom),o=i;return e&&Re(o,rr)&&(o=i.buffer(0)),o},es.prototype.computeSnapTolerance=function(t){return this.computeMinimumSegmentLength(t)/10},es.prototype.extractTargetCoordinates=function(t){for(var e=new F,n=t.getCoordinates(),r=0;r<n.length;r++)e.add(n[r]);return e.toArray(new Array(0).fill(null))},es.prototype.computeMinimumSegmentLength=function(t){for(var e=Ie.MAX_VALUE,n=0;n<t.length-1;n++){var r=t[n].distance(t[n+1]);r<e&&(e=r);}return e},es.prototype.interfaces_=function(){return []},es.prototype.getClass=function(){return es},es.snap=function(t,e,n){var r=new Array(2).fill(null),i=new es(t);r[0]=i.snapTo(e,n);var o=new es(e);return r[1]=o.snapTo(r[0],n),r},es.computeOverlaySnapTolerance=function(){if(1===arguments.length){var t=arguments[0],e=es.computeSizeBasedSnapTolerance(t),n=t.getPrecisionModel();if(n.getType()===mr.FIXED){var r=1/n.getScale()*2/1.415;r>e&&(e=r);}return e}if(2===arguments.length){var i=arguments[0],o=arguments[1];return Math.min(es.computeOverlaySnapTolerance(i),es.computeOverlaySnapTolerance(o))}},es.computeSizeBasedSnapTolerance=function(t){var e=t.getEnvelopeInternal();return Math.min(e.getHeight(),e.getWidth())*es.SNAP_PRECISION_FACTOR},es.snapToSelf=function(t,e,n){return new es(t).snapToSelf(e,n)},ns.SNAP_PRECISION_FACTOR.get=function(){return 1e-9},Object.defineProperties(es,ns);var rs=function(t){function e(e,n,r){t.call(this),this._snapTolerance=e||null,this._snapPts=n||null,this._isSelfSnap=void 0!==r&&r;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.snapLine=function(t,e){var n=new ts(t,this._snapTolerance);return n.setAllowSnappingToSourceVertices(this._isSelfSnap),n.snapTo(e)},e.prototype.transformCoordinates=function(t,e){var n=t.toCoordinateArray(),r=this.snapLine(n,this._snapPts);return this._factory.getCoordinateSequenceFactory().create(r)},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}($o),is=function(){this._isFirst=!0,this._commonMantissaBitsCount=53,this._commonBits=0,this._commonSignExp=null;};is.prototype.getCommon=function(){return Ie.longBitsToDouble(this._commonBits)},is.prototype.add=function(t){var e=Ie.doubleToLongBits(t);return this._isFirst?(this._commonBits=e,this._commonSignExp=is.signExpBits(this._commonBits),this._isFirst=!1,null):is.signExpBits(e)!==this._commonSignExp?(this._commonBits=0,null):(this._commonMantissaBitsCount=is.numCommonMostSigMantissaBits(this._commonBits,e),void(this._commonBits=is.zeroLowerBits(this._commonBits,64-(12+this._commonMantissaBitsCount))))},is.prototype.toString=function(){if(1===arguments.length){var t=arguments[0],e=Ie.longBitsToDouble(t),n=Ie.toBinaryString(t),r="0000000000000000000000000000000000000000000000000000000000000000"+n,i=r.substring(r.length-64);return i.substring(0,1)+"  "+i.substring(1,12)+"(exp) "+i.substring(12)+" [ "+e+" ]"}},is.prototype.interfaces_=function(){return []},is.prototype.getClass=function(){return is},is.getBit=function(t,e){return 0!=(t&1<<e)?1:0},is.signExpBits=function(t){return t>>52},is.zeroLowerBits=function(t,e){return t&~((1<<e)-1)},is.numCommonMostSigMantissaBits=function(t,e){for(var n=0,r=52;r>=0;r--){if(is.getBit(t,r)!==is.getBit(e,r))return n;n++;}return 52};var os=function(){this._commonCoord=null,this._ccFilter=new as;},ss={CommonCoordinateFilter:{configurable:!0},Translater:{configurable:!0}};os.prototype.addCommonBits=function(t){var e=new us(this._commonCoord);t.apply(e),t.geometryChanged();},os.prototype.removeCommonBits=function(t){if(0===this._commonCoord.x&&0===this._commonCoord.y)return t;var e=new we(this._commonCoord);e.x=-e.x,e.y=-e.y;var n=new us(e);return t.apply(n),t.geometryChanged(),t},os.prototype.getCommonCoordinate=function(){return this._commonCoord},os.prototype.add=function(t){t.apply(this._ccFilter),this._commonCoord=this._ccFilter.getCommonCoordinate();},os.prototype.interfaces_=function(){return []},os.prototype.getClass=function(){return os},ss.CommonCoordinateFilter.get=function(){return as},ss.Translater.get=function(){return us},Object.defineProperties(os,ss);var as=function(){this._commonBitsX=new is,this._commonBitsY=new is;};as.prototype.filter=function(t){this._commonBitsX.add(t.x),this._commonBitsY.add(t.y);},as.prototype.getCommonCoordinate=function(){return new we(this._commonBitsX.getCommon(),this._commonBitsY.getCommon())},as.prototype.interfaces_=function(){return [yn]},as.prototype.getClass=function(){return as};var us=function(){this.trans=null;var t=arguments[0];this.trans=t;};us.prototype.filter=function(t,e){var n=t.getOrdinate(e,0)+this.trans.x,r=t.getOrdinate(e,1)+this.trans.y;t.setOrdinate(e,0,n),t.setOrdinate(e,1,r);},us.prototype.isDone=function(){return !1},us.prototype.isGeometryChanged=function(){return !0},us.prototype.interfaces_=function(){return [jn]},us.prototype.getClass=function(){return us};var ls=function(t,e){this._geom=new Array(2).fill(null),this._snapTolerance=null,this._cbr=null,this._geom[0]=t,this._geom[1]=e,this.computeSnapTolerance();};ls.prototype.selfSnap=function(t){return new es(t).snapTo(t,this._snapTolerance)},ls.prototype.removeCommonBits=function(t){this._cbr=new os,this._cbr.add(t[0]),this._cbr.add(t[1]);var e=new Array(2).fill(null);return e[0]=this._cbr.removeCommonBits(t[0].copy()),e[1]=this._cbr.removeCommonBits(t[1].copy()),e},ls.prototype.prepareResult=function(t){return this._cbr.addCommonBits(t),t},ls.prototype.getResultGeometry=function(t){var e=this.snap(this._geom),n=Ts.overlayOp(e[0],e[1],t);return this.prepareResult(n)},ls.prototype.checkValid=function(t){t.isValid()||Ye.out.println("Snapped geometry is invalid");},ls.prototype.computeSnapTolerance=function(){this._snapTolerance=es.computeOverlaySnapTolerance(this._geom[0],this._geom[1]);},ls.prototype.snap=function(t){var e=this.removeCommonBits(t);return es.snap(e[0],e[1],this._snapTolerance)},ls.prototype.interfaces_=function(){return []},ls.prototype.getClass=function(){return ls},ls.overlayOp=function(t,e,n){return new ls(t,e).getResultGeometry(n)},ls.union=function(t,e){return ls.overlayOp(t,e,Ts.UNION)},ls.intersection=function(t,e){return ls.overlayOp(t,e,Ts.INTERSECTION)},ls.symDifference=function(t,e){return ls.overlayOp(t,e,Ts.SYMDIFFERENCE)},ls.difference=function(t,e){return ls.overlayOp(t,e,Ts.DIFFERENCE)};var ps=function(t,e){this._geom=new Array(2).fill(null),this._geom[0]=t,this._geom[1]=e;};ps.prototype.getResultGeometry=function(t){var e=null,n=!1,r=null;try{e=Ts.overlayOp(this._geom[0],this._geom[1],t),n=!0;}catch(t){if(!(t instanceof en))throw t;r=t;}if(!n)try{e=ls.overlayOp(this._geom[0],this._geom[1],t);}catch(t){throw t instanceof en?r:t}return e},ps.prototype.interfaces_=function(){return []},ps.prototype.getClass=function(){return ps},ps.overlayOp=function(t,e,n){return new ps(t,e).getResultGeometry(n)},ps.union=function(t,e){return ps.overlayOp(t,e,Ts.UNION)},ps.intersection=function(t,e){return ps.overlayOp(t,e,Ts.INTERSECTION)},ps.symDifference=function(t,e){return ps.overlayOp(t,e,Ts.SYMDIFFERENCE)},ps.difference=function(t,e){return ps.overlayOp(t,e,Ts.DIFFERENCE)};var cs=function(){this.mce=null,this.chainIndex=null;var t=arguments[0],e=arguments[1];this.mce=t,this.chainIndex=e;};cs.prototype.computeIntersections=function(t,e){this.mce.computeIntersectsForChain(this.chainIndex,t.mce,t.chainIndex,e);},cs.prototype.interfaces_=function(){return []},cs.prototype.getClass=function(){return cs};var hs=function t(){if(this._label=null,this._xValue=null,this._eventType=null,this._insertEvent=null,this._deleteEventIndex=null,this._obj=null,2===arguments.length){var e=arguments[0],n=arguments[1];this._eventType=t.DELETE,this._xValue=e,this._insertEvent=n;}else if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];this._eventType=t.INSERT,this._label=r,this._xValue=i,this._obj=o;}},fs={INSERT:{configurable:!0},DELETE:{configurable:!0}};hs.prototype.isDelete=function(){return this._eventType===hs.DELETE},hs.prototype.setDeleteEventIndex=function(t){this._deleteEventIndex=t;},hs.prototype.getObject=function(){return this._obj},hs.prototype.compareTo=function(t){var e=t;return this._xValue<e._xValue?-1:this._xValue>e._xValue?1:this._eventType<e._eventType?-1:this._eventType>e._eventType?1:0},hs.prototype.getInsertEvent=function(){return this._insertEvent},hs.prototype.isInsert=function(){return this._eventType===hs.INSERT},hs.prototype.isSameLabel=function(t){return null!==this._label&&this._label===t._label},hs.prototype.getDeleteEventIndex=function(){return this._deleteEventIndex},hs.prototype.interfaces_=function(){return [Ne]},hs.prototype.getClass=function(){return hs},fs.INSERT.get=function(){return 1},fs.DELETE.get=function(){return 2},Object.defineProperties(hs,fs);var gs=function(){};gs.prototype.interfaces_=function(){return []},gs.prototype.getClass=function(){return gs};var ds=function(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._properIntersectionPoint=null,this._li=null,this._includeProper=null,this._recordIsolated=null,this._isSelfIntersection=null,this._numIntersections=0,this.numTests=0,this._bdyNodes=null,this._isDone=!1,this._isDoneWhenProperInt=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this._li=t,this._includeProper=e,this._recordIsolated=n;};ds.prototype.isTrivialIntersection=function(t,e,n,r){
    if(t===n&&1===this._li.getIntersectionNum()){if(ds.isAdjacentSegments(e,r))return !0;if(t.isClosed()){var i=t.getNumPoints()-1;if(0===e&&r===i||0===r&&e===i)return !0}}return !1},ds.prototype.getProperIntersectionPoint=function(){return this._properIntersectionPoint},ds.prototype.setIsDoneIfProperInt=function(t){this._isDoneWhenProperInt=t;},ds.prototype.hasProperInteriorIntersection=function(){return this._hasProperInterior},ds.prototype.isBoundaryPointInternal=function(t,e){for(var n=e.iterator();n.hasNext();){var r=n.next(),i=r.getCoordinate();if(t.isIntersection(i))return !0}return !1},ds.prototype.hasProperIntersection=function(){return this._hasProper},ds.prototype.hasIntersection=function(){return this._hasIntersection},ds.prototype.isDone=function(){return this._isDone},ds.prototype.isBoundaryPoint=function(t,e){return null!==e&&(!!this.isBoundaryPointInternal(t,e[0])||!!this.isBoundaryPointInternal(t,e[1]))},ds.prototype.setBoundaryNodes=function(t,e){this._bdyNodes=new Array(2).fill(null),this._bdyNodes[0]=t,this._bdyNodes[1]=e;},ds.prototype.addIntersections=function(t,e,n,r){if(t===n&&e===r)return null;this.numTests++;var i=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[r],a=n.getCoordinates()[r+1];this._li.computeIntersection(i,o,s,a),this._li.hasIntersection()&&(this._recordIsolated&&(t.setIsolated(!1),n.setIsolated(!1)),this._numIntersections++,this.isTrivialIntersection(t,e,n,r)||(this._hasIntersection=!0,!this._includeProper&&this._li.isProper()||(t.addIntersections(this._li,e,0),n.addIntersections(this._li,r,1)),this._li.isProper()&&(this._properIntersectionPoint=this._li.getIntersection(0).copy(),this._hasProper=!0,this._isDoneWhenProperInt&&(this._isDone=!0),this.isBoundaryPoint(this._li,this._bdyNodes)||(this._hasProperInterior=!0))));},ds.prototype.interfaces_=function(){return []},ds.prototype.getClass=function(){return ds},ds.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)};var ys=function(t){function e(){t.call(this),this.events=new wn,this.nOverlaps=null;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.prepareEvents=function(){var t=this;ii.sort(this.events);for(var e=0;e<this.events.size();e++){var n=t.events.get(e);n.isDelete()&&n.getInsertEvent().setDeleteEventIndex(e);}},e.prototype.computeIntersections=function(){var t=this;if(1===arguments.length){var e=arguments[0];this.nOverlaps=0,this.prepareEvents();for(var n=0;n<this.events.size();n++){var r=t.events.get(n);if(r.isInsert()&&t.processOverlaps(n,r.getDeleteEventIndex(),r,e),e.isDone())break}}else if(3===arguments.length)if(arguments[2]instanceof ds&&Re(arguments[0],Cn)&&Re(arguments[1],Cn)){var i=arguments[0],o=arguments[1],s=arguments[2];this.addEdges(i,i),this.addEdges(o,o),this.computeIntersections(s);}else if("boolean"==typeof arguments[2]&&Re(arguments[0],Cn)&&arguments[1]instanceof ds){var a=arguments[0],u=arguments[1],l=arguments[2];l?this.addEdges(a,null):this.addEdges(a),this.computeIntersections(u);}},e.prototype.addEdge=function(t,e){for(var n=this,r=t.getMonotoneChainEdge(),i=r.getStartIndexes(),o=0;o<i.length-1;o++){var s=new cs(r,o),a=new hs(e,r.getMinX(o),s);n.events.add(a),n.events.add(new hs(r.getMaxX(o),a));}},e.prototype.processOverlaps=function(t,e,n,r){for(var i=this,o=n.getObject(),s=t;s<e;s++){var a=i.events.get(s);if(a.isInsert()){var u=a.getObject();n.isSameLabel(a)||(o.computeIntersections(u,r),i.nOverlaps++);}}},e.prototype.addEdges=function(){var t=this;if(1===arguments.length)for(var e=arguments[0],n=e.iterator();n.hasNext();){var r=n.next();t.addEdge(r,r);}else if(2===arguments.length)for(var i=arguments[0],o=arguments[1],s=i.iterator();s.hasNext();){var a=s.next();t.addEdge(a,o);}},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(gs),_s=function(){this._min=Ie.POSITIVE_INFINITY,this._max=Ie.NEGATIVE_INFINITY;},ms={NodeComparator:{configurable:!0}};_s.prototype.getMin=function(){return this._min},_s.prototype.intersects=function(t,e){return !(this._min>e||this._max<t)},_s.prototype.getMax=function(){return this._max},_s.prototype.toString=function(){return tn.toLineString(new we(this._min,0),new we(this._max,0))},_s.prototype.interfaces_=function(){return []},_s.prototype.getClass=function(){return _s},ms.NodeComparator.get=function(){return vs},Object.defineProperties(_s,ms);var vs=function(){};vs.prototype.compare=function(t,e){var n=t,r=e,i=(n._min+n._max)/2,o=(r._min+r._max)/2;return i<o?-1:i>o?1:0},vs.prototype.interfaces_=function(){return [Ce]},vs.prototype.getClass=function(){return vs};var Es=function(t){function e(){t.call(this),this._item=null;var e=arguments[0],n=arguments[1],r=arguments[2];this._min=e,this._max=n,this._item=r;}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.query=function(t,e,n){if(!this.intersects(t,e))return null;n.visitItem(this._item);},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(_s),Is=function(t){function e(){t.call(this),this._node1=null,this._node2=null;var e=arguments[0],n=arguments[1];this._node1=e,this._node2=n,this.buildExtent(this._node1,this._node2);}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.buildExtent=function(t,e){this._min=Math.min(t._min,e._min),this._max=Math.max(t._max,e._max);},e.prototype.query=function(t,e,n){if(!this.intersects(t,e))return null;null!==this._node1&&this._node1.query(t,e,n),null!==this._node2&&this._node2.query(t,e,n);},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(_s),xs=function(){this._leaves=new wn,this._root=null,this._level=0;};xs.prototype.buildTree=function(){var t=this;ii.sort(this._leaves,new _s.NodeComparator);for(var e=this._leaves,n=null,r=new wn;!0;){if(t.buildLevel(e,r),1===r.size())return r.get(0);n=e,e=r,r=n;}},xs.prototype.insert=function(t,e,n){if(null!==this._root)throw new Error("Index cannot be added to once it has been queried");this._leaves.add(new Es(t,e,n));},xs.prototype.query=function(t,e,n){this.init(),this._root.query(t,e,n);},xs.prototype.buildRoot=function(){if(null!==this._root)return null;this._root=this.buildTree();},xs.prototype.printNode=function(t){Ye.out.println(tn.toLineString(new we(t._min,this._level),new we(t._max,this._level)));},xs.prototype.init=function(){if(null!==this._root)return null;this.buildRoot();},xs.prototype.buildLevel=function(t,e){this._level++,e.clear();for(var n=0;n<t.size();n+=2){var r=t.get(n);if(null===(n+1<t.size()?t.get(n):null))e.add(r);else{var i=new Is(t.get(n),t.get(n+1));e.add(i);}}},xs.prototype.interfaces_=function(){return []},xs.prototype.getClass=function(){return xs};var Ns=function(){this._items=new wn;};Ns.prototype.visitItem=function(t){this._items.add(t);},Ns.prototype.getItems=function(){return this._items},Ns.prototype.interfaces_=function(){return [ti]},Ns.prototype.getClass=function(){return Ns};var bs=function(){this._index=null;var t=arguments[0];if(!Re(t,rr))throw new Ee("Argument must be Polygonal");this._index=new Ss(t);},Cs={SegmentVisitor:{configurable:!0},IntervalIndexedGeometry:{configurable:!0}};bs.prototype.locate=function(t){var e=new ln(t),n=new ws(e);return this._index.query(t.y,t.y,n),e.getLocation()},bs.prototype.interfaces_=function(){return [Xi]},bs.prototype.getClass=function(){return bs},Cs.SegmentVisitor.get=function(){return ws},Cs.IntervalIndexedGeometry.get=function(){return Ss},Object.defineProperties(bs,Cs);var ws=function(){this._counter=null;var t=arguments[0];this._counter=t;};ws.prototype.visitItem=function(t){var e=t;this._counter.countSegment(e.getCoordinate(0),e.getCoordinate(1));},ws.prototype.interfaces_=function(){return [ti]},ws.prototype.getClass=function(){return ws};var Ss=function(){this._index=new xs;var t=arguments[0];this.init(t);};Ss.prototype.init=function(t){for(var e=this,n=Po.getLines(t),r=n.iterator();r.hasNext();){var i=r.next(),o=i.getCoordinates();e.addLine(o);}},Ss.prototype.addLine=function(t){for(var e=this,n=1;n<t.length;n++){var r=new vi(t[n-1],t[n]),i=Math.min(r.p0.y,r.p1.y),o=Math.max(r.p0.y,r.p1.y);e._index.insert(i,o,r);}},Ss.prototype.query=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new Ns;return this._index.query(t,e,n),n.getItems()}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];this._index.query(r,i,o);}},Ss.prototype.interfaces_=function(){return []},Ss.prototype.getClass=function(){return Ss};var Ls=function(t){function e(){if(t.call(this),this._parentGeom=null,this._lineEdgeMap=new _r,this._boundaryNodeRule=null,this._useBoundaryDeterminationRule=!0,this._argIndex=null,this._boundaryNodes=null,this._hasTooFewPoints=!1,this._invalidPoint=null,this._areaPtLocator=null,this._ptLocator=new Oo,2===arguments.length){var e=arguments[0],n=arguments[1],r=_n.OGC_SFS_BOUNDARY_RULE;this._argIndex=e,this._parentGeom=n,this._boundaryNodeRule=r,null!==n&&this.add(n);}else if(3===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2];this._argIndex=i,this._parentGeom=o,this._boundaryNodeRule=s,null!==o&&this.add(o);}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.insertBoundaryPoint=function(t,n){var r=this._nodes.addNode(n),i=r.getLabel(),o=1,s=Oe.NONE;(s=i.getLocation(t,Or.ON))===Oe.BOUNDARY&&o++;var a=e.determineBoundary(this._boundaryNodeRule,o);i.setLocation(t,a);},e.prototype.computeSelfNodes=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.computeSelfNodes(t,e,!1)}if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2],o=new ds(n,!0,!1);o.setIsDoneIfProperInt(i);var s=this.createEdgeSetIntersector(),a=this._parentGeom instanceof sr||this._parentGeom instanceof ir||this._parentGeom instanceof ar,u=r||!a;return s.computeIntersections(this._edges,o,u),this.addSelfIntersectionNodes(this._argIndex),o}},e.prototype.computeSplitEdges=function(t){for(var e=this._edges.iterator();e.hasNext();){e.next().eiList.addSplitEdges(t);}},e.prototype.computeEdgeIntersections=function(t,e,n){var r=new ds(e,n,!0);return r.setBoundaryNodes(this.getBoundaryNodes(),t.getBoundaryNodes()),this.createEdgeSetIntersector().computeIntersections(this._edges,t._edges,r),r},e.prototype.getGeometry=function(){return this._parentGeom},e.prototype.getBoundaryNodeRule=function(){return this._boundaryNodeRule},e.prototype.hasTooFewPoints=function(){return this._hasTooFewPoints},e.prototype.addPoint=function(){if(arguments[0]instanceof nr){var t=arguments[0],e=t.getCoordinate();this.insertPoint(this._argIndex,e,Oe.INTERIOR);}else if(arguments[0]instanceof we){var n=arguments[0];this.insertPoint(this._argIndex,n,Oe.INTERIOR);}},e.prototype.addPolygon=function(t){var e=this;this.addPolygonRing(t.getExteriorRing(),Oe.EXTERIOR,Oe.INTERIOR);for(var n=0;n<t.getNumInteriorRing();n++){var r=t.getInteriorRingN(n);e.addPolygonRing(r,Oe.INTERIOR,Oe.EXTERIOR);}},e.prototype.addEdge=function(t){this.insertEdge(t);var e=t.getCoordinates();this.insertPoint(this._argIndex,e[0],Oe.BOUNDARY),this.insertPoint(this._argIndex,e[e.length-1],Oe.BOUNDARY);},e.prototype.addLineString=function(t){var e=Pn.removeRepeatedPoints(t.getCoordinates());if(e.length<2)return this._hasTooFewPoints=!0,this._invalidPoint=e[0],null;var n=new so(e,new Gr(this._argIndex,Oe.INTERIOR));this._lineEdgeMap.put(t,n),this.insertEdge(n),rn.isTrue(e.length>=2,"found LineString with single point"),this.insertBoundaryPoint(this._argIndex,e[0]),this.insertBoundaryPoint(this._argIndex,e[e.length-1]);},e.prototype.getInvalidPoint=function(){return this._invalidPoint},e.prototype.getBoundaryPoints=function(){for(var t=this.getBoundaryNodes(),e=new Array(t.size()).fill(null),n=0,r=t.iterator();r.hasNext();){var i=r.next();e[n++]=i.getCoordinate().copy();}return e},e.prototype.getBoundaryNodes=function(){return null===this._boundaryNodes&&(this._boundaryNodes=this._nodes.getBoundaryNodes(this._argIndex)),this._boundaryNodes},e.prototype.addSelfIntersectionNode=function(t,e,n){if(this.isBoundaryNode(t,e))return null;n===Oe.BOUNDARY&&this._useBoundaryDeterminationRule?this.insertBoundaryPoint(t,e):this.insertPoint(t,e,n);},e.prototype.addPolygonRing=function(t,e,n){if(t.isEmpty())return null;var r=Pn.removeRepeatedPoints(t.getCoordinates());if(r.length<4)return this._hasTooFewPoints=!0,this._invalidPoint=r[0],null;var i=e,o=n;pn.isCCW(r)&&(i=n,o=e);var s=new so(r,new Gr(this._argIndex,Oe.BOUNDARY,i,o));this._lineEdgeMap.put(t,s),this.insertEdge(s),this.insertPoint(this._argIndex,r[0],Oe.BOUNDARY);},e.prototype.insertPoint=function(t,e,n){var r=this._nodes.addNode(e),i=r.getLabel();null===i?r._label=new Gr(t,n):i.setLocation(t,n);},e.prototype.createEdgeSetIntersector=function(){return new ys},e.prototype.addSelfIntersectionNodes=function(t){for(var e=this,n=this._edges.iterator();n.hasNext();)for(var r=n.next(),i=r.getLabel().getLocation(t),o=r.eiList.iterator();o.hasNext();){var s=o.next();e.addSelfIntersectionNode(t,s.coord,i);}},e.prototype.add=function(){if(1!==arguments.length)return t.prototype.add.apply(this,arguments);var e=arguments[0];if(e.isEmpty())return null;if(e instanceof ar&&(this._useBoundaryDeterminationRule=!1),e instanceof ir)this.addPolygon(e);else if(e instanceof tr)this.addLineString(e);else if(e instanceof nr)this.addPoint(e);else if(e instanceof or)this.addCollection(e);else if(e instanceof Hn)this.addCollection(e);else if(e instanceof ar)this.addCollection(e);else{if(!(e instanceof Yn))throw new Error(e.getClass().getName());this.addCollection(e);}},e.prototype.addCollection=function(t){for(var e=this,n=0;n<t.getNumGeometries();n++){var r=t.getGeometryN(n);e.add(r);}},e.prototype.locate=function(t){return Re(this._parentGeom,rr)&&this._parentGeom.getNumGeometries()>50?(null===this._areaPtLocator&&(this._areaPtLocator=new bs(this._parentGeom)),this._areaPtLocator.locate(t)):this._ptLocator.locate(t,this._parentGeom)},e.prototype.findEdge=function(){if(1===arguments.length){var e=arguments[0];return this._lineEdgeMap.get(e)}return t.prototype.findEdge.apply(this,arguments)},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e.determineBoundary=function(t,e){return t.isInBoundary(e)?Oe.BOUNDARY:Oe.INTERIOR},e}(Kr),Ps=function(){if(this._li=new an,this._resultPrecisionModel=null,this._arg=null,1===arguments.length){var t=arguments[0];this.setComputationPrecision(t.getPrecisionModel()),this._arg=new Array(1).fill(null),this._arg[0]=new Ls(0,t);}else if(2===arguments.length){var e=arguments[0],n=arguments[1],r=_n.OGC_SFS_BOUNDARY_RULE;e.getPrecisionModel().compareTo(n.getPrecisionModel())>=0?this.setComputationPrecision(e.getPrecisionModel()):this.setComputationPrecision(n.getPrecisionModel()),this._arg=new Array(2).fill(null),this._arg[0]=new Ls(0,e,r),this._arg[1]=new Ls(1,n,r);}else if(3===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2];i.getPrecisionModel().compareTo(o.getPrecisionModel())>=0?this.setComputationPrecision(i.getPrecisionModel()):this.setComputationPrecision(o.getPrecisionModel()),this._arg=new Array(2).fill(null),this._arg[0]=new Ls(0,i,s),this._arg[1]=new Ls(1,o,s);}};Ps.prototype.getArgGeometry=function(t){return this._arg[t].getGeometry()},Ps.prototype.setComputationPrecision=function(t){this._resultPrecisionModel=t,this._li.setPrecisionModel(this._resultPrecisionModel);},Ps.prototype.interfaces_=function(){return []},Ps.prototype.getClass=function(){return Ps};var Os=function(){};Os.prototype.interfaces_=function(){return []},Os.prototype.getClass=function(){return Os},Os.map=function(){if(arguments[0]instanceof fn&&Re(arguments[1],Os.MapOp)){for(var t=arguments[0],e=arguments[1],n=new wn,r=0;r<t.getNumGeometries();r++){var i=e.map(t.getGeometryN(r));null!==i&&n.add(i);}return t.getFactory().buildGeometry(n)}if(Re(arguments[0],Nn)&&Re(arguments[1],Os.MapOp)){for(var o=arguments[0],s=arguments[1],a=new wn,u=o.iterator();u.hasNext();){var l=u.next(),p=s.map(l);null!==p&&a.add(p);}return a}},Os.MapOp=function(){};var Ts=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n),this._ptLocator=new Oo,this._geomFact=null,this._resultGeom=null,this._graph=null,this._edgeList=new Qi,this._resultPolyList=new wn,this._resultLineList=new wn,this._resultPointList=new wn,this._graph=new Kr(new Ki),this._geomFact=e.getFactory();}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.insertUniqueEdge=function(t){var e=this._edgeList.findEqualEdge(t);if(null!==e){var n=e.getLabel(),r=t.getLabel();e.isPointwiseEqual(t)||(r=new Gr(t.getLabel()),r.flip());var i=e.getDepth();i.isNull()&&i.add(n),i.add(r),n.merge(r);}else this._edgeList.add(t);},e.prototype.getGraph=function(){return this._graph},e.prototype.cancelDuplicateResultEdges=function(){for(var t=this._graph.getEdgeEnds().iterator();t.hasNext();){var e=t.next(),n=e.getSym();e.isInResult()&&n.isInResult()&&(e.setInResult(!1),n.setInResult(!1));}},e.prototype.isCoveredByLA=function(t){return !!this.isCovered(t,this._resultLineList)||!!this.isCovered(t,this._resultPolyList)},e.prototype.computeGeometry=function(t,n,r,i){var o=new wn;return o.addAll(t),o.addAll(n),o.addAll(r),o.isEmpty()?e.createEmptyResult(i,this._arg[0].getGeometry(),this._arg[1].getGeometry(),this._geomFact):this._geomFact.buildGeometry(o)},e.prototype.mergeSymLabels=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){t.next().getEdges().mergeSymLabels();}},e.prototype.isCovered=function(t,e){for(var n=this,r=e.iterator();r.hasNext();){var i=r.next();if(n._ptLocator.locate(t,i)!==Oe.EXTERIOR)return !0}return !1},e.prototype.replaceCollapsedEdges=function(){for(var t=new wn,e=this._edgeList.iterator();e.hasNext();){var n=e.next();n.isCollapsed()&&(e.remove(),t.add(n.getCollapsedEdge()));}this._edgeList.addAll(t);},e.prototype.updateNodeLabelling=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){var e=t.next(),n=e.getEdges().getLabel();e.getLabel().merge(n);}},e.prototype.getResultGeometry=function(t){return this.computeOverlay(t),this._resultGeom},e.prototype.insertUniqueEdges=function(t){for(var e=this,n=t.iterator();n.hasNext();){var r=n.next();e.insertUniqueEdge(r);}},e.prototype.computeOverlay=function(t){this.copyPoints(0),this.copyPoints(1),this._arg[0].computeSelfNodes(this._li,!1),this._arg[1].computeSelfNodes(this._li,!1),this._arg[0].computeEdgeIntersections(this._arg[1],this._li,!0);var e=new wn;this._arg[0].computeSplitEdges(e),this._arg[1].computeSplitEdges(e),this.insertUniqueEdges(e),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),Ko.checkValid(this._edgeList.getEdges()),this._graph.addEdges(this._edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(t),this.cancelDuplicateResultEdges();var n=new Jr(this._geomFact);n.add(this._graph),this._resultPolyList=n.getPolygons();var r=new Qo(this,this._geomFact,this._ptLocator);this._resultLineList=r.build(t);var i=new Zo(this,this._geomFact,this._ptLocator);this._resultPointList=i.build(t),this._resultGeom=this.computeGeometry(this._resultPointList,this._resultLineList,this._resultPolyList,t);},e.prototype.labelIncompleteNode=function(t,e){var n=this._ptLocator.locate(t.getCoordinate(),this._arg[e].getGeometry());t.getLabel().setLocation(e,n);},e.prototype.copyPoints=function(t){for(var e=this,n=this._arg[t].getNodeIterator();n.hasNext();){var r=n.next();e._graph.addNode(r.getCoordinate()).setLabel(t,r.getLabel().getLocation(t));}},e.prototype.findResultAreaEdges=function(t){for(var n=this._graph.getEdgeEnds().iterator();n.hasNext();){var r=n.next(),i=r.getLabel();i.isArea()&&!r.isInteriorAreaEdge()&&e.isResultOfOp(i.getLocation(0,Or.RIGHT),i.getLocation(1,Or.RIGHT),t)&&r.setInResult(!0);}},e.prototype.computeLabelsFromDepths=function(){for(var t=this._edgeList.iterator();t.hasNext();){var e=t.next(),n=e.getLabel(),r=e.getDepth();if(!r.isNull()){r.normalize();for(var i=0;i<2;i++)n.isNull(i)||!n.isArea()||r.isNull(i)||(0===r.getDelta(i)?n.toLine(i):(rn.isTrue(!r.isNull(i,Or.LEFT),"depth of LEFT side has not been initialized"),n.setLocation(i,Or.LEFT,r.getLocation(i,Or.LEFT)),rn.isTrue(!r.isNull(i,Or.RIGHT),"depth of RIGHT side has not been initialized"),n.setLocation(i,Or.RIGHT,r.getLocation(i,Or.RIGHT))));}}},e.prototype.computeLabelling=function(){for(var t=this,e=this._graph.getNodes().iterator();e.hasNext();){e.next().getEdges().computeLabelling(t._arg);}this.mergeSymLabels(),this.updateNodeLabelling();},e.prototype.labelIncompleteNodes=function(){for(var t=this,e=this._graph.getNodes().iterator();e.hasNext();){var n=e.next(),r=n.getLabel();n.isIsolated()&&(r.isNull(0)?t.labelIncompleteNode(n,0):t.labelIncompleteNode(n,1)),n.getEdges().updateLabelling(r);}},e.prototype.isCoveredByA=function(t){return !!this.isCovered(t,this._resultPolyList)},e.prototype.interfaces_=function(){return []},e.prototype.getClass=function(){return e},e}(Ps);Ts.overlayOp=function(t,e,n){return new Ts(t,e).getResultGeometry(n)},Ts.intersection=function(t,e){if(t.isEmpty()||e.isEmpty())return Ts.createEmptyResult(Ts.INTERSECTION,t,e,t.getFactory());if(t.isGeometryCollection()){var n=e;return Jo.map(t,{interfaces_:function(){return [Os.MapOp]},map:function(t){return t.intersection(n)}})}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),ps.overlayOp(t,e,Ts.INTERSECTION)},Ts.symDifference=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return Ts.createEmptyResult(Ts.SYMDIFFERENCE,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),ps.overlayOp(t,e,Ts.SYMDIFFERENCE)},Ts.resultDimension=function(t,e,n){var r=e.getDimension(),i=n.getDimension(),o=-1;switch(t){case Ts.INTERSECTION:o=Math.min(r,i);break;case Ts.UNION:o=Math.max(r,i);break;case Ts.DIFFERENCE:o=r;break;case Ts.SYMDIFFERENCE:o=Math.max(r,i);}return o},Ts.createEmptyResult=function(t,e,n,r){var i=null;switch(Ts.resultDimension(t,e,n)){case-1:i=r.createGeometryCollection(new Array(0).fill(null));break;case 0:i=r.createPoint();break;case 1:i=r.createLineString();break;case 2:i=r.createPolygon();}return i},Ts.difference=function(t,e){return t.isEmpty()?Ts.createEmptyResult(Ts.DIFFERENCE,t,e,t.getFactory()):e.isEmpty()?t.copy():(t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),ps.overlayOp(t,e,Ts.DIFFERENCE))},Ts.isResultOfOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=t.getLocation(0),r=t.getLocation(1);return Ts.isResultOfOp(n,r,e)}if(3===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2];switch(i===Oe.BOUNDARY&&(i=Oe.INTERIOR),o===Oe.BOUNDARY&&(o=Oe.INTERIOR),s){case Ts.INTERSECTION:return i===Oe.INTERIOR&&o===Oe.INTERIOR;case Ts.UNION:return i===Oe.INTERIOR||o===Oe.INTERIOR;case Ts.DIFFERENCE:return i===Oe.INTERIOR&&o!==Oe.INTERIOR;case Ts.SYMDIFFERENCE:return i===Oe.INTERIOR&&o!==Oe.INTERIOR||i!==Oe.INTERIOR&&o===Oe.INTERIOR}return !1}},Ts.INTERSECTION=1,Ts.UNION=2,Ts.DIFFERENCE=3,Ts.SYMDIFFERENCE=4;var Rs=function(){this._g=null,this._boundaryDistanceTolerance=null,this._linework=null,this._ptLocator=new Oo,this._seg=new vi;var t=arguments[0],e=arguments[1];this._g=t,this._boundaryDistanceTolerance=e,this._linework=this.extractLinework(t);};Rs.prototype.isWithinToleranceOfBoundary=function(t){for(var e=this,n=0;n<this._linework.getNumGeometries();n++)for(var r=e._linework.getGeometryN(n),i=r.getCoordinateSequence(),o=0;o<i.size()-1;o++){i.getCoordinate(o,e._seg.p0),i.getCoordinate(o+1,e._seg.p1);var s=e._seg.distance(t);if(s<=e._boundaryDistanceTolerance)return !0}return !1},Rs.prototype.getLocation=function(t){return this.isWithinToleranceOfBoundary(t)?Oe.BOUNDARY:this._ptLocator.locate(t,this._g)},Rs.prototype.extractLinework=function(t){var e=new Ds;t.apply(e);var n=e.getLinework(),r=xr.toLineStringArray(n);return t.getFactory().createMultiLineString(r)},Rs.prototype.interfaces_=function(){return []},Rs.prototype.getClass=function(){return Rs};var Ds=function(){this._linework=null,this._linework=new wn;};Ds.prototype.getLinework=function(){return this._linework},Ds.prototype.filter=function(t){var e=this;if(t instanceof ir){var n=t;this._linework.add(n.getExteriorRing());for(var r=0;r<n.getNumInteriorRing();r++)e._linework.add(n.getInteriorRingN(r));}},Ds.prototype.interfaces_=function(){return [Xn]},Ds.prototype.getClass=function(){return Ds};var Ms=function(){this._g=null,this._doLeft=!0,this._doRight=!0;var t=arguments[0];this._g=t;};Ms.prototype.extractPoints=function(t,e,n){for(var r=this,i=t.getCoordinates(),o=0;o<i.length-1;o++)r.computeOffsetPoints(i[o],i[o+1],e,n);},Ms.prototype.setSidesToGenerate=function(t,e){this._doLeft=t,this._doRight=e;},Ms.prototype.getPoints=function(t){for(var e=this,n=new wn,r=Po.getLines(this._g),i=r.iterator();i.hasNext();){var o=i.next();e.extractPoints(o,t,n);}return n},Ms.prototype.computeOffsetPoints=function(t,e,n,r){var i=e.x-t.x,o=e.y-t.y,s=Math.sqrt(i*i+o*o),a=n*i/s,u=n*o/s,l=(e.x+t.x)/2,p=(e.y+t.y)/2;if(this._doLeft){var c=new we(l-u,p+a);r.add(c);}if(this._doRight){var h=new we(l+u,p-a);r.add(h);}},Ms.prototype.interfaces_=function(){return []},Ms.prototype.getClass=function(){return Ms};var As=function t(){this._geom=null,this._locFinder=null,this._location=new Array(3).fill(null),this._invalidLocation=null,this._boundaryDistanceTolerance=t.TOLERANCE,this._testCoords=new wn;var e=arguments[0],n=arguments[1],r=arguments[2];this._boundaryDistanceTolerance=t.computeBoundaryDistanceTolerance(e,n),this._geom=[e,n,r],this._locFinder=[new Rs(this._geom[0],this._boundaryDistanceTolerance),new Rs(this._geom[1],this._boundaryDistanceTolerance),new Rs(this._geom[2],this._boundaryDistanceTolerance)];},Fs={TOLERANCE:{configurable:!0}};As.prototype.reportResult=function(t,e,n){Ye.out.println("Overlay result invalid - A:"+Oe.toLocationSymbol(e[0])+" B:"+Oe.toLocationSymbol(e[1])+" expected:"+(n?"i":"e")+" actual:"+Oe.toLocationSymbol(e[2]));},As.prototype.isValid=function(t){return this.addTestPts(this._geom[0]),this.addTestPts(this._geom[1]),this.checkValid(t)},As.prototype.checkValid=function(){var t=this;if(1===arguments.length){for(var e=arguments[0],n=0;n<this._testCoords.size();n++){var r=t._testCoords.get(n);if(!t.checkValid(e,r))return t._invalidLocation=r,!1}return !0}if(2===arguments.length){var i=arguments[0],o=arguments[1];return this._location[0]=this._locFinder[0].getLocation(o),this._location[1]=this._locFinder[1].getLocation(o),this._location[2]=this._locFinder[2].getLocation(o),!!As.hasLocation(this._location,Oe.BOUNDARY)||this.isValidResult(i,this._location)}},As.prototype.addTestPts=function(t){var e=new Ms(t);this._testCoords.addAll(e.getPoints(5*this._boundaryDistanceTolerance));},As.prototype.isValidResult=function(t,e){var n=Ts.isResultOfOp(e[0],e[1],t),r=e[2]===Oe.INTERIOR,i=!(n^r);return i||this.reportResult(t,e,n),i},As.prototype.getInvalidLocation=function(){return this._invalidLocation},As.prototype.interfaces_=function(){return []},As.prototype.getClass=function(){return As},As.hasLocation=function(t,e){for(var n=0;n<3;n++)if(t[n]===e)return !0;return !1},As.computeBoundaryDistanceTolerance=function(t,e){return Math.min(es.computeSizeBasedSnapTolerance(t),es.computeSizeBasedSnapTolerance(e))},As.isValid=function(t,e,n,r){return new As(t,e,r).isValid(n)},Fs.TOLERANCE.get=function(){return 1e-6},Object.defineProperties(As,Fs);var Gs=function t(e){this._geomFactory=null,this._skipEmpty=!1,this._inputGeoms=null,this._geomFactory=t.extractFactory(e),this._inputGeoms=e;};Gs.prototype.extractElements=function(t,e){var n=this;if(null===t)return null;for(var r=0;r<t.getNumGeometries();r++){var i=t.getGeometryN(r);n._skipEmpty&&i.isEmpty()||e.add(i);}},Gs.prototype.combine=function(){for(var t=this,e=new wn,n=this._inputGeoms.iterator();n.hasNext();){var r=n.next();t.extractElements(r,e);}return 0===e.size()?null!==this._geomFactory?this._geomFactory.createGeometryCollection(null):null:this._geomFactory.buildGeometry(e)},Gs.prototype.interfaces_=function(){return []},Gs.prototype.getClass=function(){return Gs},Gs.combine=function(){if(1===arguments.length){var t=arguments[0];return new Gs(t).combine()}if(2===arguments.length){var e=arguments[0],n=arguments[1];return new Gs(Gs.createList(e,n)).combine()}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];return new Gs(Gs.createList(r,i,o)).combine()}},Gs.extractFactory=function(t){return t.isEmpty()?null:t.iterator().next().getFactory()},Gs.createList=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new wn;return n.add(t),n.add(e),n}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2],s=new wn;return s.add(r),s.add(i),s.add(o),s}};var qs=function(){this._inputPolys=null,this._geomFactory=null;var t=arguments[0];this._inputPolys=t,null===this._inputPolys&&(this._inputPolys=new wn);},ks={STRTREE_NODE_CAPACITY:{configurable:!0}};qs.prototype.reduceToGeometries=function(t){for(var e=this,n=new wn,r=t.iterator();r.hasNext();){var i=r.next(),o=null;Re(i,Cn)?o=e.unionTree(i):i instanceof fn&&(o=i),n.add(o);}return n},qs.prototype.extractByEnvelope=function(t,e,n){for(var r=new wn,i=0;i<e.getNumGeometries();i++){var o=e.getGeometryN(i);o.getEnvelopeInternal().intersects(t)?r.add(o):n.add(o);}return this._geomFactory.buildGeometry(r)},qs.prototype.unionOptimized=function(t,e){var n=t.getEnvelopeInternal(),r=e.getEnvelopeInternal();if(!n.intersects(r)){return Gs.combine(t,e)}if(t.getNumGeometries()<=1&&e.getNumGeometries()<=1)return this.unionActual(t,e);var i=n.intersection(r);return this.unionUsingEnvelopeIntersection(t,e,i)},qs.prototype.union=function(){if(null===this._inputPolys)throw new Error("union() method cannot be called twice");if(this._inputPolys.isEmpty())return null;this._geomFactory=this._inputPolys.iterator().next().getFactory();for(var t=new pi(qs.STRTREE_NODE_CAPACITY),e=this._inputPolys.iterator();e.hasNext();){var n=e.next();t.insert(n.getEnvelopeInternal(),n);}this._inputPolys=null;var r=t.itemsTree();return this.unionTree(r)},qs.prototype.binaryUnion=function(){if(1===arguments.length){var t=arguments[0];return this.binaryUnion(t,0,t.size())}if(3===arguments.length){var e=arguments[0],n=arguments[1],r=arguments[2];if(r-n<=1){var i=qs.getGeometry(e,n);return this.unionSafe(i,null)}if(r-n==2)return this.unionSafe(qs.getGeometry(e,n),qs.getGeometry(e,n+1));var o=Math.trunc((r+n)/2),s=this.binaryUnion(e,n,o),a=this.binaryUnion(e,o,r);return this.unionSafe(s,a)}},qs.prototype.repeatedUnion=function(t){for(var e=null,n=t.iterator();n.hasNext();){var r=n.next();e=null===e?r.copy():e.union(r);}return e},qs.prototype.unionSafe=function(t,e){return null===t&&null===e?null:null===t?e.copy():null===e?t.copy():this.unionOptimized(t,e)},qs.prototype.unionActual=function(t,e){return qs.restrictToPolygons(t.union(e))},qs.prototype.unionTree=function(t){var e=this.reduceToGeometries(t);return this.binaryUnion(e)},qs.prototype.unionUsingEnvelopeIntersection=function(t,e,n){var r=new wn,i=this.extractByEnvelope(n,t,r),o=this.extractByEnvelope(n,e,r),s=this.unionActual(i,o);return r.add(s),Gs.combine(r)},qs.prototype.bufferUnion=function(){if(1===arguments.length){var t=arguments[0];return t.get(0).getFactory().buildGeometry(t).buffer(0)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e.getFactory().createGeometryCollection([e,n]).buffer(0)}},qs.prototype.interfaces_=function(){return []},qs.prototype.getClass=function(){return qs},qs.restrictToPolygons=function(t){if(Re(t,rr))return t;var e=Lo.getPolygons(t);return 1===e.size()?e.get(0):t.getFactory().createMultiPolygon(xr.toPolygonArray(e))},qs.getGeometry=function(t,e){return e>=t.size()?null:t.get(e)},qs.union=function(t){return new qs(t).union()},ks.STRTREE_NODE_CAPACITY.get=function(){return 4},Object.defineProperties(qs,ks);var Bs=6378137,Vs={successCallback:null,verbose:!1,
    polygons:!1},zs={},Us=64,Xs=16,js=4,Ys=1,Hs=[],Ws=[],Ks=[],Js=[],Qs=[],Zs=[],$s=[],ta=[],ea=[],na=[],ra=[],ia=[],oa=[],sa=[],aa=[],ua=[],la=[],pa=[],ca=[],ha=[],fa=[],ga=[],da=[],ya=[];$s[85]=na[85]=-1,ta[85]=ra[85]=0,ea[85]=ia[85]=1,ca[85]=ga[85]=1,ha[85]=da[85]=0,fa[85]=ya[85]=1,Hs[85]=Js[85]=0,Ws[85]=Qs[85]=-1,Ks[85]=aa[85]=0,ua[85]=oa[85]=0,la[85]=sa[85]=1,Zs[85]=pa[85]=1,ga[1]=ga[169]=0,da[1]=da[169]=-1,ya[1]=ya[169]=0,oa[1]=oa[169]=-1,sa[1]=sa[169]=0,aa[1]=aa[169]=0,na[4]=na[166]=0,ra[4]=ra[166]=-1,ia[4]=ia[166]=1,ua[4]=ua[166]=1,la[4]=la[166]=0,pa[4]=pa[166]=0,$s[16]=$s[154]=0,ta[16]=ta[154]=1,ea[16]=ea[154]=1,Js[16]=Js[154]=1,Qs[16]=Qs[154]=0,Zs[16]=Zs[154]=1,ca[64]=ca[106]=0,ha[64]=ha[106]=1,fa[64]=fa[106]=0,Hs[64]=Hs[106]=-1,Ws[64]=Ws[106]=0,Ks[64]=Ks[106]=1,ca[2]=ca[168]=0,ha[2]=ha[168]=-1,fa[2]=fa[168]=1,ga[2]=ga[168]=0,da[2]=da[168]=-1,ya[2]=ya[168]=0,oa[2]=oa[168]=-1,sa[2]=sa[168]=0,aa[2]=aa[168]=0,ua[2]=ua[168]=-1,la[2]=la[168]=0,pa[2]=pa[168]=1,$s[8]=$s[162]=0,ta[8]=ta[162]=-1,ea[8]=ea[162]=0,na[8]=na[162]=0,ra[8]=ra[162]=-1,ia[8]=ia[162]=1,oa[8]=oa[162]=1,sa[8]=sa[162]=0,aa[8]=aa[162]=1,ua[8]=ua[162]=1,la[8]=la[162]=0,pa[8]=pa[162]=0,$s[32]=$s[138]=0,ta[32]=ta[138]=1,ea[32]=ea[138]=1,na[32]=na[138]=0,ra[32]=ra[138]=1,ia[32]=ia[138]=0,Hs[32]=Hs[138]=1,Ws[32]=Ws[138]=0,Ks[32]=Ks[138]=0,Js[32]=Js[138]=1,Qs[32]=Qs[138]=0,Zs[32]=Zs[138]=1,ga[128]=ga[42]=0,da[128]=da[42]=1,ya[128]=ya[42]=1,ca[128]=ca[42]=0,ha[128]=ha[42]=1,fa[128]=fa[42]=0,Hs[128]=Hs[42]=-1,Ws[128]=Ws[42]=0,Ks[128]=Ks[42]=1,Js[128]=Js[42]=-1,Qs[128]=Qs[42]=0,Zs[128]=Zs[42]=0,na[5]=na[165]=-1,ra[5]=ra[165]=0,ia[5]=ia[165]=0,ga[5]=ga[165]=1,da[5]=da[165]=0,ya[5]=ya[165]=0,ua[20]=ua[150]=0,la[20]=la[150]=1,pa[20]=pa[150]=1,Js[20]=Js[150]=0,Qs[20]=Qs[150]=-1,Zs[20]=Zs[150]=1,$s[80]=$s[90]=-1,ta[80]=ta[90]=0,ea[80]=ea[90]=1,ca[80]=ca[90]=1,ha[80]=ha[90]=0,fa[80]=fa[90]=1,oa[65]=oa[105]=0,sa[65]=sa[105]=1,aa[65]=aa[105]=0,Hs[65]=Hs[105]=0,Ws[65]=Ws[105]=-1,Ks[65]=Ks[105]=0,$s[160]=$s[10]=-1,ta[160]=ta[10]=0,ea[160]=ea[10]=1,na[160]=na[10]=-1,ra[160]=ra[10]=0,ia[160]=ia[10]=0,ga[160]=ga[10]=1,da[160]=da[10]=0,ya[160]=ya[10]=0,ca[160]=ca[10]=1,ha[160]=ha[10]=0,fa[160]=fa[10]=1,ua[130]=ua[40]=0,la[130]=la[40]=1,pa[130]=pa[40]=1,oa[130]=oa[40]=0,sa[130]=sa[40]=1,aa[130]=aa[40]=0,Hs[130]=Hs[40]=0,Ws[130]=Ws[40]=-1,Ks[130]=Ks[40]=0,Js[130]=Js[40]=0,Qs[130]=Qs[40]=-1,Zs[130]=Zs[40]=1,na[37]=na[133]=0,ra[37]=ra[133]=1,ia[37]=ia[133]=1,ga[37]=ga[133]=0,da[37]=da[133]=1,ya[37]=ya[133]=0,Hs[37]=Hs[133]=-1,Ws[37]=Ws[133]=0,Ks[37]=Ks[133]=0,Js[37]=Js[133]=1,Qs[37]=Qs[133]=0,Zs[37]=Zs[133]=0,ua[148]=ua[22]=-1,la[148]=la[22]=0,pa[148]=pa[22]=0,ga[148]=ga[22]=0,da[148]=da[22]=-1,ya[148]=ya[22]=1,ca[148]=ca[22]=0,ha[148]=ha[22]=1,fa[148]=fa[22]=1,Js[148]=Js[22]=-1,Qs[148]=Qs[22]=0,Zs[148]=Zs[22]=1,$s[82]=$s[88]=0,ta[82]=ta[88]=-1,ea[82]=ea[88]=1,ua[82]=ua[88]=1,la[82]=la[88]=0,pa[82]=pa[88]=1,oa[82]=oa[88]=-1,sa[82]=sa[88]=0,aa[82]=aa[88]=1,ca[82]=ca[88]=0,ha[82]=ha[88]=-1,fa[82]=fa[88]=0,$s[73]=$s[97]=0,ta[73]=ta[97]=1,ea[73]=ea[97]=0,na[73]=na[97]=0,ra[73]=ra[97]=-1,ia[73]=ia[97]=0,oa[73]=oa[97]=1,sa[73]=sa[97]=0,aa[73]=aa[97]=0,Hs[73]=Hs[97]=1,Ws[73]=Ws[97]=0,Ks[73]=Ks[97]=1,$s[145]=$s[25]=0,ta[145]=ta[25]=-1,ea[145]=ea[25]=0,oa[145]=oa[25]=1,sa[145]=sa[25]=0,aa[145]=aa[25]=1,ga[145]=ga[25]=0,da[145]=da[25]=1,ya[145]=ya[25]=1,Js[145]=Js[25]=-1,Qs[145]=Qs[25]=0,Zs[145]=Zs[25]=0,na[70]=na[100]=0,ra[70]=ra[100]=1,ia[70]=ia[100]=0,ua[70]=ua[100]=-1,la[70]=la[100]=0,pa[70]=pa[100]=1,ca[70]=ca[100]=0,ha[70]=ha[100]=-1;fa[70]=fa[100]=1,Hs[70]=Hs[100]=1,Ws[70]=Ws[100]=0,Ks[70]=Ks[100]=0,na[101]=na[69]=0,ra[101]=ra[69]=1,ia[101]=ia[69]=0,Hs[101]=Hs[69]=1,Ws[101]=Ws[69]=0,Ks[101]=Ks[69]=0,ga[149]=ga[21]=0,da[149]=da[21]=1,ya[149]=ya[21]=1,Js[149]=Js[21]=-1,Qs[149]=Qs[21]=0,Zs[149]=Zs[21]=0,ua[86]=ua[84]=-1,la[86]=la[84]=0,pa[86]=pa[84]=1,ca[86]=ca[84]=0,ha[86]=ha[84]=-1,fa[86]=fa[84]=1,$s[89]=$s[81]=0,ta[89]=ta[81]=-1,ea[89]=ea[81]=0,oa[89]=oa[81]=1,sa[89]=sa[81]=0,aa[89]=aa[81]=1,$s[96]=$s[74]=0,ta[96]=ta[74]=1,ea[96]=ea[74]=0,na[96]=na[74]=-1,ra[96]=ra[74]=0,ia[96]=ia[74]=1,ca[96]=ca[74]=1,ha[96]=ha[74]=0,fa[96]=fa[74]=0,Hs[96]=Hs[74]=1,Ws[96]=Ws[74]=0,Ks[96]=Ks[74]=1,$s[24]=$s[146]=0,ta[24]=ta[146]=-1,ea[24]=ea[146]=1,ua[24]=ua[146]=1,la[24]=la[146]=0,pa[24]=pa[146]=1,oa[24]=oa[146]=0,sa[24]=sa[146]=1,aa[24]=aa[146]=1,Js[24]=Js[146]=0,Qs[24]=Qs[146]=-1,Zs[24]=Zs[146]=0,na[6]=na[164]=-1,ra[6]=ra[164]=0,ia[6]=ia[164]=1,ua[6]=ua[164]=-1,la[6]=la[164]=0,pa[6]=pa[164]=0,ga[6]=ga[164]=0,da[6]=da[164]=-1,ya[6]=ya[164]=1,ca[6]=ca[164]=1,ha[6]=ha[164]=0,fa[6]=fa[164]=0,oa[129]=oa[41]=0,sa[129]=sa[41]=1,aa[129]=aa[41]=1,ga[129]=ga[41]=0,da[129]=da[41]=1,ya[129]=ya[41]=0,Hs[129]=Hs[41]=-1,Ws[129]=Ws[41]=0,Ks[129]=Ks[41]=0,Js[129]=Js[41]=0,Qs[129]=Qs[41]=-1,Zs[129]=Zs[41]=0,ua[66]=ua[104]=0,la[66]=la[104]=1,pa[66]=pa[104]=0,oa[66]=oa[104]=-1,sa[66]=sa[104]=0,aa[66]=aa[104]=1,ca[66]=ca[104]=0,ha[66]=ha[104]=-1,fa[66]=fa[104]=0,Hs[66]=Hs[104]=0,Ws[66]=Ws[104]=-1,Ks[66]=Ks[104]=1,$s[144]=$s[26]=-1,ta[144]=ta[26]=0,ea[144]=ea[26]=0,ga[144]=ga[26]=1,da[144]=da[26]=0,ya[144]=ya[26]=1,ca[144]=ca[26]=0,ha[144]=ha[26]=1,fa[144]=fa[26]=1,Js[144]=Js[26]=-1,Qs[144]=Qs[26]=0,Zs[144]=Zs[26]=1,na[36]=na[134]=0,ra[36]=ra[134]=1,ia[36]=ia[134]=1,ua[36]=ua[134]=0,la[36]=la[134]=1,pa[36]=pa[134]=0,Hs[36]=Hs[134]=0,Ws[36]=Ws[134]=-1,Ks[36]=Ks[134]=1,Js[36]=Js[134]=1,Qs[36]=Qs[134]=0,Zs[36]=Zs[134]=0,$s[9]=$s[161]=-1,ta[9]=ta[161]=0,ea[9]=ea[161]=0,na[9]=na[161]=0,ra[9]=ra[161]=-1,ia[9]=ia[161]=0,oa[9]=oa[161]=1,sa[9]=sa[161]=0,aa[9]=aa[161]=0,ga[9]=ga[161]=1,da[9]=da[161]=0,ya[9]=ya[161]=1,$s[136]=0,ta[136]=1,ea[136]=1,na[136]=0,ra[136]=1,ia[136]=0,ua[136]=-1,la[136]=0,pa[136]=1,oa[136]=-1,sa[136]=0,aa[136]=0,ga[136]=0,da[136]=-1,ya[136]=0,ca[136]=0,ha[136]=-1,fa[136]=1,Hs[136]=1,Ws[136]=0,Ks[136]=0,Js[136]=1,Qs[136]=0,Zs[136]=1,$s[34]=0,ta[34]=-1,ea[34]=0,na[34]=0,ra[34]=-1,ia[34]=1,ua[34]=1,la[34]=0,pa[34]=0,oa[34]=1,sa[34]=0,aa[34]=1,ga[34]=0,da[34]=1,ya[34]=1,ca[34]=0,ha[34]=1,fa[34]=0,Hs[34]=-1,Ws[34]=0,Ks[34]=1,Js[34]=-1,Qs[34]=0,Zs[34]=0,$s[35]=0,ta[35]=1,ea[35]=1,na[35]=0,ra[35]=-1,ia[35]=1,ua[35]=1,la[35]=0,pa[35]=0,oa[35]=-1,sa[35]=0,aa[35]=0,ga[35]=0,da[35]=-1,ya[35]=0,ca[35]=0,ha[35]=1,fa[35]=0,Hs[35]=-1,Ws[35]=0,Ks[35]=1,Js[35]=1,Qs[35]=0,Zs[35]=1,$s[153]=0,ta[153]=1,ea[153]=1,oa[153]=-1;sa[153]=0,aa[153]=0,ga[153]=0,da[153]=-1,ya[153]=0,Js[153]=1,Qs[153]=0,Zs[153]=1,na[102]=0,ra[102]=-1,ia[102]=1,ua[102]=1,la[102]=0,pa[102]=0,ca[102]=0,ha[102]=1,fa[102]=0,Hs[102]=-1,Ws[102]=0,Ks[102]=1,$s[155]=0,ta[155]=-1,ea[155]=0,oa[155]=1,sa[155]=0,aa[155]=1,ga[155]=0,da[155]=1,ya[155]=1,Js[155]=-1,Qs[155]=0,Zs[155]=0,na[103]=0,ra[103]=1,ia[103]=0,ua[103]=-1,la[103]=0,pa[103]=1,ca[103]=0,ha[103]=-1,fa[103]=1,Hs[103]=1,Ws[103]=0,Ks[103]=0,$s[152]=0,ta[152]=1,ea[152]=1,ua[152]=-1,la[152]=0,pa[152]=1,oa[152]=-1,sa[152]=0,aa[152]=0,ga[152]=0,da[152]=-1,ya[152]=0,ca[152]=0,ha[152]=-1,fa[152]=1,Js[152]=1,Qs[152]=0,Zs[152]=1,$s[156]=0,ta[156]=-1,ea[156]=1,ua[156]=1,la[156]=0,pa[156]=1,oa[156]=-1,sa[156]=0,aa[156]=0,ga[156]=0,da[156]=-1,ya[156]=0,ca[156]=0,ha[156]=1,fa[156]=1,Js[156]=-1,Qs[156]=0,Zs[156]=1,$s[137]=0,ta[137]=1,ea[137]=1,na[137]=0,ra[137]=1,ia[137]=0,oa[137]=-1,sa[137]=0,aa[137]=0,ga[137]=0,da[137]=-1,ya[137]=0,Hs[137]=1,Ws[137]=0,Ks[137]=0,Js[137]=1,Qs[137]=0,Zs[137]=1,$s[139]=0,ta[139]=1,ea[139]=1,na[139]=0,ra[139]=-1,ia[139]=0,oa[139]=1,sa[139]=0,aa[139]=0,ga[139]=0,da[139]=1,ya[139]=0,Hs[139]=-1,Ws[139]=0,Ks[139]=0,Js[139]=1,Qs[139]=0,Zs[139]=1,$s[98]=0,ta[98]=-1,ea[98]=0,na[98]=0,ra[98]=-1,ia[98]=1,ua[98]=1,la[98]=0,pa[98]=0,oa[98]=1,sa[98]=0,aa[98]=1,ca[98]=0,ha[98]=1,fa[98]=0,Hs[98]=-1,Ws[98]=0,Ks[98]=1,$s[99]=0,ta[99]=1,ea[99]=0,na[99]=0,ra[99]=-1,ia[99]=1,ua[99]=1,la[99]=0,pa[99]=0,oa[99]=-1,sa[99]=0,aa[99]=1,ca[99]=0,ha[99]=-1,fa[99]=0,Hs[99]=1,Ws[99]=0,Ks[99]=1,na[38]=0,ra[38]=-1,ia[38]=1,ua[38]=1,la[38]=0,pa[38]=0,ga[38]=0,da[38]=1,ya[38]=1,ca[38]=0,ha[38]=1,fa[38]=0,Hs[38]=-1,Ws[38]=0,Ks[38]=1,Js[38]=-1,Qs[38]=0,Zs[38]=0,na[39]=0,ra[39]=1,ia[39]=1,ua[39]=-1,la[39]=0,pa[39]=0,ga[39]=0,da[39]=-1,ya[39]=1,ca[39]=0,ha[39]=1,fa[39]=0,Hs[39]=-1,Ws[39]=0,Ks[39]=1,Js[39]=1,Qs[39]=0,Zs[39]=0;var _a=function(t){return [[t.bottomleft,0],[0,0],[0,t.leftbottom]]},ma=function(t){return [[1,t.rightbottom],[1,0],[t.bottomright,0]]},va=function(t){return [[t.topright,1],[1,1],[1,t.righttop]]},Ea=function(t){return [[0,t.lefttop],[0,1],[t.topleft,1]]},Ia=function(t){return [[t.bottomright,0],[t.bottomleft,0],[0,t.leftbottom],[0,t.lefttop]]},xa=function(t){return [[t.bottomright,0],[t.bottomleft,0],[1,t.righttop],[1,t.rightbottom]]},Na=function(t){return [[1,t.righttop],[1,t.rightbottom],[t.topleft,1],[t.topright,1]]},ba=function(t){return [[0,t.leftbottom],[0,t.lefttop],[t.topleft,1],[t.topright,1]]},Ca=function(t){return [[0,0],[0,t.leftbottom],[1,t.rightbottom],[1,0]]},wa=function(t){return [[1,0],[t.bottomright,0],[t.topright,1],[1,1]]},Sa=function(t){return [[1,1],[1,t.righttop],[0,t.lefttop],[0,1]]},La=function(t){return [[t.bottomleft,0],[0,0],[0,1],[t.topleft,1]]},Pa=function(t){return [[1,t.righttop],[1,t.rightbottom],[0,t.leftbottom],[0,t.lefttop]]},Oa=function(t){return [[t.topleft,1],[t.topright,1],[t.bottomright,0],[t.bottomleft,0]]},Ta=function(){return [[0,0],[0,1],[1,1],[1,0]]},Ra=function(t){return [[1,t.rightbottom],[1,0],[0,0],[0,1],[t.topleft,1]]},Da=function(t){return [[t.topright,1],[1,1],[1,0],[0,0],[0,t.leftbottom]]},Ma=function(t){return [[1,0],[t.bottomright,0],[0,t.lefttop],[0,1],[1,1]]},Aa=function(t){return [[1,1],[1,t.righttop],[t.bottomleft,0],[0,0],[0,1]]},Fa=function(t){return [[1,t.righttop],[1,t.rightbottom],[0,t.lefttop],[0,1],[t.topleft,1]]},Ga=function(t){return [[1,1],[1,t.righttop],[t.bottomright,0],[t.bottomleft,0],[t.topright,1]]},qa=function(t){return [[1,t.rightbottom],[1,0],[t.bottomright,0],[0,t.leftbottom],[0,t.lefttop]]},ka=function(t){return [[t.topright,1],[t.bottomleft,0],[0,0],[0,t.leftbottom],[t.topleft,1]]},Ba=function(t){return [[t.bottomright,0],[t.bottomleft,0],[0,t.lefttop],[0,1],[t.topleft,1]]},Va=function(t){return [[1,1],[1,t.righttop],[0,t.leftbottom],[0,t.lefttop],[t.topright,1]]},za=function(t){return [[1,t.rightbottom],[1,0],[t.bottomright,0],[t.topleft,1],[t.topright,1]]},Ua=function(t){return [[1,t.righttop],[1,t.rightbottom],[t.bottomleft,0],[0,0],[0,t.leftbottom]]},Xa=function(t){return [[1,t.rightbottom],[1,0],[0,0],[0,t.leftbottom],[t.topleft,1],[t.topright,1]]},ja=function(t){return [[1,1],[1,0],[t.bottomright,0],[0,t.leftbottom],[0,t.lefttop],[t.topright,1]]},Ya=function(t){return [[1,1],[1,t.righttop],[t.bottomright,0],[t.bottomleft,0],[0,t.lefttop],[0,1]]},Ha=function(t){return [[1,t.righttop],[1,t.rightbottom],[t.bottomleft,0],[0,0],[0,1],[t.topleft,1]]},Wa=function(t){return [[1,1],[1,t.righttop],[t.bottomleft,0],[0,0],[0,t.leftbottom],[t.topright,1]]},Ka=function(t){return [[1,t.rightbottom],[1,0],[t.bottomright,0],[0,t.lefttop],[0,1],[t.topleft,1]]},Ja=function(t){return [[1,t.righttop],[1,t.rightbottom],[t.bottomright,0],[t.bottomleft,0],[0,t.leftbottom],[0,t.lefttop],[t.topleft,1],[t.topright,1]]},Qa=function(t){return [[1,1],[1,t.righttop],[t.bottomleft,0],[0,0],[0,t.leftbottom],[t.topright,1]]},Za=function(t){return [[1,t.rightbottom],[1,0],[t.bottomright,0],[0,t.lefttop],[0,1],[t.topleft,1]]},$a=function(t){return [[1,1],[1,t.righttop],[t.bottomright,0],[t.bottomleft,0],[0,t.leftbottom],[0,t.lefttop],[t.topright,1]]},tu=function(t){return [[1,t.righttop],[1,t.rightbottom],[t.bottomleft,0],[0,0],[0,t.leftbottom],[t.topleft,1],[t.topright,1]]},eu=function(t){return [[1,t.righttop],[1,t.rightbottom],[t.bottomright,0],[t.bottomleft,0],[0,t.lefttop],[0,1],[t.topleft,1]]},nu=function(t){return [[1,t.rightbottom],[1,0],[t.bottomright,0],[0,t.leftbottom],[0,t.lefttop],[t.topleft,1],[t.topright,1]]},ru=[],iu=[],ou=[],su=[],au=[],uu=[],lu=[],pu=[];su[1]=au[1]=18,su[169]=au[169]=18,ou[4]=iu[4]=12,ou[166]=iu[166]=12,ru[16]=pu[16]=4,ru[154]=pu[154]=4,uu[64]=lu[64]=22,uu[106]=lu[106]=22,ou[2]=uu[2]=17,su[2]=au[2]=18,ou[168]=uu[168]=17,su[168]=au[168]=18,ru[8]=su[8]=9,iu[8]=ou[8]=12,ru[162]=su[162]=9,iu[162]=ou[162]=12,ru[32]=pu[32]=4,iu[32]=lu[32]=1,ru[138]=pu[138]=4,iu[138]=lu[138]=1,au[128]=pu[128]=21,uu[128]=lu[128]=22,au[42]=pu[42]=21,uu[42]=lu[42]=22,iu[5]=au[5]=14,iu[165]=au[165]=14,ou[20]=pu[20]=6,ou[150]=pu[150]=6,ru[80]=uu[80]=11,ru[90]=uu[90]=11,su[65]=lu[65]=3,su[105]=lu[105]=3,ru[160]=uu[160]=11,iu[160]=au[160]=14,ru[10]=uu[10]=11,iu[10]=au[10]=14,ou[130]=pu[130]=6,su[130]=lu[130]=3,ou[40]=pu[40]=6,su[40]=lu[40]=3,iu[101]=lu[101]=1,iu[69]=lu[69]=1,au[149]=pu[149]=21,au[21]=pu[21]=21,ou[86]=uu[86]=17,ou[84]=uu[84]=17,ru[89]=su[89]=9,ru[81]=su[81]=9,ru[96]=lu[96]=0,iu[96]=uu[96]=15,ru[74]=lu[74]=0,iu[74]=uu[74]=15,ru[24]=ou[24]=8,su[24]=pu[24]=7,ru[146]=ou[146]=8,su[146]=pu[146]=7,iu[6]=uu[6]=15,ou[6]=au[6]=16,iu[164]=uu[164]=15,ou[164]=au[164]=16,su[129]=pu[129]=7,au[129]=lu[129]=20,su[41]=pu[41]=7,au[41]=lu[41]=20,ou[66]=lu[66]=2,su[66]=uu[66]=19,ou[104]=lu[104]=2,su[104]=uu[104]=19,ru[144]=au[144]=10,uu[144]=pu[144]=23,ru[26]=au[26]=10,uu[26]=pu[26]=23,iu[36]=pu[36]=5,ou[36]=lu[36]=2,iu[134]=pu[134]=5,ou[134]=lu[134]=2,ru[9]=au[9]=10,iu[9]=su[9]=13,ru[161]=au[161]=10,iu[161]=su[161]=13,iu[37]=pu[37]=5,au[37]=lu[37]=20,iu[133]=pu[133]=5,au[133]=lu[133]=20,ou[148]=au[148]=16,uu[148]=pu[148]=23,ou[22]=au[22]=16,uu[22]=pu[22]=23,ru[82]=ou[82]=8,su[82]=uu[82]=19,ru[88]=ou[88]=8,su[88]=uu[88]=19,ru[73]=lu[73]=0,iu[73]=su[73]=13,ru[97]=lu[97]=0,iu[97]=su[97]=13,ru[145]=su[145]=9,au[145]=pu[145]=21,ru[25]=su[25]=9,au[25]=pu[25]=21,iu[70]=lu[70]=1,ou[70]=uu[70]=17,iu[100]=lu[100]=1,ou[100]=uu[100]=17,ru[34]=su[34]=9,iu[34]=ou[34]=12,au[34]=pu[34]=21,uu[34]=lu[34]=22,ru[136]=pu[136]=4,iu[136]=lu[136]=1,ou[136]=uu[136]=17,su[136]=au[136]=18,ru[35]=pu[35]=4,iu[35]=ou[35]=12,su[35]=au[35]=18,uu[35]=lu[35]=22,ru[153]=pu[153]=4,su[153]=au[153]=18,iu[102]=ou[102]=12,uu[102]=lu[102]=22,ru[155]=su[155]=9,au[155]=pu[155]=23,iu[103]=lu[103]=1,ou[103]=uu[103]=17,ru[152]=pu[152]=4,ou[152]=uu[152]=17,su[152]=au[152]=18,ru[156]=ou[156]=8,su[156]=au[156]=18,uu[156]=pu[156]=23,ru[137]=pu[137]=4,iu[137]=lu[137]=1,su[137]=au[137]=18,ru[139]=pu[139]=4,iu[139]=su[139]=13,au[139]=lu[139]=20,ru[98]=su[98]=9,iu[98]=ou[98]=12,uu[98]=lu[98]=22,ru[99]=lu[99]=0,iu[99]=ou[99]=12,su[99]=uu[99]=19,iu[38]=ou[38]=12,au[38]=pu[38]=21,uu[38]=lu[38]=22,iu[39]=pu[39]=5,ou[39]=au[39]=16,uu[39]=lu[39]=22;var cu=[];cu[1]=cu[169]=_a,cu[4]=cu[166]=ma,cu[16]=cu[154]=va,cu[64]=cu[106]=Ea,cu[168]=cu[2]=Ia,cu[162]=cu[8]=xa,cu[138]=cu[32]=Na,cu[42]=cu[128]=ba,cu[5]=cu[165]=Ca,cu[20]=cu[150]=wa,cu[80]=cu[90]=Sa,cu[65]=cu[105]=La,cu[160]=cu[10]=Pa,cu[130]=cu[40]=Oa,cu[85]=Ta,cu[101]=cu[69]=Ra,cu[149]=cu[21]=Da,cu[86]=cu[84]=Ma,cu[89]=cu[81]=Aa,cu[96]=cu[74]=Fa,cu[24]=cu[146]=Ga,cu[6]=cu[164]=qa,cu[129]=cu[41]=ka,cu[66]=cu[104]=Ba,cu[144]=cu[26]=Va,cu[36]=cu[134]=za,cu[9]=cu[161]=Ua,cu[37]=cu[133]=Xa,cu[148]=cu[22]=ja,cu[82]=cu[88]=Ya,cu[73]=cu[97]=Ha,cu[145]=cu[25]=Wa,cu[70]=cu[100]=Ka,cu[34]=function(t){return [ba(t),xa(t)]},cu[35]=Ja,cu[136]=function(t){return [Na(t),Ia(t)]},cu[153]=function(t){return [va(t),_a(t)]},cu[102]=function(t){return [ma(t),Ea(t)]},cu[155]=Qa,cu[103]=Za,cu[152]=function(t){return [va(t),Ia(t)]},cu[156]=$a,cu[137]=function(t){return [Na(t),_a(t)]},cu[139]=tu,cu[98]=function(t){return [xa(t),Ea(t)]},cu[99]=eu,cu[38]=function(t){return [ma(t),ba(t)]},cu[39]=nu;var hu={successCallback:null,verbose:!1},fu={},gu=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};fe(this,t),this.setData(e);}return ge(t,[{key:"setData",value:function(t){var e=t.points,n=t.breaks,r=t.options;this._points=e,this._breaks=n,this._options=r;}},{key:"calcIsolines",value:function(){return this.pointGrid=this._getPointGrid(),this.multiLineStringFeatures=this._getLines(this.pointGrid),this.polylines=this._transformMultiToArray(this.multiLineStringFeatures),this.multiPolygonFeature=this._getPolygons(this.pointGrid),this.polygons=this._transformMultiToArray(this.multiPolygonFeature),this}},{key:"createBoundsFromPoints",value:function(){var t=this._getMinAndMax(this._points),e=t.min,n=t.max;this._options.bounds=[[e[0]-.3,e[1]-.3],[n[0]+.3,n[1]+.3]];}},{key:"recaclOnEmpty",value:function(){if(!1===this.hasBoundsInOptions()&&!0===this.lastCalcGeometryEmpty()){var t="Polylines and polygons are empty, recacl with bounds from points. "+"You can set isolines bounds manually: "+"L.leafletIsolines(points, breaks, {bounds: [[lat,lng],[lat,lng]]})";self&&self.console&&self.console.warn(t),this.createBoundsFromPoints(),this.calcIsolines();}return this}},{key:"hasBoundsInOptions",value:function(){return this._options.bounds&&this._options.bounds.length>0}},{key:"lastCalcGeometryEmpty",value:function(){return !0===this._geometryEmpty(this.multiLineStringFeatures)&&!0===this._geometryEmpty(this.multiPolygonFeature)}},{key:"getComputedPoly",value:function(){return {points:this._points,breaks:this._breaks,polygons:this.polygons,polylines:this.polylines}}},{key:"_geometryEmpty",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=0;e<t.features.length;e++)if(t.features[e].geometry&&t.features[e].geometry.coordinates.length>0)return !1;return !0}},{key:"_transformMultiToArray",value:function(t){var e=[];return t.features.forEach(function(t){t.geometry.coordinates.length>0&&t.geometry.coordinates.forEach(function(n){e.push({coordinates:n,properties:t.properties});});}),e}},{key:"_getPolygons",value:function(t){return jt(t,this._breaks,{zProperty:this._options.propertyName})}},{key:"_getLines",value:function(t){return le(t,this._breaks,{zProperty:this._options.propertyName})}},{key:"_getFlatArray",value:function(t,e){var n=this;Array.isArray(t)&&Array.isArray(t[0])?t.forEach(function(t){n._getFlatArray(t,e);}):e.push([t[0],t[1]]);}},{key:"_getMinAndMax",value:function(t){var e=[];this._getFlatArray(t,e);var n=[1/0,1/0],r=[-1/0,-1/0];return e.forEach(function(t){t[0]>r[0]&&(r[0]=t[0]),t[1]>r[1]&&(r[1]=t[1]),t[0]<n[0]&&(n[0]=t[0]),t[1]<n[1]&&(n[1]=t[1]);}),{min:n,max:r}}},{key:"_getPointGrid",value:function(){var t=this._points.slice();if(this.hasBoundsInOptions()){var e=this._getMinAndMax(this._options.bounds),n=e.min,r=e.max;t.push([].concat(ye(n),[0])),t.push([].concat(ye(r),[0]));}return wt(this._pointsToFeatureCollection(t,this._options.propertyName),this._options.interpolateCellSize,{gridType:"points",property:this._options.propertyName})}},{key:"_pointsToFeatureCollection",value:function(t,e){var n=[];return t.forEach(function(t){t[0]&&t[1]&&n.push({type:"Feature",geometry:{type:"Point",coordinates:[+t[0],+t[1]]},properties:de({},e,t[2]||0)});}),{type:"FeatureCollection",features:n}}}]),t}();self.addEventListener("message",function(t){var e=t.data,n=+new Date;try{var r=new gu(e),i=r.calcIsolines().recaclOnEmpty().getComputedPoly();self.postMessage(Object.assign(i,{startAt:n}));}catch(t){var o=t.toString();self.postMessage({error:o,startAt:n}),self.console.error(t);}});});


    });

    function getDefaultColor(propValue) {
      var val = +propValue.toString().split('-')[0] * 20;
      if (val > 255) {
        val = 255;
      } else if (val < 0) {
        val = 0;
      }
      return 'rgb(' + val + ', ' + val + ', ' + val + ')';
    }

    // source: https://codepen.io/gapcode/pen/vEJNZN
    function detectIE() {
      var ua = window.navigator.userAgent;
      var msie = ua.indexOf('MSIE ');
      if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
      }

      var trident = ua.indexOf('Trident/');
      if (trident > 0) {
        // IE 11 => return version number
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
      }

      var edge = ua.indexOf('Edge/');
      if (edge > 0) {
        // Edge (IE 12+) => return version number
        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
      }
      // other browser
      return false;
    }

    /* global L */
    var IsolineMarker = L.Layer.extend({
      options: {
        pane: 'markerPane',
        rotate: true,
        showedPosition: 'center'
      },
      initialize: function initialize(polylineLayer) {
        var caption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var options = arguments[2];
        var coords = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

        L.setOptions(this, Object.assign(this.options, options));

        this._polylineLayer = polylineLayer;
        this._coords = coords.map(function (ll) {
          return L.latLng(ll);
        });
        this._caption = caption;
      },
      addTo: function addTo(map) {
        map.addLayer(this);
        return this;
      },
      onAdd: function onAdd(map) {
        this._map = map;
        var el = this._element = L.DomUtil.create('div', 'leaflet-zoom-animated leaflet-isolines-isoline-marker', this._getMarkerPane(map));
        L.DomUtil.create('div', '', el).innerHTML = this._caption;

        map.on('zoomanim', this._animateZoom, this);

        this._caclMarkerPos();
        this._setPosition();
      },
      onRemove: function onRemove(map) {
        map.off('zoomanim', this._animateZoom, this);
        this._getMarkerPane(map).removeChild(this._element);
        this._map = null;
      },
      _getMarkerPane: function _getMarkerPane(map) {
        return this.getPane ? this.getPane() : map.getPanes().markerPane;
      },
      _caclMarkerPos: function _caclMarkerPos() {
        var latLngs = this._polylineLayer.getLatLngs ? this._polylineLayer.getLatLngs() : this._coords;
        var showOn = this._getShowedIndex(latLngs.length);
        for (var i = 1, len = latLngs.length; i < len; i++) {
          if (i === showOn) {
            var ll1 = latLngs[i - 1];
            var ll2 = latLngs[i % len];
            this._setMarkerLatLng(ll1, ll2);
            this._setMarkerRotationAngle(ll1, ll2);
            break;
          }
        }
      },
      _getShowedIndex: function _getShowedIndex(len) {
        if (len > 1 && this.options.showedPosition === 'center') {
          return Math.round(len / 2);
        }
        return len - 1;
      },
      _setPosition: function _setPosition() {
        L.DomUtil.setPosition(this._element, this._map.latLngToLayerPoint(this._latlng));
        this._setElementRotate();
      },
      _animateZoom: function _animateZoom(options) {
        L.DomUtil.setPosition(this._element, this._map._latLngToNewLayerPoint(this._latlng, options.zoom, options.center).round());
        this._setElementRotate();
      },
      _setElementRotate: function _setElementRotate() {
        if (this.options.rotate) {
          this._element.style.transform += ' rotate(' + this._rotation + 'rad)';
        }
      },
      _setMarkerLatLng: function _setMarkerLatLng(ll1, ll2) {
        var p1 = this._map.latLngToLayerPoint(ll1);
        var p2 = this._map.latLngToLayerPoint(ll2);

        this._latlng = this._map.layerPointToLatLng([(p1.x + p2.x) / 2, (p1.y + p2.y) / 2]);
      },
      _setMarkerRotationAngle: function _setMarkerRotationAngle(ll1, ll2) {
        var p1 = this._map.project(ll1);
        var p2 = this._map.project(ll2);

        this._rotation = Math.atan((p2.y - p1.y) / (p2.x - p1.x));
      }
    });

    (function () {
      L.marker.isolineMarker = function (polylineLayer, caption, options, coords) {
        return new IsolineMarker(polylineLayer, caption, options, coords);
      };
    })();

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var defineProperty = function (obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    };

    var _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    var toConsumableArray = function (arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

        return arr2;
      } else {
        return Array.from(arr);
      }
    };

    /**
     * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.
     */
    var earthRadius = 6371008.8;

    /**
     * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.
     */
    var factors = {
        meters: earthRadius,
        metres: earthRadius,
        millimeters: earthRadius * 1000,
        millimetres: earthRadius * 1000,
        centimeters: earthRadius * 100,
        centimetres: earthRadius * 100,
        kilometers: earthRadius / 1000,
        kilometres: earthRadius / 1000,
        miles: earthRadius / 1609.344,
        nauticalmiles: earthRadius / 1852,
        inches: earthRadius * 39.370,
        yards: earthRadius / 1.0936,
        feet: earthRadius * 3.28084,
        radians: 1,
        degrees: earthRadius / 111325
    };

    /**
     * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
     *
     * @name feature
     * @param {Geometry} geometry input geometry
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature} a GeoJSON Feature
     * @example
     * var geometry = {
     *   "type": "Point",
     *   "coordinates": [110, 50]
     * };
     *
     * var feature = turf.feature(geometry);
     *
     * //=feature
     */
    function feature(geometry, properties, options) {
        // Optional Parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        var bbox = options.bbox;
        var id = options.id;

        // Validation
        if (geometry === undefined) throw new Error('geometry is required');
        if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');
        if (bbox) validateBBox(bbox);
        if (id) validateId(id);

        // Main
        var feat = { type: 'Feature' };
        if (id) feat.id = id;
        if (bbox) feat.bbox = bbox;
        feat.properties = properties || {};
        feat.geometry = geometry;
        return feat;
    }

    /**
     * Creates a {@link Point} {@link Feature} from a Position.
     *
     * @name point
     * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<Point>} a Point feature
     * @example
     * var point = turf.point([-75.343, 39.984]);
     *
     * //=point
     */
    function point(coordinates, properties, options) {
        if (!coordinates) throw new Error('coordinates is required');
        if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');
        if (coordinates.length < 2) throw new Error('coordinates must be at least 2 numbers long');
        if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('coordinates must contain numbers');

        return feature({
            type: 'Point',
            coordinates: coordinates
        }, properties, options);
    }

    /**
     * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.
     *
     * @name polygon
     * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<Polygon>} Polygon Feature
     * @example
     * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });
     *
     * //=polygon
     */
    function polygon(coordinates, properties, options) {
        if (!coordinates) throw new Error('coordinates is required');

        for (var i = 0; i < coordinates.length; i++) {
            var ring = coordinates[i];
            if (ring.length < 4) {
                throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');
            }
            for (var j = 0; j < ring[ring.length - 1].length; j++) {
                // Check if first point of Polygon contains two numbers
                if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('coordinates must contain numbers');
                if (ring[ring.length - 1][j] !== ring[0][j]) {
                    throw new Error('First and last Position are not equivalent.');
                }
            }
        }

        return feature({
            type: 'Polygon',
            coordinates: coordinates
        }, properties, options);
    }

    /**
     * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
     *
     * @name featureCollection
     * @param {Feature[]} features input features
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {FeatureCollection} FeatureCollection of Features
     * @example
     * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});
     * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});
     * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});
     *
     * var collection = turf.featureCollection([
     *   locationA,
     *   locationB,
     *   locationC
     * ]);
     *
     * //=collection
     */
    function featureCollection(features, options) {
        // Optional Parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        var bbox = options.bbox;
        var id = options.id;

        // Validation
        if (!features) throw new Error('No features passed');
        if (!Array.isArray(features)) throw new Error('features must be an Array');
        if (bbox) validateBBox(bbox);
        if (id) validateId(id);

        // Main
        var fc = { type: 'FeatureCollection' };
        if (id) fc.id = id;
        if (bbox) fc.bbox = bbox;
        fc.features = features;
        return fc;
    }

    /**
     * Creates a {@link Feature<MultiLineString>} based on a
     * coordinate array. Properties can be added optionally.
     *
     * @name multiLineString
     * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<MultiLineString>} a MultiLineString feature
     * @throws {Error} if no coordinates are passed
     * @example
     * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
     *
     * //=multiLine
     */
    function multiLineString(coordinates, properties, options) {
        if (!coordinates) throw new Error('coordinates is required');

        return feature({
            type: 'MultiLineString',
            coordinates: coordinates
        }, properties, options);
    }

    /**
     * Creates a {@link Feature<MultiPolygon>} based on a
     * coordinate array. Properties can be added optionally.
     *
     * @name multiPolygon
     * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<MultiPolygon>} a multipolygon feature
     * @throws {Error} if no coordinates are passed
     * @example
     * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
     *
     * //=multiPoly
     *
     */
    function multiPolygon(coordinates, properties, options) {
        if (!coordinates) throw new Error('coordinates is required');

        return feature({
            type: 'MultiPolygon',
            coordinates: coordinates
        }, properties, options);
    }

    /**
     * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.
     * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
     *
     * @name radiansToLength
     * @param {number} radians in radians across the sphere
     * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.
     * @returns {number} distance
     */
    function radiansToLength(radians, units) {
        if (radians === undefined || radians === null) throw new Error('radians is required');

        if (units && typeof units !== 'string') throw new Error('units must be a string');
        var factor = factors[units || 'kilometers'];
        if (!factor) throw new Error(units + ' units is invalid');
        return radians * factor;
    }

    /**
     * Converts an angle in degrees to radians
     *
     * @name degreesToRadians
     * @param {number} degrees angle between 0 and 360 degrees
     * @returns {number} angle in radians
     */
    function degreesToRadians(degrees) {
        if (degrees === null || degrees === undefined) throw new Error('degrees is required');

        var radians = degrees % 360;
        return radians * Math.PI / 180;
    }

    /**
     * isNumber
     *
     * @param {*} num Number to validate
     * @returns {boolean} true/false
     * @example
     * turf.isNumber(123)
     * //=true
     * turf.isNumber('foo')
     * //=false
     */
    function isNumber(num) {
        return !isNaN(num) && num !== null && !Array.isArray(num);
    }

    /**
     * isObject
     *
     * @param {*} input variable to validate
     * @returns {boolean} true/false
     * @example
     * turf.isObject({elevation: 10})
     * //=true
     * turf.isObject('foo')
     * //=false
     */
    function isObject(input) {
        return !!input && input.constructor === Object;
    }

    /**
     * Validate BBox
     *
     * @private
     * @param {Array<number>} bbox BBox to validate
     * @returns {void}
     * @throws Error if BBox is not valid
     * @example
     * validateBBox([-180, -40, 110, 50])
     * //=OK
     * validateBBox([-180, -40])
     * //=Error
     * validateBBox('Foo')
     * //=Error
     * validateBBox(5)
     * //=Error
     * validateBBox(null)
     * //=Error
     * validateBBox(undefined)
     * //=Error
     */
    function validateBBox(bbox) {
        if (!bbox) throw new Error('bbox is required');
        if (!Array.isArray(bbox)) throw new Error('bbox must be an Array');
        if (bbox.length !== 4 && bbox.length !== 6) throw new Error('bbox must be an Array of 4 or 6 numbers');
        bbox.forEach(function (num) {
            if (!isNumber(num)) throw new Error('bbox must only contain numbers');
        });
    }

    /**
     * Validate Id
     *
     * @private
     * @param {string|number} id Id to validate
     * @returns {void}
     * @throws Error if Id is not valid
     * @example
     * validateId([-180, -40, 110, 50])
     * //=Error
     * validateId([-180, -40])
     * //=Error
     * validateId('Foo')
     * //=OK
     * validateId(5)
     * //=OK
     * validateId(null)
     * //=Error
     * validateId(undefined)
     * //=Error
     */
    function validateId(id) {
        if (!id) throw new Error('id is required');
        if (['string', 'number'].indexOf(typeof id === 'undefined' ? 'undefined' : _typeof(id)) === -1) throw new Error('id must be a number or a string');
    }

    /**
     * Callback for coordEach
     *
     * @callback coordEachCallback
     * @param {Array<number>} currentCoord The current coordinate being processed.
     * @param {number} coordIndex The current index of the coordinate being processed.
     * @param {number} featureIndex The current index of the Feature being processed.
     * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
     * @param {number} geometryIndex The current index of the Geometry being processed.
     */

    /**
     * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
     *
     * @name coordEach
     * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
     * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
     * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
     * @example
     * var features = turf.featureCollection([
     *   turf.point([26, 37], {"foo": "bar"}),
     *   turf.point([36, 53], {"hello": "world"})
     * ]);
     *
     * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
     *   //=currentCoord
     *   //=coordIndex
     *   //=featureIndex
     *   //=multiFeatureIndex
     *   //=geometryIndex
     * });
     */
    function coordEach(geojson, callback, excludeWrapCoord) {
        // Handles null Geometry -- Skips this GeoJSON
        if (geojson === null) return;
        var j,
            k,
            l,
            geometry$$1,
            stopG,
            coords,
            geometryMaybeCollection,
            wrapShrink = 0,
            coordIndex = 0,
            isGeometryCollection,
            type = geojson.type,
            isFeatureCollection = type === 'FeatureCollection',
            isFeature = type === 'Feature',
            stop = isFeatureCollection ? geojson.features.length : 1;

        // This logic may look a little weird. The reason why it is that way
        // is because it's trying to be fast. GeoJSON supports multiple kinds
        // of objects at its root: FeatureCollection, Features, Geometries.
        // This function has the responsibility of handling all of them, and that
        // means that some of the `for` loops you see below actually just don't apply
        // to certain inputs. For instance, if you give this just a
        // Point geometry, then both loops are short-circuited and all we do
        // is gradually rename the input until it's called 'geometry'.
        //
        // This also aims to allocate as few resources as possible: just a
        // few numbers and booleans, rather than any temporary arrays as would
        // be required with the normalization approach.
        for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
            geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
            isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
            stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

            for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
                var multiFeatureIndex = 0;
                var geometryIndex = 0;
                geometry$$1 = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;

                // Handles null Geometry -- Skips this geometry
                if (geometry$$1 === null) continue;
                coords = geometry$$1.coordinates;
                var geomType = geometry$$1.type;

                wrapShrink = excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon') ? 1 : 0;

                switch (geomType) {
                    case null:
                        break;
                    case 'Point':
                        callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
                        coordIndex++;
                        multiFeatureIndex++;
                        break;
                    case 'LineString':
                    case 'MultiPoint':
                        for (j = 0; j < coords.length; j++) {
                            callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
                            coordIndex++;
                            if (geomType === 'MultiPoint') multiFeatureIndex++;
                        }
                        if (geomType === 'LineString') multiFeatureIndex++;
                        break;
                    case 'Polygon':
                    case 'MultiLineString':
                        for (j = 0; j < coords.length; j++) {
                            for (k = 0; k < coords[j].length - wrapShrink; k++) {
                                callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
                                coordIndex++;
                            }
                            if (geomType === 'MultiLineString') multiFeatureIndex++;
                            if (geomType === 'Polygon') geometryIndex++;
                        }
                        if (geomType === 'Polygon') multiFeatureIndex++;
                        break;
                    case 'MultiPolygon':
                        for (j = 0; j < coords.length; j++) {
                            if (geomType === 'MultiPolygon') geometryIndex = 0;
                            for (k = 0; k < coords[j].length; k++) {
                                for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                                    callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
                                    coordIndex++;
                                }
                                geometryIndex++;
                            }
                            multiFeatureIndex++;
                        }
                        break;
                    case 'GeometryCollection':
                        for (j = 0; j < geometry$$1.geometries.length; j++) {
                            coordEach(geometry$$1.geometries[j], callback, excludeWrapCoord);
                        }break;
                    default:
                        throw new Error('Unknown Geometry Type');
                }
            }
        }
    }

    /**
     * Callback for featureEach
     *
     * @callback featureEachCallback
     * @param {Feature<any>} currentFeature The current Feature being processed.
     * @param {number} featureIndex The current index of the Feature being processed.
     */

    /**
     * Iterate over features in any GeoJSON object, similar to
     * Array.forEach.
     *
     * @name featureEach
     * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
     * @param {Function} callback a method that takes (currentFeature, featureIndex)
     * @example
     * var features = turf.featureCollection([
     *   turf.point([26, 37], {foo: 'bar'}),
     *   turf.point([36, 53], {hello: 'world'})
     * ]);
     *
     * turf.featureEach(features, function (currentFeature, featureIndex) {
     *   //=currentFeature
     *   //=featureIndex
     * });
     */
    function featureEach(geojson, callback) {
        if (geojson.type === 'Feature') {
            callback(geojson, 0);
        } else if (geojson.type === 'FeatureCollection') {
            for (var i = 0; i < geojson.features.length; i++) {
                callback(geojson.features[i], i);
            }
        }
    }

    /**
     * Callback for geomEach
     *
     * @callback geomEachCallback
     * @param {Geometry} currentGeometry The current Geometry being processed.
     * @param {number} featureIndex The current index of the Feature being processed.
     * @param {Object} featureProperties The current Feature Properties being processed.
     * @param {Array<number>} featureBBox The current Feature BBox being processed.
     * @param {number|string} featureId The current Feature Id being processed.
     */

    /**
     * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
     *
     * @name geomEach
     * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
     * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
     * @example
     * var features = turf.featureCollection([
     *     turf.point([26, 37], {foo: 'bar'}),
     *     turf.point([36, 53], {hello: 'world'})
     * ]);
     *
     * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
     *   //=currentGeometry
     *   //=featureIndex
     *   //=featureProperties
     *   //=featureBBox
     *   //=featureId
     * });
     */
    function geomEach(geojson, callback) {
        var i,
            j,
            g,
            geometry$$1,
            stopG,
            geometryMaybeCollection,
            isGeometryCollection,
            featureProperties,
            featureBBox,
            featureId,
            featureIndex = 0,
            isFeatureCollection = geojson.type === 'FeatureCollection',
            isFeature = geojson.type === 'Feature',
            stop = isFeatureCollection ? geojson.features.length : 1;

        // This logic may look a little weird. The reason why it is that way
        // is because it's trying to be fast. GeoJSON supports multiple kinds
        // of objects at its root: FeatureCollection, Features, Geometries.
        // This function has the responsibility of handling all of them, and that
        // means that some of the `for` loops you see below actually just don't apply
        // to certain inputs. For instance, if you give this just a
        // Point geometry, then both loops are short-circuited and all we do
        // is gradually rename the input until it's called 'geometry'.
        //
        // This also aims to allocate as few resources as possible: just a
        // few numbers and booleans, rather than any temporary arrays as would
        // be required with the normalization approach.
        for (i = 0; i < stop; i++) {

            geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
            featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
            featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;
            featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;
            isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
            stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

            for (g = 0; g < stopG; g++) {
                geometry$$1 = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;

                // Handle null Geometry
                if (geometry$$1 === null) {
                    callback(null, featureIndex, featureProperties, featureBBox, featureId);
                    continue;
                }
                switch (geometry$$1.type) {
                    case 'Point':
                    case 'LineString':
                    case 'MultiPoint':
                    case 'Polygon':
                    case 'MultiLineString':
                    case 'MultiPolygon':
                        {
                            callback(geometry$$1, featureIndex, featureProperties, featureBBox, featureId);
                            break;
                        }
                    case 'GeometryCollection':
                        {
                            for (j = 0; j < geometry$$1.geometries.length; j++) {
                                callback(geometry$$1.geometries[j], featureIndex, featureProperties, featureBBox, featureId);
                            }
                            break;
                        }
                    default:
                        throw new Error('Unknown Geometry Type');
                }
            }
            // Only increase `featureIndex` per each feature
            featureIndex++;
        }
    }

    /**
     * Callback for geomReduce
     *
     * The first time the callback function is called, the values provided as arguments depend
     * on whether the reduce method has an initialValue argument.
     *
     * If an initialValue is provided to the reduce method:
     *  - The previousValue argument is initialValue.
     *  - The currentValue argument is the value of the first element present in the array.
     *
     * If an initialValue is not provided:
     *  - The previousValue argument is the value of the first element present in the array.
     *  - The currentValue argument is the value of the second element present in the array.
     *
     * @callback geomReduceCallback
     * @param {*} previousValue The accumulated value previously returned in the last invocation
     * of the callback, or initialValue, if supplied.
     * @param {Geometry} currentGeometry The current Geometry being processed.
     * @param {number} featureIndex The current index of the Feature being processed.
     * @param {Object} featureProperties The current Feature Properties being processed.
     * @param {Array<number>} featureBBox The current Feature BBox being processed.
     * @param {number|string} featureId The current Feature Id being processed.
     */

    /**
     * Reduce geometry in any GeoJSON object, similar to Array.reduce().
     *
     * @name geomReduce
     * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
     * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
     * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
     * @returns {*} The value that results from the reduction.
     * @example
     * var features = turf.featureCollection([
     *     turf.point([26, 37], {foo: 'bar'}),
     *     turf.point([36, 53], {hello: 'world'})
     * ]);
     *
     * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
     *   //=previousValue
     *   //=currentGeometry
     *   //=featureIndex
     *   //=featureProperties
     *   //=featureBBox
     *   //=featureId
     *   return currentGeometry
     * });
     */
    function geomReduce(geojson, callback, initialValue) {
        var previousValue = initialValue;
        geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
            if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
        });
        return previousValue;
    }

    /**
     * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
     *
     * @name bbox
     * @param {GeoJSON} geojson any GeoJSON object
     * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order
     * @example
     * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
     * var bbox = turf.bbox(line);
     * var bboxPolygon = turf.bboxPolygon(bbox);
     *
     * //addToMap
     * var addToMap = [line, bboxPolygon]
     */
    function bbox(geojson) {
        var BBox = [Infinity, Infinity, -Infinity, -Infinity];
        coordEach(geojson, function (coord) {
            if (BBox[0] > coord[0]) BBox[0] = coord[0];
            if (BBox[1] > coord[1]) BBox[1] = coord[1];
            if (BBox[2] < coord[0]) BBox[2] = coord[0];
            if (BBox[3] < coord[1]) BBox[3] = coord[1];
        });
        return BBox;
    }

    /**
     * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.
     *
     * @name getCoord
     * @param {Array<number>|Geometry<Point>|Feature<Point>} obj Object
     * @returns {Array<number>} coordinates
     * @example
     * var pt = turf.point([10, 10]);
     *
     * var coord = turf.getCoord(pt);
     * //= [10, 10]
     */
    function getCoord(obj) {
        if (!obj) throw new Error('obj is required');

        var coordinates = getCoords(obj);

        // getCoord() must contain at least two numbers (Point)
        if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {
            return coordinates;
        } else {
            throw new Error('Coordinate is not a valid Point');
        }
    }

    /**
     * Unwrap coordinates from a Feature, Geometry Object or an Array of numbers
     *
     * @name getCoords
     * @param {Array<number>|Geometry|Feature} obj Object
     * @returns {Array<number>} coordinates
     * @example
     * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);
     *
     * var coord = turf.getCoords(poly);
     * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]
     */
    function getCoords(obj) {
        if (!obj) throw new Error('obj is required');
        var coordinates;

        // Array of numbers
        if (obj.length) {
            coordinates = obj;

            // Geometry Object
        } else if (obj.coordinates) {
            coordinates = obj.coordinates;

            // Feature
        } else if (obj.geometry && obj.geometry.coordinates) {
            coordinates = obj.geometry.coordinates;
        }
        // Checks if coordinates contains a number
        if (coordinates) {
            containsNumber(coordinates);
            return coordinates;
        }
        throw new Error('No valid coordinates');
    }

    /**
     * Checks if coordinates contains a number
     *
     * @name containsNumber
     * @param {Array<any>} coordinates GeoJSON Coordinates
     * @returns {boolean} true if Array contains a number
     */
    function containsNumber(coordinates) {
        if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {
            return true;
        }

        if (Array.isArray(coordinates[0]) && coordinates[0].length) {
            return containsNumber(coordinates[0]);
        }
        throw new Error('coordinates must only contain numbers');
    }

    /**
     * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.
     * Internally this uses {@link geojsonType} to judge geometry types.
     *
     * @name collectionOf
     * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged
     * @param {string} type expected GeoJSON type
     * @param {string} name name of calling function
     * @throws {Error} if value is not the expected type.
     */
    function collectionOf(featureCollection$$1, type, name) {
        if (!featureCollection$$1) throw new Error('No featureCollection passed');
        if (!name) throw new Error('.collectionOf() requires a name');
        if (!featureCollection$$1 || featureCollection$$1.type !== 'FeatureCollection') {
            throw new Error('Invalid input to ' + name + ', FeatureCollection required');
        }
        for (var i = 0; i < featureCollection$$1.features.length; i++) {
            var feature$$1 = featureCollection$$1.features[i];
            if (!feature$$1 || feature$$1.type !== 'Feature' || !feature$$1.geometry) {
                throw new Error('Invalid input to ' + name + ', Feature with geometry required');
            }
            if (!feature$$1.geometry || feature$$1.geometry.type !== type) {
                throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature$$1.geometry.type);
            }
        }
    }

    /**
     * Get Geometry from Feature or Geometry Object
     *
     * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object
     * @returns {Geometry|null} GeoJSON Geometry Object
     * @throws {Error} if geojson is not a Feature or Geometry Object
     * @example
     * var point = {
     *   "type": "Feature",
     *   "properties": {},
     *   "geometry": {
     *     "type": "Point",
     *     "coordinates": [110, 40]
     *   }
     * }
     * var geom = turf.getGeom(point)
     * //={"type": "Point", "coordinates": [110, 40]}
     */
    function getGeom(geojson) {
        if (!geojson) throw new Error('geojson is required');
        if (geojson.geometry !== undefined) return geojson.geometry;
        if (geojson.coordinates || geojson.geometries) return geojson;
        throw new Error('geojson must be a valid Feature or Geometry Object');
    }

    /**
     * Get GeoJSON object's type, Geometry type is prioritize.
     *
     * @param {GeoJSON} geojson GeoJSON object
     * @param {string} [name] name of the variable to display in error message
     * @returns {string} GeoJSON type
     * @example
     * var point = {
     *   "type": "Feature",
     *   "properties": {},
     *   "geometry": {
     *     "type": "Point",
     *     "coordinates": [110, 40]
     *   }
     * }
     * var geom = turf.getType(point)
     * //="Point"
     */
    function getType(geojson, name) {
        if (!geojson) throw new Error((name || 'geojson') + ' is required');
        // GeoJSON Feature & GeometryCollection
        if (geojson.geometry && geojson.geometry.type) return geojson.geometry.type;
        // GeoJSON Geometry & FeatureCollection
        if (geojson.type) return geojson.type;
        throw new Error((name || 'geojson') + ' is invalid');
    }

    //http://en.wikipedia.org/wiki/Haversine_formula
    //http://www.movable-type.co.uk/scripts/latlong.html

    /**
     * Calculates the distance between two {@link Point|points} in degrees, radians,
     * miles, or kilometers. This uses the
     * [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula)
     * to account for global curvature.
     *
     * @name distance
     * @param {Coord} from origin point
     * @param {Coord} to destination point
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
     * @returns {number} distance between the two points
     * @example
     * var from = turf.point([-75.343, 39.984]);
     * var to = turf.point([-75.534, 39.123]);
     * var options = {units: 'miles'};
     *
     * var distance = turf.distance(from, to, options);
     *
     * //addToMap
     * var addToMap = [from, to];
     * from.properties.distance = distance;
     * to.properties.distance = distance;
     */
    function distance(from, to, options) {
      // Optional parameters
      options = options || {};
      if (!isObject(options)) throw new Error('options is invalid');
      var units = options.units;

      var coordinates1 = getCoord(from);
      var coordinates2 = getCoord(to);
      var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);
      var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);
      var lat1 = degreesToRadians(coordinates1[1]);
      var lat2 = degreesToRadians(coordinates2[1]);

      var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);

      return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), units);
    }

    /* Polyfill service v3.13.0
     * For detailed credits and licence information see http://github.com/financial-times/polyfill-service
     *
     * - Array.prototype.fill, License: CC0 */if(!('fill'in Array.prototype)){Object.defineProperty(Array.prototype,'fill',{configurable:true,value:function fill(value){if(this===undefined||this===null){throw new TypeError(this+' is not an object');}var arrayLike=Object(this);var length=Math.max(Math.min(arrayLike.length,9007199254740991),0)||0;var relativeStart=1 in arguments?parseInt(Number(arguments[1]),10)||0:0;relativeStart=relativeStart<0?Math.max(length+relativeStart,0):Math.min(relativeStart,length);var relativeEnd=2 in arguments&&arguments[2]!==undefined?parseInt(Number(arguments[2]),10)||0:length;relativeEnd=relativeEnd<0?Math.max(length+arguments[2],0):Math.min(relativeEnd,length);while(relativeStart<relativeEnd){arrayLike[relativeStart]=value;++relativeStart;}return arrayLike;},writable:true});}/**
     * Polyfill for IE support
     */Number.isFinite=Number.isFinite||function(value){return typeof value==='number'&&isFinite(value);};Number.isInteger=Number.isInteger||function(val){return typeof val==='number'&&isFinite(val)&&Math.floor(val)===val;};Number.parseFloat=Number.parseFloat||parseFloat;Number.isNaN=Number.isNaN||function(value){return value!==value;// eslint-disable-line
    };/**
     * Polyfill for IE support
     */Math.trunc=Math.trunc||function(x){return x<0?Math.ceil(x):Math.floor(x);};var NumberUtil=function NumberUtil(){};NumberUtil.prototype.interfaces_=function interfaces_(){return [];};NumberUtil.prototype.getClass=function getClass(){return NumberUtil;};NumberUtil.prototype.equalsWithTolerance=function equalsWithTolerance(x1,x2,tolerance){return Math.abs(x1-x2)<=tolerance;};var IllegalArgumentException=function(Error){function IllegalArgumentException(message){Error.call(this,message);this.name='IllegalArgumentException';this.message=message;this.stack=new Error().stack;}if(Error)IllegalArgumentException.__proto__=Error;IllegalArgumentException.prototype=Object.create(Error&&Error.prototype);IllegalArgumentException.prototype.constructor=IllegalArgumentException;return IllegalArgumentException;}(Error);var Double=function Double(){};var staticAccessors$1={MAX_VALUE:{configurable:true}};Double.isNaN=function isNaN(n){return Number.isNaN(n);};Double.doubleToLongBits=function doubleToLongBits(n){return n;};Double.longBitsToDouble=function longBitsToDouble(n){return n;};Double.isInfinite=function isInfinite(n){return !Number.isFinite(n);};staticAccessors$1.MAX_VALUE.get=function(){return Number.MAX_VALUE;};Object.defineProperties(Double,staticAccessors$1);var Comparable=function Comparable(){};var Clonable=function Clonable(){};var Comparator=function Comparator(){};function Serializable(){}// import Assert from '../util/Assert'
    var Coordinate=function Coordinate(){this.x=null;this.y=null;this.z=null;if(arguments.length===0){this.x=0.0;this.y=0.0;this.z=Coordinate.NULL_ORDINATE;}else if(arguments.length===1){var c=arguments[0];this.x=c.x;this.y=c.y;this.z=c.z;}else if(arguments.length===2){this.x=arguments[0];this.y=arguments[1];this.z=Coordinate.NULL_ORDINATE;}else if(arguments.length===3){this.x=arguments[0];this.y=arguments[1];this.z=arguments[2];}};var staticAccessors={DimensionalComparator:{configurable:true},serialVersionUID:{configurable:true},NULL_ORDINATE:{configurable:true},X:{configurable:true},Y:{configurable:true},Z:{configurable:true}};Coordinate.prototype.setOrdinate=function setOrdinate(ordinateIndex,value){switch(ordinateIndex){case Coordinate.X:this.x=value;break;case Coordinate.Y:this.y=value;break;case Coordinate.Z:this.z=value;break;default:throw new IllegalArgumentException('Invalid ordinate index: '+ordinateIndex);}};Coordinate.prototype.equals2D=function equals2D(){if(arguments.length===1){var other=arguments[0];if(this.x!==other.x){return false;}if(this.y!==other.y){return false;}return true;}else if(arguments.length===2){var c=arguments[0];var tolerance=arguments[1];if(!NumberUtil.equalsWithTolerance(this.x,c.x,tolerance)){return false;}if(!NumberUtil.equalsWithTolerance(this.y,c.y,tolerance)){return false;}return true;}};Coordinate.prototype.getOrdinate=function getOrdinate(ordinateIndex){switch(ordinateIndex){case Coordinate.X:return this.x;case Coordinate.Y:return this.y;case Coordinate.Z:return this.z;default:}throw new IllegalArgumentException('Invalid ordinate index: '+ordinateIndex);};Coordinate.prototype.equals3D=function equals3D(other){return this.x===other.x&&this.y===other.y&&(this.z===other.z||Double.isNaN(this.z))&&Double.isNaN(other.z);};Coordinate.prototype.equals=function equals(other){if(!(other instanceof Coordinate)){return false;}return this.equals2D(other);};Coordinate.prototype.equalInZ=function equalInZ(c,tolerance){return NumberUtil.equalsWithTolerance(this.z,c.z,tolerance);};Coordinate.prototype.compareTo=function compareTo(o){var other=o;if(this.x<other.x){return -1;}if(this.x>other.x){return 1;}if(this.y<other.y){return -1;}if(this.y>other.y){return 1;}return 0;};Coordinate.prototype.clone=function clone(){// try {
    // var coord = null
    // return coord
    // } catch (e) {
    // if (e instanceof CloneNotSupportedException) {
    //   Assert.shouldNeverReachHere("this shouldn't happen because this class is Cloneable")
    //   return null
    // } else throw e
    // } finally {}
    };Coordinate.prototype.copy=function copy(){return new Coordinate(this);};Coordinate.prototype.toString=function toString(){return '('+this.x+', '+this.y+', '+this.z+')';};Coordinate.prototype.distance3D=function distance3D(c){var dx=this.x-c.x;var dy=this.y-c.y;var dz=this.z-c.z;return Math.sqrt(dx*dx+dy*dy+dz*dz);};Coordinate.prototype.distance=function distance(c){var dx=this.x-c.x;var dy=this.y-c.y;return Math.sqrt(dx*dx+dy*dy);};Coordinate.prototype.hashCode=function hashCode(){var result=17;result=37*result+Coordinate.hashCode(this.x);result=37*result+Coordinate.hashCode(this.y);return result;};Coordinate.prototype.setCoordinate=function setCoordinate(other){this.x=other.x;this.y=other.y;this.z=other.z;};Coordinate.prototype.interfaces_=function interfaces_(){return [Comparable,Clonable,Serializable];};Coordinate.prototype.getClass=function getClass(){return Coordinate;};Coordinate.hashCode=function hashCode(){if(arguments.length===1){var x=arguments[0];var f=Double.doubleToLongBits(x);return Math.trunc((f^f)>>>32);}};staticAccessors.DimensionalComparator.get=function(){return DimensionalComparator;};staticAccessors.serialVersionUID.get=function(){return 6683108902428366910;};staticAccessors.NULL_ORDINATE.get=function(){return Double.NaN;};staticAccessors.X.get=function(){return 0;};staticAccessors.Y.get=function(){return 1;};staticAccessors.Z.get=function(){return 2;};Object.defineProperties(Coordinate,staticAccessors);var DimensionalComparator=function DimensionalComparator(dimensionsToTest){this._dimensionsToTest=2;if(arguments.length===0);else if(arguments.length===1){var dimensionsToTest$1=arguments[0];if(dimensionsToTest$1!==2&&dimensionsToTest$1!==3){throw new IllegalArgumentException('only 2 or 3 dimensions may be specified');}this._dimensionsToTest=dimensionsToTest$1;}};DimensionalComparator.prototype.compare=function compare(o1,o2){var c1=o1;var c2=o2;var compX=DimensionalComparator.compare(c1.x,c2.x);if(compX!==0){return compX;}var compY=DimensionalComparator.compare(c1.y,c2.y);if(compY!==0){return compY;}if(this._dimensionsToTest<=2){return 0;}var compZ=DimensionalComparator.compare(c1.z,c2.z);return compZ;};DimensionalComparator.prototype.interfaces_=function interfaces_(){return [Comparator];};DimensionalComparator.prototype.getClass=function getClass(){return DimensionalComparator;};DimensionalComparator.compare=function compare(a,b){if(a<b){return -1;}if(a>b){return 1;}if(Double.isNaN(a)){if(Double.isNaN(b)){return 0;}return -1;}if(Double.isNaN(b)){return 1;}return 0;};// import hasInterface from '../../../../hasInterface'
    // import CoordinateSequence from './CoordinateSequence'
    var CoordinateSequenceFactory=function CoordinateSequenceFactory(){};CoordinateSequenceFactory.prototype.create=function create(){// if (arguments.length === 1) {
    // if (arguments[0] instanceof Array) {
    //   let coordinates = arguments[0]
    // } else if (hasInterface(arguments[0], CoordinateSequence)) {
    //   let coordSeq = arguments[0]
    // }
    // } else if (arguments.length === 2) {
    // let size = arguments[0]
    // let dimension = arguments[1]
    // }
    };CoordinateSequenceFactory.prototype.interfaces_=function interfaces_(){return [];};CoordinateSequenceFactory.prototype.getClass=function getClass(){return CoordinateSequenceFactory;};var Location=function Location(){};var staticAccessors$4={INTERIOR:{configurable:true},BOUNDARY:{configurable:true},EXTERIOR:{configurable:true},NONE:{configurable:true}};Location.prototype.interfaces_=function interfaces_(){return [];};Location.prototype.getClass=function getClass(){return Location;};Location.toLocationSymbol=function toLocationSymbol(locationValue){switch(locationValue){case Location.EXTERIOR:return 'e';case Location.BOUNDARY:return 'b';case Location.INTERIOR:return 'i';case Location.NONE:return '-';default:}throw new IllegalArgumentException('Unknown location value: '+locationValue);};staticAccessors$4.INTERIOR.get=function(){return 0;};staticAccessors$4.BOUNDARY.get=function(){return 1;};staticAccessors$4.EXTERIOR.get=function(){return 2;};staticAccessors$4.NONE.get=function(){return -1;};Object.defineProperties(Location,staticAccessors$4);var hasInterface=function hasInterface(o,i){return o.interfaces_&&o.interfaces_().indexOf(i)>-1;};var MathUtil=function MathUtil(){};var staticAccessors$5={LOG_10:{configurable:true}};MathUtil.prototype.interfaces_=function interfaces_(){return [];};MathUtil.prototype.getClass=function getClass(){return MathUtil;};MathUtil.log10=function log10(x){var ln=Math.log(x);if(Double.isInfinite(ln)){return ln;}if(Double.isNaN(ln)){return ln;}return ln/MathUtil.LOG_10;};MathUtil.min=function min(v1,v2,v3,v4){var min=v1;if(v2<min){min=v2;}if(v3<min){min=v3;}if(v4<min){min=v4;}return min;};MathUtil.clamp=function clamp(){if(typeof arguments[2]==='number'&&typeof arguments[0]==='number'&&typeof arguments[1]==='number'){var x=arguments[0];var min=arguments[1];var max=arguments[2];if(x<min){return min;}if(x>max){return max;}return x;}else if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var x$1=arguments[0];var min$1=arguments[1];var max$1=arguments[2];if(x$1<min$1){return min$1;}if(x$1>max$1){return max$1;}return x$1;}};MathUtil.wrap=function wrap(index,max){if(index<0){return max- -index%max;}return index%max;};MathUtil.max=function max(){if(arguments.length===3){var v1=arguments[0];var v2=arguments[1];var v3=arguments[2];var max=v1;if(v2>max){max=v2;}if(v3>max){max=v3;}return max;}else if(arguments.length===4){var v1$1=arguments[0];var v2$1=arguments[1];var v3$1=arguments[2];var v4=arguments[3];var max$1=v1$1;if(v2$1>max$1){max$1=v2$1;}if(v3$1>max$1){max$1=v3$1;}if(v4>max$1){max$1=v4;}return max$1;}};MathUtil.average=function average(x1,x2){return (x1+x2)/2.0;};staticAccessors$5.LOG_10.get=function(){return Math.log(10);};Object.defineProperties(MathUtil,staticAccessors$5);var StringBuffer=function StringBuffer(str){this.str=str;};StringBuffer.prototype.append=function append(e){this.str+=e;};StringBuffer.prototype.setCharAt=function setCharAt(i,c){this.str=this.str.substr(0,i)+c+this.str.substr(i+1);};StringBuffer.prototype.toString=function toString(e){return this.str;};var Integer=function Integer(value){this.value=value;};Integer.prototype.intValue=function intValue(){return this.value;};Integer.prototype.compareTo=function compareTo(o){if(this.value<o){return -1;}if(this.value>o){return 1;}return 0;};Integer.isNaN=function isNaN(n){return Number.isNaN(n);};var Character=function Character(){};Character.isWhitespace=function isWhitespace(c){return c<=32&&c>=0||c===127;};Character.toUpperCase=function toUpperCase(c){return c.toUpperCase();};var DD=function DD(){this._hi=0.0;this._lo=0.0;if(arguments.length===0){this.init(0.0);}else if(arguments.length===1){if(typeof arguments[0]==='number'){var x=arguments[0];this.init(x);}else if(arguments[0]instanceof DD){var dd=arguments[0];this.init(dd);}else if(typeof arguments[0]==='string'){var str=arguments[0];DD.call(this,DD.parse(str));}}else if(arguments.length===2){var hi=arguments[0];var lo=arguments[1];this.init(hi,lo);}};var staticAccessors$7={PI:{configurable:true},TWO_PI:{configurable:true},PI_2:{configurable:true},E:{configurable:true},NaN:{configurable:true},EPS:{configurable:true},SPLIT:{configurable:true},MAX_PRINT_DIGITS:{configurable:true},TEN:{configurable:true},ONE:{configurable:true},SCI_NOT_EXPONENT_CHAR:{configurable:true},SCI_NOT_ZERO:{configurable:true}};DD.prototype.le=function le(y){return (this._hi<y._hi||this._hi===y._hi)&&this._lo<=y._lo;};DD.prototype.extractSignificantDigits=function extractSignificantDigits(insertDecimalPoint,magnitude){var y=this.abs();var mag=DD.magnitude(y._hi);var scale=DD.TEN.pow(mag);y=y.divide(scale);if(y.gt(DD.TEN)){y=y.divide(DD.TEN);mag+=1;}else if(y.lt(DD.ONE)){y=y.multiply(DD.TEN);mag-=1;}var decimalPointPos=mag+1;var buf=new StringBuffer();var numDigits=DD.MAX_PRINT_DIGITS-1;for(var i=0;i<=numDigits;i++){if(insertDecimalPoint&&i===decimalPointPos){buf.append('.');}var digit=Math.trunc(y._hi);if(digit<0){break;}var rebiasBy10=false;var digitChar=0;if(digit>9){rebiasBy10=true;digitChar='9';}else{digitChar='0'+digit;}buf.append(digitChar);y=y.subtract(DD.valueOf(digit)).multiply(DD.TEN);if(rebiasBy10){y.selfAdd(DD.TEN);}var continueExtractingDigits=true;var remMag=DD.magnitude(y._hi);if(remMag<0&&Math.abs(remMag)>=numDigits-i){continueExtractingDigits=false;}if(!continueExtractingDigits){break;}}magnitude[0]=mag;return buf.toString();};DD.prototype.sqr=function sqr(){return this.multiply(this);};DD.prototype.doubleValue=function doubleValue(){return this._hi+this._lo;};DD.prototype.subtract=function subtract(){if(arguments[0]instanceof DD){var y=arguments[0];return this.add(y.negate());}else if(typeof arguments[0]==='number'){var y$1=arguments[0];return this.add(-y$1);}};DD.prototype.equals=function equals(){if(arguments.length===1){var y=arguments[0];return this._hi===y._hi&&this._lo===y._lo;}};DD.prototype.isZero=function isZero(){return this._hi===0.0&&this._lo===0.0;};DD.prototype.selfSubtract=function selfSubtract(){if(arguments[0]instanceof DD){var y=arguments[0];if(this.isNaN()){return this;}return this.selfAdd(-y._hi,-y._lo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];if(this.isNaN()){return this;}return this.selfAdd(-y$1,0.0);}};DD.prototype.getSpecialNumberString=function getSpecialNumberString(){if(this.isZero()){return '0.0';}if(this.isNaN()){return 'NaN ';}return null;};DD.prototype.min=function min(x){if(this.le(x)){return this;}else{return x;}};DD.prototype.selfDivide=function selfDivide(){if(arguments.length===1){if(arguments[0]instanceof DD){var y=arguments[0];return this.selfDivide(y._hi,y._lo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];return this.selfDivide(y$1,0.0);}}else if(arguments.length===2){var yhi=arguments[0];var ylo=arguments[1];var hc=null;var tc=null;var hy=null;var ty=null;var C=null;var c=null;var U=null;var u=null;C=this._hi/yhi;c=DD.SPLIT*C;hc=c-C;u=DD.SPLIT*yhi;hc=c-hc;tc=C-hc;hy=u-yhi;U=C*yhi;hy=u-hy;ty=yhi-hy;u=hc*hy-U+hc*ty+tc*hy+tc*ty;c=(this._hi-U-u+this._lo-C*ylo)/yhi;u=C+c;this._hi=u;this._lo=C-u+c;return this;}};DD.prototype.dump=function dump(){return 'DD<'+this._hi+', '+this._lo+'>';};DD.prototype.divide=function divide(){if(arguments[0]instanceof DD){var y=arguments[0];var hc=null;var tc=null;var hy=null;var ty=null;var C=null;var c=null;var U=null;var u=null;C=this._hi/y._hi;c=DD.SPLIT*C;hc=c-C;u=DD.SPLIT*y._hi;hc=c-hc;tc=C-hc;hy=u-y._hi;U=C*y._hi;hy=u-hy;ty=y._hi-hy;u=hc*hy-U+hc*ty+tc*hy+tc*ty;c=(this._hi-U-u+this._lo-C*y._lo)/y._hi;u=C+c;var zhi=u;var zlo=C-u+c;return new DD(zhi,zlo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];if(Double.isNaN(y$1)){return DD.createNaN();}return DD.copy(this).selfDivide(y$1,0.0);}};DD.prototype.ge=function ge(y){return (this._hi>y._hi||this._hi===y._hi)&&this._lo>=y._lo;};DD.prototype.pow=function pow(exp){if(exp===0.0){return DD.valueOf(1.0);}var r=new DD(this);var s=DD.valueOf(1.0);var n=Math.abs(exp);if(n>1){while(n>0){if(n%2===1){s.selfMultiply(r);}n/=2;if(n>0){r=r.sqr();}}}else{s=r;}if(exp<0){return s.reciprocal();}return s;};DD.prototype.ceil=function ceil(){if(this.isNaN()){return DD.NaN;}var fhi=Math.ceil(this._hi);var flo=0.0;if(fhi===this._hi){flo=Math.ceil(this._lo);}return new DD(fhi,flo);};DD.prototype.compareTo=function compareTo(o){var other=o;if(this._hi<other._hi){return -1;}if(this._hi>other._hi){return 1;}if(this._lo<other._lo){return -1;}if(this._lo>other._lo){return 1;}return 0;};DD.prototype.rint=function rint(){if(this.isNaN()){return this;}var plus5=this.add(0.5);return plus5.floor();};DD.prototype.setValue=function setValue(){if(arguments[0]instanceof DD){var value=arguments[0];this.init(value);return this;}else if(typeof arguments[0]==='number'){var value$1=arguments[0];this.init(value$1);return this;}};DD.prototype.max=function max(x){if(this.ge(x)){return this;}else{return x;}};DD.prototype.sqrt=function sqrt(){if(this.isZero()){return DD.valueOf(0.0);}if(this.isNegative()){return DD.NaN;}var x=1.0/Math.sqrt(this._hi);var ax=this._hi*x;var axdd=DD.valueOf(ax);var diffSq=this.subtract(axdd.sqr());var d2=diffSq._hi*(x*0.5);return axdd.add(d2);};DD.prototype.selfAdd=function selfAdd(){if(arguments.length===1){if(arguments[0]instanceof DD){var y=arguments[0];return this.selfAdd(y._hi,y._lo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];var H=null;var h=null;var S=null;var s=null;var e=null;var f=null;S=this._hi+y$1;e=S-this._hi;s=S-e;s=y$1-e+(this._hi-s);f=s+this._lo;H=S+f;h=f+(S-H);this._hi=H+h;this._lo=h+(H-this._hi);return this;}}else if(arguments.length===2){var yhi=arguments[0];var ylo=arguments[1];var H$1=null;var h$1=null;var T=null;var t=null;var S$1=null;var s$1=null;var e$1=null;var f$1=null;S$1=this._hi+yhi;T=this._lo+ylo;e$1=S$1-this._hi;f$1=T-this._lo;s$1=S$1-e$1;t=T-f$1;s$1=yhi-e$1+(this._hi-s$1);t=ylo-f$1+(this._lo-t);e$1=s$1+T;H$1=S$1+e$1;h$1=e$1+(S$1-H$1);e$1=t+h$1;var zhi=H$1+e$1;var zlo=e$1+(H$1-zhi);this._hi=zhi;this._lo=zlo;return this;}};DD.prototype.selfMultiply=function selfMultiply(){if(arguments.length===1){if(arguments[0]instanceof DD){var y=arguments[0];return this.selfMultiply(y._hi,y._lo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];return this.selfMultiply(y$1,0.0);}}else if(arguments.length===2){var yhi=arguments[0];var ylo=arguments[1];var hx=null;var tx=null;var hy=null;var ty=null;var C=null;var c=null;C=DD.SPLIT*this._hi;hx=C-this._hi;c=DD.SPLIT*yhi;hx=C-hx;tx=this._hi-hx;hy=c-yhi;C=this._hi*yhi;hy=c-hy;ty=yhi-hy;c=hx*hy-C+hx*ty+tx*hy+tx*ty+(this._hi*ylo+this._lo*yhi);var zhi=C+c;hx=C-zhi;var zlo=c+hx;this._hi=zhi;this._lo=zlo;return this;}};DD.prototype.selfSqr=function selfSqr(){return this.selfMultiply(this);};DD.prototype.floor=function floor(){if(this.isNaN()){return DD.NaN;}var fhi=Math.floor(this._hi);var flo=0.0;if(fhi===this._hi){flo=Math.floor(this._lo);}return new DD(fhi,flo);};DD.prototype.negate=function negate(){if(this.isNaN()){return this;}return new DD(-this._hi,-this._lo);};DD.prototype.clone=function clone(){// try {
    // return null
    // } catch (ex) {
    // if (ex instanceof CloneNotSupportedException) {
    //   return null
    // } else throw ex
    // } finally {}
    };DD.prototype.multiply=function multiply(){if(arguments[0]instanceof DD){var y=arguments[0];if(y.isNaN()){return DD.createNaN();}return DD.copy(this).selfMultiply(y);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];if(Double.isNaN(y$1)){return DD.createNaN();}return DD.copy(this).selfMultiply(y$1,0.0);}};DD.prototype.isNaN=function isNaN(){return Double.isNaN(this._hi);};DD.prototype.intValue=function intValue(){return Math.trunc(this._hi);};DD.prototype.toString=function toString(){var mag=DD.magnitude(this._hi);if(mag>=-3&&mag<=20){return this.toStandardNotation();}return this.toSciNotation();};DD.prototype.toStandardNotation=function toStandardNotation(){var specialStr=this.getSpecialNumberString();if(specialStr!==null){return specialStr;}var magnitude=new Array(1).fill(null);var sigDigits=this.extractSignificantDigits(true,magnitude);var decimalPointPos=magnitude[0]+1;var num=sigDigits;if(sigDigits.charAt(0)==='.'){num='0'+sigDigits;}else if(decimalPointPos<0){num='0.'+DD.stringOfChar('0',-decimalPointPos)+sigDigits;}else if(sigDigits.indexOf('.')===-1){var numZeroes=decimalPointPos-sigDigits.length;var zeroes=DD.stringOfChar('0',numZeroes);num=sigDigits+zeroes+'.0';}if(this.isNegative()){return '-'+num;}return num;};DD.prototype.reciprocal=function reciprocal(){var hc=null;var tc=null;var hy=null;var ty=null;var C=null;var c=null;var U=null;var u=null;C=1.0/this._hi;c=DD.SPLIT*C;hc=c-C;u=DD.SPLIT*this._hi;hc=c-hc;tc=C-hc;hy=u-this._hi;U=C*this._hi;hy=u-hy;ty=this._hi-hy;u=hc*hy-U+hc*ty+tc*hy+tc*ty;c=(1.0-U-u-C*this._lo)/this._hi;var zhi=C+c;var zlo=C-zhi+c;return new DD(zhi,zlo);};DD.prototype.toSciNotation=function toSciNotation(){if(this.isZero()){return DD.SCI_NOT_ZERO;}var specialStr=this.getSpecialNumberString();if(specialStr!==null){return specialStr;}var magnitude=new Array(1).fill(null);var digits=this.extractSignificantDigits(false,magnitude);var expStr=DD.SCI_NOT_EXPONENT_CHAR+magnitude[0];if(digits.charAt(0)==='0'){throw new Error('Found leading zero: '+digits);}var trailingDigits='';if(digits.length>1){trailingDigits=digits.substring(1);}var digitsWithDecimal=digits.charAt(0)+'.'+trailingDigits;if(this.isNegative()){return '-'+digitsWithDecimal+expStr;}return digitsWithDecimal+expStr;};DD.prototype.abs=function abs(){if(this.isNaN()){return DD.NaN;}if(this.isNegative()){return this.negate();}return new DD(this);};DD.prototype.isPositive=function isPositive(){return (this._hi>0.0||this._hi===0.0)&&this._lo>0.0;};DD.prototype.lt=function lt(y){return (this._hi<y._hi||this._hi===y._hi)&&this._lo<y._lo;};DD.prototype.add=function add(){if(arguments[0]instanceof DD){var y=arguments[0];return DD.copy(this).selfAdd(y);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];return DD.copy(this).selfAdd(y$1);}};DD.prototype.init=function init(){if(arguments.length===1){if(typeof arguments[0]==='number'){var x=arguments[0];this._hi=x;this._lo=0.0;}else if(arguments[0]instanceof DD){var dd=arguments[0];this._hi=dd._hi;this._lo=dd._lo;}}else if(arguments.length===2){var hi=arguments[0];var lo=arguments[1];this._hi=hi;this._lo=lo;}};DD.prototype.gt=function gt(y){return (this._hi>y._hi||this._hi===y._hi)&&this._lo>y._lo;};DD.prototype.isNegative=function isNegative(){return (this._hi<0.0||this._hi===0.0)&&this._lo<0.0;};DD.prototype.trunc=function trunc(){if(this.isNaN()){return DD.NaN;}if(this.isPositive()){return this.floor();}else{return this.ceil();}};DD.prototype.signum=function signum(){if(this._hi>0){return 1;}if(this._hi<0){return -1;}if(this._lo>0){return 1;}if(this._lo<0){return -1;}return 0;};DD.prototype.interfaces_=function interfaces_(){return [Serializable,Comparable,Clonable];};DD.prototype.getClass=function getClass(){return DD;};DD.sqr=function sqr(x){return DD.valueOf(x).selfMultiply(x);};DD.valueOf=function valueOf(){if(typeof arguments[0]==='string'){var str=arguments[0];return DD.parse(str);}else if(typeof arguments[0]==='number'){var x=arguments[0];return new DD(x);}};DD.sqrt=function sqrt(x){return DD.valueOf(x).sqrt();};DD.parse=function parse(str){var i=0;var strlen=str.length;while(Character.isWhitespace(str.charAt(i))){i++;}var isNegative=false;if(i<strlen){var signCh=str.charAt(i);if(signCh==='-'||signCh==='+'){i++;if(signCh==='-'){isNegative=true;}}}var val=new DD();var numDigits=0;var numBeforeDec=0;var exp=0;while(true){if(i>=strlen){break;}var ch=str.charAt(i);i++;if(Character.isDigit(ch)){var d=ch-'0';val.selfMultiply(DD.TEN);val.selfAdd(d);numDigits++;continue;}if(ch==='.'){numBeforeDec=numDigits;continue;}if(ch==='e'||ch==='E'){var expStr=str.substring(i);try{exp=Integer.parseInt(expStr);}catch(ex){if(ex instanceof Error){throw new Error('Invalid exponent '+expStr+' in string '+str);}else{throw ex;}}finally{}break;}throw new Error("Unexpected character '"+ch+"' at position "+i+' in string '+str);}var val2=val;var numDecPlaces=numDigits-numBeforeDec-exp;if(numDecPlaces===0){val2=val;}else if(numDecPlaces>0){var scale=DD.TEN.pow(numDecPlaces);val2=val.divide(scale);}else if(numDecPlaces<0){var scale$1=DD.TEN.pow(-numDecPlaces);val2=val.multiply(scale$1);}if(isNegative){return val2.negate();}return val2;};DD.createNaN=function createNaN(){return new DD(Double.NaN,Double.NaN);};DD.copy=function copy(dd){return new DD(dd);};DD.magnitude=function magnitude(x){var xAbs=Math.abs(x);var xLog10=Math.log(xAbs)/Math.log(10);var xMag=Math.trunc(Math.floor(xLog10));var xApprox=Math.pow(10,xMag);if(xApprox*10<=xAbs){xMag+=1;}return xMag;};DD.stringOfChar=function stringOfChar(ch,len){var buf=new StringBuffer();for(var i=0;i<len;i++){buf.append(ch);}return buf.toString();};staticAccessors$7.PI.get=function(){return new DD(3.141592653589793116e+00,1.224646799147353207e-16);};staticAccessors$7.TWO_PI.get=function(){return new DD(6.283185307179586232e+00,2.449293598294706414e-16);};staticAccessors$7.PI_2.get=function(){return new DD(1.570796326794896558e+00,6.123233995736766036e-17);};staticAccessors$7.E.get=function(){return new DD(2.718281828459045091e+00,1.445646891729250158e-16);};staticAccessors$7.NaN.get=function(){return new DD(Double.NaN,Double.NaN);};staticAccessors$7.EPS.get=function(){return 1.23259516440783e-32;};staticAccessors$7.SPLIT.get=function(){return 134217729.0;};staticAccessors$7.MAX_PRINT_DIGITS.get=function(){return 32;};staticAccessors$7.TEN.get=function(){return DD.valueOf(10.0);};staticAccessors$7.ONE.get=function(){return DD.valueOf(1.0);};staticAccessors$7.SCI_NOT_EXPONENT_CHAR.get=function(){return 'E';};staticAccessors$7.SCI_NOT_ZERO.get=function(){return '0.0E0';};Object.defineProperties(DD,staticAccessors$7);var CGAlgorithmsDD=function CGAlgorithmsDD(){};var staticAccessors$6={DP_SAFE_EPSILON:{configurable:true}};CGAlgorithmsDD.prototype.interfaces_=function interfaces_(){return [];};CGAlgorithmsDD.prototype.getClass=function getClass(){return CGAlgorithmsDD;};CGAlgorithmsDD.orientationIndex=function orientationIndex(p1,p2,q){var index=CGAlgorithmsDD.orientationIndexFilter(p1,p2,q);if(index<=1){return index;}var dx1=DD.valueOf(p2.x).selfAdd(-p1.x);var dy1=DD.valueOf(p2.y).selfAdd(-p1.y);var dx2=DD.valueOf(q.x).selfAdd(-p2.x);var dy2=DD.valueOf(q.y).selfAdd(-p2.y);return dx1.selfMultiply(dy2).selfSubtract(dy1.selfMultiply(dx2)).signum();};CGAlgorithmsDD.signOfDet2x2=function signOfDet2x2(x1,y1,x2,y2){var det=x1.multiply(y2).selfSubtract(y1.multiply(x2));return det.signum();};CGAlgorithmsDD.intersection=function intersection(p1,p2,q1,q2){var denom1=DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(DD.valueOf(p2.x).selfSubtract(p1.x));var denom2=DD.valueOf(q2.x).selfSubtract(q1.x).selfMultiply(DD.valueOf(p2.y).selfSubtract(p1.y));var denom=denom1.subtract(denom2);var numx1=DD.valueOf(q2.x).selfSubtract(q1.x).selfMultiply(DD.valueOf(p1.y).selfSubtract(q1.y));var numx2=DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(DD.valueOf(p1.x).selfSubtract(q1.x));var numx=numx1.subtract(numx2);var fracP=numx.selfDivide(denom).doubleValue();var x=DD.valueOf(p1.x).selfAdd(DD.valueOf(p2.x).selfSubtract(p1.x).selfMultiply(fracP)).doubleValue();var numy1=DD.valueOf(p2.x).selfSubtract(p1.x).selfMultiply(DD.valueOf(p1.y).selfSubtract(q1.y));var numy2=DD.valueOf(p2.y).selfSubtract(p1.y).selfMultiply(DD.valueOf(p1.x).selfSubtract(q1.x));var numy=numy1.subtract(numy2);var fracQ=numy.selfDivide(denom).doubleValue();var y=DD.valueOf(q1.y).selfAdd(DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(fracQ)).doubleValue();return new Coordinate(x,y);};CGAlgorithmsDD.orientationIndexFilter=function orientationIndexFilter(pa,pb,pc){var detsum=null;var detleft=(pa.x-pc.x)*(pb.y-pc.y);var detright=(pa.y-pc.y)*(pb.x-pc.x);var det=detleft-detright;if(detleft>0.0){if(detright<=0.0){return CGAlgorithmsDD.signum(det);}else{detsum=detleft+detright;}}else if(detleft<0.0){if(detright>=0.0){return CGAlgorithmsDD.signum(det);}else{detsum=-detleft-detright;}}else{return CGAlgorithmsDD.signum(det);}var errbound=CGAlgorithmsDD.DP_SAFE_EPSILON*detsum;if(det>=errbound||-det>=errbound){return CGAlgorithmsDD.signum(det);}return 2;};CGAlgorithmsDD.signum=function signum(x){if(x>0){return 1;}if(x<0){return -1;}return 0;};staticAccessors$6.DP_SAFE_EPSILON.get=function(){return 1e-15;};Object.defineProperties(CGAlgorithmsDD,staticAccessors$6);var CoordinateSequence=function CoordinateSequence(){};var staticAccessors$8={X:{configurable:true},Y:{configurable:true},Z:{configurable:true},M:{configurable:true}};staticAccessors$8.X.get=function(){return 0;};staticAccessors$8.Y.get=function(){return 1;};staticAccessors$8.Z.get=function(){return 2;};staticAccessors$8.M.get=function(){return 3;};CoordinateSequence.prototype.setOrdinate=function setOrdinate(index,ordinateIndex,value){};CoordinateSequence.prototype.size=function size(){};CoordinateSequence.prototype.getOrdinate=function getOrdinate(index,ordinateIndex){};CoordinateSequence.prototype.getCoordinate=function getCoordinate(){};CoordinateSequence.prototype.getCoordinateCopy=function getCoordinateCopy(i){};CoordinateSequence.prototype.getDimension=function getDimension(){};CoordinateSequence.prototype.getX=function getX(index){};CoordinateSequence.prototype.clone=function clone(){};CoordinateSequence.prototype.expandEnvelope=function expandEnvelope(env){};CoordinateSequence.prototype.copy=function copy(){};CoordinateSequence.prototype.getY=function getY(index){};CoordinateSequence.prototype.toCoordinateArray=function toCoordinateArray(){};CoordinateSequence.prototype.interfaces_=function interfaces_(){return [Clonable];};CoordinateSequence.prototype.getClass=function getClass(){return CoordinateSequence;};Object.defineProperties(CoordinateSequence,staticAccessors$8);var Exception=function Exception(){};var NotRepresentableException=function(Exception$$1){function NotRepresentableException(){Exception$$1.call(this,'Projective point not representable on the Cartesian plane.');}if(Exception$$1)NotRepresentableException.__proto__=Exception$$1;NotRepresentableException.prototype=Object.create(Exception$$1&&Exception$$1.prototype);NotRepresentableException.prototype.constructor=NotRepresentableException;NotRepresentableException.prototype.interfaces_=function interfaces_(){return [];};NotRepresentableException.prototype.getClass=function getClass(){return NotRepresentableException;};return NotRepresentableException;}(Exception);var System=function System(){};System.arraycopy=function arraycopy(src,srcPos,dest,destPos,len){var c=0;for(var i=srcPos;i<srcPos+len;i++){dest[destPos+c]=src[i];c++;}};System.getProperty=function getProperty(name){return {'line.separator':'\n'}[name];};var HCoordinate=function HCoordinate(){this.x=null;this.y=null;this.w=null;if(arguments.length===0){this.x=0.0;this.y=0.0;this.w=1.0;}else if(arguments.length===1){var p=arguments[0];this.x=p.x;this.y=p.y;this.w=1.0;}else if(arguments.length===2){if(typeof arguments[0]==='number'&&typeof arguments[1]==='number'){var _x=arguments[0];var _y=arguments[1];this.x=_x;this.y=_y;this.w=1.0;}else if(arguments[0]instanceof HCoordinate&&arguments[1]instanceof HCoordinate){var p1=arguments[0];var p2=arguments[1];this.x=p1.y*p2.w-p2.y*p1.w;this.y=p2.x*p1.w-p1.x*p2.w;this.w=p1.x*p2.y-p2.x*p1.y;}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){var p1$1=arguments[0];var p2$1=arguments[1];this.x=p1$1.y-p2$1.y;this.y=p2$1.x-p1$1.x;this.w=p1$1.x*p2$1.y-p2$1.x*p1$1.y;}}else if(arguments.length===3){var _x$1=arguments[0];var _y$1=arguments[1];var _w=arguments[2];this.x=_x$1;this.y=_y$1;this.w=_w;}else if(arguments.length===4){var p1$2=arguments[0];var p2$2=arguments[1];var q1=arguments[2];var q2=arguments[3];var px=p1$2.y-p2$2.y;var py=p2$2.x-p1$2.x;var pw=p1$2.x*p2$2.y-p2$2.x*p1$2.y;var qx=q1.y-q2.y;var qy=q2.x-q1.x;var qw=q1.x*q2.y-q2.x*q1.y;this.x=py*qw-qy*pw;this.y=qx*pw-px*qw;this.w=px*qy-qx*py;}};HCoordinate.prototype.getY=function getY(){var a=this.y/this.w;if(Double.isNaN(a)||Double.isInfinite(a)){throw new NotRepresentableException();}return a;};HCoordinate.prototype.getX=function getX(){var a=this.x/this.w;if(Double.isNaN(a)||Double.isInfinite(a)){throw new NotRepresentableException();}return a;};HCoordinate.prototype.getCoordinate=function getCoordinate(){var p=new Coordinate();p.x=this.getX();p.y=this.getY();return p;};HCoordinate.prototype.interfaces_=function interfaces_(){return [];};HCoordinate.prototype.getClass=function getClass(){return HCoordinate;};HCoordinate.intersection=function intersection(p1,p2,q1,q2){var px=p1.y-p2.y;var py=p2.x-p1.x;var pw=p1.x*p2.y-p2.x*p1.y;var qx=q1.y-q2.y;var qy=q2.x-q1.x;var qw=q1.x*q2.y-q2.x*q1.y;var x=py*qw-qy*pw;var y=qx*pw-px*qw;var w=px*qy-qx*py;var xInt=x/w;var yInt=y/w;if(Double.isNaN(xInt)||Double.isInfinite(xInt)||Double.isNaN(yInt)||Double.isInfinite(yInt)){throw new NotRepresentableException();}return new Coordinate(xInt,yInt);};var Envelope=function Envelope(){this._minx=null;this._maxx=null;this._miny=null;this._maxy=null;if(arguments.length===0){this.init();}else if(arguments.length===1){if(arguments[0]instanceof Coordinate){var p=arguments[0];this.init(p.x,p.x,p.y,p.y);}else if(arguments[0]instanceof Envelope){var env=arguments[0];this.init(env);}}else if(arguments.length===2){var p1=arguments[0];var p2=arguments[1];this.init(p1.x,p2.x,p1.y,p2.y);}else if(arguments.length===4){var x1=arguments[0];var x2=arguments[1];var y1=arguments[2];var y2=arguments[3];this.init(x1,x2,y1,y2);}};var staticAccessors$9={serialVersionUID:{configurable:true}};Envelope.prototype.getArea=function getArea(){return this.getWidth()*this.getHeight();};Envelope.prototype.equals=function equals(other){if(!(other instanceof Envelope)){return false;}var otherEnvelope=other;if(this.isNull()){return otherEnvelope.isNull();}return this._maxx===otherEnvelope.getMaxX()&&this._maxy===otherEnvelope.getMaxY()&&this._minx===otherEnvelope.getMinX()&&this._miny===otherEnvelope.getMinY();};Envelope.prototype.intersection=function intersection(env){if(this.isNull()||env.isNull()||!this.intersects(env)){return new Envelope();}var intMinX=this._minx>env._minx?this._minx:env._minx;var intMinY=this._miny>env._miny?this._miny:env._miny;var intMaxX=this._maxx<env._maxx?this._maxx:env._maxx;var intMaxY=this._maxy<env._maxy?this._maxy:env._maxy;return new Envelope(intMinX,intMaxX,intMinY,intMaxY);};Envelope.prototype.isNull=function isNull(){return this._maxx<this._minx;};Envelope.prototype.getMaxX=function getMaxX(){return this._maxx;};Envelope.prototype.covers=function covers(){if(arguments.length===1){if(arguments[0]instanceof Coordinate){var p=arguments[0];return this.covers(p.x,p.y);}else if(arguments[0]instanceof Envelope){var other=arguments[0];if(this.isNull()||other.isNull()){return false;}return other.getMinX()>=this._minx&&other.getMaxX()<=this._maxx&&other.getMinY()>=this._miny&&other.getMaxY()<=this._maxy;}}else if(arguments.length===2){var x=arguments[0];var y=arguments[1];if(this.isNull()){return false;}return x>=this._minx&&x<=this._maxx&&y>=this._miny&&y<=this._maxy;}};Envelope.prototype.intersects=function intersects(){if(arguments.length===1){if(arguments[0]instanceof Envelope){var other=arguments[0];if(this.isNull()||other.isNull()){return false;}return !(other._minx>this._maxx||other._maxx<this._minx||other._miny>this._maxy||other._maxy<this._miny);}else if(arguments[0]instanceof Coordinate){var p=arguments[0];return this.intersects(p.x,p.y);}}else if(arguments.length===2){var x=arguments[0];var y=arguments[1];if(this.isNull()){return false;}return !(x>this._maxx||x<this._minx||y>this._maxy||y<this._miny);}};Envelope.prototype.getMinY=function getMinY(){return this._miny;};Envelope.prototype.getMinX=function getMinX(){return this._minx;};Envelope.prototype.expandToInclude=function expandToInclude(){if(arguments.length===1){if(arguments[0]instanceof Coordinate){var p=arguments[0];this.expandToInclude(p.x,p.y);}else if(arguments[0]instanceof Envelope){var other=arguments[0];if(other.isNull()){return null;}if(this.isNull()){this._minx=other.getMinX();this._maxx=other.getMaxX();this._miny=other.getMinY();this._maxy=other.getMaxY();}else{if(other._minx<this._minx){this._minx=other._minx;}if(other._maxx>this._maxx){this._maxx=other._maxx;}if(other._miny<this._miny){this._miny=other._miny;}if(other._maxy>this._maxy){this._maxy=other._maxy;}}}}else if(arguments.length===2){var x=arguments[0];var y=arguments[1];if(this.isNull()){this._minx=x;this._maxx=x;this._miny=y;this._maxy=y;}else{if(x<this._minx){this._minx=x;}if(x>this._maxx){this._maxx=x;}if(y<this._miny){this._miny=y;}if(y>this._maxy){this._maxy=y;}}}};Envelope.prototype.minExtent=function minExtent(){if(this.isNull()){return 0.0;}var w=this.getWidth();var h=this.getHeight();if(w<h){return w;}return h;};Envelope.prototype.getWidth=function getWidth(){if(this.isNull()){return 0;}return this._maxx-this._minx;};Envelope.prototype.compareTo=function compareTo(o){var env=o;if(this.isNull()){if(env.isNull()){return 0;}return -1;}else{if(env.isNull()){return 1;}}if(this._minx<env._minx){return -1;}if(this._minx>env._minx){return 1;}if(this._miny<env._miny){return -1;}if(this._miny>env._miny){return 1;}if(this._maxx<env._maxx){return -1;}if(this._maxx>env._maxx){return 1;}if(this._maxy<env._maxy){return -1;}if(this._maxy>env._maxy){return 1;}return 0;};Envelope.prototype.translate=function translate(transX,transY){if(this.isNull()){return null;}this.init(this.getMinX()+transX,this.getMaxX()+transX,this.getMinY()+transY,this.getMaxY()+transY);};Envelope.prototype.toString=function toString(){return 'Env['+this._minx+' : '+this._maxx+', '+this._miny+' : '+this._maxy+']';};Envelope.prototype.setToNull=function setToNull(){this._minx=0;this._maxx=-1;this._miny=0;this._maxy=-1;};Envelope.prototype.getHeight=function getHeight(){if(this.isNull()){return 0;}return this._maxy-this._miny;};Envelope.prototype.maxExtent=function maxExtent(){if(this.isNull()){return 0.0;}var w=this.getWidth();var h=this.getHeight();if(w>h){return w;}return h;};Envelope.prototype.expandBy=function expandBy(){if(arguments.length===1){var distance=arguments[0];this.expandBy(distance,distance);}else if(arguments.length===2){var deltaX=arguments[0];var deltaY=arguments[1];if(this.isNull()){return null;}this._minx-=deltaX;this._maxx+=deltaX;this._miny-=deltaY;this._maxy+=deltaY;if(this._minx>this._maxx||this._miny>this._maxy){this.setToNull();}}};Envelope.prototype.contains=function contains(){if(arguments.length===1){if(arguments[0]instanceof Envelope){var other=arguments[0];return this.covers(other);}else if(arguments[0]instanceof Coordinate){var p=arguments[0];return this.covers(p);}}else if(arguments.length===2){var x=arguments[0];var y=arguments[1];return this.covers(x,y);}};Envelope.prototype.centre=function centre(){if(this.isNull()){return null;}return new Coordinate((this.getMinX()+this.getMaxX())/2.0,(this.getMinY()+this.getMaxY())/2.0);};Envelope.prototype.init=function init(){if(arguments.length===0){this.setToNull();}else if(arguments.length===1){if(arguments[0]instanceof Coordinate){var p=arguments[0];this.init(p.x,p.x,p.y,p.y);}else if(arguments[0]instanceof Envelope){var env=arguments[0];this._minx=env._minx;this._maxx=env._maxx;this._miny=env._miny;this._maxy=env._maxy;}}else if(arguments.length===2){var p1=arguments[0];var p2=arguments[1];this.init(p1.x,p2.x,p1.y,p2.y);}else if(arguments.length===4){var x1=arguments[0];var x2=arguments[1];var y1=arguments[2];var y2=arguments[3];if(x1<x2){this._minx=x1;this._maxx=x2;}else{this._minx=x2;this._maxx=x1;}if(y1<y2){this._miny=y1;this._maxy=y2;}else{this._miny=y2;this._maxy=y1;}}};Envelope.prototype.getMaxY=function getMaxY(){return this._maxy;};Envelope.prototype.distance=function distance(env){if(this.intersects(env)){return 0;}var dx=0.0;if(this._maxx<env._minx){dx=env._minx-this._maxx;}else if(this._minx>env._maxx){dx=this._minx-env._maxx;}var dy=0.0;if(this._maxy<env._miny){dy=env._miny-this._maxy;}else if(this._miny>env._maxy){dy=this._miny-env._maxy;}if(dx===0.0){return dy;}if(dy===0.0){return dx;}return Math.sqrt(dx*dx+dy*dy);};Envelope.prototype.hashCode=function hashCode(){var result=17;result=37*result+Coordinate.hashCode(this._minx);result=37*result+Coordinate.hashCode(this._maxx);result=37*result+Coordinate.hashCode(this._miny);result=37*result+Coordinate.hashCode(this._maxy);return result;};Envelope.prototype.interfaces_=function interfaces_(){return [Comparable,Serializable];};Envelope.prototype.getClass=function getClass(){return Envelope;};Envelope.intersects=function intersects(){if(arguments.length===3){var p1=arguments[0];var p2=arguments[1];var q=arguments[2];if(q.x>=(p1.x<p2.x?p1.x:p2.x)&&q.x<=(p1.x>p2.x?p1.x:p2.x)&&q.y>=(p1.y<p2.y?p1.y:p2.y)&&q.y<=(p1.y>p2.y?p1.y:p2.y)){return true;}return false;}else if(arguments.length===4){var p1$1=arguments[0];var p2$1=arguments[1];var q1=arguments[2];var q2=arguments[3];var minq=Math.min(q1.x,q2.x);var maxq=Math.max(q1.x,q2.x);var minp=Math.min(p1$1.x,p2$1.x);var maxp=Math.max(p1$1.x,p2$1.x);if(minp>maxq){return false;}if(maxp<minq){return false;}minq=Math.min(q1.y,q2.y);maxq=Math.max(q1.y,q2.y);minp=Math.min(p1$1.y,p2$1.y);maxp=Math.max(p1$1.y,p2$1.y);if(minp>maxq){return false;}if(maxp<minq){return false;}return true;}};staticAccessors$9.serialVersionUID.get=function(){return 5873921885273102420;};Object.defineProperties(Envelope,staticAccessors$9);var regExes={'typeStr':/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,'emptyTypeStr':/^\s*(\w+)\s*EMPTY\s*$/,'spaces':/\s+/,'parenComma':/\)\s*,\s*\(/,'doubleParenComma':/\)\s*\)\s*,\s*\(\s*\(/,// can't use {2} here
    'trimParens':/^\s*\(?(.*?)\)?\s*$/};/**
     * Class for reading and writing Well-Known Text.
     *
     * NOTE: Adapted from OpenLayers 2.11 implementation.
     *//** Create a new parser for WKT
     *
     * @param {GeometryFactory} geometryFactory
     * @return An instance of WKTParser.
     * @constructor
     * @private
     */var WKTParser=function WKTParser(geometryFactory){this.geometryFactory=geometryFactory||new GeometryFactory();};/**
     * Deserialize a WKT string and return a geometry. Supports WKT for POINT,
     * MULTIPOINT, LINESTRING, LINEARRING, MULTILINESTRING, POLYGON, MULTIPOLYGON,
     * and GEOMETRYCOLLECTION.
     *
     * @param {String} wkt A WKT string.
     * @return {Geometry} A geometry instance.
     * @private
     */WKTParser.prototype.read=function read(wkt){var geometry,type,str;wkt=wkt.replace(/[\n\r]/g,' ');var matches=regExes.typeStr.exec(wkt);if(wkt.search('EMPTY')!==-1){matches=regExes.emptyTypeStr.exec(wkt);matches[2]=undefined;}if(matches){type=matches[1].toLowerCase();str=matches[2];if(parse$1[type]){geometry=parse$1[type].apply(this,[str]);}}if(geometry===undefined){throw new Error('Could not parse WKT '+wkt);}return geometry;};/**
     * Serialize a geometry into a WKT string.
     *
     * @param {Geometry} geometry A feature or array of features.
     * @return {String} The WKT string representation of the input geometries.
     * @private
     */WKTParser.prototype.write=function write(geometry){return this.extractGeometry(geometry);};/**
     * Entry point to construct the WKT for a single Geometry object.
     *
     * @param {Geometry} geometry
     * @return {String} A WKT string of representing the geometry.
     * @private
     */WKTParser.prototype.extractGeometry=function extractGeometry(geometry){var type=geometry.getGeometryType().toLowerCase();if(!extract$1[type]){return null;}var wktType=type.toUpperCase();var data;if(geometry.isEmpty()){data=wktType+' EMPTY';}else{data=wktType+'('+extract$1[type].apply(this,[geometry])+')';}return data;};/**
     * Object with properties corresponding to the geometry types. Property values
     * are functions that do the actual data extraction.
     * @private
     */var extract$1={coordinate:function coordinate(coordinate$1){return coordinate$1.x+' '+coordinate$1.y;},/**
       * Return a space delimited string of point coordinates.
       *
       * @param {Point}
       *          point
       * @return {String} A string of coordinates representing the point.
       */point:function point(point$1){return extract$1.coordinate.call(this,point$1._coordinates._coordinates[0]);},/**
       * Return a comma delimited string of point coordinates from a multipoint.
       *
       * @param {MultiPoint}
       *          multipoint
       * @return {String} A string of point coordinate strings representing the
       *         multipoint.
       */multipoint:function multipoint(multipoint$1){var this$1=this;var array=[];for(var i=0,len=multipoint$1._geometries.length;i<len;++i){array.push('('+extract$1.point.apply(this$1,[multipoint$1._geometries[i]])+')');}return array.join(',');},/**
       * Return a comma delimited string of point coordinates from a line.
       *
       * @param {LineString} linestring
       * @return {String} A string of point coordinate strings representing the linestring.
       */linestring:function linestring(linestring$1){var this$1=this;var array=[];for(var i=0,len=linestring$1._points._coordinates.length;i<len;++i){array.push(extract$1.coordinate.apply(this$1,[linestring$1._points._coordinates[i]]));}return array.join(',');},linearring:function linearring(linearring$1){var this$1=this;var array=[];for(var i=0,len=linearring$1._points._coordinates.length;i<len;++i){array.push(extract$1.coordinate.apply(this$1,[linearring$1._points._coordinates[i]]));}return array.join(',');},/**
       * Return a comma delimited string of linestring strings from a
       * multilinestring.
       *
       * @param {MultiLineString} multilinestring
       * @return {String} A string of of linestring strings representing the multilinestring.
       */multilinestring:function multilinestring(multilinestring$1){var this$1=this;var array=[];for(var i=0,len=multilinestring$1._geometries.length;i<len;++i){array.push('('+extract$1.linestring.apply(this$1,[multilinestring$1._geometries[i]])+')');}return array.join(',');},/**
       * Return a comma delimited string of linear ring arrays from a polygon.
       *
       * @param {Polygon} polygon
       * @return {String} An array of linear ring arrays representing the polygon.
       */polygon:function polygon(polygon$1){var this$1=this;var array=[];array.push('('+extract$1.linestring.apply(this,[polygon$1._shell])+')');for(var i=0,len=polygon$1._holes.length;i<len;++i){array.push('('+extract$1.linestring.apply(this$1,[polygon$1._holes[i]])+')');}return array.join(',');},/**
       * Return an array of polygon arrays from a multipolygon.
       *
       * @param {MultiPolygon} multipolygon
       * @return {String} An array of polygon arrays representing the multipolygon.
       */multipolygon:function multipolygon(multipolygon$1){var this$1=this;var array=[];for(var i=0,len=multipolygon$1._geometries.length;i<len;++i){array.push('('+extract$1.polygon.apply(this$1,[multipolygon$1._geometries[i]])+')');}return array.join(',');},/**
       * Return the WKT portion between 'GEOMETRYCOLLECTION(' and ')' for an
       * geometrycollection.
       *
       * @param {GeometryCollection} collection
       * @return {String} internal WKT representation of the collection.
       */geometrycollection:function geometrycollection(collection){var this$1=this;var array=[];for(var i=0,len=collection._geometries.length;i<len;++i){array.push(this$1.extractGeometry(collection._geometries[i]));}return array.join(',');}};/**
     * Object with properties corresponding to the geometry types. Property values
     * are functions that do the actual parsing.
     * @private
     */var parse$1={/**
       * Return point geometry given a point WKT fragment.
       *
       * @param {String} str A WKT fragment representing the point.
       * @return {Point} A point geometry.
       * @private
       */point:function point(str){if(str===undefined){return this.geometryFactory.createPoint();}var coords=str.trim().split(regExes.spaces);return this.geometryFactory.createPoint(new Coordinate(Number.parseFloat(coords[0]),Number.parseFloat(coords[1])));},/**
       * Return a multipoint geometry given a multipoint WKT fragment.
       *
       * @param {String} str A WKT fragment representing the multipoint.
       * @return {Point} A multipoint feature.
       * @private
       */multipoint:function multipoint(str){var this$1=this;if(str===undefined){return this.geometryFactory.createMultiPoint();}var point;var points=str.trim().split(',');var components=[];for(var i=0,len=points.length;i<len;++i){point=points[i].replace(regExes.trimParens,'$1');components.push(parse$1.point.apply(this$1,[point]));}return this.geometryFactory.createMultiPoint(components);},/**
       * Return a linestring geometry given a linestring WKT fragment.
       *
       * @param {String} str A WKT fragment representing the linestring.
       * @return {LineString} A linestring geometry.
       * @private
       */linestring:function linestring(str){if(str===undefined){return this.geometryFactory.createLineString();}var points=str.trim().split(',');var components=[];var coords;for(var i=0,len=points.length;i<len;++i){coords=points[i].trim().split(regExes.spaces);components.push(new Coordinate(Number.parseFloat(coords[0]),Number.parseFloat(coords[1])));}return this.geometryFactory.createLineString(components);},/**
       * Return a linearring geometry given a linearring WKT fragment.
       *
       * @param {String} str A WKT fragment representing the linearring.
       * @return {LinearRing} A linearring geometry.
       * @private
       */linearring:function linearring(str){if(str===undefined){return this.geometryFactory.createLinearRing();}var points=str.trim().split(',');var components=[];var coords;for(var i=0,len=points.length;i<len;++i){coords=points[i].trim().split(regExes.spaces);components.push(new Coordinate(Number.parseFloat(coords[0]),Number.parseFloat(coords[1])));}return this.geometryFactory.createLinearRing(components);},/**
       * Return a multilinestring geometry given a multilinestring WKT fragment.
       *
       * @param {String} str A WKT fragment representing the multilinestring.
       * @return {MultiLineString} A multilinestring geometry.
       * @private
       */multilinestring:function multilinestring(str){var this$1=this;if(str===undefined){return this.geometryFactory.createMultiLineString();}var line;var lines=str.trim().split(regExes.parenComma);var components=[];for(var i=0,len=lines.length;i<len;++i){line=lines[i].replace(regExes.trimParens,'$1');components.push(parse$1.linestring.apply(this$1,[line]));}return this.geometryFactory.createMultiLineString(components);},/**
       * Return a polygon geometry given a polygon WKT fragment.
       *
       * @param {String} str A WKT fragment representing the polygon.
       * @return {Polygon} A polygon geometry.
       * @private
       */polygon:function polygon(str){var this$1=this;if(str===undefined){return this.geometryFactory.createPolygon();}var ring,linestring,linearring;var rings=str.trim().split(regExes.parenComma);var shell;var holes=[];for(var i=0,len=rings.length;i<len;++i){ring=rings[i].replace(regExes.trimParens,'$1');linestring=parse$1.linestring.apply(this$1,[ring]);linearring=this$1.geometryFactory.createLinearRing(linestring._points);if(i===0){shell=linearring;}else{holes.push(linearring);}}return this.geometryFactory.createPolygon(shell,holes);},/**
       * Return a multipolygon geometry given a multipolygon WKT fragment.
       *
       * @param {String} str A WKT fragment representing the multipolygon.
       * @return {MultiPolygon} A multipolygon geometry.
       * @private
       */multipolygon:function multipolygon(str){var this$1=this;if(str===undefined){return this.geometryFactory.createMultiPolygon();}var polygon;var polygons=str.trim().split(regExes.doubleParenComma);var components=[];for(var i=0,len=polygons.length;i<len;++i){polygon=polygons[i].replace(regExes.trimParens,'$1');components.push(parse$1.polygon.apply(this$1,[polygon]));}return this.geometryFactory.createMultiPolygon(components);},/**
       * Return a geometrycollection given a geometrycollection WKT fragment.
       *
       * @param {String} str A WKT fragment representing the geometrycollection.
       * @return {GeometryCollection}
       * @private
       */geometrycollection:function geometrycollection(str){var this$1=this;if(str===undefined){return this.geometryFactory.createGeometryCollection();}// separate components of the collection with |
    str=str.replace(/,\s*([A-Za-z])/g,'|$1');var wktArray=str.trim().split('|');var components=[];for(var i=0,len=wktArray.length;i<len;++i){components.push(this$1.read(wktArray[i]));}return this.geometryFactory.createGeometryCollection(components);}};/**
     * Writes the Well-Known Text representation of a {@link Geometry}. The
     * Well-Known Text format is defined in the <A
     * HREF="http://www.opengis.org/techno/specs.htm"> OGC Simple Features
     * Specification for SQL</A>.
     * <p>
     * The <code>WKTWriter</code> outputs coordinates rounded to the precision
     * model. Only the maximum number of decimal places necessary to represent the
     * ordinates to the required precision will be output.
     * <p>
     * The SFS WKT spec does not define a special tag for {@link LinearRing}s.
     * Under the spec, rings are output as <code>LINESTRING</code>s.
     *//**
     * @param {GeometryFactory} geometryFactory
     * @constructor
     */var WKTWriter=function WKTWriter(geometryFactory){this.parser=new WKTParser(geometryFactory);};/**
     * Converts a <code>Geometry</code> to its Well-known Text representation.
     *
     * @param {Geometry} geometry a <code>Geometry</code> to process.
     * @return {string} a <Geometry Tagged Text> string (see the OpenGIS Simple
     *       Features Specification).
     * @memberof WKTWriter
     */WKTWriter.prototype.write=function write(geometry){return this.parser.write(geometry);};/**
     * Generates the WKT for a <tt>LINESTRING</tt> specified by two
     * {@link Coordinate}s.
     *
     * @param p0 the first coordinate.
     * @param p1 the second coordinate.
     *
     * @return the WKT.
     * @private
     */WKTWriter.toLineString=function toLineString(p0,p1){if(arguments.length!==2){throw new Error('Not implemented');}return 'LINESTRING ( '+p0.x+' '+p0.y+', '+p1.x+' '+p1.y+' )';};var RuntimeException=function(Error){function RuntimeException(message){Error.call(this,message);this.name='RuntimeException';this.message=message;this.stack=new Error().stack;}if(Error)RuntimeException.__proto__=Error;RuntimeException.prototype=Object.create(Error&&Error.prototype);RuntimeException.prototype.constructor=RuntimeException;return RuntimeException;}(Error);var AssertionFailedException=function(RuntimeException$$1){function AssertionFailedException(){RuntimeException$$1.call(this);if(arguments.length===0){RuntimeException$$1.call(this);}else if(arguments.length===1){var message=arguments[0];RuntimeException$$1.call(this,message);}}if(RuntimeException$$1)AssertionFailedException.__proto__=RuntimeException$$1;AssertionFailedException.prototype=Object.create(RuntimeException$$1&&RuntimeException$$1.prototype);AssertionFailedException.prototype.constructor=AssertionFailedException;AssertionFailedException.prototype.interfaces_=function interfaces_(){return [];};AssertionFailedException.prototype.getClass=function getClass(){return AssertionFailedException;};return AssertionFailedException;}(RuntimeException);var Assert=function Assert(){};Assert.prototype.interfaces_=function interfaces_(){return [];};Assert.prototype.getClass=function getClass(){return Assert;};Assert.shouldNeverReachHere=function shouldNeverReachHere(){if(arguments.length===0){Assert.shouldNeverReachHere(null);}else if(arguments.length===1){var message=arguments[0];throw new AssertionFailedException('Should never reach here'+(message!==null?': '+message:''));}};Assert.isTrue=function isTrue(){var assertion;var message;if(arguments.length===1){assertion=arguments[0];Assert.isTrue(assertion,null);}else if(arguments.length===2){assertion=arguments[0];message=arguments[1];if(!assertion){if(message===null){throw new AssertionFailedException();}else{throw new AssertionFailedException(message);}}}};Assert.equals=function equals(){var expectedValue;var actualValue;var message;if(arguments.length===2){expectedValue=arguments[0];actualValue=arguments[1];Assert.equals(expectedValue,actualValue,null);}else if(arguments.length===3){expectedValue=arguments[0];actualValue=arguments[1];message=arguments[2];if(!actualValue.equals(expectedValue)){throw new AssertionFailedException('Expected '+expectedValue+' but encountered '+actualValue+(message!==null?': '+message:''));}}};var LineIntersector=function LineIntersector(){this._result=null;this._inputLines=Array(2).fill().map(function(){return Array(2);});this._intPt=new Array(2).fill(null);this._intLineIndex=null;this._isProper=null;this._pa=null;this._pb=null;this._precisionModel=null;this._intPt[0]=new Coordinate();this._intPt[1]=new Coordinate();this._pa=this._intPt[0];this._pb=this._intPt[1];this._result=0;};var staticAccessors$10={DONT_INTERSECT:{configurable:true},DO_INTERSECT:{configurable:true},COLLINEAR:{configurable:true},NO_INTERSECTION:{configurable:true},POINT_INTERSECTION:{configurable:true},COLLINEAR_INTERSECTION:{configurable:true}};LineIntersector.prototype.getIndexAlongSegment=function getIndexAlongSegment(segmentIndex,intIndex){this.computeIntLineIndex();return this._intLineIndex[segmentIndex][intIndex];};LineIntersector.prototype.getTopologySummary=function getTopologySummary(){var catBuf=new StringBuffer();if(this.isEndPoint()){catBuf.append(' endpoint');}if(this._isProper){catBuf.append(' proper');}if(this.isCollinear()){catBuf.append(' collinear');}return catBuf.toString();};LineIntersector.prototype.computeIntersection=function computeIntersection(p1,p2,p3,p4){this._inputLines[0][0]=p1;this._inputLines[0][1]=p2;this._inputLines[1][0]=p3;this._inputLines[1][1]=p4;this._result=this.computeIntersect(p1,p2,p3,p4);};LineIntersector.prototype.getIntersectionNum=function getIntersectionNum(){return this._result;};LineIntersector.prototype.computeIntLineIndex=function computeIntLineIndex(){if(arguments.length===0){if(this._intLineIndex===null){this._intLineIndex=Array(2).fill().map(function(){return Array(2);});this.computeIntLineIndex(0);this.computeIntLineIndex(1);}}else if(arguments.length===1){var segmentIndex=arguments[0];var dist0=this.getEdgeDistance(segmentIndex,0);var dist1=this.getEdgeDistance(segmentIndex,1);if(dist0>dist1){this._intLineIndex[segmentIndex][0]=0;this._intLineIndex[segmentIndex][1]=1;}else{this._intLineIndex[segmentIndex][0]=1;this._intLineIndex[segmentIndex][1]=0;}}};LineIntersector.prototype.isProper=function isProper(){return this.hasIntersection()&&this._isProper;};LineIntersector.prototype.setPrecisionModel=function setPrecisionModel(precisionModel){this._precisionModel=precisionModel;};LineIntersector.prototype.isInteriorIntersection=function isInteriorIntersection(){var this$1=this;if(arguments.length===0){if(this.isInteriorIntersection(0)){return true;}if(this.isInteriorIntersection(1)){return true;}return false;}else if(arguments.length===1){var inputLineIndex=arguments[0];for(var i=0;i<this._result;i++){if(!(this$1._intPt[i].equals2D(this$1._inputLines[inputLineIndex][0])||this$1._intPt[i].equals2D(this$1._inputLines[inputLineIndex][1]))){return true;}}return false;}};LineIntersector.prototype.getIntersection=function getIntersection(intIndex){return this._intPt[intIndex];};LineIntersector.prototype.isEndPoint=function isEndPoint(){return this.hasIntersection()&&!this._isProper;};LineIntersector.prototype.hasIntersection=function hasIntersection(){return this._result!==LineIntersector.NO_INTERSECTION;};LineIntersector.prototype.getEdgeDistance=function getEdgeDistance(segmentIndex,intIndex){var dist=LineIntersector.computeEdgeDistance(this._intPt[intIndex],this._inputLines[segmentIndex][0],this._inputLines[segmentIndex][1]);return dist;};LineIntersector.prototype.isCollinear=function isCollinear(){return this._result===LineIntersector.COLLINEAR_INTERSECTION;};LineIntersector.prototype.toString=function toString(){return WKTWriter.toLineString(this._inputLines[0][0],this._inputLines[0][1])+' - '+WKTWriter.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary();};LineIntersector.prototype.getEndpoint=function getEndpoint(segmentIndex,ptIndex){return this._inputLines[segmentIndex][ptIndex];};LineIntersector.prototype.isIntersection=function isIntersection(pt){var this$1=this;for(var i=0;i<this._result;i++){if(this$1._intPt[i].equals2D(pt)){return true;}}return false;};LineIntersector.prototype.getIntersectionAlongSegment=function getIntersectionAlongSegment(segmentIndex,intIndex){this.computeIntLineIndex();return this._intPt[this._intLineIndex[segmentIndex][intIndex]];};LineIntersector.prototype.interfaces_=function interfaces_(){return [];};LineIntersector.prototype.getClass=function getClass(){return LineIntersector;};LineIntersector.computeEdgeDistance=function computeEdgeDistance(p,p0,p1){var dx=Math.abs(p1.x-p0.x);var dy=Math.abs(p1.y-p0.y);var dist=-1.0;if(p.equals(p0)){dist=0.0;}else if(p.equals(p1)){if(dx>dy){dist=dx;}else{dist=dy;}}else{var pdx=Math.abs(p.x-p0.x);var pdy=Math.abs(p.y-p0.y);if(dx>dy){dist=pdx;}else{dist=pdy;}if(dist===0.0&&!p.equals(p0)){dist=Math.max(pdx,pdy);}}Assert.isTrue(!(dist===0.0&&!p.equals(p0)),'Bad distance calculation');return dist;};LineIntersector.nonRobustComputeEdgeDistance=function nonRobustComputeEdgeDistance(p,p1,p2){var dx=p.x-p1.x;var dy=p.y-p1.y;var dist=Math.sqrt(dx*dx+dy*dy);Assert.isTrue(!(dist===0.0&&!p.equals(p1)),'Invalid distance calculation');return dist;};staticAccessors$10.DONT_INTERSECT.get=function(){return 0;};staticAccessors$10.DO_INTERSECT.get=function(){return 1;};staticAccessors$10.COLLINEAR.get=function(){return 2;};staticAccessors$10.NO_INTERSECTION.get=function(){return 0;};staticAccessors$10.POINT_INTERSECTION.get=function(){return 1;};staticAccessors$10.COLLINEAR_INTERSECTION.get=function(){return 2;};Object.defineProperties(LineIntersector,staticAccessors$10);var RobustLineIntersector=function(LineIntersector$$1){function RobustLineIntersector(){LineIntersector$$1.apply(this,arguments);}if(LineIntersector$$1)RobustLineIntersector.__proto__=LineIntersector$$1;RobustLineIntersector.prototype=Object.create(LineIntersector$$1&&LineIntersector$$1.prototype);RobustLineIntersector.prototype.constructor=RobustLineIntersector;RobustLineIntersector.prototype.isInSegmentEnvelopes=function isInSegmentEnvelopes(intPt){var env0=new Envelope(this._inputLines[0][0],this._inputLines[0][1]);var env1=new Envelope(this._inputLines[1][0],this._inputLines[1][1]);return env0.contains(intPt)&&env1.contains(intPt);};RobustLineIntersector.prototype.computeIntersection=function computeIntersection(){if(arguments.length===3){var p=arguments[0];var p1=arguments[1];var p2=arguments[2];this._isProper=false;if(Envelope.intersects(p1,p2,p)){if(CGAlgorithms.orientationIndex(p1,p2,p)===0&&CGAlgorithms.orientationIndex(p2,p1,p)===0){this._isProper=true;if(p.equals(p1)||p.equals(p2)){this._isProper=false;}this._result=LineIntersector$$1.POINT_INTERSECTION;return null;}}this._result=LineIntersector$$1.NO_INTERSECTION;}else{return LineIntersector$$1.prototype.computeIntersection.apply(this,arguments);}};RobustLineIntersector.prototype.normalizeToMinimum=function normalizeToMinimum(n1,n2,n3,n4,normPt){normPt.x=this.smallestInAbsValue(n1.x,n2.x,n3.x,n4.x);normPt.y=this.smallestInAbsValue(n1.y,n2.y,n3.y,n4.y);n1.x-=normPt.x;n1.y-=normPt.y;n2.x-=normPt.x;n2.y-=normPt.y;n3.x-=normPt.x;n3.y-=normPt.y;n4.x-=normPt.x;n4.y-=normPt.y;};RobustLineIntersector.prototype.safeHCoordinateIntersection=function safeHCoordinateIntersection(p1,p2,q1,q2){var intPt=null;try{intPt=HCoordinate.intersection(p1,p2,q1,q2);}catch(e){if(e instanceof NotRepresentableException){intPt=RobustLineIntersector.nearestEndpoint(p1,p2,q1,q2);}else{throw e;}}finally{}return intPt;};RobustLineIntersector.prototype.intersection=function intersection(p1,p2,q1,q2){var intPt=this.intersectionWithNormalization(p1,p2,q1,q2);if(!this.isInSegmentEnvelopes(intPt)){intPt=new Coordinate(RobustLineIntersector.nearestEndpoint(p1,p2,q1,q2));}if(this._precisionModel!==null){this._precisionModel.makePrecise(intPt);}return intPt;};RobustLineIntersector.prototype.smallestInAbsValue=function smallestInAbsValue(x1,x2,x3,x4){var x=x1;var xabs=Math.abs(x);if(Math.abs(x2)<xabs){x=x2;xabs=Math.abs(x2);}if(Math.abs(x3)<xabs){x=x3;xabs=Math.abs(x3);}if(Math.abs(x4)<xabs){x=x4;}return x;};RobustLineIntersector.prototype.checkDD=function checkDD(p1,p2,q1,q2,intPt){var intPtDD=CGAlgorithmsDD.intersection(p1,p2,q1,q2);var isIn=this.isInSegmentEnvelopes(intPtDD);System.out.println('DD in env = '+isIn+'  --------------------- '+intPtDD);if(intPt.distance(intPtDD)>0.0001){System.out.println('Distance = '+intPt.distance(intPtDD));}};RobustLineIntersector.prototype.intersectionWithNormalization=function intersectionWithNormalization(p1,p2,q1,q2){var n1=new Coordinate(p1);var n2=new Coordinate(p2);var n3=new Coordinate(q1);var n4=new Coordinate(q2);var normPt=new Coordinate();this.normalizeToEnvCentre(n1,n2,n3,n4,normPt);var intPt=this.safeHCoordinateIntersection(n1,n2,n3,n4);intPt.x+=normPt.x;intPt.y+=normPt.y;return intPt;};RobustLineIntersector.prototype.computeCollinearIntersection=function computeCollinearIntersection(p1,p2,q1,q2){var p1q1p2=Envelope.intersects(p1,p2,q1);var p1q2p2=Envelope.intersects(p1,p2,q2);var q1p1q2=Envelope.intersects(q1,q2,p1);var q1p2q2=Envelope.intersects(q1,q2,p2);if(p1q1p2&&p1q2p2){this._intPt[0]=q1;this._intPt[1]=q2;return LineIntersector$$1.COLLINEAR_INTERSECTION;}if(q1p1q2&&q1p2q2){this._intPt[0]=p1;this._intPt[1]=p2;return LineIntersector$$1.COLLINEAR_INTERSECTION;}if(p1q1p2&&q1p1q2){this._intPt[0]=q1;this._intPt[1]=p1;return q1.equals(p1)&&!p1q2p2&&!q1p2q2?LineIntersector$$1.POINT_INTERSECTION:LineIntersector$$1.COLLINEAR_INTERSECTION;}if(p1q1p2&&q1p2q2){this._intPt[0]=q1;this._intPt[1]=p2;return q1.equals(p2)&&!p1q2p2&&!q1p1q2?LineIntersector$$1.POINT_INTERSECTION:LineIntersector$$1.COLLINEAR_INTERSECTION;}if(p1q2p2&&q1p1q2){this._intPt[0]=q2;this._intPt[1]=p1;return q2.equals(p1)&&!p1q1p2&&!q1p2q2?LineIntersector$$1.POINT_INTERSECTION:LineIntersector$$1.COLLINEAR_INTERSECTION;}if(p1q2p2&&q1p2q2){this._intPt[0]=q2;this._intPt[1]=p2;return q2.equals(p2)&&!p1q1p2&&!q1p1q2?LineIntersector$$1.POINT_INTERSECTION:LineIntersector$$1.COLLINEAR_INTERSECTION;}return LineIntersector$$1.NO_INTERSECTION;};RobustLineIntersector.prototype.normalizeToEnvCentre=function normalizeToEnvCentre(n00,n01,n10,n11,normPt){var minX0=n00.x<n01.x?n00.x:n01.x;var minY0=n00.y<n01.y?n00.y:n01.y;var maxX0=n00.x>n01.x?n00.x:n01.x;var maxY0=n00.y>n01.y?n00.y:n01.y;var minX1=n10.x<n11.x?n10.x:n11.x;var minY1=n10.y<n11.y?n10.y:n11.y;var maxX1=n10.x>n11.x?n10.x:n11.x;var maxY1=n10.y>n11.y?n10.y:n11.y;var intMinX=minX0>minX1?minX0:minX1;var intMaxX=maxX0<maxX1?maxX0:maxX1;var intMinY=minY0>minY1?minY0:minY1;var intMaxY=maxY0<maxY1?maxY0:maxY1;var intMidX=(intMinX+intMaxX)/2.0;var intMidY=(intMinY+intMaxY)/2.0;normPt.x=intMidX;normPt.y=intMidY;n00.x-=normPt.x;n00.y-=normPt.y;n01.x-=normPt.x;n01.y-=normPt.y;n10.x-=normPt.x;n10.y-=normPt.y;n11.x-=normPt.x;n11.y-=normPt.y;};RobustLineIntersector.prototype.computeIntersect=function computeIntersect(p1,p2,q1,q2){this._isProper=false;if(!Envelope.intersects(p1,p2,q1,q2)){return LineIntersector$$1.NO_INTERSECTION;}var Pq1=CGAlgorithms.orientationIndex(p1,p2,q1);var Pq2=CGAlgorithms.orientationIndex(p1,p2,q2);if(Pq1>0&&Pq2>0||Pq1<0&&Pq2<0){return LineIntersector$$1.NO_INTERSECTION;}var Qp1=CGAlgorithms.orientationIndex(q1,q2,p1);var Qp2=CGAlgorithms.orientationIndex(q1,q2,p2);if(Qp1>0&&Qp2>0||Qp1<0&&Qp2<0){return LineIntersector$$1.NO_INTERSECTION;}var collinear=Pq1===0&&Pq2===0&&Qp1===0&&Qp2===0;if(collinear){return this.computeCollinearIntersection(p1,p2,q1,q2);}if(Pq1===0||Pq2===0||Qp1===0||Qp2===0){this._isProper=false;if(p1.equals2D(q1)||p1.equals2D(q2)){this._intPt[0]=p1;}else if(p2.equals2D(q1)||p2.equals2D(q2)){this._intPt[0]=p2;}else if(Pq1===0){this._intPt[0]=new Coordinate(q1);}else if(Pq2===0){this._intPt[0]=new Coordinate(q2);}else if(Qp1===0){this._intPt[0]=new Coordinate(p1);}else if(Qp2===0){this._intPt[0]=new Coordinate(p2);}}else{this._isProper=true;this._intPt[0]=this.intersection(p1,p2,q1,q2);}return LineIntersector$$1.POINT_INTERSECTION;};RobustLineIntersector.prototype.interfaces_=function interfaces_(){return [];};RobustLineIntersector.prototype.getClass=function getClass(){return RobustLineIntersector;};RobustLineIntersector.nearestEndpoint=function nearestEndpoint(p1,p2,q1,q2){var nearestPt=p1;var minDist=CGAlgorithms.distancePointLine(p1,q1,q2);var dist=CGAlgorithms.distancePointLine(p2,q1,q2);if(dist<minDist){minDist=dist;nearestPt=p2;}dist=CGAlgorithms.distancePointLine(q1,p1,p2);if(dist<minDist){minDist=dist;nearestPt=q1;}dist=CGAlgorithms.distancePointLine(q2,p1,p2);if(dist<minDist){minDist=dist;nearestPt=q2;}return nearestPt;};return RobustLineIntersector;}(LineIntersector);var RobustDeterminant=function RobustDeterminant(){};RobustDeterminant.prototype.interfaces_=function interfaces_(){return [];};RobustDeterminant.prototype.getClass=function getClass(){return RobustDeterminant;};RobustDeterminant.orientationIndex=function orientationIndex(p1,p2,q){var dx1=p2.x-p1.x;var dy1=p2.y-p1.y;var dx2=q.x-p2.x;var dy2=q.y-p2.y;return RobustDeterminant.signOfDet2x2(dx1,dy1,dx2,dy2);};RobustDeterminant.signOfDet2x2=function signOfDet2x2(x1,y1,x2,y2){var sign=null;var swap=null;var k=null;sign=1;if(x1===0.0||y2===0.0){if(y1===0.0||x2===0.0){return 0;}else if(y1>0){if(x2>0){return -sign;}else{return sign;}}else{if(x2>0){return sign;}else{return -sign;}}}if(y1===0.0||x2===0.0){if(y2>0){if(x1>0){return sign;}else{return -sign;}}else{if(x1>0){return -sign;}else{return sign;}}}if(y1>0.0){if(y2>0.0){if(y1<=y2);else{sign=-sign;swap=x1;x1=x2;x2=swap;swap=y1;y1=y2;y2=swap;}}else{if(y1<=-y2){sign=-sign;x2=-x2;y2=-y2;}else{swap=x1;x1=-x2;x2=swap;swap=y1;y1=-y2;y2=swap;}}}else{if(y2>0.0){if(-y1<=y2){sign=-sign;x1=-x1;y1=-y1;}else{swap=-x1;x1=x2;x2=swap;swap=-y1;y1=y2;y2=swap;}}else{if(y1>=y2){x1=-x1;y1=-y1;x2=-x2;y2=-y2;}else{sign=-sign;swap=-x1;x1=-x2;x2=swap;swap=-y1;y1=-y2;y2=swap;}}}if(x1>0.0){if(x2>0.0){if(x1<=x2);else{return sign;}}else{return sign;}}else{if(x2>0.0){return -sign;}else{if(x1>=x2){sign=-sign;x1=-x1;x2=-x2;}else{return -sign;}}}while(true){k=Math.floor(x2/x1);x2=x2-k*x1;y2=y2-k*y1;if(y2<0.0){return -sign;}if(y2>y1){return sign;}if(x1>x2+x2){if(y1<y2+y2){return sign;}}else{if(y1>y2+y2){return -sign;}else{x2=x1-x2;y2=y1-y2;sign=-sign;}}if(y2===0.0){if(x2===0.0){return 0;}else{return -sign;}}if(x2===0.0){return sign;}k=Math.floor(x1/x2);x1=x1-k*x2;y1=y1-k*y2;if(y1<0.0){return sign;}if(y1>y2){return -sign;}if(x2>x1+x1){if(y2<y1+y1){return -sign;}}else{if(y2>y1+y1){return sign;}else{x1=x2-x1;y1=y2-y1;sign=-sign;}}if(y1===0.0){if(x1===0.0){return 0;}else{return sign;}}if(x1===0.0){return -sign;}}};var RayCrossingCounter=function RayCrossingCounter(){this._p=null;this._crossingCount=0;this._isPointOnSegment=false;var p=arguments[0];this._p=p;};RayCrossingCounter.prototype.countSegment=function countSegment(p1,p2){if(p1.x<this._p.x&&p2.x<this._p.x){return null;}if(this._p.x===p2.x&&this._p.y===p2.y){this._isPointOnSegment=true;return null;}if(p1.y===this._p.y&&p2.y===this._p.y){var minx=p1.x;var maxx=p2.x;if(minx>maxx){minx=p2.x;maxx=p1.x;}if(this._p.x>=minx&&this._p.x<=maxx){this._isPointOnSegment=true;}return null;}if(p1.y>this._p.y&&p2.y<=this._p.y||p2.y>this._p.y&&p1.y<=this._p.y){var x1=p1.x-this._p.x;var y1=p1.y-this._p.y;var x2=p2.x-this._p.x;var y2=p2.y-this._p.y;var xIntSign=RobustDeterminant.signOfDet2x2(x1,y1,x2,y2);if(xIntSign===0.0){this._isPointOnSegment=true;return null;}if(y2<y1){xIntSign=-xIntSign;}if(xIntSign>0.0){this._crossingCount++;}}};RayCrossingCounter.prototype.isPointInPolygon=function isPointInPolygon(){return this.getLocation()!==Location.EXTERIOR;};RayCrossingCounter.prototype.getLocation=function getLocation(){if(this._isPointOnSegment){return Location.BOUNDARY;}if(this._crossingCount%2===1){return Location.INTERIOR;}return Location.EXTERIOR;};RayCrossingCounter.prototype.isOnSegment=function isOnSegment(){return this._isPointOnSegment;};RayCrossingCounter.prototype.interfaces_=function interfaces_(){return [];};RayCrossingCounter.prototype.getClass=function getClass(){return RayCrossingCounter;};RayCrossingCounter.locatePointInRing=function locatePointInRing(){if(arguments[0]instanceof Coordinate&&hasInterface(arguments[1],CoordinateSequence)){var p=arguments[0];var ring=arguments[1];var counter=new RayCrossingCounter(p);var p1=new Coordinate();var p2=new Coordinate();for(var i=1;i<ring.size();i++){ring.getCoordinate(i,p1);ring.getCoordinate(i-1,p2);counter.countSegment(p1,p2);if(counter.isOnSegment()){return counter.getLocation();}}return counter.getLocation();}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Array){var p$1=arguments[0];var ring$1=arguments[1];var counter$1=new RayCrossingCounter(p$1);for(var i$1=1;i$1<ring$1.length;i$1++){var p1$1=ring$1[i$1];var p2$1=ring$1[i$1-1];counter$1.countSegment(p1$1,p2$1);if(counter$1.isOnSegment()){return counter$1.getLocation();}}return counter$1.getLocation();}};var CGAlgorithms=function CGAlgorithms(){};var staticAccessors$3={CLOCKWISE:{configurable:true},RIGHT:{configurable:true},COUNTERCLOCKWISE:{configurable:true},LEFT:{configurable:true},COLLINEAR:{configurable:true},STRAIGHT:{configurable:true}};CGAlgorithms.prototype.interfaces_=function interfaces_(){return [];};CGAlgorithms.prototype.getClass=function getClass(){return CGAlgorithms;};CGAlgorithms.orientationIndex=function orientationIndex(p1,p2,q){return CGAlgorithmsDD.orientationIndex(p1,p2,q);};CGAlgorithms.signedArea=function signedArea(){if(arguments[0]instanceof Array){var ring=arguments[0];if(ring.length<3){return 0.0;}var sum=0.0;var x0=ring[0].x;for(var i=1;i<ring.length-1;i++){var x=ring[i].x-x0;var y1=ring[i+1].y;var y2=ring[i-1].y;sum+=x*(y2-y1);}return sum/2.0;}else if(hasInterface(arguments[0],CoordinateSequence)){var ring$1=arguments[0];var n=ring$1.size();if(n<3){return 0.0;}var p0=new Coordinate();var p1=new Coordinate();var p2=new Coordinate();ring$1.getCoordinate(0,p1);ring$1.getCoordinate(1,p2);var x0$1=p1.x;p2.x-=x0$1;var sum$1=0.0;for(var i$1=1;i$1<n-1;i$1++){p0.y=p1.y;p1.x=p2.x;p1.y=p2.y;ring$1.getCoordinate(i$1+1,p2);p2.x-=x0$1;sum$1+=p1.x*(p0.y-p2.y);}return sum$1/2.0;}};CGAlgorithms.distanceLineLine=function distanceLineLine(A,B,C,D){if(A.equals(B)){return CGAlgorithms.distancePointLine(A,C,D);}if(C.equals(D)){return CGAlgorithms.distancePointLine(D,A,B);}var noIntersection=false;if(!Envelope.intersects(A,B,C,D)){noIntersection=true;}else{var denom=(B.x-A.x)*(D.y-C.y)-(B.y-A.y)*(D.x-C.x);if(denom===0){noIntersection=true;}else{var rNumb=(A.y-C.y)*(D.x-C.x)-(A.x-C.x)*(D.y-C.y);var sNum=(A.y-C.y)*(B.x-A.x)-(A.x-C.x)*(B.y-A.y);var s=sNum/denom;var r=rNumb/denom;if(r<0||r>1||s<0||s>1){noIntersection=true;}}}if(noIntersection){return MathUtil.min(CGAlgorithms.distancePointLine(A,C,D),CGAlgorithms.distancePointLine(B,C,D),CGAlgorithms.distancePointLine(C,A,B),CGAlgorithms.distancePointLine(D,A,B));}return 0.0;};CGAlgorithms.isPointInRing=function isPointInRing(p,ring){return CGAlgorithms.locatePointInRing(p,ring)!==Location.EXTERIOR;};CGAlgorithms.computeLength=function computeLength(pts){var n=pts.size();if(n<=1){return 0.0;}var len=0.0;var p=new Coordinate();pts.getCoordinate(0,p);var x0=p.x;var y0=p.y;for(var i=1;i<n;i++){pts.getCoordinate(i,p);var x1=p.x;var y1=p.y;var dx=x1-x0;var dy=y1-y0;len+=Math.sqrt(dx*dx+dy*dy);x0=x1;y0=y1;}return len;};CGAlgorithms.isCCW=function isCCW(ring){var nPts=ring.length-1;if(nPts<3){throw new IllegalArgumentException('Ring has fewer than 4 points, so orientation cannot be determined');}var hiPt=ring[0];var hiIndex=0;for(var i=1;i<=nPts;i++){var p=ring[i];if(p.y>hiPt.y){hiPt=p;hiIndex=i;}}var iPrev=hiIndex;do{iPrev=iPrev-1;if(iPrev<0){iPrev=nPts;}}while(ring[iPrev].equals2D(hiPt)&&iPrev!==hiIndex);var iNext=hiIndex;do{iNext=(iNext+1)%nPts;}while(ring[iNext].equals2D(hiPt)&&iNext!==hiIndex);var prev=ring[iPrev];var next=ring[iNext];if(prev.equals2D(hiPt)||next.equals2D(hiPt)||prev.equals2D(next)){return false;}var disc=CGAlgorithms.computeOrientation(prev,hiPt,next);var isCCW=false;if(disc===0){isCCW=prev.x>next.x;}else{isCCW=disc>0;}return isCCW;};CGAlgorithms.locatePointInRing=function locatePointInRing(p,ring){return RayCrossingCounter.locatePointInRing(p,ring);};CGAlgorithms.distancePointLinePerpendicular=function distancePointLinePerpendicular(p,A,B){var len2=(B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y);var s=((A.y-p.y)*(B.x-A.x)-(A.x-p.x)*(B.y-A.y))/len2;return Math.abs(s)*Math.sqrt(len2);};CGAlgorithms.computeOrientation=function computeOrientation(p1,p2,q){return CGAlgorithms.orientationIndex(p1,p2,q);};CGAlgorithms.distancePointLine=function distancePointLine(){if(arguments.length===2){var p=arguments[0];var line=arguments[1];if(line.length===0){throw new IllegalArgumentException('Line array must contain at least one vertex');}var minDistance=p.distance(line[0]);for(var i=0;i<line.length-1;i++){var dist=CGAlgorithms.distancePointLine(p,line[i],line[i+1]);if(dist<minDistance){minDistance=dist;}}return minDistance;}else if(arguments.length===3){var p$1=arguments[0];var A=arguments[1];var B=arguments[2];if(A.x===B.x&&A.y===B.y){return p$1.distance(A);}var len2=(B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y);var r=((p$1.x-A.x)*(B.x-A.x)+(p$1.y-A.y)*(B.y-A.y))/len2;if(r<=0.0){return p$1.distance(A);}if(r>=1.0){return p$1.distance(B);}var s=((A.y-p$1.y)*(B.x-A.x)-(A.x-p$1.x)*(B.y-A.y))/len2;return Math.abs(s)*Math.sqrt(len2);}};CGAlgorithms.isOnLine=function isOnLine(p,pt){var lineIntersector=new RobustLineIntersector();for(var i=1;i<pt.length;i++){var p0=pt[i-1];var p1=pt[i];lineIntersector.computeIntersection(p,p0,p1);if(lineIntersector.hasIntersection()){return true;}}return false;};staticAccessors$3.CLOCKWISE.get=function(){return -1;};staticAccessors$3.RIGHT.get=function(){return CGAlgorithms.CLOCKWISE;};staticAccessors$3.COUNTERCLOCKWISE.get=function(){return 1;};staticAccessors$3.LEFT.get=function(){return CGAlgorithms.COUNTERCLOCKWISE;};staticAccessors$3.COLLINEAR.get=function(){return 0;};staticAccessors$3.STRAIGHT.get=function(){return CGAlgorithms.COLLINEAR;};Object.defineProperties(CGAlgorithms,staticAccessors$3);var GeometryComponentFilter=function GeometryComponentFilter(){};GeometryComponentFilter.prototype.filter=function filter(geom){};GeometryComponentFilter.prototype.interfaces_=function interfaces_(){return [];};GeometryComponentFilter.prototype.getClass=function getClass(){return GeometryComponentFilter;};var Geometry=function Geometry(){var factory=arguments[0];this._envelope=null;this._factory=null;this._SRID=null;this._userData=null;this._factory=factory;this._SRID=factory.getSRID();};var staticAccessors$11={serialVersionUID:{configurable:true},SORTINDEX_POINT:{configurable:true},SORTINDEX_MULTIPOINT:{configurable:true},SORTINDEX_LINESTRING:{configurable:true},SORTINDEX_LINEARRING:{configurable:true},SORTINDEX_MULTILINESTRING:{configurable:true},SORTINDEX_POLYGON:{configurable:true},SORTINDEX_MULTIPOLYGON:{configurable:true},SORTINDEX_GEOMETRYCOLLECTION:{configurable:true},geometryChangedFilter:{configurable:true}};Geometry.prototype.isGeometryCollection=function isGeometryCollection(){return this.getSortIndex()===Geometry.SORTINDEX_GEOMETRYCOLLECTION;};Geometry.prototype.getFactory=function getFactory(){return this._factory;};Geometry.prototype.getGeometryN=function getGeometryN(n){return this;};Geometry.prototype.getArea=function getArea(){return 0.0;};Geometry.prototype.isRectangle=function isRectangle(){return false;};Geometry.prototype.equals=function equals(){if(arguments[0]instanceof Geometry){var g$1=arguments[0];if(g$1===null){return false;}return this.equalsTopo(g$1);}else if(arguments[0]instanceof Object){var o=arguments[0];if(!(o instanceof Geometry)){return false;}var g=o;return this.equalsExact(g);}};Geometry.prototype.equalsExact=function equalsExact(other){return this===other||this.equalsExact(other,0);};Geometry.prototype.geometryChanged=function geometryChanged(){this.apply(Geometry.geometryChangedFilter);};Geometry.prototype.geometryChangedAction=function geometryChangedAction(){this._envelope=null;};Geometry.prototype.equalsNorm=function equalsNorm(g){if(g===null){return false;}return this.norm().equalsExact(g.norm());};Geometry.prototype.getLength=function getLength(){return 0.0;};Geometry.prototype.getNumGeometries=function getNumGeometries(){return 1;};Geometry.prototype.compareTo=function compareTo(){if(arguments.length===1){var o=arguments[0];var other=o;if(this.getSortIndex()!==other.getSortIndex()){return this.getSortIndex()-other.getSortIndex();}if(this.isEmpty()&&other.isEmpty()){return 0;}if(this.isEmpty()){return -1;}if(other.isEmpty()){return 1;}return this.compareToSameClass(o);}else if(arguments.length===2){var other$1=arguments[0];var comp=arguments[1];if(this.getSortIndex()!==other$1.getSortIndex()){return this.getSortIndex()-other$1.getSortIndex();}if(this.isEmpty()&&other$1.isEmpty()){return 0;}if(this.isEmpty()){return -1;}if(other$1.isEmpty()){return 1;}return this.compareToSameClass(other$1,comp);}};Geometry.prototype.getUserData=function getUserData(){return this._userData;};Geometry.prototype.getSRID=function getSRID(){return this._SRID;};Geometry.prototype.getEnvelope=function getEnvelope(){return this.getFactory().toGeometry(this.getEnvelopeInternal());};Geometry.prototype.checkNotGeometryCollection=function checkNotGeometryCollection(g){if(g.getSortIndex()===Geometry.SORTINDEX_GEOMETRYCOLLECTION){throw new IllegalArgumentException('This method does not support GeometryCollection arguments');}};Geometry.prototype.equal=function equal(a,b,tolerance){if(tolerance===0){return a.equals(b);}return a.distance(b)<=tolerance;};Geometry.prototype.norm=function norm(){var copy=this.copy();copy.normalize();return copy;};Geometry.prototype.getPrecisionModel=function getPrecisionModel(){return this._factory.getPrecisionModel();};Geometry.prototype.getEnvelopeInternal=function getEnvelopeInternal(){if(this._envelope===null){this._envelope=this.computeEnvelopeInternal();}return new Envelope(this._envelope);};Geometry.prototype.setSRID=function setSRID(SRID){this._SRID=SRID;};Geometry.prototype.setUserData=function setUserData(userData){this._userData=userData;};Geometry.prototype.compare=function compare(a,b){var i=a.iterator();var j=b.iterator();while(i.hasNext()&&j.hasNext()){var aElement=i.next();var bElement=j.next();var comparison=aElement.compareTo(bElement);if(comparison!==0){return comparison;}}if(i.hasNext()){return 1;}if(j.hasNext()){return -1;}return 0;};Geometry.prototype.hashCode=function hashCode(){return this.getEnvelopeInternal().hashCode();};Geometry.prototype.isGeometryCollectionOrDerived=function isGeometryCollectionOrDerived(){if(this.getSortIndex()===Geometry.SORTINDEX_GEOMETRYCOLLECTION||this.getSortIndex()===Geometry.SORTINDEX_MULTIPOINT||this.getSortIndex()===Geometry.SORTINDEX_MULTILINESTRING||this.getSortIndex()===Geometry.SORTINDEX_MULTIPOLYGON){return true;}return false;};Geometry.prototype.interfaces_=function interfaces_(){return [Clonable,Comparable,Serializable];};Geometry.prototype.getClass=function getClass(){return Geometry;};Geometry.hasNonEmptyElements=function hasNonEmptyElements(geometries){for(var i=0;i<geometries.length;i++){if(!geometries[i].isEmpty()){return true;}}return false;};Geometry.hasNullElements=function hasNullElements(array){for(var i=0;i<array.length;i++){if(array[i]===null){return true;}}return false;};staticAccessors$11.serialVersionUID.get=function(){return 8763622679187376702;};staticAccessors$11.SORTINDEX_POINT.get=function(){return 0;};staticAccessors$11.SORTINDEX_MULTIPOINT.get=function(){return 1;};staticAccessors$11.SORTINDEX_LINESTRING.get=function(){return 2;};staticAccessors$11.SORTINDEX_LINEARRING.get=function(){return 3;};staticAccessors$11.SORTINDEX_MULTILINESTRING.get=function(){return 4;};staticAccessors$11.SORTINDEX_POLYGON.get=function(){return 5;};staticAccessors$11.SORTINDEX_MULTIPOLYGON.get=function(){return 6;};staticAccessors$11.SORTINDEX_GEOMETRYCOLLECTION.get=function(){return 7;};staticAccessors$11.geometryChangedFilter.get=function(){return geometryChangedFilter;};Object.defineProperties(Geometry,staticAccessors$11);var geometryChangedFilter=function geometryChangedFilter(){};geometryChangedFilter.interfaces_=function interfaces_(){return [GeometryComponentFilter];};geometryChangedFilter.filter=function filter(geom){geom.geometryChangedAction();};var CoordinateFilter=function CoordinateFilter(){};CoordinateFilter.prototype.filter=function filter(coord){};CoordinateFilter.prototype.interfaces_=function interfaces_(){return [];};CoordinateFilter.prototype.getClass=function getClass(){return CoordinateFilter;};var BoundaryNodeRule=function BoundaryNodeRule(){};var staticAccessors$12={Mod2BoundaryNodeRule:{configurable:true},EndPointBoundaryNodeRule:{configurable:true},MultiValentEndPointBoundaryNodeRule:{configurable:true},MonoValentEndPointBoundaryNodeRule:{configurable:true},MOD2_BOUNDARY_RULE:{configurable:true},ENDPOINT_BOUNDARY_RULE:{configurable:true},MULTIVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:true},MONOVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:true},OGC_SFS_BOUNDARY_RULE:{configurable:true}};BoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){};BoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [];};BoundaryNodeRule.prototype.getClass=function getClass(){return BoundaryNodeRule;};staticAccessors$12.Mod2BoundaryNodeRule.get=function(){return Mod2BoundaryNodeRule;};staticAccessors$12.EndPointBoundaryNodeRule.get=function(){return EndPointBoundaryNodeRule;};staticAccessors$12.MultiValentEndPointBoundaryNodeRule.get=function(){return MultiValentEndPointBoundaryNodeRule;};staticAccessors$12.MonoValentEndPointBoundaryNodeRule.get=function(){return MonoValentEndPointBoundaryNodeRule;};staticAccessors$12.MOD2_BOUNDARY_RULE.get=function(){return new Mod2BoundaryNodeRule();};staticAccessors$12.ENDPOINT_BOUNDARY_RULE.get=function(){return new EndPointBoundaryNodeRule();};staticAccessors$12.MULTIVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new MultiValentEndPointBoundaryNodeRule();};staticAccessors$12.MONOVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new MonoValentEndPointBoundaryNodeRule();};staticAccessors$12.OGC_SFS_BOUNDARY_RULE.get=function(){return BoundaryNodeRule.MOD2_BOUNDARY_RULE;};Object.defineProperties(BoundaryNodeRule,staticAccessors$12);var Mod2BoundaryNodeRule=function Mod2BoundaryNodeRule(){};Mod2BoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){return boundaryCount%2===1;};Mod2BoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [BoundaryNodeRule];};Mod2BoundaryNodeRule.prototype.getClass=function getClass(){return Mod2BoundaryNodeRule;};var EndPointBoundaryNodeRule=function EndPointBoundaryNodeRule(){};EndPointBoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){return boundaryCount>0;};EndPointBoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [BoundaryNodeRule];};EndPointBoundaryNodeRule.prototype.getClass=function getClass(){return EndPointBoundaryNodeRule;};var MultiValentEndPointBoundaryNodeRule=function MultiValentEndPointBoundaryNodeRule(){};MultiValentEndPointBoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){return boundaryCount>1;};MultiValentEndPointBoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [BoundaryNodeRule];};MultiValentEndPointBoundaryNodeRule.prototype.getClass=function getClass(){return MultiValentEndPointBoundaryNodeRule;};var MonoValentEndPointBoundaryNodeRule=function MonoValentEndPointBoundaryNodeRule(){};MonoValentEndPointBoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){return boundaryCount===1;};MonoValentEndPointBoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [BoundaryNodeRule];};MonoValentEndPointBoundaryNodeRule.prototype.getClass=function getClass(){return MonoValentEndPointBoundaryNodeRule;};// import Iterator from './Iterator'
    /**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/Collection.html
     *
     * @constructor
     * @private
     */var Collection=function Collection(){};Collection.prototype.add=function add(){};/**
     * Appends all of the elements in the specified collection to the end of this
     * list, in the order that they are returned by the specified collection's
     * iterator (optional operation).
     * @param {javascript.util.Collection} c
     * @return {boolean}
     */Collection.prototype.addAll=function addAll(){};/**
     * Returns true if this collection contains no elements.
     * @return {boolean}
     */Collection.prototype.isEmpty=function isEmpty(){};/**
     * Returns an iterator over the elements in this collection.
     * @return {javascript.util.Iterator}
     */Collection.prototype.iterator=function iterator(){};/**
     * Returns an iterator over the elements in this collection.
     * @return {number}
     */Collection.prototype.size=function size(){};/**
     * Returns an array containing all of the elements in this collection.
     * @return {Array}
     */Collection.prototype.toArray=function toArray(){};/**
     * Removes a single instance of the specified element from this collection if it
     * is present. (optional)
     * @param {Object} e
     * @return {boolean}
     */Collection.prototype.remove=function remove(){};/**
     * @param {string=} message Optional message
     * @extends {Error}
     * @constructor
     * @private
     */function IndexOutOfBoundsException(message){this.message=message||'';}IndexOutOfBoundsException.prototype=new Error();/**
     * @type {string}
     */IndexOutOfBoundsException.prototype.name='IndexOutOfBoundsException';/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/Iterator.html
     * @constructor
     * @private
     */var Iterator=function Iterator(){};Iterator.prototype.hasNext=function hasNext(){};/**
     * Returns the next element in the iteration.
     * @return {Object}
     */Iterator.prototype.next=function next(){};/**
     * Removes from the underlying collection the last element returned by the
     * iterator (optional operation).
     */Iterator.prototype.remove=function remove(){};/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/List.html
     *
     * @extends {javascript.util.Collection}
     * @constructor
     * @private
     */var List=function(Collection$$1){function List(){Collection$$1.apply(this,arguments);}if(Collection$$1)List.__proto__=Collection$$1;List.prototype=Object.create(Collection$$1&&Collection$$1.prototype);List.prototype.constructor=List;List.prototype.get=function get(){};/**
       * Replaces the element at the specified position in this list with the
       * specified element (optional operation).
       * @param {number} index
       * @param {Object} e
       * @return {Object}
       */List.prototype.set=function set(){};/**
       * Returns true if this collection contains no elements.
       * @return {boolean}
       */List.prototype.isEmpty=function isEmpty(){};return List;}(Collection);/**
     * @param {string=} message Optional message
     * @extends {Error}
     * @constructor
     * @private
     */function NoSuchElementException(message){this.message=message||'';}NoSuchElementException.prototype=new Error();/**
     * @type {string}
     */NoSuchElementException.prototype.name='NoSuchElementException';// import OperationNotSupported from './OperationNotSupported'
    /**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/ArrayList.html
     *
     * @extends List
     * @private
     */var ArrayList=function(List$$1){function ArrayList(){List$$1.call(this);this.array_=[];if(arguments[0]instanceof Collection){this.addAll(arguments[0]);}}if(List$$1)ArrayList.__proto__=List$$1;ArrayList.prototype=Object.create(List$$1&&List$$1.prototype);ArrayList.prototype.constructor=ArrayList;ArrayList.prototype.ensureCapacity=function ensureCapacity(){};ArrayList.prototype.interfaces_=function interfaces_(){return [List$$1,Collection];};/**
       * @override
       */ArrayList.prototype.add=function add(e){if(arguments.length===1){this.array_.push(e);}else{this.array_.splice(arguments[0],arguments[1]);}return true;};ArrayList.prototype.clear=function clear(){this.array_=[];};/**
       * @override
       */ArrayList.prototype.addAll=function addAll(c){var this$1=this;for(var i=c.iterator();i.hasNext();){this$1.add(i.next());}return true;};/**
       * @override
       */ArrayList.prototype.set=function set(index,element){var oldElement=this.array_[index];this.array_[index]=element;return oldElement;};/**
       * @override
       */ArrayList.prototype.iterator=function iterator(){return new Iterator_(this);};/**
       * @override
       */ArrayList.prototype.get=function get(index){if(index<0||index>=this.size()){throw new IndexOutOfBoundsException();}return this.array_[index];};/**
       * @override
       */ArrayList.prototype.isEmpty=function isEmpty(){return this.array_.length===0;};/**
       * @override
       */ArrayList.prototype.size=function size(){return this.array_.length;};/**
       * @override
       */ArrayList.prototype.toArray=function toArray(){var this$1=this;var array=[];for(var i=0,len=this.array_.length;i<len;i++){array.push(this$1.array_[i]);}return array;};/**
       * @override
       */ArrayList.prototype.remove=function remove(o){var this$1=this;var found=false;for(var i=0,len=this.array_.length;i<len;i++){if(this$1.array_[i]===o){this$1.array_.splice(i,1);found=true;break;}}return found;};return ArrayList;}(List);/**
     * @extends {Iterator}
     * @param {ArrayList} arrayList
     * @constructor
     * @private
     */var Iterator_=function(Iterator$$1){function Iterator_(arrayList){Iterator$$1.call(this);/**
         * @type {ArrayList}
         * @private
        */this.arrayList_=arrayList;/**
         * @type {number}
         * @private
        */this.position_=0;}if(Iterator$$1)Iterator_.__proto__=Iterator$$1;Iterator_.prototype=Object.create(Iterator$$1&&Iterator$$1.prototype);Iterator_.prototype.constructor=Iterator_;/**
       * @override
       */Iterator_.prototype.next=function next(){if(this.position_===this.arrayList_.size()){throw new NoSuchElementException();}return this.arrayList_.get(this.position_++);};/**
       * @override
       */Iterator_.prototype.hasNext=function hasNext(){if(this.position_<this.arrayList_.size()){return true;}else{return false;}};/**
       * TODO: should be in ListIterator
       * @override
       */Iterator_.prototype.set=function set(element){return this.arrayList_.set(this.position_-1,element);};/**
       * @override
       */Iterator_.prototype.remove=function remove(){this.arrayList_.remove(this.arrayList_.get(this.position_));};return Iterator_;}(Iterator);var CoordinateList=function(ArrayList$$1){function CoordinateList(){ArrayList$$1.call(this);if(arguments.length===0);else if(arguments.length===1){var coord=arguments[0];this.ensureCapacity(coord.length);this.add(coord,true);}else if(arguments.length===2){var coord$1=arguments[0];var allowRepeated=arguments[1];this.ensureCapacity(coord$1.length);this.add(coord$1,allowRepeated);}}if(ArrayList$$1)CoordinateList.__proto__=ArrayList$$1;CoordinateList.prototype=Object.create(ArrayList$$1&&ArrayList$$1.prototype);CoordinateList.prototype.constructor=CoordinateList;var staticAccessors={coordArrayType:{configurable:true}};staticAccessors.coordArrayType.get=function(){return new Array(0).fill(null);};CoordinateList.prototype.getCoordinate=function getCoordinate(i){return this.get(i);};CoordinateList.prototype.addAll=function addAll(){var this$1=this;if(arguments.length===2){var coll=arguments[0];var allowRepeated=arguments[1];var isChanged=false;for(var i=coll.iterator();i.hasNext();){this$1.add(i.next(),allowRepeated);isChanged=true;}return isChanged;}else{return ArrayList$$1.prototype.addAll.apply(this,arguments);}};CoordinateList.prototype.clone=function clone(){var this$1=this;var clone=ArrayList$$1.prototype.clone.call(this);for(var i=0;i<this.size();i++){clone.add(i,this$1.get(i).copy());}return clone;};CoordinateList.prototype.toCoordinateArray=function toCoordinateArray(){return this.toArray(CoordinateList.coordArrayType);};CoordinateList.prototype.add=function add(){var this$1=this;if(arguments.length===1){var coord=arguments[0];ArrayList$$1.prototype.add.call(this,coord);}else if(arguments.length===2){if(arguments[0]instanceof Array&&typeof arguments[1]==='boolean'){var coord$1=arguments[0];var allowRepeated=arguments[1];this.add(coord$1,allowRepeated,true);return true;}else if(arguments[0]instanceof Coordinate&&typeof arguments[1]==='boolean'){var coord$2=arguments[0];var allowRepeated$1=arguments[1];if(!allowRepeated$1){if(this.size()>=1){var last=this.get(this.size()-1);if(last.equals2D(coord$2)){return null;}}}ArrayList$$1.prototype.add.call(this,coord$2);}else if(arguments[0]instanceof Object&&typeof arguments[1]==='boolean'){var obj=arguments[0];var allowRepeated$2=arguments[1];this.add(obj,allowRepeated$2);return true;}}else if(arguments.length===3){if(typeof arguments[2]==='boolean'&&arguments[0]instanceof Array&&typeof arguments[1]==='boolean'){var coord$3=arguments[0];var allowRepeated$3=arguments[1];var direction=arguments[2];if(direction){for(var i$1=0;i$1<coord$3.length;i$1++){this$1.add(coord$3[i$1],allowRepeated$3);}}else{for(var i$2=coord$3.length-1;i$2>=0;i$2--){this$1.add(coord$3[i$2],allowRepeated$3);}}return true;}else if(typeof arguments[2]==='boolean'&&Number.isInteger(arguments[0])&&arguments[1]instanceof Coordinate){var i$3=arguments[0];var coord$4=arguments[1];var allowRepeated$4=arguments[2];if(!allowRepeated$4){var size=this.size();if(size>0){if(i$3>0){var prev=this.get(i$3-1);if(prev.equals2D(coord$4)){return null;}}if(i$3<size){var next=this.get(i$3);if(next.equals2D(coord$4)){return null;}}}}ArrayList$$1.prototype.add.call(this,i$3,coord$4);}}else if(arguments.length===4){var coord$5=arguments[0];var allowRepeated$5=arguments[1];var start=arguments[2];var end=arguments[3];var inc=1;if(start>end){inc=-1;}for(var i=start;i!==end;i+=inc){this$1.add(coord$5[i],allowRepeated$5);}return true;}};CoordinateList.prototype.closeRing=function closeRing(){if(this.size()>0){this.add(new Coordinate(this.get(0)),false);}};CoordinateList.prototype.interfaces_=function interfaces_(){return [];};CoordinateList.prototype.getClass=function getClass(){return CoordinateList;};Object.defineProperties(CoordinateList,staticAccessors);return CoordinateList;}(ArrayList);var CoordinateArrays=function CoordinateArrays(){};var staticAccessors$13={ForwardComparator:{configurable:true},BidirectionalComparator:{configurable:true},coordArrayType:{configurable:true}};staticAccessors$13.ForwardComparator.get=function(){return ForwardComparator;};staticAccessors$13.BidirectionalComparator.get=function(){return BidirectionalComparator;};staticAccessors$13.coordArrayType.get=function(){return new Array(0).fill(null);};CoordinateArrays.prototype.interfaces_=function interfaces_(){return [];};CoordinateArrays.prototype.getClass=function getClass(){return CoordinateArrays;};CoordinateArrays.isRing=function isRing(pts){if(pts.length<4){return false;}if(!pts[0].equals2D(pts[pts.length-1])){return false;}return true;};CoordinateArrays.ptNotInList=function ptNotInList(testPts,pts){for(var i=0;i<testPts.length;i++){var testPt=testPts[i];if(CoordinateArrays.indexOf(testPt,pts)<0){return testPt;}}return null;};CoordinateArrays.scroll=function scroll(coordinates,firstCoordinate){var i=CoordinateArrays.indexOf(firstCoordinate,coordinates);if(i<0){return null;}var newCoordinates=new Array(coordinates.length).fill(null);System.arraycopy(coordinates,i,newCoordinates,0,coordinates.length-i);System.arraycopy(coordinates,0,newCoordinates,coordinates.length-i,i);System.arraycopy(newCoordinates,0,coordinates,0,coordinates.length);};CoordinateArrays.equals=function equals(){if(arguments.length===2){var coord1=arguments[0];var coord2=arguments[1];if(coord1===coord2){return true;}if(coord1===null||coord2===null){return false;}if(coord1.length!==coord2.length){return false;}for(var i=0;i<coord1.length;i++){if(!coord1[i].equals(coord2[i])){return false;}}return true;}else if(arguments.length===3){var coord1$1=arguments[0];var coord2$1=arguments[1];var coordinateComparator=arguments[2];if(coord1$1===coord2$1){return true;}if(coord1$1===null||coord2$1===null){return false;}if(coord1$1.length!==coord2$1.length){return false;}for(var i$1=0;i$1<coord1$1.length;i$1++){if(coordinateComparator.compare(coord1$1[i$1],coord2$1[i$1])!==0){return false;}}return true;}};CoordinateArrays.intersection=function intersection(coordinates,env){var coordList=new CoordinateList();for(var i=0;i<coordinates.length;i++){if(env.intersects(coordinates[i])){coordList.add(coordinates[i],true);}}return coordList.toCoordinateArray();};CoordinateArrays.hasRepeatedPoints=function hasRepeatedPoints(coord){for(var i=1;i<coord.length;i++){if(coord[i-1].equals(coord[i])){return true;}}return false;};CoordinateArrays.removeRepeatedPoints=function removeRepeatedPoints(coord){if(!CoordinateArrays.hasRepeatedPoints(coord)){return coord;}var coordList=new CoordinateList(coord,false);return coordList.toCoordinateArray();};CoordinateArrays.reverse=function reverse(coord){var last=coord.length-1;var mid=Math.trunc(last/2);for(var i=0;i<=mid;i++){var tmp=coord[i];coord[i]=coord[last-i];coord[last-i]=tmp;}};CoordinateArrays.removeNull=function removeNull(coord){var nonNull=0;for(var i=0;i<coord.length;i++){if(coord[i]!==null){nonNull++;}}var newCoord=new Array(nonNull).fill(null);if(nonNull===0){return newCoord;}var j=0;for(var i$1=0;i$1<coord.length;i$1++){if(coord[i$1]!==null){newCoord[j++]=coord[i$1];}}return newCoord;};CoordinateArrays.copyDeep=function copyDeep(){if(arguments.length===1){var coordinates=arguments[0];var copy=new Array(coordinates.length).fill(null);for(var i=0;i<coordinates.length;i++){copy[i]=new Coordinate(coordinates[i]);}return copy;}else if(arguments.length===5){var src=arguments[0];var srcStart=arguments[1];var dest=arguments[2];var destStart=arguments[3];var length=arguments[4];for(var i$1=0;i$1<length;i$1++){dest[destStart+i$1]=new Coordinate(src[srcStart+i$1]);}}};CoordinateArrays.isEqualReversed=function isEqualReversed(pts1,pts2){for(var i=0;i<pts1.length;i++){var p1=pts1[i];var p2=pts2[pts1.length-i-1];if(p1.compareTo(p2)!==0){return false;}}return true;};CoordinateArrays.envelope=function envelope(coordinates){var env=new Envelope();for(var i=0;i<coordinates.length;i++){env.expandToInclude(coordinates[i]);}return env;};CoordinateArrays.toCoordinateArray=function toCoordinateArray(coordList){return coordList.toArray(CoordinateArrays.coordArrayType);};CoordinateArrays.atLeastNCoordinatesOrNothing=function atLeastNCoordinatesOrNothing(n,c){return c.length>=n?c:[];};CoordinateArrays.indexOf=function indexOf(coordinate,coordinates){for(var i=0;i<coordinates.length;i++){if(coordinate.equals(coordinates[i])){return i;}}return -1;};CoordinateArrays.increasingDirection=function increasingDirection(pts){for(var i=0;i<Math.trunc(pts.length/2);i++){var j=pts.length-1-i;var comp=pts[i].compareTo(pts[j]);if(comp!==0){return comp;}}return 1;};CoordinateArrays.compare=function compare(pts1,pts2){var i=0;while(i<pts1.length&&i<pts2.length){var compare=pts1[i].compareTo(pts2[i]);if(compare!==0){return compare;}i++;}if(i<pts2.length){return -1;}if(i<pts1.length){return 1;}return 0;};CoordinateArrays.minCoordinate=function minCoordinate(coordinates){var minCoord=null;for(var i=0;i<coordinates.length;i++){if(minCoord===null||minCoord.compareTo(coordinates[i])>0){minCoord=coordinates[i];}}return minCoord;};CoordinateArrays.extract=function extract(pts,start,end){start=MathUtil.clamp(start,0,pts.length);end=MathUtil.clamp(end,-1,pts.length);var npts=end-start+1;if(end<0){npts=0;}if(start>=pts.length){npts=0;}if(end<start){npts=0;}var extractPts=new Array(npts).fill(null);if(npts===0){return extractPts;}var iPts=0;for(var i=start;i<=end;i++){extractPts[iPts++]=pts[i];}return extractPts;};Object.defineProperties(CoordinateArrays,staticAccessors$13);var ForwardComparator=function ForwardComparator(){};ForwardComparator.prototype.compare=function compare(o1,o2){var pts1=o1;var pts2=o2;return CoordinateArrays.compare(pts1,pts2);};ForwardComparator.prototype.interfaces_=function interfaces_(){return [Comparator];};ForwardComparator.prototype.getClass=function getClass(){return ForwardComparator;};var BidirectionalComparator=function BidirectionalComparator(){};BidirectionalComparator.prototype.compare=function compare(o1,o2){var pts1=o1;var pts2=o2;if(pts1.length<pts2.length){return -1;}if(pts1.length>pts2.length){return 1;}if(pts1.length===0){return 0;}var forwardComp=CoordinateArrays.compare(pts1,pts2);var isEqualRev=CoordinateArrays.isEqualReversed(pts1,pts2);if(isEqualRev){return 0;}return forwardComp;};BidirectionalComparator.prototype.OLDcompare=function OLDcompare(o1,o2){var pts1=o1;var pts2=o2;if(pts1.length<pts2.length){return -1;}if(pts1.length>pts2.length){return 1;}if(pts1.length===0){return 0;}var dir1=CoordinateArrays.increasingDirection(pts1);var dir2=CoordinateArrays.increasingDirection(pts2);var i1=dir1>0?0:pts1.length-1;var i2=dir2>0?0:pts1.length-1;for(var i=0;i<pts1.length;i++){var comparePt=pts1[i1].compareTo(pts2[i2]);if(comparePt!==0){return comparePt;}i1+=dir1;i2+=dir2;}return 0;};BidirectionalComparator.prototype.interfaces_=function interfaces_(){return [Comparator];};BidirectionalComparator.prototype.getClass=function getClass(){return BidirectionalComparator;};/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/Map.html
     *
     * @constructor
     * @private
     */var Map$1=function Map(){};Map$1.prototype.get=function get(){};/**
     * Associates the specified value with the specified key in this map (optional
     * operation).
     * @param {Object} key
     * @param {Object} value
     * @return {Object}
     */Map$1.prototype.put=function put(){};/**
     * Returns the number of key-value mappings in this map.
     * @return {number}
     */Map$1.prototype.size=function size(){};/**
     * Returns a Collection view of the values contained in this map.
     * @return {javascript.util.Collection}
     */Map$1.prototype.values=function values(){};/**
     * Returns a {@link Set} view of the mappings contained in this map.
     * The set is backed by the map, so changes to the map are
     * reflected in the set, and vice-versa.If the map is modified
     * while an iteration over the set is in progress (except through
     * the iterator's own <tt>remove</tt> operation, or through the
     * <tt>setValue</tt> operation on a map entry returned by the
     * iterator) the results of the iteration are undefined.The set
     * supports element removal, which removes the corresponding
     * mapping from the map, via the <tt>Iterator.remove</tt>,
     * <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and
     * <tt>clear</tt> operations.It does not support the
     * <tt>add</tt> or <tt>addAll</tt> operations.
     *
     * @return {Set} a set view of the mappings contained in this map
     */Map$1.prototype.entrySet=function entrySet(){};/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/SortedMap.html
     *
     * @extends {Map}
     * @constructor
     * @private
     */var SortedMap=function(Map){function SortedMap(){Map.apply(this,arguments);}if(Map)SortedMap.__proto__=Map;SortedMap.prototype=Object.create(Map&&Map.prototype);SortedMap.prototype.constructor=SortedMap;return SortedMap;}(Map$1);/**
     * @param {string=} message Optional message
     * @extends {Error}
     * @constructor
     * @private
     */function OperationNotSupported(message){this.message=message||'';}OperationNotSupported.prototype=new Error();/**
     * @type {string}
     */OperationNotSupported.prototype.name='OperationNotSupported';/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/Set.html
     *
     * @extends {Collection}
     * @constructor
     * @private
     */function Set(){}Set.prototype=new Collection();/**
     * Returns true if this set contains the specified element. More formally,
     * returns true if and only if this set contains an element e such that (o==null ?
     * e==null : o.equals(e)).
     * @param {Object} e
     * @return {boolean}
     */Set.prototype.contains=function(){};/**
     * @see http://docs.oracle.com/javase/6/docs/api/java/util/HashSet.html
     *
     * @extends {javascript.util.Set}
     * @constructor
     * @private
     */var HashSet=function(Set$$1){function HashSet(){Set$$1.call(this);this.array_=[];if(arguments[0]instanceof Collection){this.addAll(arguments[0]);}}if(Set$$1)HashSet.__proto__=Set$$1;HashSet.prototype=Object.create(Set$$1&&Set$$1.prototype);HashSet.prototype.constructor=HashSet;/**
       * @override
       */HashSet.prototype.contains=function contains(o){var this$1=this;for(var i=0,len=this.array_.length;i<len;i++){var e=this$1.array_[i];if(e===o){return true;}}return false;};/**
       * @override
       */HashSet.prototype.add=function add(o){if(this.contains(o)){return false;}this.array_.push(o);return true;};/**
       * @override
       */HashSet.prototype.addAll=function addAll(c){var this$1=this;for(var i=c.iterator();i.hasNext();){this$1.add(i.next());}return true;};/**
       * @override
       */HashSet.prototype.remove=function remove(o){// throw new javascript.util.OperationNotSupported()
    throw new Error();};/**
       * @override
       */HashSet.prototype.size=function size(){return this.array_.length;};/**
       * @override
       */HashSet.prototype.isEmpty=function isEmpty(){return this.array_.length===0;};/**
       * @override
       */HashSet.prototype.toArray=function toArray(){var this$1=this;var array=[];for(var i=0,len=this.array_.length;i<len;i++){array.push(this$1.array_[i]);}return array;};/**
       * @override
       */HashSet.prototype.iterator=function iterator(){return new Iterator_$1(this);};return HashSet;}(Set);/**
       * @extends {Iterator}
       * @param {HashSet} hashSet
       * @constructor
       * @private
       */var Iterator_$1=function(Iterator$$1){function Iterator_(hashSet){Iterator$$1.call(this);/**
         * @type {HashSet}
         * @private
         */this.hashSet_=hashSet;/**
         * @type {number}
         * @private
         */this.position_=0;}if(Iterator$$1)Iterator_.__proto__=Iterator$$1;Iterator_.prototype=Object.create(Iterator$$1&&Iterator$$1.prototype);Iterator_.prototype.constructor=Iterator_;/**
       * @override
       */Iterator_.prototype.next=function next(){if(this.position_===this.hashSet_.size()){throw new NoSuchElementException();}return this.hashSet_.array_[this.position_++];};/**
       * @override
       */Iterator_.prototype.hasNext=function hasNext(){if(this.position_<this.hashSet_.size()){return true;}else{return false;}};/**
       * @override
       */Iterator_.prototype.remove=function remove(){throw new OperationNotSupported();};return Iterator_;}(Iterator);var BLACK=0;var RED=1;function colorOf(p){return p===null?BLACK:p.color;}function parentOf(p){return p===null?null:p.parent;}function setColor(p,c){if(p!==null){p.color=c;}}function leftOf(p){return p===null?null:p.left;}function rightOf(p){return p===null?null:p.right;}/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/TreeMap.html
     *
     * @extends {SortedMap}
     * @constructor
     * @private
     */function TreeMap(){/**
       * @type {Object}
       * @private
       */this.root_=null;/**
       * @type {number}
       * @private
      */this.size_=0;}TreeMap.prototype=new SortedMap();/**
     * @override
     */TreeMap.prototype.get=function(key){var p=this.root_;while(p!==null){var cmp=key['compareTo'](p.key);if(cmp<0){p=p.left;}else if(cmp>0){p=p.right;}else{return p.value;}}return null;};/**
     * @override
     */TreeMap.prototype.put=function(key,value){if(this.root_===null){this.root_={key:key,value:value,left:null,right:null,parent:null,color:BLACK,getValue:function getValue(){return this.value;},getKey:function getKey(){return this.key;}};this.size_=1;return null;}var t=this.root_;var parent;var cmp;do{parent=t;cmp=key['compareTo'](t.key);if(cmp<0){t=t.left;}else if(cmp>0){t=t.right;}else{var oldValue=t.value;t.value=value;return oldValue;}}while(t!==null);var e={key:key,left:null,right:null,value:value,parent:parent,color:BLACK,getValue:function getValue(){return this.value;},getKey:function getKey(){return this.key;}};if(cmp<0){parent.left=e;}else{parent.right=e;}this.fixAfterInsertion(e);this.size_++;return null;};/**
     * @param {Object} x
     */TreeMap.prototype.fixAfterInsertion=function(x){var this$1=this;x.color=RED;while(x!=null&&x!==this.root_&&x.parent.color===RED){if(parentOf(x)===leftOf(parentOf(parentOf(x)))){var y=rightOf(parentOf(parentOf(x)));if(colorOf(y)===RED){setColor(parentOf(x),BLACK);setColor(y,BLACK);setColor(parentOf(parentOf(x)),RED);x=parentOf(parentOf(x));}else{if(x===rightOf(parentOf(x))){x=parentOf(x);this$1.rotateLeft(x);}setColor(parentOf(x),BLACK);setColor(parentOf(parentOf(x)),RED);this$1.rotateRight(parentOf(parentOf(x)));}}else{var y$1=leftOf(parentOf(parentOf(x)));if(colorOf(y$1)===RED){setColor(parentOf(x),BLACK);setColor(y$1,BLACK);setColor(parentOf(parentOf(x)),RED);x=parentOf(parentOf(x));}else{if(x===leftOf(parentOf(x))){x=parentOf(x);this$1.rotateRight(x);}setColor(parentOf(x),BLACK);setColor(parentOf(parentOf(x)),RED);this$1.rotateLeft(parentOf(parentOf(x)));}}}this.root_.color=BLACK;};/**
     * @override
     */TreeMap.prototype.values=function(){var arrayList=new ArrayList();var p=this.getFirstEntry();if(p!==null){arrayList.add(p.value);while((p=TreeMap.successor(p))!==null){arrayList.add(p.value);}}return arrayList;};/**
     * @override
     */TreeMap.prototype.entrySet=function(){var hashSet=new HashSet();var p=this.getFirstEntry();if(p!==null){hashSet.add(p);while((p=TreeMap.successor(p))!==null){hashSet.add(p);}}return hashSet;};/**
     * @param {Object} p
     */TreeMap.prototype.rotateLeft=function(p){if(p!=null){var r=p.right;p.right=r.left;if(r.left!=null){r.left.parent=p;}r.parent=p.parent;if(p.parent===null){this.root_=r;}else if(p.parent.left===p){p.parent.left=r;}else{p.parent.right=r;}r.left=p;p.parent=r;}};/**
     * @param {Object} p
     */TreeMap.prototype.rotateRight=function(p){if(p!=null){var l=p.left;p.left=l.right;if(l.right!=null){l.right.parent=p;}l.parent=p.parent;if(p.parent===null){this.root_=l;}else if(p.parent.right===p){p.parent.right=l;}else{p.parent.left=l;}l.right=p;p.parent=l;}};/**
     * @return {Object}
     */TreeMap.prototype.getFirstEntry=function(){var p=this.root_;if(p!=null){while(p.left!=null){p=p.left;}}return p;};/**
     * @param {Object} t
     * @return {Object}
     * @private
     */TreeMap.successor=function(t){if(t===null){return null;}else if(t.right!==null){var p=t.right;while(p.left!==null){p=p.left;}return p;}else{var p$1=t.parent;var ch=t;while(p$1!==null&&ch===p$1.right){ch=p$1;p$1=p$1.parent;}return p$1;}};/**
     * @override
     */TreeMap.prototype.size=function(){return this.size_;};var Lineal=function Lineal(){};Lineal.prototype.interfaces_=function interfaces_(){return [];};Lineal.prototype.getClass=function getClass(){return Lineal;};/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/SortedSet.html
     *
     * @extends {Set}
     * @constructor
     * @private
     */function SortedSet(){}SortedSet.prototype=new Set();// import Iterator from './Iterator'
    /**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/TreeSet.html
     *
     * @extends {SortedSet}
     * @constructor
     * @private
     */function TreeSet(){/**
       * @type {Array}
       * @private
      */this.array_=[];if(arguments[0]instanceof Collection){this.addAll(arguments[0]);}}TreeSet.prototype=new SortedSet();/**
     * @override
     */TreeSet.prototype.contains=function(o){var this$1=this;for(var i=0,len=this.array_.length;i<len;i++){var e=this$1.array_[i];if(e['compareTo'](o)===0){return true;}}return false;};/**
     * @override
     */TreeSet.prototype.add=function(o){var this$1=this;if(this.contains(o)){return false;}for(var i=0,len=this.array_.length;i<len;i++){var e=this$1.array_[i];if(e['compareTo'](o)===1){this$1.array_.splice(i,0,o);return true;}}this.array_.push(o);return true;};/**
     * @override
     */TreeSet.prototype.addAll=function(c){var this$1=this;for(var i=c.iterator();i.hasNext();){this$1.add(i.next());}return true;};/**
     * @override
     */TreeSet.prototype.remove=function(e){throw new OperationNotSupported();};/**
     * @override
     */TreeSet.prototype.size=function(){return this.array_.length;};/**
     * @override
     */TreeSet.prototype.isEmpty=function(){return this.array_.length===0;};/**
     * @override
     */TreeSet.prototype.toArray=function(){var this$1=this;var array=[];for(var i=0,len=this.array_.length;i<len;i++){array.push(this$1.array_[i]);}return array;};/**
     * @override
     */TreeSet.prototype.iterator=function(){return new Iterator_$2(this);};/**
     * @extends {javascript.util.Iterator}
     * @param {javascript.util.TreeSet} treeSet
     * @constructor
     * @private
     */var Iterator_$2=function Iterator_$2(treeSet){/**
       * @type {javascript.util.TreeSet}
       * @private
       */this.treeSet_=treeSet;/**
       * @type {number}
       * @private
       */this.position_=0;};/**
     * @override
     */Iterator_$2.prototype.next=function(){if(this.position_===this.treeSet_.size()){throw new NoSuchElementException();}return this.treeSet_.array_[this.position_++];};/**
     * @override
     */Iterator_$2.prototype.hasNext=function(){if(this.position_<this.treeSet_.size()){return true;}else{return false;}};/**
     * @override
     */Iterator_$2.prototype.remove=function(){throw new OperationNotSupported();};/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html
     *
     * @constructor
     * @private
     */var Arrays=function Arrays(){};Arrays.sort=function sort(){var a=arguments[0];var i;var t;var comparator;var compare;if(arguments.length===1){compare=function compare(a,b){return a.compareTo(b);};a.sort(compare);}else if(arguments.length===2){comparator=arguments[1];compare=function compare(a,b){return comparator['compare'](a,b);};a.sort(compare);}else if(arguments.length===3){t=a.slice(arguments[1],arguments[2]);t.sort();var r=a.slice(0,arguments[1]).concat(t,a.slice(arguments[2],a.length));a.splice(0,a.length);for(i=0;i<r.length;i++){a.push(r[i]);}}else if(arguments.length===4){t=a.slice(arguments[1],arguments[2]);comparator=arguments[3];compare=function compare(a,b){return comparator['compare'](a,b);};t.sort(compare);r=a.slice(0,arguments[1]).concat(t,a.slice(arguments[2],a.length));a.splice(0,a.length);for(i=0;i<r.length;i++){a.push(r[i]);}}};/**
     * @param {Array} array
     * @return {ArrayList}
     */Arrays.asList=function asList(array){var arrayList=new ArrayList();for(var i=0,len=array.length;i<len;i++){arrayList.add(array[i]);}return arrayList;};var Dimension=function Dimension(){};var staticAccessors$14={P:{configurable:true},L:{configurable:true},A:{configurable:true},FALSE:{configurable:true},TRUE:{configurable:true},DONTCARE:{configurable:true},SYM_FALSE:{configurable:true},SYM_TRUE:{configurable:true},SYM_DONTCARE:{configurable:true},SYM_P:{configurable:true},SYM_L:{configurable:true},SYM_A:{configurable:true}};staticAccessors$14.P.get=function(){return 0;};staticAccessors$14.L.get=function(){return 1;};staticAccessors$14.A.get=function(){return 2;};staticAccessors$14.FALSE.get=function(){return -1;};staticAccessors$14.TRUE.get=function(){return -2;};staticAccessors$14.DONTCARE.get=function(){return -3;};staticAccessors$14.SYM_FALSE.get=function(){return 'F';};staticAccessors$14.SYM_TRUE.get=function(){return 'T';};staticAccessors$14.SYM_DONTCARE.get=function(){return '*';};staticAccessors$14.SYM_P.get=function(){return '0';};staticAccessors$14.SYM_L.get=function(){return '1';};staticAccessors$14.SYM_A.get=function(){return '2';};Dimension.prototype.interfaces_=function interfaces_(){return [];};Dimension.prototype.getClass=function getClass(){return Dimension;};Dimension.toDimensionSymbol=function toDimensionSymbol(dimensionValue){switch(dimensionValue){case Dimension.FALSE:return Dimension.SYM_FALSE;case Dimension.TRUE:return Dimension.SYM_TRUE;case Dimension.DONTCARE:return Dimension.SYM_DONTCARE;case Dimension.P:return Dimension.SYM_P;case Dimension.L:return Dimension.SYM_L;case Dimension.A:return Dimension.SYM_A;default:}throw new IllegalArgumentException('Unknown dimension value: '+dimensionValue);};Dimension.toDimensionValue=function toDimensionValue(dimensionSymbol){switch(Character.toUpperCase(dimensionSymbol)){case Dimension.SYM_FALSE:return Dimension.FALSE;case Dimension.SYM_TRUE:return Dimension.TRUE;case Dimension.SYM_DONTCARE:return Dimension.DONTCARE;case Dimension.SYM_P:return Dimension.P;case Dimension.SYM_L:return Dimension.L;case Dimension.SYM_A:return Dimension.A;default:}throw new IllegalArgumentException('Unknown dimension symbol: '+dimensionSymbol);};Object.defineProperties(Dimension,staticAccessors$14);var GeometryFilter=function GeometryFilter(){};GeometryFilter.prototype.filter=function filter(geom){};GeometryFilter.prototype.interfaces_=function interfaces_(){return [];};GeometryFilter.prototype.getClass=function getClass(){return GeometryFilter;};var CoordinateSequenceFilter=function CoordinateSequenceFilter(){};CoordinateSequenceFilter.prototype.filter=function filter(seq,i){};CoordinateSequenceFilter.prototype.isDone=function isDone(){};CoordinateSequenceFilter.prototype.isGeometryChanged=function isGeometryChanged(){};CoordinateSequenceFilter.prototype.interfaces_=function interfaces_(){return [];};CoordinateSequenceFilter.prototype.getClass=function getClass(){return CoordinateSequenceFilter;};var GeometryCollection=function(Geometry$$1){function GeometryCollection(geometries,factory){Geometry$$1.call(this,factory);this._geometries=geometries||[];if(Geometry$$1.hasNullElements(this._geometries)){throw new IllegalArgumentException('geometries must not contain null elements');}}if(Geometry$$1)GeometryCollection.__proto__=Geometry$$1;GeometryCollection.prototype=Object.create(Geometry$$1&&Geometry$$1.prototype);GeometryCollection.prototype.constructor=GeometryCollection;var staticAccessors={serialVersionUID:{configurable:true}};GeometryCollection.prototype.computeEnvelopeInternal=function computeEnvelopeInternal(){var this$1=this;var envelope=new Envelope();for(var i=0;i<this._geometries.length;i++){envelope.expandToInclude(this$1._geometries[i].getEnvelopeInternal());}return envelope;};GeometryCollection.prototype.getGeometryN=function getGeometryN(n){return this._geometries[n];};GeometryCollection.prototype.getSortIndex=function getSortIndex(){return Geometry$$1.SORTINDEX_GEOMETRYCOLLECTION;};GeometryCollection.prototype.getCoordinates=function getCoordinates(){var this$1=this;var coordinates=new Array(this.getNumPoints()).fill(null);var k=-1;for(var i=0;i<this._geometries.length;i++){var childCoordinates=this$1._geometries[i].getCoordinates();for(var j=0;j<childCoordinates.length;j++){k++;coordinates[k]=childCoordinates[j];}}return coordinates;};GeometryCollection.prototype.getArea=function getArea(){var this$1=this;var area=0.0;for(var i=0;i<this._geometries.length;i++){area+=this$1._geometries[i].getArea();}return area;};GeometryCollection.prototype.equalsExact=function equalsExact(){var this$1=this;if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}var otherCollection=other;if(this._geometries.length!==otherCollection._geometries.length){return false;}for(var i=0;i<this._geometries.length;i++){if(!this$1._geometries[i].equalsExact(otherCollection._geometries[i],tolerance)){return false;}}return true;}else{return Geometry$$1.prototype.equalsExact.apply(this,arguments);}};GeometryCollection.prototype.normalize=function normalize(){var this$1=this;for(var i=0;i<this._geometries.length;i++){this$1._geometries[i].normalize();}Arrays.sort(this._geometries);};GeometryCollection.prototype.getCoordinate=function getCoordinate(){if(this.isEmpty()){return null;}return this._geometries[0].getCoordinate();};GeometryCollection.prototype.getBoundaryDimension=function getBoundaryDimension(){var this$1=this;var dimension=Dimension.FALSE;for(var i=0;i<this._geometries.length;i++){dimension=Math.max(dimension,this$1._geometries[i].getBoundaryDimension());}return dimension;};GeometryCollection.prototype.getDimension=function getDimension(){var this$1=this;var dimension=Dimension.FALSE;for(var i=0;i<this._geometries.length;i++){dimension=Math.max(dimension,this$1._geometries[i].getDimension());}return dimension;};GeometryCollection.prototype.getLength=function getLength(){var this$1=this;var sum=0.0;for(var i=0;i<this._geometries.length;i++){sum+=this$1._geometries[i].getLength();}return sum;};GeometryCollection.prototype.getNumPoints=function getNumPoints(){var this$1=this;var numPoints=0;for(var i=0;i<this._geometries.length;i++){numPoints+=this$1._geometries[i].getNumPoints();}return numPoints;};GeometryCollection.prototype.getNumGeometries=function getNumGeometries(){return this._geometries.length;};GeometryCollection.prototype.reverse=function reverse(){var this$1=this;var n=this._geometries.length;var revGeoms=new Array(n).fill(null);for(var i=0;i<this._geometries.length;i++){revGeoms[i]=this$1._geometries[i].reverse();}return this.getFactory().createGeometryCollection(revGeoms);};GeometryCollection.prototype.compareToSameClass=function compareToSameClass(){var this$1=this;if(arguments.length===1){var o=arguments[0];var theseElements=new TreeSet(Arrays.asList(this._geometries));var otherElements=new TreeSet(Arrays.asList(o._geometries));return this.compare(theseElements,otherElements);}else if(arguments.length===2){var o$1=arguments[0];var comp=arguments[1];var gc=o$1;var n1=this.getNumGeometries();var n2=gc.getNumGeometries();var i=0;while(i<n1&&i<n2){var thisGeom=this$1.getGeometryN(i);var otherGeom=gc.getGeometryN(i);var holeComp=thisGeom.compareToSameClass(otherGeom,comp);if(holeComp!==0){return holeComp;}i++;}if(i<n1){return 1;}if(i<n2){return -1;}return 0;}};GeometryCollection.prototype.apply=function apply(){var this$1=this;if(hasInterface(arguments[0],CoordinateFilter)){var filter=arguments[0];for(var i=0;i<this._geometries.length;i++){this$1._geometries[i].apply(filter);}}else if(hasInterface(arguments[0],CoordinateSequenceFilter)){var filter$1=arguments[0];if(this._geometries.length===0){return null;}for(var i$1=0;i$1<this._geometries.length;i$1++){this$1._geometries[i$1].apply(filter$1);if(filter$1.isDone()){break;}}if(filter$1.isGeometryChanged()){this.geometryChanged();}}else if(hasInterface(arguments[0],GeometryFilter)){var filter$2=arguments[0];filter$2.filter(this);for(var i$2=0;i$2<this._geometries.length;i$2++){this$1._geometries[i$2].apply(filter$2);}}else if(hasInterface(arguments[0],GeometryComponentFilter)){var filter$3=arguments[0];filter$3.filter(this);for(var i$3=0;i$3<this._geometries.length;i$3++){this$1._geometries[i$3].apply(filter$3);}}};GeometryCollection.prototype.getBoundary=function getBoundary(){this.checkNotGeometryCollection(this);Assert.shouldNeverReachHere();return null;};GeometryCollection.prototype.clone=function clone(){var this$1=this;var gc=Geometry$$1.prototype.clone.call(this);gc._geometries=new Array(this._geometries.length).fill(null);for(var i=0;i<this._geometries.length;i++){gc._geometries[i]=this$1._geometries[i].clone();}return gc;};GeometryCollection.prototype.getGeometryType=function getGeometryType(){return 'GeometryCollection';};GeometryCollection.prototype.copy=function copy(){var this$1=this;var geometries=new Array(this._geometries.length).fill(null);for(var i=0;i<geometries.length;i++){geometries[i]=this$1._geometries[i].copy();}return new GeometryCollection(geometries,this._factory);};GeometryCollection.prototype.isEmpty=function isEmpty(){var this$1=this;for(var i=0;i<this._geometries.length;i++){if(!this$1._geometries[i].isEmpty()){return false;}}return true;};GeometryCollection.prototype.interfaces_=function interfaces_(){return [];};GeometryCollection.prototype.getClass=function getClass(){return GeometryCollection;};staticAccessors.serialVersionUID.get=function(){return -5694727726395021467;};Object.defineProperties(GeometryCollection,staticAccessors);return GeometryCollection;}(Geometry);var MultiLineString=function(GeometryCollection$$1){function MultiLineString(){GeometryCollection$$1.apply(this,arguments);}if(GeometryCollection$$1)MultiLineString.__proto__=GeometryCollection$$1;MultiLineString.prototype=Object.create(GeometryCollection$$1&&GeometryCollection$$1.prototype);MultiLineString.prototype.constructor=MultiLineString;var staticAccessors={serialVersionUID:{configurable:true}};MultiLineString.prototype.getSortIndex=function getSortIndex(){return Geometry.SORTINDEX_MULTILINESTRING;};MultiLineString.prototype.equalsExact=function equalsExact(){if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}return GeometryCollection$$1.prototype.equalsExact.call(this,other,tolerance);}else{return GeometryCollection$$1.prototype.equalsExact.apply(this,arguments);}};MultiLineString.prototype.getBoundaryDimension=function getBoundaryDimension(){if(this.isClosed()){return Dimension.FALSE;}return 0;};MultiLineString.prototype.isClosed=function isClosed(){var this$1=this;if(this.isEmpty()){return false;}for(var i=0;i<this._geometries.length;i++){if(!this$1._geometries[i].isClosed()){return false;}}return true;};MultiLineString.prototype.getDimension=function getDimension(){return 1;};MultiLineString.prototype.reverse=function reverse(){var this$1=this;var nLines=this._geometries.length;var revLines=new Array(nLines).fill(null);for(var i=0;i<this._geometries.length;i++){revLines[nLines-1-i]=this$1._geometries[i].reverse();}return this.getFactory().createMultiLineString(revLines);};MultiLineString.prototype.getBoundary=function getBoundary(){return new BoundaryOp(this).getBoundary();};MultiLineString.prototype.getGeometryType=function getGeometryType(){return 'MultiLineString';};MultiLineString.prototype.copy=function copy(){var this$1=this;var lineStrings=new Array(this._geometries.length).fill(null);for(var i=0;i<lineStrings.length;i++){lineStrings[i]=this$1._geometries[i].copy();}return new MultiLineString(lineStrings,this._factory);};MultiLineString.prototype.interfaces_=function interfaces_(){return [Lineal];};MultiLineString.prototype.getClass=function getClass(){return MultiLineString;};staticAccessors.serialVersionUID.get=function(){return 8166665132445433741;};Object.defineProperties(MultiLineString,staticAccessors);return MultiLineString;}(GeometryCollection);var BoundaryOp=function BoundaryOp(){this._geom=null;this._geomFact=null;this._bnRule=null;this._endpointMap=null;if(arguments.length===1){var geom=arguments[0];var bnRule=BoundaryNodeRule.MOD2_BOUNDARY_RULE;this._geom=geom;this._geomFact=geom.getFactory();this._bnRule=bnRule;}else if(arguments.length===2){var geom$1=arguments[0];var bnRule$1=arguments[1];this._geom=geom$1;this._geomFact=geom$1.getFactory();this._bnRule=bnRule$1;}};BoundaryOp.prototype.boundaryMultiLineString=function boundaryMultiLineString(mLine){if(this._geom.isEmpty()){return this.getEmptyMultiPoint();}var bdyPts=this.computeBoundaryCoordinates(mLine);if(bdyPts.length===1){return this._geomFact.createPoint(bdyPts[0]);}return this._geomFact.createMultiPointFromCoords(bdyPts);};BoundaryOp.prototype.getBoundary=function getBoundary(){if(this._geom instanceof LineString){return this.boundaryLineString(this._geom);}if(this._geom instanceof MultiLineString){return this.boundaryMultiLineString(this._geom);}return this._geom.getBoundary();};BoundaryOp.prototype.boundaryLineString=function boundaryLineString(line){if(this._geom.isEmpty()){return this.getEmptyMultiPoint();}if(line.isClosed()){var closedEndpointOnBoundary=this._bnRule.isInBoundary(2);if(closedEndpointOnBoundary){return line.getStartPoint();}else{return this._geomFact.createMultiPoint();}}return this._geomFact.createMultiPoint([line.getStartPoint(),line.getEndPoint()]);};BoundaryOp.prototype.getEmptyMultiPoint=function getEmptyMultiPoint(){return this._geomFact.createMultiPoint();};BoundaryOp.prototype.computeBoundaryCoordinates=function computeBoundaryCoordinates(mLine){var this$1=this;var bdyPts=new ArrayList();this._endpointMap=new TreeMap();for(var i=0;i<mLine.getNumGeometries();i++){var line=mLine.getGeometryN(i);if(line.getNumPoints()===0){continue;}this$1.addEndpoint(line.getCoordinateN(0));this$1.addEndpoint(line.getCoordinateN(line.getNumPoints()-1));}for(var it=this._endpointMap.entrySet().iterator();it.hasNext();){var entry=it.next();var counter=entry.getValue();var valence=counter.count;if(this$1._bnRule.isInBoundary(valence)){bdyPts.add(entry.getKey());}}return CoordinateArrays.toCoordinateArray(bdyPts);};BoundaryOp.prototype.addEndpoint=function addEndpoint(pt){var counter=this._endpointMap.get(pt);if(counter===null){counter=new Counter();this._endpointMap.put(pt,counter);}counter.count++;};BoundaryOp.prototype.interfaces_=function interfaces_(){return [];};BoundaryOp.prototype.getClass=function getClass(){return BoundaryOp;};BoundaryOp.getBoundary=function getBoundary(){if(arguments.length===1){var g=arguments[0];var bop=new BoundaryOp(g);return bop.getBoundary();}else if(arguments.length===2){var g$1=arguments[0];var bnRule=arguments[1];var bop$1=new BoundaryOp(g$1,bnRule);return bop$1.getBoundary();}};var Counter=function Counter(){this.count=null;};Counter.prototype.interfaces_=function interfaces_(){return [];};Counter.prototype.getClass=function getClass(){return Counter;};// boundary
    function PrintStream(){}function StringReader(){}var DecimalFormat=function DecimalFormat(){};function ByteArrayOutputStream(){}function IOException(){}function LineNumberReader(){}var StringUtil=function StringUtil(){};var staticAccessors$15={NEWLINE:{configurable:true},SIMPLE_ORDINATE_FORMAT:{configurable:true}};StringUtil.prototype.interfaces_=function interfaces_(){return [];};StringUtil.prototype.getClass=function getClass(){return StringUtil;};StringUtil.chars=function chars(c,n){var ch=new Array(n).fill(null);for(var i=0;i<n;i++){ch[i]=c;}return String(ch);};StringUtil.getStackTrace=function getStackTrace(){if(arguments.length===1){var t=arguments[0];var os=new ByteArrayOutputStream();var ps=new PrintStream(os);t.printStackTrace(ps);return os.toString();}else if(arguments.length===2){var t$1=arguments[0];var depth=arguments[1];var stackTrace='';var stringReader=new StringReader(StringUtil.getStackTrace(t$1));var lineNumberReader=new LineNumberReader(stringReader);for(var i=0;i<depth;i++){try{stackTrace+=lineNumberReader.readLine()+StringUtil.NEWLINE;}catch(e){if(e instanceof IOException){Assert.shouldNeverReachHere();}else{throw e;}}finally{}}return stackTrace;}};StringUtil.split=function split(s,separator){var separatorlen=separator.length;var tokenList=new ArrayList();var tmpString=''+s;var pos=tmpString.indexOf(separator);while(pos>=0){var token=tmpString.substring(0,pos);tokenList.add(token);tmpString=tmpString.substring(pos+separatorlen);pos=tmpString.indexOf(separator);}if(tmpString.length>0){tokenList.add(tmpString);}var res=new Array(tokenList.size()).fill(null);for(var i=0;i<res.length;i++){res[i]=tokenList.get(i);}return res;};StringUtil.toString=function toString(){if(arguments.length===1){var d=arguments[0];return StringUtil.SIMPLE_ORDINATE_FORMAT.format(d);}};StringUtil.spaces=function spaces(n){return StringUtil.chars(' ',n);};staticAccessors$15.NEWLINE.get=function(){return System.getProperty('line.separator');};staticAccessors$15.SIMPLE_ORDINATE_FORMAT.get=function(){return new DecimalFormat('0.#');};Object.defineProperties(StringUtil,staticAccessors$15);var CoordinateSequences=function CoordinateSequences(){};CoordinateSequences.prototype.interfaces_=function interfaces_(){return [];};CoordinateSequences.prototype.getClass=function getClass(){return CoordinateSequences;};CoordinateSequences.copyCoord=function copyCoord(src,srcPos,dest,destPos){var minDim=Math.min(src.getDimension(),dest.getDimension());for(var dim=0;dim<minDim;dim++){dest.setOrdinate(destPos,dim,src.getOrdinate(srcPos,dim));}};CoordinateSequences.isRing=function isRing(seq){var n=seq.size();if(n===0){return true;}if(n<=3){return false;}return seq.getOrdinate(0,CoordinateSequence.X)===seq.getOrdinate(n-1,CoordinateSequence.X)&&seq.getOrdinate(0,CoordinateSequence.Y)===seq.getOrdinate(n-1,CoordinateSequence.Y);};CoordinateSequences.isEqual=function isEqual(cs1,cs2){var cs1Size=cs1.size();var cs2Size=cs2.size();if(cs1Size!==cs2Size){return false;}var dim=Math.min(cs1.getDimension(),cs2.getDimension());for(var i=0;i<cs1Size;i++){for(var d=0;d<dim;d++){var v1=cs1.getOrdinate(i,d);var v2=cs2.getOrdinate(i,d);if(cs1.getOrdinate(i,d)===cs2.getOrdinate(i,d)){continue;}if(Double.isNaN(v1)&&Double.isNaN(v2)){continue;}return false;}}return true;};CoordinateSequences.extend=function extend(fact,seq,size){var newseq=fact.create(size,seq.getDimension());var n=seq.size();CoordinateSequences.copy(seq,0,newseq,0,n);if(n>0){for(var i=n;i<size;i++){CoordinateSequences.copy(seq,n-1,newseq,i,1);}}return newseq;};CoordinateSequences.reverse=function reverse(seq){var last=seq.size()-1;var mid=Math.trunc(last/2);for(var i=0;i<=mid;i++){CoordinateSequences.swap(seq,i,last-i);}};CoordinateSequences.swap=function swap(seq,i,j){if(i===j){return null;}for(var dim=0;dim<seq.getDimension();dim++){var tmp=seq.getOrdinate(i,dim);seq.setOrdinate(i,dim,seq.getOrdinate(j,dim));seq.setOrdinate(j,dim,tmp);}};CoordinateSequences.copy=function copy(src,srcPos,dest,destPos,length){for(var i=0;i<length;i++){CoordinateSequences.copyCoord(src,srcPos+i,dest,destPos+i);}};CoordinateSequences.toString=function toString(){if(arguments.length===1){var cs=arguments[0];var size=cs.size();if(size===0){return '()';}var dim=cs.getDimension();var buf=new StringBuffer();buf.append('(');for(var i=0;i<size;i++){if(i>0){buf.append(' ');}for(var d=0;d<dim;d++){if(d>0){buf.append(',');}buf.append(StringUtil.toString(cs.getOrdinate(i,d)));}}buf.append(')');return buf.toString();}};CoordinateSequences.ensureValidRing=function ensureValidRing(fact,seq){var n=seq.size();if(n===0){return seq;}if(n<=3){return CoordinateSequences.createClosedRing(fact,seq,4);}var isClosed=seq.getOrdinate(0,CoordinateSequence.X)===seq.getOrdinate(n-1,CoordinateSequence.X)&&seq.getOrdinate(0,CoordinateSequence.Y)===seq.getOrdinate(n-1,CoordinateSequence.Y);if(isClosed){return seq;}return CoordinateSequences.createClosedRing(fact,seq,n+1);};CoordinateSequences.createClosedRing=function createClosedRing(fact,seq,size){var newseq=fact.create(size,seq.getDimension());var n=seq.size();CoordinateSequences.copy(seq,0,newseq,0,n);for(var i=n;i<size;i++){CoordinateSequences.copy(seq,0,newseq,i,1);}return newseq;};var LineString=function(Geometry$$1){function LineString(points,factory){Geometry$$1.call(this,factory);this._points=null;this.init(points);}if(Geometry$$1)LineString.__proto__=Geometry$$1;LineString.prototype=Object.create(Geometry$$1&&Geometry$$1.prototype);LineString.prototype.constructor=LineString;var staticAccessors={serialVersionUID:{configurable:true}};LineString.prototype.computeEnvelopeInternal=function computeEnvelopeInternal(){if(this.isEmpty()){return new Envelope();}return this._points.expandEnvelope(new Envelope());};LineString.prototype.isRing=function isRing(){return this.isClosed()&&this.isSimple();};LineString.prototype.getSortIndex=function getSortIndex(){return Geometry$$1.SORTINDEX_LINESTRING;};LineString.prototype.getCoordinates=function getCoordinates(){return this._points.toCoordinateArray();};LineString.prototype.equalsExact=function equalsExact(){var this$1=this;if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}var otherLineString=other;if(this._points.size()!==otherLineString._points.size()){return false;}for(var i=0;i<this._points.size();i++){if(!this$1.equal(this$1._points.getCoordinate(i),otherLineString._points.getCoordinate(i),tolerance)){return false;}}return true;}else{return Geometry$$1.prototype.equalsExact.apply(this,arguments);}};LineString.prototype.normalize=function normalize(){var this$1=this;for(var i=0;i<Math.trunc(this._points.size()/2);i++){var j=this$1._points.size()-1-i;if(!this$1._points.getCoordinate(i).equals(this$1._points.getCoordinate(j))){if(this$1._points.getCoordinate(i).compareTo(this$1._points.getCoordinate(j))>0){CoordinateSequences.reverse(this$1._points);}return null;}}};LineString.prototype.getCoordinate=function getCoordinate(){if(this.isEmpty()){return null;}return this._points.getCoordinate(0);};LineString.prototype.getBoundaryDimension=function getBoundaryDimension(){if(this.isClosed()){return Dimension.FALSE;}return 0;};LineString.prototype.isClosed=function isClosed(){if(this.isEmpty()){return false;}return this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1));};LineString.prototype.getEndPoint=function getEndPoint(){if(this.isEmpty()){return null;}return this.getPointN(this.getNumPoints()-1);};LineString.prototype.getDimension=function getDimension(){return 1;};LineString.prototype.getLength=function getLength(){return CGAlgorithms.computeLength(this._points);};LineString.prototype.getNumPoints=function getNumPoints(){return this._points.size();};LineString.prototype.reverse=function reverse(){var seq=this._points.copy();CoordinateSequences.reverse(seq);var revLine=this.getFactory().createLineString(seq);return revLine;};LineString.prototype.compareToSameClass=function compareToSameClass(){var this$1=this;if(arguments.length===1){var o=arguments[0];var line=o;var i=0;var j=0;while(i<this._points.size()&&j<line._points.size()){var comparison=this$1._points.getCoordinate(i).compareTo(line._points.getCoordinate(j));if(comparison!==0){return comparison;}i++;j++;}if(i<this._points.size()){return 1;}if(j<line._points.size()){return -1;}return 0;}else if(arguments.length===2){var o$1=arguments[0];var comp=arguments[1];var line$1=o$1;return comp.compare(this._points,line$1._points);}};LineString.prototype.apply=function apply(){var this$1=this;if(hasInterface(arguments[0],CoordinateFilter)){var filter=arguments[0];for(var i=0;i<this._points.size();i++){filter.filter(this$1._points.getCoordinate(i));}}else if(hasInterface(arguments[0],CoordinateSequenceFilter)){var filter$1=arguments[0];if(this._points.size()===0){return null;}for(var i$1=0;i$1<this._points.size();i$1++){filter$1.filter(this$1._points,i$1);if(filter$1.isDone()){break;}}if(filter$1.isGeometryChanged()){this.geometryChanged();}}else if(hasInterface(arguments[0],GeometryFilter)){var filter$2=arguments[0];filter$2.filter(this);}else if(hasInterface(arguments[0],GeometryComponentFilter)){var filter$3=arguments[0];filter$3.filter(this);}};LineString.prototype.getBoundary=function getBoundary(){return new BoundaryOp(this).getBoundary();};LineString.prototype.isEquivalentClass=function isEquivalentClass(other){return other instanceof LineString;};LineString.prototype.clone=function clone(){var ls=Geometry$$1.prototype.clone.call(this);ls._points=this._points.clone();return ls;};LineString.prototype.getCoordinateN=function getCoordinateN(n){return this._points.getCoordinate(n);};LineString.prototype.getGeometryType=function getGeometryType(){return 'LineString';};LineString.prototype.copy=function copy(){return new LineString(this._points.copy(),this._factory);};LineString.prototype.getCoordinateSequence=function getCoordinateSequence(){return this._points;};LineString.prototype.isEmpty=function isEmpty(){return this._points.size()===0;};LineString.prototype.init=function init(points){if(points===null){points=this.getFactory().getCoordinateSequenceFactory().create([]);}if(points.size()===1){throw new IllegalArgumentException('Invalid number of points in LineString (found '+points.size()+' - must be 0 or >= 2)');}this._points=points;};LineString.prototype.isCoordinate=function isCoordinate(pt){var this$1=this;for(var i=0;i<this._points.size();i++){if(this$1._points.getCoordinate(i).equals(pt)){return true;}}return false;};LineString.prototype.getStartPoint=function getStartPoint(){if(this.isEmpty()){return null;}return this.getPointN(0);};LineString.prototype.getPointN=function getPointN(n){return this.getFactory().createPoint(this._points.getCoordinate(n));};LineString.prototype.interfaces_=function interfaces_(){return [Lineal];};LineString.prototype.getClass=function getClass(){return LineString;};staticAccessors.serialVersionUID.get=function(){return 3110669828065365560;};Object.defineProperties(LineString,staticAccessors);return LineString;}(Geometry);var Puntal=function Puntal(){};Puntal.prototype.interfaces_=function interfaces_(){return [];};Puntal.prototype.getClass=function getClass(){return Puntal;};var Point=function(Geometry$$1){function Point(coordinates,factory){Geometry$$1.call(this,factory);this._coordinates=coordinates||null;this.init(this._coordinates);}if(Geometry$$1)Point.__proto__=Geometry$$1;Point.prototype=Object.create(Geometry$$1&&Geometry$$1.prototype);Point.prototype.constructor=Point;var staticAccessors={serialVersionUID:{configurable:true}};Point.prototype.computeEnvelopeInternal=function computeEnvelopeInternal(){if(this.isEmpty()){return new Envelope();}var env=new Envelope();env.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0));return env;};Point.prototype.getSortIndex=function getSortIndex(){return Geometry$$1.SORTINDEX_POINT;};Point.prototype.getCoordinates=function getCoordinates(){return this.isEmpty()?[]:[this.getCoordinate()];};Point.prototype.equalsExact=function equalsExact(){if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}if(this.isEmpty()&&other.isEmpty()){return true;}if(this.isEmpty()!==other.isEmpty()){return false;}return this.equal(other.getCoordinate(),this.getCoordinate(),tolerance);}else{return Geometry$$1.prototype.equalsExact.apply(this,arguments);}};Point.prototype.normalize=function normalize(){};Point.prototype.getCoordinate=function getCoordinate(){return this._coordinates.size()!==0?this._coordinates.getCoordinate(0):null;};Point.prototype.getBoundaryDimension=function getBoundaryDimension(){return Dimension.FALSE;};Point.prototype.getDimension=function getDimension(){return 0;};Point.prototype.getNumPoints=function getNumPoints(){return this.isEmpty()?0:1;};Point.prototype.reverse=function reverse(){return this.copy();};Point.prototype.getX=function getX(){if(this.getCoordinate()===null){throw new Error('getX called on empty Point');}return this.getCoordinate().x;};Point.prototype.compareToSameClass=function compareToSameClass(){if(arguments.length===1){var other=arguments[0];var point$1=other;return this.getCoordinate().compareTo(point$1.getCoordinate());}else if(arguments.length===2){var other$1=arguments[0];var comp=arguments[1];var point=other$1;return comp.compare(this._coordinates,point._coordinates);}};Point.prototype.apply=function apply(){if(hasInterface(arguments[0],CoordinateFilter)){var filter=arguments[0];if(this.isEmpty()){return null;}filter.filter(this.getCoordinate());}else if(hasInterface(arguments[0],CoordinateSequenceFilter)){var filter$1=arguments[0];if(this.isEmpty()){return null;}filter$1.filter(this._coordinates,0);if(filter$1.isGeometryChanged()){this.geometryChanged();}}else if(hasInterface(arguments[0],GeometryFilter)){var filter$2=arguments[0];filter$2.filter(this);}else if(hasInterface(arguments[0],GeometryComponentFilter)){var filter$3=arguments[0];filter$3.filter(this);}};Point.prototype.getBoundary=function getBoundary(){return this.getFactory().createGeometryCollection(null);};Point.prototype.clone=function clone(){var p=Geometry$$1.prototype.clone.call(this);p._coordinates=this._coordinates.clone();return p;};Point.prototype.getGeometryType=function getGeometryType(){return 'Point';};Point.prototype.copy=function copy(){return new Point(this._coordinates.copy(),this._factory);};Point.prototype.getCoordinateSequence=function getCoordinateSequence(){return this._coordinates;};Point.prototype.getY=function getY(){if(this.getCoordinate()===null){throw new Error('getY called on empty Point');}return this.getCoordinate().y;};Point.prototype.isEmpty=function isEmpty(){return this._coordinates.size()===0;};Point.prototype.init=function init(coordinates){if(coordinates===null){coordinates=this.getFactory().getCoordinateSequenceFactory().create([]);}Assert.isTrue(coordinates.size()<=1);this._coordinates=coordinates;};Point.prototype.isSimple=function isSimple(){return true;};Point.prototype.interfaces_=function interfaces_(){return [Puntal];};Point.prototype.getClass=function getClass(){return Point;};staticAccessors.serialVersionUID.get=function(){return 4902022702746614570;};Object.defineProperties(Point,staticAccessors);return Point;}(Geometry);var Polygonal=function Polygonal(){};Polygonal.prototype.interfaces_=function interfaces_(){return [];};Polygonal.prototype.getClass=function getClass(){return Polygonal;};var Polygon=function(Geometry$$1){function Polygon(shell,holes,factory){Geometry$$1.call(this,factory);this._shell=null;this._holes=null;if(shell===null){shell=this.getFactory().createLinearRing();}if(holes===null){holes=[];}if(Geometry$$1.hasNullElements(holes)){throw new IllegalArgumentException('holes must not contain null elements');}if(shell.isEmpty()&&Geometry$$1.hasNonEmptyElements(holes)){throw new IllegalArgumentException('shell is empty but holes are not');}this._shell=shell;this._holes=holes;}if(Geometry$$1)Polygon.__proto__=Geometry$$1;Polygon.prototype=Object.create(Geometry$$1&&Geometry$$1.prototype);Polygon.prototype.constructor=Polygon;var staticAccessors={serialVersionUID:{configurable:true}};Polygon.prototype.computeEnvelopeInternal=function computeEnvelopeInternal(){return this._shell.getEnvelopeInternal();};Polygon.prototype.getSortIndex=function getSortIndex(){return Geometry$$1.SORTINDEX_POLYGON;};Polygon.prototype.getCoordinates=function getCoordinates(){var this$1=this;if(this.isEmpty()){return [];}var coordinates=new Array(this.getNumPoints()).fill(null);var k=-1;var shellCoordinates=this._shell.getCoordinates();for(var x=0;x<shellCoordinates.length;x++){k++;coordinates[k]=shellCoordinates[x];}for(var i=0;i<this._holes.length;i++){var childCoordinates=this$1._holes[i].getCoordinates();for(var j=0;j<childCoordinates.length;j++){k++;coordinates[k]=childCoordinates[j];}}return coordinates;};Polygon.prototype.getArea=function getArea(){var this$1=this;var area=0.0;area+=Math.abs(CGAlgorithms.signedArea(this._shell.getCoordinateSequence()));for(var i=0;i<this._holes.length;i++){area-=Math.abs(CGAlgorithms.signedArea(this$1._holes[i].getCoordinateSequence()));}return area;};Polygon.prototype.isRectangle=function isRectangle(){if(this.getNumInteriorRing()!==0){return false;}if(this._shell===null){return false;}if(this._shell.getNumPoints()!==5){return false;}var seq=this._shell.getCoordinateSequence();var env=this.getEnvelopeInternal();for(var i=0;i<5;i++){var x=seq.getX(i);if(!(x===env.getMinX()||x===env.getMaxX())){return false;}var y=seq.getY(i);if(!(y===env.getMinY()||y===env.getMaxY())){return false;}}var prevX=seq.getX(0);var prevY=seq.getY(0);for(var i$1=1;i$1<=4;i$1++){var x$1=seq.getX(i$1);var y$1=seq.getY(i$1);var xChanged=x$1!==prevX;var yChanged=y$1!==prevY;if(xChanged===yChanged){return false;}prevX=x$1;prevY=y$1;}return true;};Polygon.prototype.equalsExact=function equalsExact(){var this$1=this;if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}var otherPolygon=other;var thisShell=this._shell;var otherPolygonShell=otherPolygon._shell;if(!thisShell.equalsExact(otherPolygonShell,tolerance)){return false;}if(this._holes.length!==otherPolygon._holes.length){return false;}for(var i=0;i<this._holes.length;i++){if(!this$1._holes[i].equalsExact(otherPolygon._holes[i],tolerance)){return false;}}return true;}else{return Geometry$$1.prototype.equalsExact.apply(this,arguments);}};Polygon.prototype.normalize=function normalize(){var this$1=this;if(arguments.length===0){this.normalize(this._shell,true);for(var i=0;i<this._holes.length;i++){this$1.normalize(this$1._holes[i],false);}Arrays.sort(this._holes);}else if(arguments.length===2){var ring=arguments[0];var clockwise=arguments[1];if(ring.isEmpty()){return null;}var uniqueCoordinates=new Array(ring.getCoordinates().length-1).fill(null);System.arraycopy(ring.getCoordinates(),0,uniqueCoordinates,0,uniqueCoordinates.length);var minCoordinate=CoordinateArrays.minCoordinate(ring.getCoordinates());CoordinateArrays.scroll(uniqueCoordinates,minCoordinate);System.arraycopy(uniqueCoordinates,0,ring.getCoordinates(),0,uniqueCoordinates.length);ring.getCoordinates()[uniqueCoordinates.length]=uniqueCoordinates[0];if(CGAlgorithms.isCCW(ring.getCoordinates())===clockwise){CoordinateArrays.reverse(ring.getCoordinates());}}};Polygon.prototype.getCoordinate=function getCoordinate(){return this._shell.getCoordinate();};Polygon.prototype.getNumInteriorRing=function getNumInteriorRing(){return this._holes.length;};Polygon.prototype.getBoundaryDimension=function getBoundaryDimension(){return 1;};Polygon.prototype.getDimension=function getDimension(){return 2;};Polygon.prototype.getLength=function getLength(){var this$1=this;var len=0.0;len+=this._shell.getLength();for(var i=0;i<this._holes.length;i++){len+=this$1._holes[i].getLength();}return len;};Polygon.prototype.getNumPoints=function getNumPoints(){var this$1=this;var numPoints=this._shell.getNumPoints();for(var i=0;i<this._holes.length;i++){numPoints+=this$1._holes[i].getNumPoints();}return numPoints;};Polygon.prototype.reverse=function reverse(){var this$1=this;var poly=this.copy();poly._shell=this._shell.copy().reverse();poly._holes=new Array(this._holes.length).fill(null);for(var i=0;i<this._holes.length;i++){poly._holes[i]=this$1._holes[i].copy().reverse();}return poly;};Polygon.prototype.convexHull=function convexHull(){return this.getExteriorRing().convexHull();};Polygon.prototype.compareToSameClass=function compareToSameClass(){var this$1=this;if(arguments.length===1){var o=arguments[0];var thisShell=this._shell;var otherShell=o._shell;return thisShell.compareToSameClass(otherShell);}else if(arguments.length===2){var o$1=arguments[0];var comp=arguments[1];var poly=o$1;var thisShell$1=this._shell;var otherShell$1=poly._shell;var shellComp=thisShell$1.compareToSameClass(otherShell$1,comp);if(shellComp!==0){return shellComp;}var nHole1=this.getNumInteriorRing();var nHole2=poly.getNumInteriorRing();var i=0;while(i<nHole1&&i<nHole2){var thisHole=this$1.getInteriorRingN(i);var otherHole=poly.getInteriorRingN(i);var holeComp=thisHole.compareToSameClass(otherHole,comp);if(holeComp!==0){return holeComp;}i++;}if(i<nHole1){return 1;}if(i<nHole2){return -1;}return 0;}};Polygon.prototype.apply=function apply(filter){var this$1=this;if(hasInterface(filter,CoordinateFilter)){this._shell.apply(filter);for(var i$1=0;i$1<this._holes.length;i$1++){this$1._holes[i$1].apply(filter);}}else if(hasInterface(filter,CoordinateSequenceFilter)){this._shell.apply(filter);if(!filter.isDone()){for(var i$2=0;i$2<this._holes.length;i$2++){this$1._holes[i$2].apply(filter);if(filter.isDone()){break;}}}if(filter.isGeometryChanged()){this.geometryChanged();}}else if(hasInterface(filter,GeometryFilter)){filter.filter(this);}else if(hasInterface(filter,GeometryComponentFilter)){filter.filter(this);this._shell.apply(filter);for(var i=0;i<this._holes.length;i++){this$1._holes[i].apply(filter);}}};Polygon.prototype.getBoundary=function getBoundary(){var this$1=this;if(this.isEmpty()){return this.getFactory().createMultiLineString();}var rings=new Array(this._holes.length+1).fill(null);rings[0]=this._shell;for(var i=0;i<this._holes.length;i++){rings[i+1]=this$1._holes[i];}if(rings.length<=1){return this.getFactory().createLinearRing(rings[0].getCoordinateSequence());}return this.getFactory().createMultiLineString(rings);};Polygon.prototype.clone=function clone(){var this$1=this;var poly=Geometry$$1.prototype.clone.call(this);poly._shell=this._shell.clone();poly._holes=new Array(this._holes.length).fill(null);for(var i=0;i<this._holes.length;i++){poly._holes[i]=this$1._holes[i].clone();}return poly;};Polygon.prototype.getGeometryType=function getGeometryType(){return 'Polygon';};Polygon.prototype.copy=function copy(){var this$1=this;var shell=this._shell.copy();var holes=new Array(this._holes.length).fill(null);for(var i=0;i<holes.length;i++){holes[i]=this$1._holes[i].copy();}return new Polygon(shell,holes,this._factory);};Polygon.prototype.getExteriorRing=function getExteriorRing(){return this._shell;};Polygon.prototype.isEmpty=function isEmpty(){return this._shell.isEmpty();};Polygon.prototype.getInteriorRingN=function getInteriorRingN(n){return this._holes[n];};Polygon.prototype.interfaces_=function interfaces_(){return [Polygonal];};Polygon.prototype.getClass=function getClass(){return Polygon;};staticAccessors.serialVersionUID.get=function(){return -3494792200821764533;};Object.defineProperties(Polygon,staticAccessors);return Polygon;}(Geometry);var MultiPoint=function(GeometryCollection$$1){function MultiPoint(){GeometryCollection$$1.apply(this,arguments);}if(GeometryCollection$$1)MultiPoint.__proto__=GeometryCollection$$1;MultiPoint.prototype=Object.create(GeometryCollection$$1&&GeometryCollection$$1.prototype);MultiPoint.prototype.constructor=MultiPoint;var staticAccessors={serialVersionUID:{configurable:true}};MultiPoint.prototype.getSortIndex=function getSortIndex(){return Geometry.SORTINDEX_MULTIPOINT;};MultiPoint.prototype.isValid=function isValid(){return true;};MultiPoint.prototype.equalsExact=function equalsExact(){if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}return GeometryCollection$$1.prototype.equalsExact.call(this,other,tolerance);}else{return GeometryCollection$$1.prototype.equalsExact.apply(this,arguments);}};MultiPoint.prototype.getCoordinate=function getCoordinate(){if(arguments.length===1){var n=arguments[0];return this._geometries[n].getCoordinate();}else{return GeometryCollection$$1.prototype.getCoordinate.apply(this,arguments);}};MultiPoint.prototype.getBoundaryDimension=function getBoundaryDimension(){return Dimension.FALSE;};MultiPoint.prototype.getDimension=function getDimension(){return 0;};MultiPoint.prototype.getBoundary=function getBoundary(){return this.getFactory().createGeometryCollection(null);};MultiPoint.prototype.getGeometryType=function getGeometryType(){return 'MultiPoint';};MultiPoint.prototype.copy=function copy(){var this$1=this;var points=new Array(this._geometries.length).fill(null);for(var i=0;i<points.length;i++){points[i]=this$1._geometries[i].copy();}return new MultiPoint(points,this._factory);};MultiPoint.prototype.interfaces_=function interfaces_(){return [Puntal];};MultiPoint.prototype.getClass=function getClass(){return MultiPoint;};staticAccessors.serialVersionUID.get=function(){return -8048474874175355449;};Object.defineProperties(MultiPoint,staticAccessors);return MultiPoint;}(GeometryCollection);var LinearRing=function(LineString$$1){function LinearRing(points,factory){if(points instanceof Coordinate&&factory instanceof GeometryFactory){points=factory.getCoordinateSequenceFactory().create(points);}LineString$$1.call(this,points,factory);this.validateConstruction();}if(LineString$$1)LinearRing.__proto__=LineString$$1;LinearRing.prototype=Object.create(LineString$$1&&LineString$$1.prototype);LinearRing.prototype.constructor=LinearRing;var staticAccessors={MINIMUM_VALID_SIZE:{configurable:true},serialVersionUID:{configurable:true}};LinearRing.prototype.getSortIndex=function getSortIndex(){return Geometry.SORTINDEX_LINEARRING;};LinearRing.prototype.getBoundaryDimension=function getBoundaryDimension(){return Dimension.FALSE;};LinearRing.prototype.isClosed=function isClosed(){if(this.isEmpty()){return true;}return LineString$$1.prototype.isClosed.call(this);};LinearRing.prototype.reverse=function reverse(){var seq=this._points.copy();CoordinateSequences.reverse(seq);var rev=this.getFactory().createLinearRing(seq);return rev;};LinearRing.prototype.validateConstruction=function validateConstruction(){if(!this.isEmpty()&&!LineString$$1.prototype.isClosed.call(this)){throw new IllegalArgumentException('Points of LinearRing do not form a closed linestring');}if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<LinearRing.MINIMUM_VALID_SIZE){throw new IllegalArgumentException('Invalid number of points in LinearRing (found '+this.getCoordinateSequence().size()+' - must be 0 or >= 4)');}};LinearRing.prototype.getGeometryType=function getGeometryType(){return 'LinearRing';};LinearRing.prototype.copy=function copy(){return new LinearRing(this._points.copy(),this._factory);};LinearRing.prototype.interfaces_=function interfaces_(){return [];};LinearRing.prototype.getClass=function getClass(){return LinearRing;};staticAccessors.MINIMUM_VALID_SIZE.get=function(){return 4;};staticAccessors.serialVersionUID.get=function(){return -4261142084085851829;};Object.defineProperties(LinearRing,staticAccessors);return LinearRing;}(LineString);var MultiPolygon=function(GeometryCollection$$1){function MultiPolygon(){GeometryCollection$$1.apply(this,arguments);}if(GeometryCollection$$1)MultiPolygon.__proto__=GeometryCollection$$1;MultiPolygon.prototype=Object.create(GeometryCollection$$1&&GeometryCollection$$1.prototype);MultiPolygon.prototype.constructor=MultiPolygon;var staticAccessors={serialVersionUID:{configurable:true}};MultiPolygon.prototype.getSortIndex=function getSortIndex(){return Geometry.SORTINDEX_MULTIPOLYGON;};MultiPolygon.prototype.equalsExact=function equalsExact(){if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}return GeometryCollection$$1.prototype.equalsExact.call(this,other,tolerance);}else{return GeometryCollection$$1.prototype.equalsExact.apply(this,arguments);}};MultiPolygon.prototype.getBoundaryDimension=function getBoundaryDimension(){return 1;};MultiPolygon.prototype.getDimension=function getDimension(){return 2;};MultiPolygon.prototype.reverse=function reverse(){var this$1=this;var n=this._geometries.length;var revGeoms=new Array(n).fill(null);for(var i=0;i<this._geometries.length;i++){revGeoms[i]=this$1._geometries[i].reverse();}return this.getFactory().createMultiPolygon(revGeoms);};MultiPolygon.prototype.getBoundary=function getBoundary(){var this$1=this;if(this.isEmpty()){return this.getFactory().createMultiLineString();}var allRings=new ArrayList();for(var i=0;i<this._geometries.length;i++){var polygon=this$1._geometries[i];var rings=polygon.getBoundary();for(var j=0;j<rings.getNumGeometries();j++){allRings.add(rings.getGeometryN(j));}}var allRingsArray=new Array(allRings.size()).fill(null);return this.getFactory().createMultiLineString(allRings.toArray(allRingsArray));};MultiPolygon.prototype.getGeometryType=function getGeometryType(){return 'MultiPolygon';};MultiPolygon.prototype.copy=function copy(){var this$1=this;var polygons=new Array(this._geometries.length).fill(null);for(var i=0;i<polygons.length;i++){polygons[i]=this$1._geometries[i].copy();}return new MultiPolygon(polygons,this._factory);};MultiPolygon.prototype.interfaces_=function interfaces_(){return [Polygonal];};MultiPolygon.prototype.getClass=function getClass(){return MultiPolygon;};staticAccessors.serialVersionUID.get=function(){return -551033529766975875;};Object.defineProperties(MultiPolygon,staticAccessors);return MultiPolygon;}(GeometryCollection);var GeometryEditor=function GeometryEditor(factory){this._factory=factory||null;this._isUserDataCopied=false;};var staticAccessors$16={NoOpGeometryOperation:{configurable:true},CoordinateOperation:{configurable:true},CoordinateSequenceOperation:{configurable:true}};GeometryEditor.prototype.setCopyUserData=function setCopyUserData(isUserDataCopied){this._isUserDataCopied=isUserDataCopied;};GeometryEditor.prototype.edit=function edit(geometry,operation){if(geometry===null){return null;}var result=this.editInternal(geometry,operation);if(this._isUserDataCopied){result.setUserData(geometry.getUserData());}return result;};GeometryEditor.prototype.editInternal=function editInternal(geometry,operation){if(this._factory===null){this._factory=geometry.getFactory();}if(geometry instanceof GeometryCollection){return this.editGeometryCollection(geometry,operation);}if(geometry instanceof Polygon){return this.editPolygon(geometry,operation);}if(geometry instanceof Point){return operation.edit(geometry,this._factory);}if(geometry instanceof LineString){return operation.edit(geometry,this._factory);}Assert.shouldNeverReachHere('Unsupported Geometry class: '+geometry.getClass().getName());return null;};GeometryEditor.prototype.editGeometryCollection=function editGeometryCollection(collection,operation){var this$1=this;var collectionForType=operation.edit(collection,this._factory);var geometries=new ArrayList();for(var i=0;i<collectionForType.getNumGeometries();i++){var geometry=this$1.edit(collectionForType.getGeometryN(i),operation);if(geometry===null||geometry.isEmpty()){continue;}geometries.add(geometry);}if(collectionForType.getClass()===MultiPoint){return this._factory.createMultiPoint(geometries.toArray([]));}if(collectionForType.getClass()===MultiLineString){return this._factory.createMultiLineString(geometries.toArray([]));}if(collectionForType.getClass()===MultiPolygon){return this._factory.createMultiPolygon(geometries.toArray([]));}return this._factory.createGeometryCollection(geometries.toArray([]));};GeometryEditor.prototype.editPolygon=function editPolygon(polygon,operation){var this$1=this;var newPolygon=operation.edit(polygon,this._factory);if(newPolygon===null){newPolygon=this._factory.createPolygon(null);}if(newPolygon.isEmpty()){return newPolygon;}var shell=this.edit(newPolygon.getExteriorRing(),operation);if(shell===null||shell.isEmpty()){return this._factory.createPolygon();}var holes=new ArrayList();for(var i=0;i<newPolygon.getNumInteriorRing();i++){var hole=this$1.edit(newPolygon.getInteriorRingN(i),operation);if(hole===null||hole.isEmpty()){continue;}holes.add(hole);}return this._factory.createPolygon(shell,holes.toArray([]));};GeometryEditor.prototype.interfaces_=function interfaces_(){return [];};GeometryEditor.prototype.getClass=function getClass(){return GeometryEditor;};GeometryEditor.GeometryEditorOperation=function GeometryEditorOperation(){};staticAccessors$16.NoOpGeometryOperation.get=function(){return NoOpGeometryOperation;};staticAccessors$16.CoordinateOperation.get=function(){return CoordinateOperation;};staticAccessors$16.CoordinateSequenceOperation.get=function(){return CoordinateSequenceOperation;};Object.defineProperties(GeometryEditor,staticAccessors$16);var NoOpGeometryOperation=function NoOpGeometryOperation(){};NoOpGeometryOperation.prototype.edit=function edit(geometry,factory){return geometry;};NoOpGeometryOperation.prototype.interfaces_=function interfaces_(){return [GeometryEditor.GeometryEditorOperation];};NoOpGeometryOperation.prototype.getClass=function getClass(){return NoOpGeometryOperation;};var CoordinateOperation=function CoordinateOperation(){};CoordinateOperation.prototype.edit=function edit(geometry,factory){var coords=this.editCoordinates(geometry.getCoordinates(),geometry);if(coords===null){return geometry;}if(geometry instanceof LinearRing){return factory.createLinearRing(coords);}if(geometry instanceof LineString){return factory.createLineString(coords);}if(geometry instanceof Point){if(coords.length>0){return factory.createPoint(coords[0]);}else{return factory.createPoint();}}return geometry;};CoordinateOperation.prototype.interfaces_=function interfaces_(){return [GeometryEditor.GeometryEditorOperation];};CoordinateOperation.prototype.getClass=function getClass(){return CoordinateOperation;};var CoordinateSequenceOperation=function CoordinateSequenceOperation(){};CoordinateSequenceOperation.prototype.edit=function edit(geometry,factory){if(geometry instanceof LinearRing){return factory.createLinearRing(this.edit(geometry.getCoordinateSequence(),geometry));}if(geometry instanceof LineString){return factory.createLineString(this.edit(geometry.getCoordinateSequence(),geometry));}if(geometry instanceof Point){return factory.createPoint(this.edit(geometry.getCoordinateSequence(),geometry));}return geometry;};CoordinateSequenceOperation.prototype.interfaces_=function interfaces_(){return [GeometryEditor.GeometryEditorOperation];};CoordinateSequenceOperation.prototype.getClass=function getClass(){return CoordinateSequenceOperation;};var CoordinateArraySequence=function CoordinateArraySequence(){var this$1=this;this._dimension=3;this._coordinates=null;if(arguments.length===1){if(arguments[0]instanceof Array){this._coordinates=arguments[0];this._dimension=3;}else if(Number.isInteger(arguments[0])){var size=arguments[0];this._coordinates=new Array(size).fill(null);for(var i=0;i<size;i++){this$1._coordinates[i]=new Coordinate();}}else if(hasInterface(arguments[0],CoordinateSequence)){var coordSeq=arguments[0];if(coordSeq===null){this._coordinates=new Array(0).fill(null);return null;}this._dimension=coordSeq.getDimension();this._coordinates=new Array(coordSeq.size()).fill(null);for(var i$1=0;i$1<this._coordinates.length;i$1++){this$1._coordinates[i$1]=coordSeq.getCoordinateCopy(i$1);}}}else if(arguments.length===2){if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var coordinates=arguments[0];var dimension=arguments[1];this._coordinates=coordinates;this._dimension=dimension;if(coordinates===null){this._coordinates=new Array(0).fill(null);}}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var size$1=arguments[0];var dimension$1=arguments[1];this._coordinates=new Array(size$1).fill(null);this._dimension=dimension$1;for(var i$2=0;i$2<size$1;i$2++){this$1._coordinates[i$2]=new Coordinate();}}}};var staticAccessors$18={serialVersionUID:{configurable:true}};CoordinateArraySequence.prototype.setOrdinate=function setOrdinate(index,ordinateIndex,value){switch(ordinateIndex){case CoordinateSequence.X:this._coordinates[index].x=value;break;case CoordinateSequence.Y:this._coordinates[index].y=value;break;case CoordinateSequence.Z:this._coordinates[index].z=value;break;default:throw new IllegalArgumentException('invalid ordinateIndex');}};CoordinateArraySequence.prototype.size=function size(){return this._coordinates.length;};CoordinateArraySequence.prototype.getOrdinate=function getOrdinate(index,ordinateIndex){switch(ordinateIndex){case CoordinateSequence.X:return this._coordinates[index].x;case CoordinateSequence.Y:return this._coordinates[index].y;case CoordinateSequence.Z:return this._coordinates[index].z;default:}return Double.NaN;};CoordinateArraySequence.prototype.getCoordinate=function getCoordinate(){if(arguments.length===1){var i=arguments[0];return this._coordinates[i];}else if(arguments.length===2){var index=arguments[0];var coord=arguments[1];coord.x=this._coordinates[index].x;coord.y=this._coordinates[index].y;coord.z=this._coordinates[index].z;}};CoordinateArraySequence.prototype.getCoordinateCopy=function getCoordinateCopy(i){return new Coordinate(this._coordinates[i]);};CoordinateArraySequence.prototype.getDimension=function getDimension(){return this._dimension;};CoordinateArraySequence.prototype.getX=function getX(index){return this._coordinates[index].x;};CoordinateArraySequence.prototype.clone=function clone(){var this$1=this;var cloneCoordinates=new Array(this.size()).fill(null);for(var i=0;i<this._coordinates.length;i++){cloneCoordinates[i]=this$1._coordinates[i].clone();}return new CoordinateArraySequence(cloneCoordinates,this._dimension);};CoordinateArraySequence.prototype.expandEnvelope=function expandEnvelope(env){var this$1=this;for(var i=0;i<this._coordinates.length;i++){env.expandToInclude(this$1._coordinates[i]);}return env;};CoordinateArraySequence.prototype.copy=function copy(){var this$1=this;var cloneCoordinates=new Array(this.size()).fill(null);for(var i=0;i<this._coordinates.length;i++){cloneCoordinates[i]=this$1._coordinates[i].copy();}return new CoordinateArraySequence(cloneCoordinates,this._dimension);};CoordinateArraySequence.prototype.toString=function toString(){var this$1=this;if(this._coordinates.length>0){var strBuf=new StringBuffer(17*this._coordinates.length);strBuf.append('(');strBuf.append(this._coordinates[0]);for(var i=1;i<this._coordinates.length;i++){strBuf.append(', ');strBuf.append(this$1._coordinates[i]);}strBuf.append(')');return strBuf.toString();}else{return '()';}};CoordinateArraySequence.prototype.getY=function getY(index){return this._coordinates[index].y;};CoordinateArraySequence.prototype.toCoordinateArray=function toCoordinateArray(){return this._coordinates;};CoordinateArraySequence.prototype.interfaces_=function interfaces_(){return [CoordinateSequence,Serializable];};CoordinateArraySequence.prototype.getClass=function getClass(){return CoordinateArraySequence;};staticAccessors$18.serialVersionUID.get=function(){return -915438501601840650;};Object.defineProperties(CoordinateArraySequence,staticAccessors$18);var CoordinateArraySequenceFactory=function CoordinateArraySequenceFactory(){};var staticAccessors$17={serialVersionUID:{configurable:true},instanceObject:{configurable:true}};CoordinateArraySequenceFactory.prototype.readResolve=function readResolve(){return CoordinateArraySequenceFactory.instance();};CoordinateArraySequenceFactory.prototype.create=function create(){if(arguments.length===1){if(arguments[0]instanceof Array){var coordinates=arguments[0];return new CoordinateArraySequence(coordinates);}else if(hasInterface(arguments[0],CoordinateSequence)){var coordSeq=arguments[0];return new CoordinateArraySequence(coordSeq);}}else if(arguments.length===2){var size=arguments[0];var dimension=arguments[1];if(dimension>3){dimension=3;}if(dimension<2){return new CoordinateArraySequence(size);}return new CoordinateArraySequence(size,dimension);}};CoordinateArraySequenceFactory.prototype.interfaces_=function interfaces_(){return [CoordinateSequenceFactory,Serializable];};CoordinateArraySequenceFactory.prototype.getClass=function getClass(){return CoordinateArraySequenceFactory;};CoordinateArraySequenceFactory.instance=function instance(){return CoordinateArraySequenceFactory.instanceObject;};staticAccessors$17.serialVersionUID.get=function(){return -4099577099607551657;};staticAccessors$17.instanceObject.get=function(){return new CoordinateArraySequenceFactory();};Object.defineProperties(CoordinateArraySequenceFactory,staticAccessors$17);/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/HashMap.html
     *
     * @extends {javascript.util.Map}
     * @constructor
     * @private
     */var HashMap=function(MapInterface){function HashMap(){MapInterface.call(this);this.map_=new Map();}if(MapInterface)HashMap.__proto__=MapInterface;HashMap.prototype=Object.create(MapInterface&&MapInterface.prototype);HashMap.prototype.constructor=HashMap;/**
       * @override
       */HashMap.prototype.get=function get(key){return this.map_.get(key)||null;};/**
       * @override
       */HashMap.prototype.put=function put(key,value){this.map_.set(key,value);return value;};/**
       * @override
       */HashMap.prototype.values=function values(){var arrayList=new ArrayList();var it=this.map_.values();var o=it.next();while(!o.done){arrayList.add(o.value);o=it.next();}return arrayList;};/**
       * @override
       */HashMap.prototype.entrySet=function entrySet(){var hashSet=new HashSet();this.map_.entries().forEach(function(entry){return hashSet.add(entry);});return hashSet;};/**
       * @override
       */HashMap.prototype.size=function size(){return this.map_.size();};return HashMap;}(Map$1);var PrecisionModel=function PrecisionModel(){this._modelType=null;this._scale=null;if(arguments.length===0){this._modelType=PrecisionModel.FLOATING;}else if(arguments.length===1){if(arguments[0]instanceof Type){var modelType=arguments[0];this._modelType=modelType;if(modelType===PrecisionModel.FIXED){this.setScale(1.0);}}else if(typeof arguments[0]==='number'){var scale=arguments[0];this._modelType=PrecisionModel.FIXED;this.setScale(scale);}else if(arguments[0]instanceof PrecisionModel){var pm=arguments[0];this._modelType=pm._modelType;this._scale=pm._scale;}}};var staticAccessors$19={serialVersionUID:{configurable:true},maximumPreciseValue:{configurable:true}};PrecisionModel.prototype.equals=function equals(other){if(!(other instanceof PrecisionModel)){return false;}var otherPrecisionModel=other;return this._modelType===otherPrecisionModel._modelType&&this._scale===otherPrecisionModel._scale;};PrecisionModel.prototype.compareTo=function compareTo(o){var other=o;var sigDigits=this.getMaximumSignificantDigits();var otherSigDigits=other.getMaximumSignificantDigits();return new Integer(sigDigits).compareTo(new Integer(otherSigDigits));};PrecisionModel.prototype.getScale=function getScale(){return this._scale;};PrecisionModel.prototype.isFloating=function isFloating(){return this._modelType===PrecisionModel.FLOATING||this._modelType===PrecisionModel.FLOATING_SINGLE;};PrecisionModel.prototype.getType=function getType(){return this._modelType;};PrecisionModel.prototype.toString=function toString(){var description='UNKNOWN';if(this._modelType===PrecisionModel.FLOATING){description='Floating';}else if(this._modelType===PrecisionModel.FLOATING_SINGLE){description='Floating-Single';}else if(this._modelType===PrecisionModel.FIXED){description='Fixed (Scale='+this.getScale()+')';}return description;};PrecisionModel.prototype.makePrecise=function makePrecise(){if(typeof arguments[0]==='number'){var val=arguments[0];if(Double.isNaN(val)){return val;}if(this._modelType===PrecisionModel.FLOATING_SINGLE){var floatSingleVal=val;return floatSingleVal;}if(this._modelType===PrecisionModel.FIXED){return Math.round(val*this._scale)/this._scale;}return val;}else if(arguments[0]instanceof Coordinate){var coord=arguments[0];if(this._modelType===PrecisionModel.FLOATING){return null;}coord.x=this.makePrecise(coord.x);coord.y=this.makePrecise(coord.y);}};PrecisionModel.prototype.getMaximumSignificantDigits=function getMaximumSignificantDigits(){var maxSigDigits=16;if(this._modelType===PrecisionModel.FLOATING){maxSigDigits=16;}else if(this._modelType===PrecisionModel.FLOATING_SINGLE){maxSigDigits=6;}else if(this._modelType===PrecisionModel.FIXED){maxSigDigits=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)));}return maxSigDigits;};PrecisionModel.prototype.setScale=function setScale(scale){this._scale=Math.abs(scale);};PrecisionModel.prototype.interfaces_=function interfaces_(){return [Serializable,Comparable];};PrecisionModel.prototype.getClass=function getClass(){return PrecisionModel;};PrecisionModel.mostPrecise=function mostPrecise(pm1,pm2){if(pm1.compareTo(pm2)>=0){return pm1;}return pm2;};staticAccessors$19.serialVersionUID.get=function(){return 7777263578777803835;};staticAccessors$19.maximumPreciseValue.get=function(){return 9007199254740992.0;};Object.defineProperties(PrecisionModel,staticAccessors$19);var Type=function Type(name){this._name=name||null;Type.nameToTypeMap.put(name,this);};var staticAccessors$1$1={serialVersionUID:{configurable:true},nameToTypeMap:{configurable:true}};Type.prototype.readResolve=function readResolve(){return Type.nameToTypeMap.get(this._name);};Type.prototype.toString=function toString(){return this._name;};Type.prototype.interfaces_=function interfaces_(){return [Serializable];};Type.prototype.getClass=function getClass(){return Type;};staticAccessors$1$1.serialVersionUID.get=function(){return -5528602631731589822;};staticAccessors$1$1.nameToTypeMap.get=function(){return new HashMap();};Object.defineProperties(Type,staticAccessors$1$1);PrecisionModel.Type=Type;PrecisionModel.FIXED=new Type('FIXED');PrecisionModel.FLOATING=new Type('FLOATING');PrecisionModel.FLOATING_SINGLE=new Type('FLOATING SINGLE');var GeometryFactory=function GeometryFactory(){this._precisionModel=new PrecisionModel();this._SRID=0;this._coordinateSequenceFactory=GeometryFactory.getDefaultCoordinateSequenceFactory();if(arguments.length===0);else if(arguments.length===1){if(hasInterface(arguments[0],CoordinateSequenceFactory)){this._coordinateSequenceFactory=arguments[0];}else if(arguments[0]instanceof PrecisionModel){this._precisionModel=arguments[0];}}else if(arguments.length===2){this._precisionModel=arguments[0];this._SRID=arguments[1];}else if(arguments.length===3){this._precisionModel=arguments[0];this._SRID=arguments[1];this._coordinateSequenceFactory=arguments[2];}};var staticAccessors$2={serialVersionUID:{configurable:true}};GeometryFactory.prototype.toGeometry=function toGeometry(envelope){if(envelope.isNull()){return this.createPoint(null);}if(envelope.getMinX()===envelope.getMaxX()&&envelope.getMinY()===envelope.getMaxY()){return this.createPoint(new Coordinate(envelope.getMinX(),envelope.getMinY()));}if(envelope.getMinX()===envelope.getMaxX()||envelope.getMinY()===envelope.getMaxY()){return this.createLineString([new Coordinate(envelope.getMinX(),envelope.getMinY()),new Coordinate(envelope.getMaxX(),envelope.getMaxY())]);}return this.createPolygon(this.createLinearRing([new Coordinate(envelope.getMinX(),envelope.getMinY()),new Coordinate(envelope.getMinX(),envelope.getMaxY()),new Coordinate(envelope.getMaxX(),envelope.getMaxY()),new Coordinate(envelope.getMaxX(),envelope.getMinY()),new Coordinate(envelope.getMinX(),envelope.getMinY())]),null);};GeometryFactory.prototype.createLineString=function createLineString(coordinates){if(!coordinates){return new LineString(this.getCoordinateSequenceFactory().create([]),this);}else if(coordinates instanceof Array){return new LineString(this.getCoordinateSequenceFactory().create(coordinates),this);}else if(hasInterface(coordinates,CoordinateSequence)){return new LineString(coordinates,this);}};GeometryFactory.prototype.createMultiLineString=function createMultiLineString(){if(arguments.length===0){return new MultiLineString(null,this);}else if(arguments.length===1){var lineStrings=arguments[0];return new MultiLineString(lineStrings,this);}};GeometryFactory.prototype.buildGeometry=function buildGeometry(geomList){var geomClass=null;var isHeterogeneous=false;var hasGeometryCollection=false;for(var i=geomList.iterator();i.hasNext();){var geom=i.next();var partClass=geom.getClass();if(geomClass===null){geomClass=partClass;}if(partClass!==geomClass){isHeterogeneous=true;}if(geom.isGeometryCollectionOrDerived()){hasGeometryCollection=true;}}if(geomClass===null){return this.createGeometryCollection();}if(isHeterogeneous||hasGeometryCollection){return this.createGeometryCollection(GeometryFactory.toGeometryArray(geomList));}var geom0=geomList.iterator().next();var isCollection=geomList.size()>1;if(isCollection){if(geom0 instanceof Polygon){return this.createMultiPolygon(GeometryFactory.toPolygonArray(geomList));}else if(geom0 instanceof LineString){return this.createMultiLineString(GeometryFactory.toLineStringArray(geomList));}else if(geom0 instanceof Point){return this.createMultiPoint(GeometryFactory.toPointArray(geomList));}Assert.shouldNeverReachHere('Unhandled class: '+geom0.getClass().getName());}return geom0;};GeometryFactory.prototype.createMultiPointFromCoords=function createMultiPointFromCoords(coordinates){return this.createMultiPoint(coordinates!==null?this.getCoordinateSequenceFactory().create(coordinates):null);};GeometryFactory.prototype.createPoint=function createPoint(){if(arguments.length===0){return this.createPoint(this.getCoordinateSequenceFactory().create([]));}else if(arguments.length===1){if(arguments[0]instanceof Coordinate){var coordinate=arguments[0];return this.createPoint(coordinate!==null?this.getCoordinateSequenceFactory().create([coordinate]):null);}else if(hasInterface(arguments[0],CoordinateSequence)){var coordinates=arguments[0];return new Point(coordinates,this);}}};GeometryFactory.prototype.getCoordinateSequenceFactory=function getCoordinateSequenceFactory(){return this._coordinateSequenceFactory;};GeometryFactory.prototype.createPolygon=function createPolygon(){if(arguments.length===0){return new Polygon(null,null,this);}else if(arguments.length===1){if(hasInterface(arguments[0],CoordinateSequence)){var coordinates=arguments[0];return this.createPolygon(this.createLinearRing(coordinates));}else if(arguments[0]instanceof Array){var coordinates$1=arguments[0];return this.createPolygon(this.createLinearRing(coordinates$1));}else if(arguments[0]instanceof LinearRing){var shell=arguments[0];return this.createPolygon(shell,null);}}else if(arguments.length===2){var shell$1=arguments[0];var holes=arguments[1];return new Polygon(shell$1,holes,this);}};GeometryFactory.prototype.getSRID=function getSRID(){return this._SRID;};GeometryFactory.prototype.createGeometryCollection=function createGeometryCollection(){if(arguments.length===0){return new GeometryCollection(null,this);}else if(arguments.length===1){var geometries=arguments[0];return new GeometryCollection(geometries,this);}};GeometryFactory.prototype.createGeometry=function createGeometry(g){var editor=new GeometryEditor(this);return editor.edit(g,{edit:function edit(){if(arguments.length===2){var coordSeq=arguments[0];// const geometry = arguments[1]
    return this._coordinateSequenceFactory.create(coordSeq);}}});};GeometryFactory.prototype.getPrecisionModel=function getPrecisionModel(){return this._precisionModel;};GeometryFactory.prototype.createLinearRing=function createLinearRing(){if(arguments.length===0){return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));}else if(arguments.length===1){if(arguments[0]instanceof Array){var coordinates=arguments[0];return this.createLinearRing(coordinates!==null?this.getCoordinateSequenceFactory().create(coordinates):null);}else if(hasInterface(arguments[0],CoordinateSequence)){var coordinates$1=arguments[0];return new LinearRing(coordinates$1,this);}}};GeometryFactory.prototype.createMultiPolygon=function createMultiPolygon(){if(arguments.length===0){return new MultiPolygon(null,this);}else if(arguments.length===1){var polygons=arguments[0];return new MultiPolygon(polygons,this);}};GeometryFactory.prototype.createMultiPoint=function createMultiPoint(){var this$1=this;if(arguments.length===0){return new MultiPoint(null,this);}else if(arguments.length===1){if(arguments[0]instanceof Array){var point=arguments[0];return new MultiPoint(point,this);}else if(arguments[0]instanceof Array){var coordinates=arguments[0];return this.createMultiPoint(coordinates!==null?this.getCoordinateSequenceFactory().create(coordinates):null);}else if(hasInterface(arguments[0],CoordinateSequence)){var coordinates$1=arguments[0];if(coordinates$1===null){return this.createMultiPoint(new Array(0).fill(null));}var points=new Array(coordinates$1.size()).fill(null);for(var i=0;i<coordinates$1.size();i++){var ptSeq=this$1.getCoordinateSequenceFactory().create(1,coordinates$1.getDimension());CoordinateSequences.copy(coordinates$1,i,ptSeq,0,1);points[i]=this$1.createPoint(ptSeq);}return this.createMultiPoint(points);}}};GeometryFactory.prototype.interfaces_=function interfaces_(){return [Serializable];};GeometryFactory.prototype.getClass=function getClass(){return GeometryFactory;};GeometryFactory.toMultiPolygonArray=function toMultiPolygonArray(multiPolygons){var multiPolygonArray=new Array(multiPolygons.size()).fill(null);return multiPolygons.toArray(multiPolygonArray);};GeometryFactory.toGeometryArray=function toGeometryArray(geometries){if(geometries===null){return null;}var geometryArray=new Array(geometries.size()).fill(null);return geometries.toArray(geometryArray);};GeometryFactory.getDefaultCoordinateSequenceFactory=function getDefaultCoordinateSequenceFactory(){return CoordinateArraySequenceFactory.instance();};GeometryFactory.toMultiLineStringArray=function toMultiLineStringArray(multiLineStrings){var multiLineStringArray=new Array(multiLineStrings.size()).fill(null);return multiLineStrings.toArray(multiLineStringArray);};GeometryFactory.toLineStringArray=function toLineStringArray(lineStrings){var lineStringArray=new Array(lineStrings.size()).fill(null);return lineStrings.toArray(lineStringArray);};GeometryFactory.toMultiPointArray=function toMultiPointArray(multiPoints){var multiPointArray=new Array(multiPoints.size()).fill(null);return multiPoints.toArray(multiPointArray);};GeometryFactory.toLinearRingArray=function toLinearRingArray(linearRings){var linearRingArray=new Array(linearRings.size()).fill(null);return linearRings.toArray(linearRingArray);};GeometryFactory.toPointArray=function toPointArray(points){var pointArray=new Array(points.size()).fill(null);return points.toArray(pointArray);};GeometryFactory.toPolygonArray=function toPolygonArray(polygons){var polygonArray=new Array(polygons.size()).fill(null);return polygons.toArray(polygonArray);};GeometryFactory.createPointFromInternalCoord=function createPointFromInternalCoord(coord,exemplar){exemplar.getPrecisionModel().makePrecise(coord);return exemplar.getFactory().createPoint(coord);};staticAccessors$2.serialVersionUID.get=function(){return -6820524753094095635;};Object.defineProperties(GeometryFactory,staticAccessors$2);var geometryTypes=['Point','MultiPoint','LineString','MultiLineString','Polygon','MultiPolygon'];/**
     * Class for reading and writing Well-Known Text.Create a new parser for GeoJSON
     * NOTE: Adapted from OpenLayers 2.11 implementation.
     *//**
     * Create a new parser for GeoJSON
     *
     * @param {GeometryFactory} geometryFactory
     * @return An instance of GeoJsonParser.
     * @constructor
     * @private
     */var GeoJSONParser=function GeoJSONParser(geometryFactory){this.geometryFactory=geometryFactory||new GeometryFactory();};/**
     * Deserialize a GeoJSON object and return the Geometry or Feature(Collection) with JSTS Geometries
     *
     * @param {}
     *        A GeoJSON object.
     * @return {} A Geometry instance or object representing a Feature(Collection) with Geometry instances.
     * @private
     */GeoJSONParser.prototype.read=function read(json){var obj;if(typeof json==='string'){obj=JSON.parse(json);}else{obj=json;}var type=obj.type;if(!parse[type]){throw new Error('Unknown GeoJSON type: '+obj.type);}if(geometryTypes.indexOf(type)!==-1){return parse[type].apply(this,[obj.coordinates]);}else if(type==='GeometryCollection'){return parse[type].apply(this,[obj.geometries]);}// feature or feature collection
    return parse[type].apply(this,[obj]);};/**
     * Serialize a Geometry object into GeoJSON
     *
     * @param {Geometry}
     *        geometry A Geometry or array of Geometries.
     * @return {Object} A GeoJSON object represting the input Geometry/Geometries.
     * @private
     */GeoJSONParser.prototype.write=function write(geometry){var type=geometry.getGeometryType();if(!extract[type]){throw new Error('Geometry is not supported');}return extract[type].apply(this,[geometry]);};var parse={/**
       * Parse a GeoJSON Feature object
       *
       * @param {Object}
       *          obj Object to parse.
       *
       * @return {Object} Feature with geometry/bbox converted to JSTS Geometries.
       */Feature:function Feature(obj){var feature={};// copy features
    for(var key in obj){feature[key]=obj[key];}// parse geometry
    if(obj.geometry){var type=obj.geometry.type;if(!parse[type]){throw new Error('Unknown GeoJSON type: '+obj.type);}feature.geometry=this.read(obj.geometry);}// bbox
    if(obj.bbox){feature.bbox=parse.bbox.apply(this,[obj.bbox]);}return feature;},/**
       * Parse a GeoJSON FeatureCollection object
       *
       * @param {Object}
       *          obj Object to parse.
       *
       * @return {Object} FeatureCollection with geometry/bbox converted to JSTS Geometries.
       */FeatureCollection:function FeatureCollection(obj){var this$1=this;var featureCollection={};if(obj.features){featureCollection.features=[];for(var i=0;i<obj.features.length;++i){featureCollection.features.push(this$1.read(obj.features[i]));}}if(obj.bbox){featureCollection.bbox=this.parse.bbox.apply(this,[obj.bbox]);}return featureCollection;},/**
       * Convert the ordinates in an array to an array of Coordinates
       *
       * @param {Array}
       *          array Array with {Number}s.
       *
       * @return {Array} Array with Coordinates.
       */coordinates:function coordinates(array){var coordinates=[];for(var i=0;i<array.length;++i){var sub=array[i];coordinates.push(new Coordinate(sub[0],sub[1]));}return coordinates;},/**
       * Convert the bbox to a LinearRing
       *
       * @param {Array}
       *          array Array with [xMin, yMin, xMax, yMax].
       *
       * @return {Array} Array with Coordinates.
       */bbox:function bbox(array){return this.geometryFactory.createLinearRing([new Coordinate(array[0],array[1]),new Coordinate(array[2],array[1]),new Coordinate(array[2],array[3]),new Coordinate(array[0],array[3]),new Coordinate(array[0],array[1])]);},/**
       * Convert an Array with ordinates to a Point
       *
       * @param {Array}
       *          array Array with ordinates.
       *
       * @return {Point} Point.
       */Point:function Point(array){var coordinate=new Coordinate(array[0],array[1]);return this.geometryFactory.createPoint(coordinate);},/**
       * Convert an Array with coordinates to a MultiPoint
       *
       * @param {Array}
       *          array Array with coordinates.
       *
       * @return {MultiPoint} MultiPoint.
       */MultiPoint:function MultiPoint(array){var this$1=this;var points=[];for(var i=0;i<array.length;++i){points.push(parse.Point.apply(this$1,[array[i]]));}return this.geometryFactory.createMultiPoint(points);},/**
       * Convert an Array with coordinates to a LineString
       *
       * @param {Array}
       *          array Array with coordinates.
       *
       * @return {LineString} LineString.
       */LineString:function LineString(array){var coordinates=parse.coordinates.apply(this,[array]);return this.geometryFactory.createLineString(coordinates);},/**
       * Convert an Array with coordinates to a MultiLineString
       *
       * @param {Array}
       *          array Array with coordinates.
       *
       * @return {MultiLineString} MultiLineString.
       */MultiLineString:function MultiLineString(array){var this$1=this;var lineStrings=[];for(var i=0;i<array.length;++i){lineStrings.push(parse.LineString.apply(this$1,[array[i]]));}return this.geometryFactory.createMultiLineString(lineStrings);},/**
       * Convert an Array to a Polygon
       *
       * @param {Array}
       *          array Array with shell and holes.
       *
       * @return {Polygon} Polygon.
       */Polygon:function Polygon(array){var this$1=this;var shellCoordinates=parse.coordinates.apply(this,[array[0]]);var shell=this.geometryFactory.createLinearRing(shellCoordinates);var holes=[];for(var i=1;i<array.length;++i){var hole=array[i];var coordinates=parse.coordinates.apply(this$1,[hole]);var linearRing=this$1.geometryFactory.createLinearRing(coordinates);holes.push(linearRing);}return this.geometryFactory.createPolygon(shell,holes);},/**
       * Convert an Array to a MultiPolygon
       *
       * @param {Array}
       *          array Array of arrays with shell and rings.
       *
       * @return {MultiPolygon} MultiPolygon.
       */MultiPolygon:function MultiPolygon(array){var this$1=this;var polygons=[];for(var i=0;i<array.length;++i){var polygon=array[i];polygons.push(parse.Polygon.apply(this$1,[polygon]));}return this.geometryFactory.createMultiPolygon(polygons);},/**
       * Convert an Array to a GeometryCollection
       *
       * @param {Array}
       *          array Array of GeoJSON geometries.
       *
       * @return {GeometryCollection} GeometryCollection.
       */GeometryCollection:function GeometryCollection(array){var this$1=this;var geometries=[];for(var i=0;i<array.length;++i){var geometry=array[i];geometries.push(this$1.read(geometry));}return this.geometryFactory.createGeometryCollection(geometries);}};var extract={/**
       * Convert a Coordinate to an Array
       *
       * @param {Coordinate}
       *          coordinate Coordinate to convert.
       *
       * @return {Array} Array of ordinates.
       */coordinate:function coordinate(_coordinate){return [_coordinate.x,_coordinate.y];},/**
       * Convert a Point to a GeoJSON object
       *
       * @param {Point}
       *          point Point to convert.
       *
       * @return {Array} Array of 2 ordinates (paired to a coordinate).
       */Point:function Point(point){var array=extract.coordinate.apply(this,[point.getCoordinate()]);return {type:'Point',coordinates:array};},/**
       * Convert a MultiPoint to a GeoJSON object
       *
       * @param {MultiPoint}
       *          multipoint MultiPoint to convert.
       *
       * @return {Array} Array of coordinates.
       */MultiPoint:function MultiPoint(multipoint){var this$1=this;var array=[];for(var i=0;i<multipoint._geometries.length;++i){var point=multipoint._geometries[i];var geoJson=extract.Point.apply(this$1,[point]);array.push(geoJson.coordinates);}return {type:'MultiPoint',coordinates:array};},/**
       * Convert a LineString to a GeoJSON object
       *
       * @param {LineString}
       *          linestring LineString to convert.
       *
       * @return {Array} Array of coordinates.
       */LineString:function LineString(linestring){var this$1=this;var array=[];var coordinates=linestring.getCoordinates();for(var i=0;i<coordinates.length;++i){var coordinate=coordinates[i];array.push(extract.coordinate.apply(this$1,[coordinate]));}return {type:'LineString',coordinates:array};},/**
       * Convert a MultiLineString to a GeoJSON object
       *
       * @param {MultiLineString}
       *          multilinestring MultiLineString to convert.
       *
       * @return {Array} Array of Array of coordinates.
       */MultiLineString:function MultiLineString(multilinestring){var this$1=this;var array=[];for(var i=0;i<multilinestring._geometries.length;++i){var linestring=multilinestring._geometries[i];var geoJson=extract.LineString.apply(this$1,[linestring]);array.push(geoJson.coordinates);}return {type:'MultiLineString',coordinates:array};},/**
       * Convert a Polygon to a GeoJSON object
       *
       * @param {Polygon}
       *          polygon Polygon to convert.
       *
       * @return {Array} Array with shell, holes.
       */Polygon:function Polygon(polygon){var this$1=this;var array=[];var shellGeoJson=extract.LineString.apply(this,[polygon._shell]);array.push(shellGeoJson.coordinates);for(var i=0;i<polygon._holes.length;++i){var hole=polygon._holes[i];var holeGeoJson=extract.LineString.apply(this$1,[hole]);array.push(holeGeoJson.coordinates);}return {type:'Polygon',coordinates:array};},/**
       * Convert a MultiPolygon to a GeoJSON object
       *
       * @param {MultiPolygon}
       *          multipolygon MultiPolygon to convert.
       *
       * @return {Array} Array of polygons.
       */MultiPolygon:function MultiPolygon(multipolygon){var this$1=this;var array=[];for(var i=0;i<multipolygon._geometries.length;++i){var polygon=multipolygon._geometries[i];var geoJson=extract.Polygon.apply(this$1,[polygon]);array.push(geoJson.coordinates);}return {type:'MultiPolygon',coordinates:array};},/**
       * Convert a GeometryCollection to a GeoJSON object
       *
       * @param {GeometryCollection}
       *          collection GeometryCollection to convert.
       *
       * @return {Array} Array of geometries.
       */GeometryCollection:function GeometryCollection(collection){var this$1=this;var array=[];for(var i=0;i<collection._geometries.length;++i){var geometry=collection._geometries[i];var type=geometry.getGeometryType();array.push(extract[type].apply(this$1,[geometry]));}return {type:'GeometryCollection',geometries:array};}};/**
     * Converts a geometry in GeoJSON to a {@link Geometry}.
     *//**
     * A <code>GeoJSONReader</code> is parameterized by a <code>GeometryFactory</code>,
     * to allow it to create <code>Geometry</code> objects of the appropriate
     * implementation. In particular, the <code>GeometryFactory</code> determines
     * the <code>PrecisionModel</code> and <code>SRID</code> that is used.
     *
     * @param {GeometryFactory} geometryFactory
     * @constructor
     */var GeoJSONReader=function GeoJSONReader(geometryFactory){this.geometryFactory=geometryFactory||new GeometryFactory();this.precisionModel=this.geometryFactory.getPrecisionModel();this.parser=new GeoJSONParser(this.geometryFactory);};/**
     * Reads a GeoJSON representation of a {@link Geometry}
     *
     * Will also parse GeoJSON Features/FeatureCollections as custom objects.
     *
     * @param {Object|String} geoJson a GeoJSON Object or String.
     * @return {Geometry|Object} a <code>Geometry or Feature/FeatureCollection representation.</code>
     * @memberof GeoJSONReader
     */GeoJSONReader.prototype.read=function read(geoJson){var geometry=this.parser.read(geoJson);if(this.precisionModel.getType()===PrecisionModel.FIXED){this.reducePrecision(geometry);}return geometry;};// NOTE: this is a hack
    GeoJSONReader.prototype.reducePrecision=function reducePrecision(geometry){var this$1=this;var i,len;if(geometry.coordinate){this.precisionModel.makePrecise(geometry.coordinate);}else if(geometry.points){for(i=0,len=geometry.points.length;i<len;i++){this$1.precisionModel.makePrecise(geometry.points[i]);}}else if(geometry.geometries){for(i=0,len=geometry.geometries.length;i<len;i++){this$1.reducePrecision(geometry.geometries[i]);}}};/**
     * @module GeoJSONWriter
     *//**
     * Writes the GeoJSON representation of a {@link Geometry}. The
     * The GeoJSON format is defined <A
     * HREF="http://geojson.org/geojson-spec.html">here</A>.
     *//**
     * The <code>GeoJSONWriter</code> outputs coordinates rounded to the precision
     * model. Only the maximum number of decimal places necessary to represent the
     * ordinates to the required precision will be output.
     *
     * @param {GeometryFactory} geometryFactory
     * @constructor
     */var GeoJSONWriter=function GeoJSONWriter(){this.parser=new GeoJSONParser(this.geometryFactory);};/**
     * Converts a <code>Geometry</code> to its GeoJSON representation.
     *
     * @param {Geometry}
     *        geometry a <code>Geometry</code> to process.
     * @return {Object} The GeoJSON representation of the Geometry.
     * @memberof GeoJSONWriter
     */GeoJSONWriter.prototype.write=function write(geometry){return this.parser.write(geometry);};/* eslint-disable no-undef */// io
    var Position=function Position(){};var staticAccessors$20={ON:{configurable:true},LEFT:{configurable:true},RIGHT:{configurable:true}};Position.prototype.interfaces_=function interfaces_(){return [];};Position.prototype.getClass=function getClass(){return Position;};Position.opposite=function opposite(position){if(position===Position.LEFT){return Position.RIGHT;}if(position===Position.RIGHT){return Position.LEFT;}return position;};staticAccessors$20.ON.get=function(){return 0;};staticAccessors$20.LEFT.get=function(){return 1;};staticAccessors$20.RIGHT.get=function(){return 2;};Object.defineProperties(Position,staticAccessors$20);/**
     * @param {string=} message Optional message
     * @extends {Error}
     * @constructor
     * @private
     */function EmptyStackException(message){this.message=message||'';}EmptyStackException.prototype=new Error();/**
     * @type {string}
     */EmptyStackException.prototype.name='EmptyStackException';/**
     * @see http://download.oracle.com/javase/6/docs/api/java/util/Stack.html
     *
     * @extends {List}
     * @constructor
     * @private
     */function Stack(){/**
       * @type {Array}
       * @private
       */this.array_=[];}Stack.prototype=new List();/**
     * @override
     */Stack.prototype.add=function(e){this.array_.push(e);return true;};/**
     * @override
     */Stack.prototype.get=function(index){if(index<0||index>=this.size()){throw new Error();}return this.array_[index];};/**
     * Pushes an item onto the top of this stack.
     * @param {Object} e
     * @return {Object}
     */Stack.prototype.push=function(e){this.array_.push(e);return e;};/**
     * Pushes an item onto the top of this stack.
     * @param {Object} e
     * @return {Object}
     */Stack.prototype.pop=function(e){if(this.array_.length===0){throw new EmptyStackException();}return this.array_.pop();};/**
     * Looks at the object at the top of this stack without removing it from the
     * stack.
     * @return {Object}
     */Stack.prototype.peek=function(){if(this.array_.length===0){throw new EmptyStackException();}return this.array_[this.array_.length-1];};/**
     * Tests if this stack is empty.
     * @return {boolean} true if and only if this stack contains no items; false
     *         otherwise.
     */Stack.prototype.empty=function(){if(this.array_.length===0){return true;}else{return false;}};/**
     * @return {boolean}
     */Stack.prototype.isEmpty=function(){return this.empty();};/**
     * Returns the 1-based position where an object is on this stack. If the object
     * o occurs as an item in this stack, this method returns the distance from the
     * top of the stack of the occurrence nearest the top of the stack; the topmost
     * item on the stack is considered to be at distance 1. The equals method is
     * used to compare o to the items in this stack.
     *
     * NOTE: does not currently actually use equals. (=== is used)
     *
     * @param {Object} o
     * @return {number} the 1-based position from the top of the stack where the
     *         object is located; the return value -1 indicates that the object is
     *         not on the stack.
     */Stack.prototype.search=function(o){return this.array_.indexOf(o);};/**
     * @return {number}
     * @export
     */Stack.prototype.size=function(){return this.array_.length;};/**
     * @return {Array}
     */Stack.prototype.toArray=function(){var this$1=this;var array=[];for(var i=0,len=this.array_.length;i<len;i++){array.push(this$1.array_[i]);}return array;};var RightmostEdgeFinder=function RightmostEdgeFinder(){this._minIndex=-1;this._minCoord=null;this._minDe=null;this._orientedDe=null;};RightmostEdgeFinder.prototype.getCoordinate=function getCoordinate(){return this._minCoord;};RightmostEdgeFinder.prototype.getRightmostSide=function getRightmostSide(de,index){var side=this.getRightmostSideOfSegment(de,index);if(side<0){side=this.getRightmostSideOfSegment(de,index-1);}if(side<0){this._minCoord=null;this.checkForRightmostCoordinate(de);}return side;};RightmostEdgeFinder.prototype.findRightmostEdgeAtVertex=function findRightmostEdgeAtVertex(){var pts=this._minDe.getEdge().getCoordinates();Assert.isTrue(this._minIndex>0&&this._minIndex<pts.length,'rightmost point expected to be interior vertex of edge');var pPrev=pts[this._minIndex-1];var pNext=pts[this._minIndex+1];var orientation=CGAlgorithms.computeOrientation(this._minCoord,pNext,pPrev);var usePrev=false;if(pPrev.y<this._minCoord.y&&pNext.y<this._minCoord.y&&orientation===CGAlgorithms.COUNTERCLOCKWISE){usePrev=true;}else if(pPrev.y>this._minCoord.y&&pNext.y>this._minCoord.y&&orientation===CGAlgorithms.CLOCKWISE){usePrev=true;}if(usePrev){this._minIndex=this._minIndex-1;}};RightmostEdgeFinder.prototype.getRightmostSideOfSegment=function getRightmostSideOfSegment(de,i){var e=de.getEdge();var coord=e.getCoordinates();if(i<0||i+1>=coord.length){return -1;}if(coord[i].y===coord[i+1].y){return -1;}var pos=Position.LEFT;if(coord[i].y<coord[i+1].y){pos=Position.RIGHT;}return pos;};RightmostEdgeFinder.prototype.getEdge=function getEdge(){return this._orientedDe;};RightmostEdgeFinder.prototype.checkForRightmostCoordinate=function checkForRightmostCoordinate(de){var this$1=this;var coord=de.getEdge().getCoordinates();for(var i=0;i<coord.length-1;i++){if(this$1._minCoord===null||coord[i].x>this$1._minCoord.x){this$1._minDe=de;this$1._minIndex=i;this$1._minCoord=coord[i];}}};RightmostEdgeFinder.prototype.findRightmostEdgeAtNode=function findRightmostEdgeAtNode(){var node=this._minDe.getNode();var star=node.getEdges();this._minDe=star.getRightmostEdge();if(!this._minDe.isForward()){this._minDe=this._minDe.getSym();this._minIndex=this._minDe.getEdge().getCoordinates().length-1;}};RightmostEdgeFinder.prototype.findEdge=function findEdge(dirEdgeList){var this$1=this;for(var i=dirEdgeList.iterator();i.hasNext();){var de=i.next();if(!de.isForward()){continue;}this$1.checkForRightmostCoordinate(de);}Assert.isTrue(this._minIndex!==0||this._minCoord.equals(this._minDe.getCoordinate()),'inconsistency in rightmost processing');if(this._minIndex===0){this.findRightmostEdgeAtNode();}else{this.findRightmostEdgeAtVertex();}this._orientedDe=this._minDe;var rightmostSide=this.getRightmostSide(this._minDe,this._minIndex);if(rightmostSide===Position.LEFT){this._orientedDe=this._minDe.getSym();}};RightmostEdgeFinder.prototype.interfaces_=function interfaces_(){return [];};RightmostEdgeFinder.prototype.getClass=function getClass(){return RightmostEdgeFinder;};var TopologyException=function(RuntimeException$$1){function TopologyException(msg,pt){RuntimeException$$1.call(this,TopologyException.msgWithCoord(msg,pt));this.pt=pt?new Coordinate(pt):null;this.name='TopologyException';}if(RuntimeException$$1)TopologyException.__proto__=RuntimeException$$1;TopologyException.prototype=Object.create(RuntimeException$$1&&RuntimeException$$1.prototype);TopologyException.prototype.constructor=TopologyException;TopologyException.prototype.getCoordinate=function getCoordinate(){return this.pt;};TopologyException.prototype.interfaces_=function interfaces_(){return [];};TopologyException.prototype.getClass=function getClass(){return TopologyException;};TopologyException.msgWithCoord=function msgWithCoord(msg,pt){if(!pt){return msg+' [ '+pt+' ]';}return msg;};return TopologyException;}(RuntimeException);var LinkedList=function LinkedList(){this.array_=[];};LinkedList.prototype.addLast=function addLast(e){this.array_.push(e);};LinkedList.prototype.removeFirst=function removeFirst(){return this.array_.shift();};LinkedList.prototype.isEmpty=function isEmpty(){return this.array_.length===0;};var BufferSubgraph=function BufferSubgraph(){this._finder=null;this._dirEdgeList=new ArrayList();this._nodes=new ArrayList();this._rightMostCoord=null;this._env=null;this._finder=new RightmostEdgeFinder();};BufferSubgraph.prototype.clearVisitedEdges=function clearVisitedEdges(){for(var it=this._dirEdgeList.iterator();it.hasNext();){var de=it.next();de.setVisited(false);}};BufferSubgraph.prototype.getRightmostCoordinate=function getRightmostCoordinate(){return this._rightMostCoord;};BufferSubgraph.prototype.computeNodeDepth=function computeNodeDepth(n){var this$1=this;var startEdge=null;for(var i=n.getEdges().iterator();i.hasNext();){var de=i.next();if(de.isVisited()||de.getSym().isVisited()){startEdge=de;break;}}if(startEdge===null){throw new TopologyException('unable to find edge to compute depths at '+n.getCoordinate());}n.getEdges().computeDepths(startEdge);for(var i$1=n.getEdges().iterator();i$1.hasNext();){var de$1=i$1.next();de$1.setVisited(true);this$1.copySymDepths(de$1);}};BufferSubgraph.prototype.computeDepth=function computeDepth(outsideDepth){this.clearVisitedEdges();var de=this._finder.getEdge();// const n = de.getNode()
    // const label = de.getLabel()
    de.setEdgeDepths(Position.RIGHT,outsideDepth);this.copySymDepths(de);this.computeDepths(de);};BufferSubgraph.prototype.create=function create(node){this.addReachable(node);this._finder.findEdge(this._dirEdgeList);this._rightMostCoord=this._finder.getCoordinate();};BufferSubgraph.prototype.findResultEdges=function findResultEdges(){for(var it=this._dirEdgeList.iterator();it.hasNext();){var de=it.next();if(de.getDepth(Position.RIGHT)>=1&&de.getDepth(Position.LEFT)<=0&&!de.isInteriorAreaEdge()){de.setInResult(true);}}};BufferSubgraph.prototype.computeDepths=function computeDepths(startEdge){var this$1=this;var nodesVisited=new HashSet();var nodeQueue=new LinkedList();var startNode=startEdge.getNode();nodeQueue.addLast(startNode);nodesVisited.add(startNode);startEdge.setVisited(true);while(!nodeQueue.isEmpty()){var n=nodeQueue.removeFirst();nodesVisited.add(n);this$1.computeNodeDepth(n);for(var i=n.getEdges().iterator();i.hasNext();){var de=i.next();var sym=de.getSym();if(sym.isVisited()){continue;}var adjNode=sym.getNode();if(!nodesVisited.contains(adjNode)){nodeQueue.addLast(adjNode);nodesVisited.add(adjNode);}}}};BufferSubgraph.prototype.compareTo=function compareTo(o){var graph=o;if(this._rightMostCoord.x<graph._rightMostCoord.x){return -1;}if(this._rightMostCoord.x>graph._rightMostCoord.x){return 1;}return 0;};BufferSubgraph.prototype.getEnvelope=function getEnvelope(){if(this._env===null){var edgeEnv=new Envelope();for(var it=this._dirEdgeList.iterator();it.hasNext();){var dirEdge=it.next();var pts=dirEdge.getEdge().getCoordinates();for(var i=0;i<pts.length-1;i++){edgeEnv.expandToInclude(pts[i]);}}this._env=edgeEnv;}return this._env;};BufferSubgraph.prototype.addReachable=function addReachable(startNode){var this$1=this;var nodeStack=new Stack();nodeStack.add(startNode);while(!nodeStack.empty()){var node=nodeStack.pop();this$1.add(node,nodeStack);}};BufferSubgraph.prototype.copySymDepths=function copySymDepths(de){var sym=de.getSym();sym.setDepth(Position.LEFT,de.getDepth(Position.RIGHT));sym.setDepth(Position.RIGHT,de.getDepth(Position.LEFT));};BufferSubgraph.prototype.add=function add(node,nodeStack){var this$1=this;node.setVisited(true);this._nodes.add(node);for(var i=node.getEdges().iterator();i.hasNext();){var de=i.next();this$1._dirEdgeList.add(de);var sym=de.getSym();var symNode=sym.getNode();if(!symNode.isVisited()){nodeStack.push(symNode);}}};BufferSubgraph.prototype.getNodes=function getNodes(){return this._nodes;};BufferSubgraph.prototype.getDirectedEdges=function getDirectedEdges(){return this._dirEdgeList;};BufferSubgraph.prototype.interfaces_=function interfaces_(){return [Comparable];};BufferSubgraph.prototype.getClass=function getClass(){return BufferSubgraph;};var TopologyLocation=function TopologyLocation(){var this$1=this;this.location=null;if(arguments.length===1){if(arguments[0]instanceof Array){var location=arguments[0];this.init(location.length);}else if(Number.isInteger(arguments[0])){var on=arguments[0];this.init(1);this.location[Position.ON]=on;}else if(arguments[0]instanceof TopologyLocation){var gl=arguments[0];this.init(gl.location.length);if(gl!==null){for(var i=0;i<this.location.length;i++){this$1.location[i]=gl.location[i];}}}}else if(arguments.length===3){var on$1=arguments[0];var left=arguments[1];var right=arguments[2];this.init(3);this.location[Position.ON]=on$1;this.location[Position.LEFT]=left;this.location[Position.RIGHT]=right;}};TopologyLocation.prototype.setAllLocations=function setAllLocations(locValue){var this$1=this;for(var i=0;i<this.location.length;i++){this$1.location[i]=locValue;}};TopologyLocation.prototype.isNull=function isNull(){var this$1=this;for(var i=0;i<this.location.length;i++){if(this$1.location[i]!==Location.NONE){return false;}}return true;};TopologyLocation.prototype.setAllLocationsIfNull=function setAllLocationsIfNull(locValue){var this$1=this;for(var i=0;i<this.location.length;i++){if(this$1.location[i]===Location.NONE){this$1.location[i]=locValue;}}};TopologyLocation.prototype.isLine=function isLine(){return this.location.length===1;};TopologyLocation.prototype.merge=function merge(gl){var this$1=this;if(gl.location.length>this.location.length){var newLoc=new Array(3).fill(null);newLoc[Position.ON]=this.location[Position.ON];newLoc[Position.LEFT]=Location.NONE;newLoc[Position.RIGHT]=Location.NONE;this.location=newLoc;}for(var i=0;i<this.location.length;i++){if(this$1.location[i]===Location.NONE&&i<gl.location.length){this$1.location[i]=gl.location[i];}}};TopologyLocation.prototype.getLocations=function getLocations(){return this.location;};TopologyLocation.prototype.flip=function flip(){if(this.location.length<=1){return null;}var temp=this.location[Position.LEFT];this.location[Position.LEFT]=this.location[Position.RIGHT];this.location[Position.RIGHT]=temp;};TopologyLocation.prototype.toString=function toString(){var buf=new StringBuffer();if(this.location.length>1){buf.append(Location.toLocationSymbol(this.location[Position.LEFT]));}buf.append(Location.toLocationSymbol(this.location[Position.ON]));if(this.location.length>1){buf.append(Location.toLocationSymbol(this.location[Position.RIGHT]));}return buf.toString();};TopologyLocation.prototype.setLocations=function setLocations(on,left,right){this.location[Position.ON]=on;this.location[Position.LEFT]=left;this.location[Position.RIGHT]=right;};TopologyLocation.prototype.get=function get(posIndex){if(posIndex<this.location.length){return this.location[posIndex];}return Location.NONE;};TopologyLocation.prototype.isArea=function isArea(){return this.location.length>1;};TopologyLocation.prototype.isAnyNull=function isAnyNull(){var this$1=this;for(var i=0;i<this.location.length;i++){if(this$1.location[i]===Location.NONE){return true;}}return false;};TopologyLocation.prototype.setLocation=function setLocation(){if(arguments.length===1){var locValue=arguments[0];this.setLocation(Position.ON,locValue);}else if(arguments.length===2){var locIndex=arguments[0];var locValue$1=arguments[1];this.location[locIndex]=locValue$1;}};TopologyLocation.prototype.init=function init(size){this.location=new Array(size).fill(null);this.setAllLocations(Location.NONE);};TopologyLocation.prototype.isEqualOnSide=function isEqualOnSide(le,locIndex){return this.location[locIndex]===le.location[locIndex];};TopologyLocation.prototype.allPositionsEqual=function allPositionsEqual(loc){var this$1=this;for(var i=0;i<this.location.length;i++){if(this$1.location[i]!==loc){return false;}}return true;};TopologyLocation.prototype.interfaces_=function interfaces_(){return [];};TopologyLocation.prototype.getClass=function getClass(){return TopologyLocation;};var Label=function Label(){this.elt=new Array(2).fill(null);if(arguments.length===1){if(Number.isInteger(arguments[0])){var onLoc=arguments[0];this.elt[0]=new TopologyLocation(onLoc);this.elt[1]=new TopologyLocation(onLoc);}else if(arguments[0]instanceof Label){var lbl=arguments[0];this.elt[0]=new TopologyLocation(lbl.elt[0]);this.elt[1]=new TopologyLocation(lbl.elt[1]);}}else if(arguments.length===2){var geomIndex=arguments[0];var onLoc$1=arguments[1];this.elt[0]=new TopologyLocation(Location.NONE);this.elt[1]=new TopologyLocation(Location.NONE);this.elt[geomIndex].setLocation(onLoc$1);}else if(arguments.length===3){var onLoc$2=arguments[0];var leftLoc=arguments[1];var rightLoc=arguments[2];this.elt[0]=new TopologyLocation(onLoc$2,leftLoc,rightLoc);this.elt[1]=new TopologyLocation(onLoc$2,leftLoc,rightLoc);}else if(arguments.length===4){var geomIndex$1=arguments[0];var onLoc$3=arguments[1];var leftLoc$1=arguments[2];var rightLoc$1=arguments[3];this.elt[0]=new TopologyLocation(Location.NONE,Location.NONE,Location.NONE);this.elt[1]=new TopologyLocation(Location.NONE,Location.NONE,Location.NONE);this.elt[geomIndex$1].setLocations(onLoc$3,leftLoc$1,rightLoc$1);}};Label.prototype.getGeometryCount=function getGeometryCount(){var count=0;if(!this.elt[0].isNull()){count++;}if(!this.elt[1].isNull()){count++;}return count;};Label.prototype.setAllLocations=function setAllLocations(geomIndex,location){this.elt[geomIndex].setAllLocations(location);};Label.prototype.isNull=function isNull(geomIndex){return this.elt[geomIndex].isNull();};Label.prototype.setAllLocationsIfNull=function setAllLocationsIfNull(){if(arguments.length===1){var location=arguments[0];this.setAllLocationsIfNull(0,location);this.setAllLocationsIfNull(1,location);}else if(arguments.length===2){var geomIndex=arguments[0];var location$1=arguments[1];this.elt[geomIndex].setAllLocationsIfNull(location$1);}};Label.prototype.isLine=function isLine(geomIndex){return this.elt[geomIndex].isLine();};Label.prototype.merge=function merge(lbl){var this$1=this;for(var i=0;i<2;i++){if(this$1.elt[i]===null&&lbl.elt[i]!==null){this$1.elt[i]=new TopologyLocation(lbl.elt[i]);}else{this$1.elt[i].merge(lbl.elt[i]);}}};Label.prototype.flip=function flip(){this.elt[0].flip();this.elt[1].flip();};Label.prototype.getLocation=function getLocation(){if(arguments.length===1){var geomIndex=arguments[0];return this.elt[geomIndex].get(Position.ON);}else if(arguments.length===2){var geomIndex$1=arguments[0];var posIndex=arguments[1];return this.elt[geomIndex$1].get(posIndex);}};Label.prototype.toString=function toString(){var buf=new StringBuffer();if(this.elt[0]!==null){buf.append('A:');buf.append(this.elt[0].toString());}if(this.elt[1]!==null){buf.append(' B:');buf.append(this.elt[1].toString());}return buf.toString();};Label.prototype.isArea=function isArea(){if(arguments.length===0){return this.elt[0].isArea()||this.elt[1].isArea();}else if(arguments.length===1){var geomIndex=arguments[0];return this.elt[geomIndex].isArea();}};Label.prototype.isAnyNull=function isAnyNull(geomIndex){return this.elt[geomIndex].isAnyNull();};Label.prototype.setLocation=function setLocation(){if(arguments.length===2){var geomIndex=arguments[0];var location=arguments[1];this.elt[geomIndex].setLocation(Position.ON,location);}else if(arguments.length===3){var geomIndex$1=arguments[0];var posIndex=arguments[1];var location$1=arguments[2];this.elt[geomIndex$1].setLocation(posIndex,location$1);}};Label.prototype.isEqualOnSide=function isEqualOnSide(lbl,side){return this.elt[0].isEqualOnSide(lbl.elt[0],side)&&this.elt[1].isEqualOnSide(lbl.elt[1],side);};Label.prototype.allPositionsEqual=function allPositionsEqual(geomIndex,loc){return this.elt[geomIndex].allPositionsEqual(loc);};Label.prototype.toLine=function toLine(geomIndex){if(this.elt[geomIndex].isArea()){this.elt[geomIndex]=new TopologyLocation(this.elt[geomIndex].location[0]);}};Label.prototype.interfaces_=function interfaces_(){return [];};Label.prototype.getClass=function getClass(){return Label;};Label.toLineLabel=function toLineLabel(label){var lineLabel=new Label(Location.NONE);for(var i=0;i<2;i++){lineLabel.setLocation(i,label.getLocation(i));}return lineLabel;};var EdgeRing=function EdgeRing(){this._startDe=null;this._maxNodeDegree=-1;this._edges=new ArrayList();this._pts=new ArrayList();this._label=new Label(Location.NONE);this._ring=null;this._isHole=null;this._shell=null;this._holes=new ArrayList();this._geometryFactory=null;var start=arguments[0];var geometryFactory=arguments[1];this._geometryFactory=geometryFactory;this.computePoints(start);this.computeRing();};EdgeRing.prototype.computeRing=function computeRing(){var this$1=this;if(this._ring!==null){return null;}var coord=new Array(this._pts.size()).fill(null);for(var i=0;i<this._pts.size();i++){coord[i]=this$1._pts.get(i);}this._ring=this._geometryFactory.createLinearRing(coord);this._isHole=CGAlgorithms.isCCW(this._ring.getCoordinates());};EdgeRing.prototype.isIsolated=function isIsolated(){return this._label.getGeometryCount()===1;};EdgeRing.prototype.computePoints=function computePoints(start){var this$1=this;this._startDe=start;var de=start;var isFirstEdge=true;do{if(de===null){throw new TopologyException('Found null DirectedEdge');}if(de.getEdgeRing()===this$1){throw new TopologyException('Directed Edge visited twice during ring-building at '+de.getCoordinate());}this$1._edges.add(de);var label=de.getLabel();Assert.isTrue(label.isArea());this$1.mergeLabel(label);this$1.addPoints(de.getEdge(),de.isForward(),isFirstEdge);isFirstEdge=false;this$1.setEdgeRing(de,this$1);de=this$1.getNext(de);}while(de!==this._startDe);};EdgeRing.prototype.getLinearRing=function getLinearRing(){return this._ring;};EdgeRing.prototype.getCoordinate=function getCoordinate(i){return this._pts.get(i);};EdgeRing.prototype.computeMaxNodeDegree=function computeMaxNodeDegree(){var this$1=this;this._maxNodeDegree=0;var de=this._startDe;do{var node=de.getNode();var degree=node.getEdges().getOutgoingDegree(this$1);if(degree>this$1._maxNodeDegree){this$1._maxNodeDegree=degree;}de=this$1.getNext(de);}while(de!==this._startDe);this._maxNodeDegree*=2;};EdgeRing.prototype.addPoints=function addPoints(edge,isForward,isFirstEdge){var this$1=this;var edgePts=edge.getCoordinates();if(isForward){var startIndex=1;if(isFirstEdge){startIndex=0;}for(var i=startIndex;i<edgePts.length;i++){this$1._pts.add(edgePts[i]);}}else{var startIndex$1=edgePts.length-2;if(isFirstEdge){startIndex$1=edgePts.length-1;}for(var i$1=startIndex$1;i$1>=0;i$1--){this$1._pts.add(edgePts[i$1]);}}};EdgeRing.prototype.isHole=function isHole(){return this._isHole;};EdgeRing.prototype.setInResult=function setInResult(){var de=this._startDe;do{de.getEdge().setInResult(true);de=de.getNext();}while(de!==this._startDe);};EdgeRing.prototype.containsPoint=function containsPoint(p){var shell=this.getLinearRing();var env=shell.getEnvelopeInternal();if(!env.contains(p)){return false;}if(!CGAlgorithms.isPointInRing(p,shell.getCoordinates())){return false;}for(var i=this._holes.iterator();i.hasNext();){var hole=i.next();if(hole.containsPoint(p)){return false;}}return true;};EdgeRing.prototype.addHole=function addHole(ring){this._holes.add(ring);};EdgeRing.prototype.isShell=function isShell(){return this._shell===null;};EdgeRing.prototype.getLabel=function getLabel(){return this._label;};EdgeRing.prototype.getEdges=function getEdges(){return this._edges;};EdgeRing.prototype.getMaxNodeDegree=function getMaxNodeDegree(){if(this._maxNodeDegree<0){this.computeMaxNodeDegree();}return this._maxNodeDegree;};EdgeRing.prototype.getShell=function getShell(){return this._shell;};EdgeRing.prototype.mergeLabel=function mergeLabel(){if(arguments.length===1){var deLabel=arguments[0];this.mergeLabel(deLabel,0);this.mergeLabel(deLabel,1);}else if(arguments.length===2){var deLabel$1=arguments[0];var geomIndex=arguments[1];var loc=deLabel$1.getLocation(geomIndex,Position.RIGHT);if(loc===Location.NONE){return null;}if(this._label.getLocation(geomIndex)===Location.NONE){this._label.setLocation(geomIndex,loc);return null;}}};EdgeRing.prototype.setShell=function setShell(shell){this._shell=shell;if(shell!==null){shell.addHole(this);}};EdgeRing.prototype.toPolygon=function toPolygon(geometryFactory){var this$1=this;var holeLR=new Array(this._holes.size()).fill(null);for(var i=0;i<this._holes.size();i++){holeLR[i]=this$1._holes.get(i).getLinearRing();}var poly=geometryFactory.createPolygon(this.getLinearRing(),holeLR);return poly;};EdgeRing.prototype.interfaces_=function interfaces_(){return [];};EdgeRing.prototype.getClass=function getClass(){return EdgeRing;};var MinimalEdgeRing=function(EdgeRing$$1){function MinimalEdgeRing(){var start=arguments[0];var geometryFactory=arguments[1];EdgeRing$$1.call(this,start,geometryFactory);}if(EdgeRing$$1)MinimalEdgeRing.__proto__=EdgeRing$$1;MinimalEdgeRing.prototype=Object.create(EdgeRing$$1&&EdgeRing$$1.prototype);MinimalEdgeRing.prototype.constructor=MinimalEdgeRing;MinimalEdgeRing.prototype.setEdgeRing=function setEdgeRing(de,er){de.setMinEdgeRing(er);};MinimalEdgeRing.prototype.getNext=function getNext(de){return de.getNextMin();};MinimalEdgeRing.prototype.interfaces_=function interfaces_(){return [];};MinimalEdgeRing.prototype.getClass=function getClass(){return MinimalEdgeRing;};return MinimalEdgeRing;}(EdgeRing);var MaximalEdgeRing=function(EdgeRing$$1){function MaximalEdgeRing(){var start=arguments[0];var geometryFactory=arguments[1];EdgeRing$$1.call(this,start,geometryFactory);}if(EdgeRing$$1)MaximalEdgeRing.__proto__=EdgeRing$$1;MaximalEdgeRing.prototype=Object.create(EdgeRing$$1&&EdgeRing$$1.prototype);MaximalEdgeRing.prototype.constructor=MaximalEdgeRing;MaximalEdgeRing.prototype.buildMinimalRings=function buildMinimalRings(){var this$1=this;var minEdgeRings=new ArrayList();var de=this._startDe;do{if(de.getMinEdgeRing()===null){var minEr=new MinimalEdgeRing(de,this$1._geometryFactory);minEdgeRings.add(minEr);}de=de.getNext();}while(de!==this._startDe);return minEdgeRings;};MaximalEdgeRing.prototype.setEdgeRing=function setEdgeRing(de,er){de.setEdgeRing(er);};MaximalEdgeRing.prototype.linkDirectedEdgesForMinimalEdgeRings=function linkDirectedEdgesForMinimalEdgeRings(){var this$1=this;var de=this._startDe;do{var node=de.getNode();node.getEdges().linkMinimalDirectedEdges(this$1);de=de.getNext();}while(de!==this._startDe);};MaximalEdgeRing.prototype.getNext=function getNext(de){return de.getNext();};MaximalEdgeRing.prototype.interfaces_=function interfaces_(){return [];};MaximalEdgeRing.prototype.getClass=function getClass(){return MaximalEdgeRing;};return MaximalEdgeRing;}(EdgeRing);var GraphComponent=function GraphComponent(){this._label=null;this._isInResult=false;this._isCovered=false;this._isCoveredSet=false;this._isVisited=false;if(arguments.length===0);else if(arguments.length===1){var label=arguments[0];this._label=label;}};GraphComponent.prototype.setVisited=function setVisited(isVisited){this._isVisited=isVisited;};GraphComponent.prototype.setInResult=function setInResult(isInResult){this._isInResult=isInResult;};GraphComponent.prototype.isCovered=function isCovered(){return this._isCovered;};GraphComponent.prototype.isCoveredSet=function isCoveredSet(){return this._isCoveredSet;};GraphComponent.prototype.setLabel=function setLabel(label){this._label=label;};GraphComponent.prototype.getLabel=function getLabel(){return this._label;};GraphComponent.prototype.setCovered=function setCovered(isCovered){this._isCovered=isCovered;this._isCoveredSet=true;};GraphComponent.prototype.updateIM=function updateIM(im){Assert.isTrue(this._label.getGeometryCount()>=2,'found partial label');this.computeIM(im);};GraphComponent.prototype.isInResult=function isInResult(){return this._isInResult;};GraphComponent.prototype.isVisited=function isVisited(){return this._isVisited;};GraphComponent.prototype.interfaces_=function interfaces_(){return [];};GraphComponent.prototype.getClass=function getClass(){return GraphComponent;};var Node=function(GraphComponent$$1){function Node(){GraphComponent$$1.call(this);this._coord=null;this._edges=null;var coord=arguments[0];var edges=arguments[1];this._coord=coord;this._edges=edges;this._label=new Label(0,Location.NONE);}if(GraphComponent$$1)Node.__proto__=GraphComponent$$1;Node.prototype=Object.create(GraphComponent$$1&&GraphComponent$$1.prototype);Node.prototype.constructor=Node;Node.prototype.isIncidentEdgeInResult=function isIncidentEdgeInResult(){for(var it=this.getEdges().getEdges().iterator();it.hasNext();){var de=it.next();if(de.getEdge().isInResult()){return true;}}return false;};Node.prototype.isIsolated=function isIsolated(){return this._label.getGeometryCount()===1;};Node.prototype.getCoordinate=function getCoordinate(){return this._coord;};Node.prototype.print=function print(out){out.println('node '+this._coord+' lbl: '+this._label);};Node.prototype.computeIM=function computeIM(im){};Node.prototype.computeMergedLocation=function computeMergedLocation(label2,eltIndex){var loc=Location.NONE;loc=this._label.getLocation(eltIndex);if(!label2.isNull(eltIndex)){var nLoc=label2.getLocation(eltIndex);if(loc!==Location.BOUNDARY){loc=nLoc;}}return loc;};Node.prototype.setLabel=function setLabel(){if(arguments.length===2){var argIndex=arguments[0];var onLocation=arguments[1];if(this._label===null){this._label=new Label(argIndex,onLocation);}else{this._label.setLocation(argIndex,onLocation);}}else{return GraphComponent$$1.prototype.setLabel.apply(this,arguments);}};Node.prototype.getEdges=function getEdges(){return this._edges;};Node.prototype.mergeLabel=function mergeLabel(){var this$1=this;if(arguments[0]instanceof Node){var n=arguments[0];this.mergeLabel(n._label);}else if(arguments[0]instanceof Label){var label2=arguments[0];for(var i=0;i<2;i++){var loc=this$1.computeMergedLocation(label2,i);var thisLoc=this$1._label.getLocation(i);if(thisLoc===Location.NONE){this$1._label.setLocation(i,loc);}}}};Node.prototype.add=function add(e){this._edges.insert(e);e.setNode(this);};Node.prototype.setLabelBoundary=function setLabelBoundary(argIndex){if(this._label===null){return null;}var loc=Location.NONE;if(this._label!==null){loc=this._label.getLocation(argIndex);}var newLoc=null;switch(loc){case Location.BOUNDARY:newLoc=Location.INTERIOR;break;case Location.INTERIOR:newLoc=Location.BOUNDARY;break;default:newLoc=Location.BOUNDARY;break;}this._label.setLocation(argIndex,newLoc);};Node.prototype.interfaces_=function interfaces_(){return [];};Node.prototype.getClass=function getClass(){return Node;};return Node;}(GraphComponent);var NodeMap=function NodeMap(){this.nodeMap=new TreeMap();this.nodeFact=null;var nodeFact=arguments[0];this.nodeFact=nodeFact;};NodeMap.prototype.find=function find(coord){return this.nodeMap.get(coord);};NodeMap.prototype.addNode=function addNode(){if(arguments[0]instanceof Coordinate){var coord=arguments[0];var node=this.nodeMap.get(coord);if(node===null){node=this.nodeFact.createNode(coord);this.nodeMap.put(coord,node);}return node;}else if(arguments[0]instanceof Node){var n=arguments[0];var node$1=this.nodeMap.get(n.getCoordinate());if(node$1===null){this.nodeMap.put(n.getCoordinate(),n);return n;}node$1.mergeLabel(n);return node$1;}};NodeMap.prototype.print=function print(out){for(var it=this.iterator();it.hasNext();){var n=it.next();n.print(out);}};NodeMap.prototype.iterator=function iterator(){return this.nodeMap.values().iterator();};NodeMap.prototype.values=function values(){return this.nodeMap.values();};NodeMap.prototype.getBoundaryNodes=function getBoundaryNodes(geomIndex){var bdyNodes=new ArrayList();for(var i=this.iterator();i.hasNext();){var node=i.next();if(node.getLabel().getLocation(geomIndex)===Location.BOUNDARY){bdyNodes.add(node);}}return bdyNodes;};NodeMap.prototype.add=function add(e){var p=e.getCoordinate();var n=this.addNode(p);n.add(e);};NodeMap.prototype.interfaces_=function interfaces_(){return [];};NodeMap.prototype.getClass=function getClass(){return NodeMap;};var Quadrant=function Quadrant(){};var staticAccessors$21={NE:{configurable:true},NW:{configurable:true},SW:{configurable:true},SE:{configurable:true}};Quadrant.prototype.interfaces_=function interfaces_(){return [];};Quadrant.prototype.getClass=function getClass(){return Quadrant;};Quadrant.isNorthern=function isNorthern(quad){return quad===Quadrant.NE||quad===Quadrant.NW;};Quadrant.isOpposite=function isOpposite(quad1,quad2){if(quad1===quad2){return false;}var diff=(quad1-quad2+4)%4;if(diff===2){return true;}return false;};Quadrant.commonHalfPlane=function commonHalfPlane(quad1,quad2){if(quad1===quad2){return quad1;}var diff=(quad1-quad2+4)%4;if(diff===2){return -1;}var min=quad1<quad2?quad1:quad2;var max=quad1>quad2?quad1:quad2;if(min===0&&max===3){return 3;}return min;};Quadrant.isInHalfPlane=function isInHalfPlane(quad,halfPlane){if(halfPlane===Quadrant.SE){return quad===Quadrant.SE||quad===Quadrant.SW;}return quad===halfPlane||quad===halfPlane+1;};Quadrant.quadrant=function quadrant(){if(typeof arguments[0]==='number'&&typeof arguments[1]==='number'){var dx=arguments[0];var dy=arguments[1];if(dx===0.0&&dy===0.0){throw new IllegalArgumentException('Cannot compute the quadrant for point ( '+dx+', '+dy+' )');}if(dx>=0.0){if(dy>=0.0){return Quadrant.NE;}else{return Quadrant.SE;}}else{if(dy>=0.0){return Quadrant.NW;}else{return Quadrant.SW;}}}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){var p0=arguments[0];var p1=arguments[1];if(p1.x===p0.x&&p1.y===p0.y){throw new IllegalArgumentException('Cannot compute the quadrant for two identical points '+p0);}if(p1.x>=p0.x){if(p1.y>=p0.y){return Quadrant.NE;}else{return Quadrant.SE;}}else{if(p1.y>=p0.y){return Quadrant.NW;}else{return Quadrant.SW;}}}};staticAccessors$21.NE.get=function(){return 0;};staticAccessors$21.NW.get=function(){return 1;};staticAccessors$21.SW.get=function(){return 2;};staticAccessors$21.SE.get=function(){return 3;};Object.defineProperties(Quadrant,staticAccessors$21);var EdgeEnd=function EdgeEnd(){this._edge=null;this._label=null;this._node=null;this._p0=null;this._p1=null;this._dx=null;this._dy=null;this._quadrant=null;if(arguments.length===1){var edge=arguments[0];this._edge=edge;}else if(arguments.length===3){var edge$1=arguments[0];var p0=arguments[1];var p1=arguments[2];var label=null;this._edge=edge$1;this.init(p0,p1);this._label=label;}else if(arguments.length===4){var edge$2=arguments[0];var p0$1=arguments[1];var p1$1=arguments[2];var label$1=arguments[3];this._edge=edge$2;this.init(p0$1,p1$1);this._label=label$1;}};EdgeEnd.prototype.compareDirection=function compareDirection(e){if(this._dx===e._dx&&this._dy===e._dy){return 0;}if(this._quadrant>e._quadrant){return 1;}if(this._quadrant<e._quadrant){return -1;}return CGAlgorithms.computeOrientation(e._p0,e._p1,this._p1);};EdgeEnd.prototype.getDy=function getDy(){return this._dy;};EdgeEnd.prototype.getCoordinate=function getCoordinate(){return this._p0;};EdgeEnd.prototype.setNode=function setNode(node){this._node=node;};EdgeEnd.prototype.print=function print(out){var angle=Math.atan2(this._dy,this._dx);var className=this.getClass().getName();var lastDotPos=className.lastIndexOf('.');var name=className.substring(lastDotPos+1);out.print('  '+name+': '+this._p0+' - '+this._p1+' '+this._quadrant+':'+angle+'   '+this._label);};EdgeEnd.prototype.compareTo=function compareTo(obj){var e=obj;return this.compareDirection(e);};EdgeEnd.prototype.getDirectedCoordinate=function getDirectedCoordinate(){return this._p1;};EdgeEnd.prototype.getDx=function getDx(){return this._dx;};EdgeEnd.prototype.getLabel=function getLabel(){return this._label;};EdgeEnd.prototype.getEdge=function getEdge(){return this._edge;};EdgeEnd.prototype.getQuadrant=function getQuadrant(){return this._quadrant;};EdgeEnd.prototype.getNode=function getNode(){return this._node;};EdgeEnd.prototype.toString=function toString(){var angle=Math.atan2(this._dy,this._dx);var className=this.getClass().getName();var lastDotPos=className.lastIndexOf('.');var name=className.substring(lastDotPos+1);return '  '+name+': '+this._p0+' - '+this._p1+' '+this._quadrant+':'+angle+'   '+this._label;};EdgeEnd.prototype.computeLabel=function computeLabel(boundaryNodeRule){};EdgeEnd.prototype.init=function init(p0,p1){this._p0=p0;this._p1=p1;this._dx=p1.x-p0.x;this._dy=p1.y-p0.y;this._quadrant=Quadrant.quadrant(this._dx,this._dy);Assert.isTrue(!(this._dx===0&&this._dy===0),'EdgeEnd with identical endpoints found');};EdgeEnd.prototype.interfaces_=function interfaces_(){return [Comparable];};EdgeEnd.prototype.getClass=function getClass(){return EdgeEnd;};var DirectedEdge=function(EdgeEnd$$1){function DirectedEdge(){var edge=arguments[0];var isForward=arguments[1];EdgeEnd$$1.call(this,edge);this._isForward=null;this._isInResult=false;this._isVisited=false;this._sym=null;this._next=null;this._nextMin=null;this._edgeRing=null;this._minEdgeRing=null;this._depth=[0,-999,-999];this._isForward=isForward;if(isForward){this.init(edge.getCoordinate(0),edge.getCoordinate(1));}else{var n=edge.getNumPoints()-1;this.init(edge.getCoordinate(n),edge.getCoordinate(n-1));}this.computeDirectedLabel();}if(EdgeEnd$$1)DirectedEdge.__proto__=EdgeEnd$$1;DirectedEdge.prototype=Object.create(EdgeEnd$$1&&EdgeEnd$$1.prototype);DirectedEdge.prototype.constructor=DirectedEdge;DirectedEdge.prototype.getNextMin=function getNextMin(){return this._nextMin;};DirectedEdge.prototype.getDepth=function getDepth(position){return this._depth[position];};DirectedEdge.prototype.setVisited=function setVisited(isVisited){this._isVisited=isVisited;};DirectedEdge.prototype.computeDirectedLabel=function computeDirectedLabel(){this._label=new Label(this._edge.getLabel());if(!this._isForward){this._label.flip();}};DirectedEdge.prototype.getNext=function getNext(){return this._next;};DirectedEdge.prototype.setDepth=function setDepth(position,depthVal){if(this._depth[position]!==-999){if(this._depth[position]!==depthVal){throw new TopologyException('assigned depths do not match',this.getCoordinate());}}this._depth[position]=depthVal;};DirectedEdge.prototype.isInteriorAreaEdge=function isInteriorAreaEdge(){var this$1=this;var isInteriorAreaEdge=true;for(var i=0;i<2;i++){if(!(this$1._label.isArea(i)&&this$1._label.getLocation(i,Position.LEFT)===Location.INTERIOR&&this$1._label.getLocation(i,Position.RIGHT)===Location.INTERIOR)){isInteriorAreaEdge=false;}}return isInteriorAreaEdge;};DirectedEdge.prototype.setNextMin=function setNextMin(nextMin){this._nextMin=nextMin;};DirectedEdge.prototype.print=function print(out){EdgeEnd$$1.prototype.print.call(this,out);out.print(' '+this._depth[Position.LEFT]+'/'+this._depth[Position.RIGHT]);out.print(' ('+this.getDepthDelta()+')');if(this._isInResult){out.print(' inResult');}};DirectedEdge.prototype.setMinEdgeRing=function setMinEdgeRing(minEdgeRing){this._minEdgeRing=minEdgeRing;};DirectedEdge.prototype.isLineEdge=function isLineEdge(){var isLine=this._label.isLine(0)||this._label.isLine(1);var isExteriorIfArea0=!this._label.isArea(0)||this._label.allPositionsEqual(0,Location.EXTERIOR);var isExteriorIfArea1=!this._label.isArea(1)||this._label.allPositionsEqual(1,Location.EXTERIOR);return isLine&&isExteriorIfArea0&&isExteriorIfArea1;};DirectedEdge.prototype.setEdgeRing=function setEdgeRing(edgeRing){this._edgeRing=edgeRing;};DirectedEdge.prototype.getMinEdgeRing=function getMinEdgeRing(){return this._minEdgeRing;};DirectedEdge.prototype.getDepthDelta=function getDepthDelta(){var depthDelta=this._edge.getDepthDelta();if(!this._isForward){depthDelta=-depthDelta;}return depthDelta;};DirectedEdge.prototype.setInResult=function setInResult(isInResult){this._isInResult=isInResult;};DirectedEdge.prototype.getSym=function getSym(){return this._sym;};DirectedEdge.prototype.isForward=function isForward(){return this._isForward;};DirectedEdge.prototype.getEdge=function getEdge(){return this._edge;};DirectedEdge.prototype.printEdge=function printEdge(out){this.print(out);out.print(' ');if(this._isForward){this._edge.print(out);}else{this._edge.printReverse(out);}};DirectedEdge.prototype.setSym=function setSym(de){this._sym=de;};DirectedEdge.prototype.setVisitedEdge=function setVisitedEdge(isVisited){this.setVisited(isVisited);this._sym.setVisited(isVisited);};DirectedEdge.prototype.setEdgeDepths=function setEdgeDepths(position,depth){var depthDelta=this.getEdge().getDepthDelta();if(!this._isForward){depthDelta=-depthDelta;}var directionFactor=1;if(position===Position.LEFT){directionFactor=-1;}var oppositePos=Position.opposite(position);var delta=depthDelta*directionFactor;var oppositeDepth=depth+delta;this.setDepth(position,depth);this.setDepth(oppositePos,oppositeDepth);};DirectedEdge.prototype.getEdgeRing=function getEdgeRing(){return this._edgeRing;};DirectedEdge.prototype.isInResult=function isInResult(){return this._isInResult;};DirectedEdge.prototype.setNext=function setNext(next){this._next=next;};DirectedEdge.prototype.isVisited=function isVisited(){return this._isVisited;};DirectedEdge.prototype.interfaces_=function interfaces_(){return [];};DirectedEdge.prototype.getClass=function getClass(){return DirectedEdge;};DirectedEdge.depthFactor=function depthFactor(currLocation,nextLocation){if(currLocation===Location.EXTERIOR&&nextLocation===Location.INTERIOR){return 1;}else if(currLocation===Location.INTERIOR&&nextLocation===Location.EXTERIOR){return -1;}return 0;};return DirectedEdge;}(EdgeEnd);var NodeFactory=function NodeFactory(){};NodeFactory.prototype.createNode=function createNode(coord){return new Node(coord,null);};NodeFactory.prototype.interfaces_=function interfaces_(){return [];};NodeFactory.prototype.getClass=function getClass(){return NodeFactory;};var PlanarGraph=function PlanarGraph(){this._edges=new ArrayList();this._nodes=null;this._edgeEndList=new ArrayList();if(arguments.length===0){this._nodes=new NodeMap(new NodeFactory());}else if(arguments.length===1){var nodeFact=arguments[0];this._nodes=new NodeMap(nodeFact);}};PlanarGraph.prototype.printEdges=function printEdges(out){var this$1=this;out.println('Edges:');for(var i=0;i<this._edges.size();i++){out.println('edge '+i+':');var e=this$1._edges.get(i);e.print(out);e.eiList.print(out);}};PlanarGraph.prototype.find=function find(coord){return this._nodes.find(coord);};PlanarGraph.prototype.addNode=function addNode(){if(arguments[0]instanceof Node){var node=arguments[0];return this._nodes.addNode(node);}else if(arguments[0]instanceof Coordinate){var coord=arguments[0];return this._nodes.addNode(coord);}};PlanarGraph.prototype.getNodeIterator=function getNodeIterator(){return this._nodes.iterator();};PlanarGraph.prototype.linkResultDirectedEdges=function linkResultDirectedEdges(){for(var nodeit=this._nodes.iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().linkResultDirectedEdges();}};PlanarGraph.prototype.debugPrintln=function debugPrintln(o){System.out.println(o);};PlanarGraph.prototype.isBoundaryNode=function isBoundaryNode(geomIndex,coord){var node=this._nodes.find(coord);if(node===null){return false;}var label=node.getLabel();if(label!==null&&label.getLocation(geomIndex)===Location.BOUNDARY){return true;}return false;};PlanarGraph.prototype.linkAllDirectedEdges=function linkAllDirectedEdges(){for(var nodeit=this._nodes.iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().linkAllDirectedEdges();}};PlanarGraph.prototype.matchInSameDirection=function matchInSameDirection(p0,p1,ep0,ep1){if(!p0.equals(ep0)){return false;}if(CGAlgorithms.computeOrientation(p0,p1,ep1)===CGAlgorithms.COLLINEAR&&Quadrant.quadrant(p0,p1)===Quadrant.quadrant(ep0,ep1)){return true;}return false;};PlanarGraph.prototype.getEdgeEnds=function getEdgeEnds(){return this._edgeEndList;};PlanarGraph.prototype.debugPrint=function debugPrint(o){System.out.print(o);};PlanarGraph.prototype.getEdgeIterator=function getEdgeIterator(){return this._edges.iterator();};PlanarGraph.prototype.findEdgeInSameDirection=function findEdgeInSameDirection(p0,p1){var this$1=this;for(var i=0;i<this._edges.size();i++){var e=this$1._edges.get(i);var eCoord=e.getCoordinates();if(this$1.matchInSameDirection(p0,p1,eCoord[0],eCoord[1])){return e;}if(this$1.matchInSameDirection(p0,p1,eCoord[eCoord.length-1],eCoord[eCoord.length-2])){return e;}}return null;};PlanarGraph.prototype.insertEdge=function insertEdge(e){this._edges.add(e);};PlanarGraph.prototype.findEdgeEnd=function findEdgeEnd(e){for(var i=this.getEdgeEnds().iterator();i.hasNext();){var ee=i.next();if(ee.getEdge()===e){return ee;}}return null;};PlanarGraph.prototype.addEdges=function addEdges(edgesToAdd){var this$1=this;for(var it=edgesToAdd.iterator();it.hasNext();){var e=it.next();this$1._edges.add(e);var de1=new DirectedEdge(e,true);var de2=new DirectedEdge(e,false);de1.setSym(de2);de2.setSym(de1);this$1.add(de1);this$1.add(de2);}};PlanarGraph.prototype.add=function add(e){this._nodes.add(e);this._edgeEndList.add(e);};PlanarGraph.prototype.getNodes=function getNodes(){return this._nodes.values();};PlanarGraph.prototype.findEdge=function findEdge(p0,p1){var this$1=this;for(var i=0;i<this._edges.size();i++){var e=this$1._edges.get(i);var eCoord=e.getCoordinates();if(p0.equals(eCoord[0])&&p1.equals(eCoord[1])){return e;}}return null;};PlanarGraph.prototype.interfaces_=function interfaces_(){return [];};PlanarGraph.prototype.getClass=function getClass(){return PlanarGraph;};PlanarGraph.linkResultDirectedEdges=function linkResultDirectedEdges(nodes){for(var nodeit=nodes.iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().linkResultDirectedEdges();}};var PolygonBuilder=function PolygonBuilder(){this._geometryFactory=null;this._shellList=new ArrayList();var geometryFactory=arguments[0];this._geometryFactory=geometryFactory;};PolygonBuilder.prototype.sortShellsAndHoles=function sortShellsAndHoles(edgeRings,shellList,freeHoleList){for(var it=edgeRings.iterator();it.hasNext();){var er=it.next();if(er.isHole()){freeHoleList.add(er);}else{shellList.add(er);}}};PolygonBuilder.prototype.computePolygons=function computePolygons(shellList){var this$1=this;var resultPolyList=new ArrayList();for(var it=shellList.iterator();it.hasNext();){var er=it.next();var poly=er.toPolygon(this$1._geometryFactory);resultPolyList.add(poly);}return resultPolyList;};PolygonBuilder.prototype.placeFreeHoles=function placeFreeHoles(shellList,freeHoleList){var this$1=this;for(var it=freeHoleList.iterator();it.hasNext();){var hole=it.next();if(hole.getShell()===null){var shell=this$1.findEdgeRingContaining(hole,shellList);if(shell===null){throw new TopologyException('unable to assign hole to a shell',hole.getCoordinate(0));}hole.setShell(shell);}}};PolygonBuilder.prototype.buildMinimalEdgeRings=function buildMinimalEdgeRings(maxEdgeRings,shellList,freeHoleList){var this$1=this;var edgeRings=new ArrayList();for(var it=maxEdgeRings.iterator();it.hasNext();){var er=it.next();if(er.getMaxNodeDegree()>2){er.linkDirectedEdgesForMinimalEdgeRings();var minEdgeRings=er.buildMinimalRings();var shell=this$1.findShell(minEdgeRings);if(shell!==null){this$1.placePolygonHoles(shell,minEdgeRings);shellList.add(shell);}else{freeHoleList.addAll(minEdgeRings);}}else{edgeRings.add(er);}}return edgeRings;};PolygonBuilder.prototype.containsPoint=function containsPoint(p){for(var it=this._shellList.iterator();it.hasNext();){var er=it.next();if(er.containsPoint(p)){return true;}}return false;};PolygonBuilder.prototype.buildMaximalEdgeRings=function buildMaximalEdgeRings(dirEdges){var this$1=this;var maxEdgeRings=new ArrayList();for(var it=dirEdges.iterator();it.hasNext();){var de=it.next();if(de.isInResult()&&de.getLabel().isArea()){if(de.getEdgeRing()===null){var er=new MaximalEdgeRing(de,this$1._geometryFactory);maxEdgeRings.add(er);er.setInResult();}}}return maxEdgeRings;};PolygonBuilder.prototype.placePolygonHoles=function placePolygonHoles(shell,minEdgeRings){for(var it=minEdgeRings.iterator();it.hasNext();){var er=it.next();if(er.isHole()){er.setShell(shell);}}};PolygonBuilder.prototype.getPolygons=function getPolygons(){var resultPolyList=this.computePolygons(this._shellList);return resultPolyList;};PolygonBuilder.prototype.findEdgeRingContaining=function findEdgeRingContaining(testEr,shellList){var testRing=testEr.getLinearRing();var testEnv=testRing.getEnvelopeInternal();var testPt=testRing.getCoordinateN(0);var minShell=null;var minEnv=null;for(var it=shellList.iterator();it.hasNext();){var tryShell=it.next();var tryRing=tryShell.getLinearRing();var tryEnv=tryRing.getEnvelopeInternal();if(minShell!==null){minEnv=minShell.getLinearRing().getEnvelopeInternal();}var isContained=false;if(tryEnv.contains(testEnv)&&CGAlgorithms.isPointInRing(testPt,tryRing.getCoordinates())){isContained=true;}if(isContained){if(minShell===null||minEnv.contains(tryEnv)){minShell=tryShell;}}}return minShell;};PolygonBuilder.prototype.findShell=function findShell(minEdgeRings){var shellCount=0;var shell=null;for(var it=minEdgeRings.iterator();it.hasNext();){var er=it.next();if(!er.isHole()){shell=er;shellCount++;}}Assert.isTrue(shellCount<=1,'found two shells in MinimalEdgeRing list');return shell;};PolygonBuilder.prototype.add=function add(){if(arguments.length===1){var graph=arguments[0];this.add(graph.getEdgeEnds(),graph.getNodes());}else if(arguments.length===2){var dirEdges=arguments[0];var nodes=arguments[1];PlanarGraph.linkResultDirectedEdges(nodes);var maxEdgeRings=this.buildMaximalEdgeRings(dirEdges);var freeHoleList=new ArrayList();var edgeRings=this.buildMinimalEdgeRings(maxEdgeRings,this._shellList,freeHoleList);this.sortShellsAndHoles(edgeRings,this._shellList,freeHoleList);this.placeFreeHoles(this._shellList,freeHoleList);}};PolygonBuilder.prototype.interfaces_=function interfaces_(){return [];};PolygonBuilder.prototype.getClass=function getClass(){return PolygonBuilder;};var Boundable=function Boundable(){};Boundable.prototype.getBounds=function getBounds(){};Boundable.prototype.interfaces_=function interfaces_(){return [];};Boundable.prototype.getClass=function getClass(){return Boundable;};var ItemBoundable=function ItemBoundable(){this._bounds=null;this._item=null;var bounds=arguments[0];var item=arguments[1];this._bounds=bounds;this._item=item;};ItemBoundable.prototype.getItem=function getItem(){return this._item;};ItemBoundable.prototype.getBounds=function getBounds(){return this._bounds;};ItemBoundable.prototype.interfaces_=function interfaces_(){return [Boundable,Serializable];};ItemBoundable.prototype.getClass=function getClass(){return ItemBoundable;};var PriorityQueue=function PriorityQueue(){this._size=null;this._items=null;this._size=0;this._items=new ArrayList();this._items.add(null);};PriorityQueue.prototype.poll=function poll(){if(this.isEmpty()){return null;}var minItem=this._items.get(1);this._items.set(1,this._items.get(this._size));this._size-=1;this.reorder(1);return minItem;};PriorityQueue.prototype.size=function size(){return this._size;};PriorityQueue.prototype.reorder=function reorder(hole){var this$1=this;var child=null;var tmp=this._items.get(hole);for(;hole*2<=this._size;hole=child){child=hole*2;if(child!==this$1._size&&this$1._items.get(child+1).compareTo(this$1._items.get(child))<0){child++;}if(this$1._items.get(child).compareTo(tmp)<0){this$1._items.set(hole,this$1._items.get(child));}else{break;}}this._items.set(hole,tmp);};PriorityQueue.prototype.clear=function clear(){this._size=0;this._items.clear();};PriorityQueue.prototype.isEmpty=function isEmpty(){return this._size===0;};PriorityQueue.prototype.add=function add(x){var this$1=this;this._items.add(null);this._size+=1;var hole=this._size;this._items.set(0,x);for(;x.compareTo(this._items.get(Math.trunc(hole/2)))<0;hole/=2){this$1._items.set(hole,this$1._items.get(Math.trunc(hole/2)));}this._items.set(hole,x);};PriorityQueue.prototype.interfaces_=function interfaces_(){return [];};PriorityQueue.prototype.getClass=function getClass(){return PriorityQueue;};var ItemVisitor=function ItemVisitor(){};ItemVisitor.prototype.visitItem=function visitItem(item){};ItemVisitor.prototype.interfaces_=function interfaces_(){return [];};ItemVisitor.prototype.getClass=function getClass(){return ItemVisitor;};var SpatialIndex=function SpatialIndex(){};SpatialIndex.prototype.insert=function insert(itemEnv,item){};SpatialIndex.prototype.remove=function remove(itemEnv,item){};SpatialIndex.prototype.query=function query(){// if (arguments.length === 1) {
    // const searchEnv = arguments[0]
    // } else if (arguments.length === 2) {
    // const searchEnv = arguments[0]
    // const visitor = arguments[1]
    // }
    };SpatialIndex.prototype.interfaces_=function interfaces_(){return [];};SpatialIndex.prototype.getClass=function getClass(){return SpatialIndex;};var AbstractNode=function AbstractNode(){this._childBoundables=new ArrayList();this._bounds=null;this._level=null;if(arguments.length===0);else if(arguments.length===1){var level=arguments[0];this._level=level;}};var staticAccessors$22={serialVersionUID:{configurable:true}};AbstractNode.prototype.getLevel=function getLevel(){return this._level;};AbstractNode.prototype.size=function size(){return this._childBoundables.size();};AbstractNode.prototype.getChildBoundables=function getChildBoundables(){return this._childBoundables;};AbstractNode.prototype.addChildBoundable=function addChildBoundable(childBoundable){Assert.isTrue(this._bounds===null);this._childBoundables.add(childBoundable);};AbstractNode.prototype.isEmpty=function isEmpty(){return this._childBoundables.isEmpty();};AbstractNode.prototype.getBounds=function getBounds(){if(this._bounds===null){this._bounds=this.computeBounds();}return this._bounds;};AbstractNode.prototype.interfaces_=function interfaces_(){return [Boundable,Serializable];};AbstractNode.prototype.getClass=function getClass(){return AbstractNode;};staticAccessors$22.serialVersionUID.get=function(){return 6493722185909573708;};Object.defineProperties(AbstractNode,staticAccessors$22);var Collections=function Collections(){};Collections.reverseOrder=function reverseOrder(){return {compare:function compare(a,b){return b.compareTo(a);}};};Collections.min=function min(l){Collections.sort(l);return l.get(0);};Collections.sort=function sort(l,c){var a=l.toArray();if(c){Arrays.sort(a,c);}else{Arrays.sort(a);}var i=l.iterator();for(var pos=0,alen=a.length;pos<alen;pos++){i.next();i.set(a[pos]);}};Collections.singletonList=function singletonList(o){var arrayList=new ArrayList();arrayList.add(o);return arrayList;};var BoundablePair=function BoundablePair(){this._boundable1=null;this._boundable2=null;this._distance=null;this._itemDistance=null;var boundable1=arguments[0];var boundable2=arguments[1];var itemDistance=arguments[2];this._boundable1=boundable1;this._boundable2=boundable2;this._itemDistance=itemDistance;this._distance=this.distance();};BoundablePair.prototype.expandToQueue=function expandToQueue(priQ,minDistance){var isComp1=BoundablePair.isComposite(this._boundable1);var isComp2=BoundablePair.isComposite(this._boundable2);if(isComp1&&isComp2){if(BoundablePair.area(this._boundable1)>BoundablePair.area(this._boundable2)){this.expand(this._boundable1,this._boundable2,priQ,minDistance);return null;}else{this.expand(this._boundable2,this._boundable1,priQ,minDistance);return null;}}else if(isComp1){this.expand(this._boundable1,this._boundable2,priQ,minDistance);return null;}else if(isComp2){this.expand(this._boundable2,this._boundable1,priQ,minDistance);return null;}throw new IllegalArgumentException('neither boundable is composite');};BoundablePair.prototype.isLeaves=function isLeaves(){return !(BoundablePair.isComposite(this._boundable1)||BoundablePair.isComposite(this._boundable2));};BoundablePair.prototype.compareTo=function compareTo(o){var nd=o;if(this._distance<nd._distance){return -1;}if(this._distance>nd._distance){return 1;}return 0;};BoundablePair.prototype.expand=function expand(bndComposite,bndOther,priQ,minDistance){var this$1=this;var children=bndComposite.getChildBoundables();for(var i=children.iterator();i.hasNext();){var child=i.next();var bp=new BoundablePair(child,bndOther,this$1._itemDistance);if(bp.getDistance()<minDistance){priQ.add(bp);}}};BoundablePair.prototype.getBoundable=function getBoundable(i){if(i===0){return this._boundable1;}return this._boundable2;};BoundablePair.prototype.getDistance=function getDistance(){return this._distance;};BoundablePair.prototype.distance=function distance(){if(this.isLeaves()){return this._itemDistance.distance(this._boundable1,this._boundable2);}return this._boundable1.getBounds().distance(this._boundable2.getBounds());};BoundablePair.prototype.interfaces_=function interfaces_(){return [Comparable];};BoundablePair.prototype.getClass=function getClass(){return BoundablePair;};BoundablePair.area=function area(b){return b.getBounds().getArea();};BoundablePair.isComposite=function isComposite(item){return item instanceof AbstractNode;};var AbstractSTRtree=function AbstractSTRtree(){this._root=null;this._built=false;this._itemBoundables=new ArrayList();this._nodeCapacity=null;if(arguments.length===0){var nodeCapacity=AbstractSTRtree.DEFAULT_NODE_CAPACITY;this._nodeCapacity=nodeCapacity;}else if(arguments.length===1){var nodeCapacity$1=arguments[0];Assert.isTrue(nodeCapacity$1>1,'Node capacity must be greater than 1');this._nodeCapacity=nodeCapacity$1;}};var staticAccessors$23={IntersectsOp:{configurable:true},serialVersionUID:{configurable:true},DEFAULT_NODE_CAPACITY:{configurable:true}};AbstractSTRtree.prototype.getNodeCapacity=function getNodeCapacity(){return this._nodeCapacity;};AbstractSTRtree.prototype.lastNode=function lastNode(nodes){return nodes.get(nodes.size()-1);};AbstractSTRtree.prototype.size=function size(){var this$1=this;if(arguments.length===0){if(this.isEmpty()){return 0;}this.build();return this.size(this._root);}else if(arguments.length===1){var node=arguments[0];var size=0;for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(childBoundable instanceof AbstractNode){size+=this$1.size(childBoundable);}else if(childBoundable instanceof ItemBoundable){size+=1;}}return size;}};AbstractSTRtree.prototype.removeItem=function removeItem(node,item){var childToRemove=null;for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(childBoundable instanceof ItemBoundable){if(childBoundable.getItem()===item){childToRemove=childBoundable;}}}if(childToRemove!==null){node.getChildBoundables().remove(childToRemove);return true;}return false;};AbstractSTRtree.prototype.itemsTree=function itemsTree(){var this$1=this;if(arguments.length===0){this.build();var valuesTree=this.itemsTree(this._root);if(valuesTree===null){return new ArrayList();}return valuesTree;}else if(arguments.length===1){var node=arguments[0];var valuesTreeForNode=new ArrayList();for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(childBoundable instanceof AbstractNode){var valuesTreeForChild=this$1.itemsTree(childBoundable);if(valuesTreeForChild!==null){valuesTreeForNode.add(valuesTreeForChild);}}else if(childBoundable instanceof ItemBoundable){valuesTreeForNode.add(childBoundable.getItem());}else{Assert.shouldNeverReachHere();}}if(valuesTreeForNode.size()<=0){return null;}return valuesTreeForNode;}};AbstractSTRtree.prototype.insert=function insert(bounds,item){Assert.isTrue(!this._built,'Cannot insert items into an STR packed R-tree after it has been built.');this._itemBoundables.add(new ItemBoundable(bounds,item));};AbstractSTRtree.prototype.boundablesAtLevel=function boundablesAtLevel(){var this$1=this;if(arguments.length===1){var level=arguments[0];var boundables=new ArrayList();this.boundablesAtLevel(level,this._root,boundables);return boundables;}else if(arguments.length===3){var level$1=arguments[0];var top=arguments[1];var boundables$1=arguments[2];Assert.isTrue(level$1>-2);if(top.getLevel()===level$1){boundables$1.add(top);return null;}for(var i=top.getChildBoundables().iterator();i.hasNext();){var boundable=i.next();if(boundable instanceof AbstractNode){this$1.boundablesAtLevel(level$1,boundable,boundables$1);}else{Assert.isTrue(boundable instanceof ItemBoundable);if(level$1===-1){boundables$1.add(boundable);}}}return null;}};AbstractSTRtree.prototype.query=function query(){var this$1=this;if(arguments.length===1){var searchBounds=arguments[0];this.build();var matches=new ArrayList();if(this.isEmpty()){return matches;}if(this.getIntersectsOp().intersects(this._root.getBounds(),searchBounds)){this.query(searchBounds,this._root,matches);}return matches;}else if(arguments.length===2){var searchBounds$1=arguments[0];var visitor=arguments[1];this.build();if(this.isEmpty()){return null;}if(this.getIntersectsOp().intersects(this._root.getBounds(),searchBounds$1)){this.query(searchBounds$1,this._root,visitor);}}else if(arguments.length===3){if(hasInterface(arguments[2],ItemVisitor)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){var searchBounds$2=arguments[0];var node=arguments[1];var visitor$1=arguments[2];var childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.size();i++){var childBoundable=childBoundables.get(i);if(!this$1.getIntersectsOp().intersects(childBoundable.getBounds(),searchBounds$2)){continue;}if(childBoundable instanceof AbstractNode){this$1.query(searchBounds$2,childBoundable,visitor$1);}else if(childBoundable instanceof ItemBoundable){visitor$1.visitItem(childBoundable.getItem());}else{Assert.shouldNeverReachHere();}}}else if(hasInterface(arguments[2],List)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){var searchBounds$3=arguments[0];var node$1=arguments[1];var matches$1=arguments[2];var childBoundables$1=node$1.getChildBoundables();for(var i$1=0;i$1<childBoundables$1.size();i$1++){var childBoundable$1=childBoundables$1.get(i$1);if(!this$1.getIntersectsOp().intersects(childBoundable$1.getBounds(),searchBounds$3)){continue;}if(childBoundable$1 instanceof AbstractNode){this$1.query(searchBounds$3,childBoundable$1,matches$1);}else if(childBoundable$1 instanceof ItemBoundable){matches$1.add(childBoundable$1.getItem());}else{Assert.shouldNeverReachHere();}}}}};AbstractSTRtree.prototype.build=function build(){if(this._built){return null;}this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1);this._itemBoundables=null;this._built=true;};AbstractSTRtree.prototype.getRoot=function getRoot(){this.build();return this._root;};AbstractSTRtree.prototype.remove=function remove(){var this$1=this;if(arguments.length===2){var searchBounds=arguments[0];var item=arguments[1];this.build();if(this.getIntersectsOp().intersects(this._root.getBounds(),searchBounds)){return this.remove(searchBounds,this._root,item);}return false;}else if(arguments.length===3){var searchBounds$1=arguments[0];var node=arguments[1];var item$1=arguments[2];var found=this.removeItem(node,item$1);if(found){return true;}var childToPrune=null;for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(!this$1.getIntersectsOp().intersects(childBoundable.getBounds(),searchBounds$1)){continue;}if(childBoundable instanceof AbstractNode){found=this$1.remove(searchBounds$1,childBoundable,item$1);if(found){childToPrune=childBoundable;break;}}}if(childToPrune!==null){if(childToPrune.getChildBoundables().isEmpty()){node.getChildBoundables().remove(childToPrune);}}return found;}};AbstractSTRtree.prototype.createHigherLevels=function createHigherLevels(boundablesOfALevel,level){Assert.isTrue(!boundablesOfALevel.isEmpty());var parentBoundables=this.createParentBoundables(boundablesOfALevel,level+1);if(parentBoundables.size()===1){return parentBoundables.get(0);}return this.createHigherLevels(parentBoundables,level+1);};AbstractSTRtree.prototype.depth=function depth(){var this$1=this;if(arguments.length===0){if(this.isEmpty()){return 0;}this.build();return this.depth(this._root);}else if(arguments.length===1){var node=arguments[0];var maxChildDepth=0;for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(childBoundable instanceof AbstractNode){var childDepth=this$1.depth(childBoundable);if(childDepth>maxChildDepth){maxChildDepth=childDepth;}}}return maxChildDepth+1;}};AbstractSTRtree.prototype.createParentBoundables=function createParentBoundables(childBoundables,newLevel){var this$1=this;Assert.isTrue(!childBoundables.isEmpty());var parentBoundables=new ArrayList();parentBoundables.add(this.createNode(newLevel));var sortedChildBoundables=new ArrayList(childBoundables);Collections.sort(sortedChildBoundables,this.getComparator());for(var i=sortedChildBoundables.iterator();i.hasNext();){var childBoundable=i.next();if(this$1.lastNode(parentBoundables).getChildBoundables().size()===this$1.getNodeCapacity()){parentBoundables.add(this$1.createNode(newLevel));}this$1.lastNode(parentBoundables).addChildBoundable(childBoundable);}return parentBoundables;};AbstractSTRtree.prototype.isEmpty=function isEmpty(){if(!this._built){return this._itemBoundables.isEmpty();}return this._root.isEmpty();};AbstractSTRtree.prototype.interfaces_=function interfaces_(){return [Serializable];};AbstractSTRtree.prototype.getClass=function getClass(){return AbstractSTRtree;};AbstractSTRtree.compareDoubles=function compareDoubles(a,b){return a>b?1:a<b?-1:0;};staticAccessors$23.IntersectsOp.get=function(){return IntersectsOp;};staticAccessors$23.serialVersionUID.get=function(){return -3886435814360241337;};staticAccessors$23.DEFAULT_NODE_CAPACITY.get=function(){return 10;};Object.defineProperties(AbstractSTRtree,staticAccessors$23);var IntersectsOp=function IntersectsOp(){};var ItemDistance=function ItemDistance(){};ItemDistance.prototype.distance=function distance(item1,item2){};ItemDistance.prototype.interfaces_=function interfaces_(){return [];};ItemDistance.prototype.getClass=function getClass(){return ItemDistance;};var STRtree=function(AbstractSTRtree$$1){function STRtree(nodeCapacity){nodeCapacity=nodeCapacity||STRtree.DEFAULT_NODE_CAPACITY;AbstractSTRtree$$1.call(this,nodeCapacity);}if(AbstractSTRtree$$1)STRtree.__proto__=AbstractSTRtree$$1;STRtree.prototype=Object.create(AbstractSTRtree$$1&&AbstractSTRtree$$1.prototype);STRtree.prototype.constructor=STRtree;var staticAccessors={STRtreeNode:{configurable:true},serialVersionUID:{configurable:true},xComparator:{configurable:true},yComparator:{configurable:true},intersectsOp:{configurable:true},DEFAULT_NODE_CAPACITY:{configurable:true}};STRtree.prototype.createParentBoundablesFromVerticalSlices=function createParentBoundablesFromVerticalSlices(verticalSlices,newLevel){var this$1=this;Assert.isTrue(verticalSlices.length>0);var parentBoundables=new ArrayList();for(var i=0;i<verticalSlices.length;i++){parentBoundables.addAll(this$1.createParentBoundablesFromVerticalSlice(verticalSlices[i],newLevel));}return parentBoundables;};STRtree.prototype.createNode=function createNode(level){return new STRtreeNode(level);};STRtree.prototype.size=function size(){if(arguments.length===0){return AbstractSTRtree$$1.prototype.size.call(this);}else{return AbstractSTRtree$$1.prototype.size.apply(this,arguments);}};STRtree.prototype.insert=function insert(){if(arguments.length===2){var itemEnv=arguments[0];var item=arguments[1];if(itemEnv.isNull()){return null;}AbstractSTRtree$$1.prototype.insert.call(this,itemEnv,item);}else{return AbstractSTRtree$$1.prototype.insert.apply(this,arguments);}};STRtree.prototype.getIntersectsOp=function getIntersectsOp(){return STRtree.intersectsOp;};STRtree.prototype.verticalSlices=function verticalSlices(childBoundables,sliceCount){var sliceCapacity=Math.trunc(Math.ceil(childBoundables.size()/sliceCount));var slices=new Array(sliceCount).fill(null);var i=childBoundables.iterator();for(var j=0;j<sliceCount;j++){slices[j]=new ArrayList();var boundablesAddedToSlice=0;while(i.hasNext()&&boundablesAddedToSlice<sliceCapacity){var childBoundable=i.next();slices[j].add(childBoundable);boundablesAddedToSlice++;}}return slices;};STRtree.prototype.query=function query(){if(arguments.length===1){var searchEnv=arguments[0];return AbstractSTRtree$$1.prototype.query.call(this,searchEnv);}else if(arguments.length===2){var searchEnv$1=arguments[0];var visitor=arguments[1];AbstractSTRtree$$1.prototype.query.call(this,searchEnv$1,visitor);}else if(arguments.length===3){if(hasInterface(arguments[2],ItemVisitor)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){var searchBounds=arguments[0];var node=arguments[1];var visitor$1=arguments[2];AbstractSTRtree$$1.prototype.query.call(this,searchBounds,node,visitor$1);}else if(hasInterface(arguments[2],List)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){var searchBounds$1=arguments[0];var node$1=arguments[1];var matches=arguments[2];AbstractSTRtree$$1.prototype.query.call(this,searchBounds$1,node$1,matches);}}};STRtree.prototype.getComparator=function getComparator(){return STRtree.yComparator;};STRtree.prototype.createParentBoundablesFromVerticalSlice=function createParentBoundablesFromVerticalSlice(childBoundables,newLevel){return AbstractSTRtree$$1.prototype.createParentBoundables.call(this,childBoundables,newLevel);};STRtree.prototype.remove=function remove(){if(arguments.length===2){var itemEnv=arguments[0];var item=arguments[1];return AbstractSTRtree$$1.prototype.remove.call(this,itemEnv,item);}else{return AbstractSTRtree$$1.prototype.remove.apply(this,arguments);}};STRtree.prototype.depth=function depth(){if(arguments.length===0){return AbstractSTRtree$$1.prototype.depth.call(this);}else{return AbstractSTRtree$$1.prototype.depth.apply(this,arguments);}};STRtree.prototype.createParentBoundables=function createParentBoundables(childBoundables,newLevel){Assert.isTrue(!childBoundables.isEmpty());var minLeafCount=Math.trunc(Math.ceil(childBoundables.size()/this.getNodeCapacity()));var sortedChildBoundables=new ArrayList(childBoundables);Collections.sort(sortedChildBoundables,STRtree.xComparator);var verticalSlices=this.verticalSlices(sortedChildBoundables,Math.trunc(Math.ceil(Math.sqrt(minLeafCount))));return this.createParentBoundablesFromVerticalSlices(verticalSlices,newLevel);};STRtree.prototype.nearestNeighbour=function nearestNeighbour(){if(arguments.length===1){if(hasInterface(arguments[0],ItemDistance)){var itemDist=arguments[0];var bp=new BoundablePair(this.getRoot(),this.getRoot(),itemDist);return this.nearestNeighbour(bp);}else if(arguments[0]instanceof BoundablePair){var initBndPair=arguments[0];return this.nearestNeighbour(initBndPair,Double.POSITIVE_INFINITY);}}else if(arguments.length===2){if(arguments[0]instanceof STRtree&&hasInterface(arguments[1],ItemDistance)){var tree=arguments[0];var itemDist$1=arguments[1];var bp$1=new BoundablePair(this.getRoot(),tree.getRoot(),itemDist$1);return this.nearestNeighbour(bp$1);}else if(arguments[0]instanceof BoundablePair&&typeof arguments[1]==='number'){var initBndPair$1=arguments[0];var maxDistance=arguments[1];var distanceLowerBound=maxDistance;var minPair=null;var priQ=new PriorityQueue();priQ.add(initBndPair$1);while(!priQ.isEmpty()&&distanceLowerBound>0.0){var bndPair=priQ.poll();var currentDistance=bndPair.getDistance();if(currentDistance>=distanceLowerBound){break;}if(bndPair.isLeaves()){distanceLowerBound=currentDistance;minPair=bndPair;}else{bndPair.expandToQueue(priQ,distanceLowerBound);}}return [minPair.getBoundable(0).getItem(),minPair.getBoundable(1).getItem()];}}else if(arguments.length===3){var env=arguments[0];var item=arguments[1];var itemDist$2=arguments[2];var bnd=new ItemBoundable(env,item);var bp$2=new BoundablePair(this.getRoot(),bnd,itemDist$2);return this.nearestNeighbour(bp$2)[0];}};STRtree.prototype.interfaces_=function interfaces_(){return [SpatialIndex,Serializable];};STRtree.prototype.getClass=function getClass(){return STRtree;};STRtree.centreX=function centreX(e){return STRtree.avg(e.getMinX(),e.getMaxX());};STRtree.avg=function avg(a,b){return (a+b)/2;};STRtree.centreY=function centreY(e){return STRtree.avg(e.getMinY(),e.getMaxY());};staticAccessors.STRtreeNode.get=function(){return STRtreeNode;};staticAccessors.serialVersionUID.get=function(){return 259274702368956900;};staticAccessors.xComparator.get=function(){return {interfaces_:function interfaces_(){return [Comparator];},compare:function compare(o1,o2){return AbstractSTRtree$$1.compareDoubles(STRtree.centreX(o1.getBounds()),STRtree.centreX(o2.getBounds()));}};};staticAccessors.yComparator.get=function(){return {interfaces_:function interfaces_(){return [Comparator];},compare:function compare(o1,o2){return AbstractSTRtree$$1.compareDoubles(STRtree.centreY(o1.getBounds()),STRtree.centreY(o2.getBounds()));}};};staticAccessors.intersectsOp.get=function(){return {interfaces_:function interfaces_(){return [AbstractSTRtree$$1.IntersectsOp];},intersects:function intersects(aBounds,bBounds){return aBounds.intersects(bBounds);}};};staticAccessors.DEFAULT_NODE_CAPACITY.get=function(){return 10;};Object.defineProperties(STRtree,staticAccessors);return STRtree;}(AbstractSTRtree);var STRtreeNode=function(AbstractNode$$1){function STRtreeNode(){var level=arguments[0];AbstractNode$$1.call(this,level);}if(AbstractNode$$1)STRtreeNode.__proto__=AbstractNode$$1;STRtreeNode.prototype=Object.create(AbstractNode$$1&&AbstractNode$$1.prototype);STRtreeNode.prototype.constructor=STRtreeNode;STRtreeNode.prototype.computeBounds=function computeBounds(){var bounds=null;for(var i=this.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(bounds===null){bounds=new Envelope(childBoundable.getBounds());}else{bounds.expandToInclude(childBoundable.getBounds());}}return bounds;};STRtreeNode.prototype.interfaces_=function interfaces_(){return [];};STRtreeNode.prototype.getClass=function getClass(){return STRtreeNode;};return STRtreeNode;}(AbstractNode);var SegmentPointComparator=function SegmentPointComparator(){};SegmentPointComparator.prototype.interfaces_=function interfaces_(){return [];};SegmentPointComparator.prototype.getClass=function getClass(){return SegmentPointComparator;};SegmentPointComparator.relativeSign=function relativeSign(x0,x1){if(x0<x1){return -1;}if(x0>x1){return 1;}return 0;};SegmentPointComparator.compare=function compare(octant,p0,p1){if(p0.equals2D(p1)){return 0;}var xSign=SegmentPointComparator.relativeSign(p0.x,p1.x);var ySign=SegmentPointComparator.relativeSign(p0.y,p1.y);switch(octant){case 0:return SegmentPointComparator.compareValue(xSign,ySign);case 1:return SegmentPointComparator.compareValue(ySign,xSign);case 2:return SegmentPointComparator.compareValue(ySign,-xSign);case 3:return SegmentPointComparator.compareValue(-xSign,ySign);case 4:return SegmentPointComparator.compareValue(-xSign,-ySign);case 5:return SegmentPointComparator.compareValue(-ySign,-xSign);case 6:return SegmentPointComparator.compareValue(-ySign,xSign);case 7:return SegmentPointComparator.compareValue(xSign,-ySign);default:}Assert.shouldNeverReachHere('invalid octant value');return 0;};SegmentPointComparator.compareValue=function compareValue(compareSign0,compareSign1){if(compareSign0<0){return -1;}if(compareSign0>0){return 1;}if(compareSign1<0){return -1;}if(compareSign1>0){return 1;}return 0;};var SegmentNode=function SegmentNode(){this._segString=null;this.coord=null;this.segmentIndex=null;this._segmentOctant=null;this._isInterior=null;var segString=arguments[0];var coord=arguments[1];var segmentIndex=arguments[2];var segmentOctant=arguments[3];this._segString=segString;this.coord=new Coordinate(coord);this.segmentIndex=segmentIndex;this._segmentOctant=segmentOctant;this._isInterior=!coord.equals2D(segString.getCoordinate(segmentIndex));};SegmentNode.prototype.getCoordinate=function getCoordinate(){return this.coord;};SegmentNode.prototype.print=function print(out){out.print(this.coord);out.print(' seg # = '+this.segmentIndex);};SegmentNode.prototype.compareTo=function compareTo(obj){var other=obj;if(this.segmentIndex<other.segmentIndex){return -1;}if(this.segmentIndex>other.segmentIndex){return 1;}if(this.coord.equals2D(other.coord)){return 0;}return SegmentPointComparator.compare(this._segmentOctant,this.coord,other.coord);};SegmentNode.prototype.isEndPoint=function isEndPoint(maxSegmentIndex){if(this.segmentIndex===0&&!this._isInterior){return true;}if(this.segmentIndex===maxSegmentIndex){return true;}return false;};SegmentNode.prototype.isInterior=function isInterior(){return this._isInterior;};SegmentNode.prototype.interfaces_=function interfaces_(){return [Comparable];};SegmentNode.prototype.getClass=function getClass(){return SegmentNode;};// import Iterator from '../../../../java/util/Iterator'
    var SegmentNodeList=function SegmentNodeList(){this._nodeMap=new TreeMap();this._edge=null;var edge=arguments[0];this._edge=edge;};SegmentNodeList.prototype.getSplitCoordinates=function getSplitCoordinates(){var this$1=this;var coordList=new CoordinateList();this.addEndpoints();var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();this$1.addEdgeCoordinates(eiPrev,ei,coordList);eiPrev=ei;}return coordList.toCoordinateArray();};SegmentNodeList.prototype.addCollapsedNodes=function addCollapsedNodes(){var this$1=this;var collapsedVertexIndexes=new ArrayList();this.findCollapsesFromInsertedNodes(collapsedVertexIndexes);this.findCollapsesFromExistingVertices(collapsedVertexIndexes);for(var it=collapsedVertexIndexes.iterator();it.hasNext();){var vertexIndex=it.next().intValue();this$1.add(this$1._edge.getCoordinate(vertexIndex),vertexIndex);}};SegmentNodeList.prototype.print=function print(out){out.println('Intersections:');for(var it=this.iterator();it.hasNext();){var ei=it.next();ei.print(out);}};SegmentNodeList.prototype.findCollapsesFromExistingVertices=function findCollapsesFromExistingVertices(collapsedVertexIndexes){var this$1=this;for(var i=0;i<this._edge.size()-2;i++){var p0=this$1._edge.getCoordinate(i);// const p1 = this._edge.getCoordinate(i + 1)
    var p2=this$1._edge.getCoordinate(i+2);if(p0.equals2D(p2)){collapsedVertexIndexes.add(new Integer(i+1));}}};SegmentNodeList.prototype.addEdgeCoordinates=function addEdgeCoordinates(ei0,ei1,coordList){var this$1=this;// let npts = ei1.segmentIndex - ei0.segmentIndex + 2
    var lastSegStartPt=this._edge.getCoordinate(ei1.segmentIndex);var useIntPt1=ei1.isInterior()||!ei1.coord.equals2D(lastSegStartPt);// if (!useIntPt1) {
    // npts--
    // }
    // const ipt = 0
    coordList.add(new Coordinate(ei0.coord),false);for(var i=ei0.segmentIndex+1;i<=ei1.segmentIndex;i++){coordList.add(this$1._edge.getCoordinate(i));}if(useIntPt1){coordList.add(new Coordinate(ei1.coord));}};SegmentNodeList.prototype.iterator=function iterator(){return this._nodeMap.values().iterator();};SegmentNodeList.prototype.addSplitEdges=function addSplitEdges(edgeList){var this$1=this;this.addEndpoints();this.addCollapsedNodes();var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var newEdge=this$1.createSplitEdge(eiPrev,ei);edgeList.add(newEdge);eiPrev=ei;}};SegmentNodeList.prototype.findCollapseIndex=function findCollapseIndex(ei0,ei1,collapsedVertexIndex){if(!ei0.coord.equals2D(ei1.coord)){return false;}var numVerticesBetween=ei1.segmentIndex-ei0.segmentIndex;if(!ei1.isInterior()){numVerticesBetween--;}if(numVerticesBetween===1){collapsedVertexIndex[0]=ei0.segmentIndex+1;return true;}return false;};SegmentNodeList.prototype.findCollapsesFromInsertedNodes=function findCollapsesFromInsertedNodes(collapsedVertexIndexes){var this$1=this;var collapsedVertexIndex=new Array(1).fill(null);var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var isCollapsed=this$1.findCollapseIndex(eiPrev,ei,collapsedVertexIndex);if(isCollapsed){collapsedVertexIndexes.add(new Integer(collapsedVertexIndex[0]));}eiPrev=ei;}};SegmentNodeList.prototype.getEdge=function getEdge(){return this._edge;};SegmentNodeList.prototype.addEndpoints=function addEndpoints(){var maxSegIndex=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0);this.add(this._edge.getCoordinate(maxSegIndex),maxSegIndex);};SegmentNodeList.prototype.createSplitEdge=function createSplitEdge(ei0,ei1){var this$1=this;var npts=ei1.segmentIndex-ei0.segmentIndex+2;var lastSegStartPt=this._edge.getCoordinate(ei1.segmentIndex);var useIntPt1=ei1.isInterior()||!ei1.coord.equals2D(lastSegStartPt);if(!useIntPt1){npts--;}var pts=new Array(npts).fill(null);var ipt=0;pts[ipt++]=new Coordinate(ei0.coord);for(var i=ei0.segmentIndex+1;i<=ei1.segmentIndex;i++){pts[ipt++]=this$1._edge.getCoordinate(i);}if(useIntPt1){pts[ipt]=new Coordinate(ei1.coord);}return new NodedSegmentString(pts,this._edge.getData());};SegmentNodeList.prototype.add=function add(intPt,segmentIndex){var eiNew=new SegmentNode(this._edge,intPt,segmentIndex,this._edge.getSegmentOctant(segmentIndex));var ei=this._nodeMap.get(eiNew);if(ei!==null){Assert.isTrue(ei.coord.equals2D(intPt),'Found equal nodes with different coordinates');return ei;}this._nodeMap.put(eiNew,eiNew);return eiNew;};SegmentNodeList.prototype.checkSplitEdgesCorrectness=function checkSplitEdgesCorrectness(splitEdges){var edgePts=this._edge.getCoordinates();var split0=splitEdges.get(0);var pt0=split0.getCoordinate(0);if(!pt0.equals2D(edgePts[0])){throw new RuntimeException('bad split edge start point at '+pt0);}var splitn=splitEdges.get(splitEdges.size()-1);var splitnPts=splitn.getCoordinates();var ptn=splitnPts[splitnPts.length-1];if(!ptn.equals2D(edgePts[edgePts.length-1])){throw new RuntimeException('bad split edge end point at '+ptn);}};SegmentNodeList.prototype.interfaces_=function interfaces_(){return [];};SegmentNodeList.prototype.getClass=function getClass(){return SegmentNodeList;};// class NodeVertexIterator {
    //   constructor () {
    //     this._nodeList = null
    //     this._edge = null
    //     this._nodeIt = null
    //     this._currNode = null
    //     this._nextNode = null
    //     this._currSegIndex = 0
    //     let nodeList = arguments[0]
    //     this._nodeList = nodeList
    //     this._edge = nodeList.getEdge()
    //     this._nodeIt = nodeList.iterator()
    //     this.readNextNode()
    //   }
    //   next () {
    //     if (this._currNode === null) {
    //       this._currNode = this._nextNode
    //       this._currSegIndex = this._currNode.segmentIndex
    //       this.readNextNode()
    //       return this._currNode
    //     }
    //     if (this._nextNode === null) return null
    //     if (this._nextNode.segmentIndex === this._currNode.segmentIndex) {
    //       this._currNode = this._nextNode
    //       this._currSegIndex = this._currNode.segmentIndex
    //       this.readNextNode()
    //       return this._currNode
    //     }
    //     if (this._nextNode.segmentIndex > this._currNode.segmentIndex) {}
    //     return null
    //   }
    //   remove () {
    //     // throw new UnsupportedOperationException(this.getClass().getName())
    //   }
    //   hasNext () {
    //     if (this._nextNode === null) return false
    //     return true
    //   }
    //   readNextNode () {
    //     if (this._nodeIt.hasNext()) this._nextNode = this._nodeIt.next(); else this._nextNode = null
    //   }
    //   interfaces_ () {
    //     return [Iterator]
    //   }
    //   getClass () {
    //     return NodeVertexIterator
    //   }
    // }
    var Octant=function Octant(){};Octant.prototype.interfaces_=function interfaces_(){return [];};Octant.prototype.getClass=function getClass(){return Octant;};Octant.octant=function octant(){if(typeof arguments[0]==='number'&&typeof arguments[1]==='number'){var dx=arguments[0];var dy=arguments[1];if(dx===0.0&&dy===0.0){throw new IllegalArgumentException('Cannot compute the octant for point ( '+dx+', '+dy+' )');}var adx=Math.abs(dx);var ady=Math.abs(dy);if(dx>=0){if(dy>=0){if(adx>=ady){return 0;}else{return 1;}}else{if(adx>=ady){return 7;}else{return 6;}}}else{if(dy>=0){if(adx>=ady){return 3;}else{return 2;}}else{if(adx>=ady){return 4;}else{return 5;}}}}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){var p0=arguments[0];var p1=arguments[1];var dx$1=p1.x-p0.x;var dy$1=p1.y-p0.y;if(dx$1===0.0&&dy$1===0.0){throw new IllegalArgumentException('Cannot compute the octant for two identical points '+p0);}return Octant.octant(dx$1,dy$1);}};var SegmentString=function SegmentString(){};SegmentString.prototype.getCoordinates=function getCoordinates(){};SegmentString.prototype.size=function size(){};SegmentString.prototype.getCoordinate=function getCoordinate(i){};SegmentString.prototype.isClosed=function isClosed(){};SegmentString.prototype.setData=function setData(data){};SegmentString.prototype.getData=function getData(){};SegmentString.prototype.interfaces_=function interfaces_(){return [];};SegmentString.prototype.getClass=function getClass(){return SegmentString;};var NodableSegmentString=function NodableSegmentString(){};NodableSegmentString.prototype.addIntersection=function addIntersection(intPt,segmentIndex){};NodableSegmentString.prototype.interfaces_=function interfaces_(){return [SegmentString];};NodableSegmentString.prototype.getClass=function getClass(){return NodableSegmentString;};var NodedSegmentString=function NodedSegmentString(){this._nodeList=new SegmentNodeList(this);this._pts=null;this._data=null;var pts=arguments[0];var data=arguments[1];this._pts=pts;this._data=data;};NodedSegmentString.prototype.getCoordinates=function getCoordinates(){return this._pts;};NodedSegmentString.prototype.size=function size(){return this._pts.length;};NodedSegmentString.prototype.getCoordinate=function getCoordinate(i){return this._pts[i];};NodedSegmentString.prototype.isClosed=function isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1]);};NodedSegmentString.prototype.getSegmentOctant=function getSegmentOctant(index){if(index===this._pts.length-1){return -1;}return this.safeOctant(this.getCoordinate(index),this.getCoordinate(index+1));};NodedSegmentString.prototype.setData=function setData(data){this._data=data;};NodedSegmentString.prototype.safeOctant=function safeOctant(p0,p1){if(p0.equals2D(p1)){return 0;}return Octant.octant(p0,p1);};NodedSegmentString.prototype.getData=function getData(){return this._data;};NodedSegmentString.prototype.addIntersection=function addIntersection(){if(arguments.length===2){var intPt$1=arguments[0];var segmentIndex=arguments[1];this.addIntersectionNode(intPt$1,segmentIndex);}else if(arguments.length===4){var li=arguments[0];var segmentIndex$1=arguments[1];// const geomIndex = arguments[2]
    var intIndex=arguments[3];var intPt=new Coordinate(li.getIntersection(intIndex));this.addIntersection(intPt,segmentIndex$1);}};NodedSegmentString.prototype.toString=function toString(){return WKTWriter.toLineString(new CoordinateArraySequence(this._pts));};NodedSegmentString.prototype.getNodeList=function getNodeList(){return this._nodeList;};NodedSegmentString.prototype.addIntersectionNode=function addIntersectionNode(intPt,segmentIndex){var normalizedSegmentIndex=segmentIndex;var nextSegIndex=normalizedSegmentIndex+1;if(nextSegIndex<this._pts.length){var nextPt=this._pts[nextSegIndex];if(intPt.equals2D(nextPt)){normalizedSegmentIndex=nextSegIndex;}}var ei=this._nodeList.add(intPt,normalizedSegmentIndex);return ei;};NodedSegmentString.prototype.addIntersections=function addIntersections(li,segmentIndex,geomIndex){var this$1=this;for(var i=0;i<li.getIntersectionNum();i++){this$1.addIntersection(li,segmentIndex,geomIndex,i);}};NodedSegmentString.prototype.interfaces_=function interfaces_(){return [NodableSegmentString];};NodedSegmentString.prototype.getClass=function getClass(){return NodedSegmentString;};NodedSegmentString.getNodedSubstrings=function getNodedSubstrings(){if(arguments.length===1){var segStrings=arguments[0];var resultEdgelist=new ArrayList();NodedSegmentString.getNodedSubstrings(segStrings,resultEdgelist);return resultEdgelist;}else if(arguments.length===2){var segStrings$1=arguments[0];var resultEdgelist$1=arguments[1];for(var i=segStrings$1.iterator();i.hasNext();){var ss=i.next();ss.getNodeList().addSplitEdges(resultEdgelist$1);}}};var LineSegment=function LineSegment(){this.p0=null;this.p1=null;if(arguments.length===0){this.p0=new Coordinate();this.p1=new Coordinate();}else if(arguments.length===1){var ls=arguments[0];this.p0=new Coordinate(ls.p0);this.p1=new Coordinate(ls.p1);}else if(arguments.length===2){this.p0=arguments[0];this.p1=arguments[1];}else if(arguments.length===4){var x0=arguments[0];var y0=arguments[1];var x1=arguments[2];var y1=arguments[3];this.p0=new Coordinate(x0,y0);this.p1=new Coordinate(x1,y1);}};var staticAccessors$24={serialVersionUID:{configurable:true}};LineSegment.prototype.minX=function minX(){return Math.min(this.p0.x,this.p1.x);};LineSegment.prototype.orientationIndex=function orientationIndex(){if(arguments[0]instanceof LineSegment){var seg=arguments[0];var orient0=CGAlgorithms.orientationIndex(this.p0,this.p1,seg.p0);var orient1=CGAlgorithms.orientationIndex(this.p0,this.p1,seg.p1);if(orient0>=0&&orient1>=0){return Math.max(orient0,orient1);}if(orient0<=0&&orient1<=0){return Math.max(orient0,orient1);}return 0;}else if(arguments[0]instanceof Coordinate){var p=arguments[0];return CGAlgorithms.orientationIndex(this.p0,this.p1,p);}};LineSegment.prototype.toGeometry=function toGeometry(geomFactory){return geomFactory.createLineString([this.p0,this.p1]);};LineSegment.prototype.isVertical=function isVertical(){return this.p0.x===this.p1.x;};LineSegment.prototype.equals=function equals(o){if(!(o instanceof LineSegment)){return false;}var other=o;return this.p0.equals(other.p0)&&this.p1.equals(other.p1);};LineSegment.prototype.intersection=function intersection(line){var li=new RobustLineIntersector();li.computeIntersection(this.p0,this.p1,line.p0,line.p1);if(li.hasIntersection()){return li.getIntersection(0);}return null;};LineSegment.prototype.project=function project(){if(arguments[0]instanceof Coordinate){var p=arguments[0];if(p.equals(this.p0)||p.equals(this.p1)){return new Coordinate(p);}var r=this.projectionFactor(p);var coord=new Coordinate();coord.x=this.p0.x+r*(this.p1.x-this.p0.x);coord.y=this.p0.y+r*(this.p1.y-this.p0.y);return coord;}else if(arguments[0]instanceof LineSegment){var seg=arguments[0];var pf0=this.projectionFactor(seg.p0);var pf1=this.projectionFactor(seg.p1);if(pf0>=1.0&&pf1>=1.0){return null;}if(pf0<=0.0&&pf1<=0.0){return null;}var newp0=this.project(seg.p0);if(pf0<0.0){newp0=this.p0;}if(pf0>1.0){newp0=this.p1;}var newp1=this.project(seg.p1);if(pf1<0.0){newp1=this.p0;}if(pf1>1.0){newp1=this.p1;}return new LineSegment(newp0,newp1);}};LineSegment.prototype.normalize=function normalize(){if(this.p1.compareTo(this.p0)<0){this.reverse();}};LineSegment.prototype.angle=function angle(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x);};LineSegment.prototype.getCoordinate=function getCoordinate(i){if(i===0){return this.p0;}return this.p1;};LineSegment.prototype.distancePerpendicular=function distancePerpendicular(p){return CGAlgorithms.distancePointLinePerpendicular(p,this.p0,this.p1);};LineSegment.prototype.minY=function minY(){return Math.min(this.p0.y,this.p1.y);};LineSegment.prototype.midPoint=function midPoint(){return LineSegment.midPoint(this.p0,this.p1);};LineSegment.prototype.projectionFactor=function projectionFactor(p){if(p.equals(this.p0)){return 0.0;}if(p.equals(this.p1)){return 1.0;}var dx=this.p1.x-this.p0.x;var dy=this.p1.y-this.p0.y;var len=dx*dx+dy*dy;if(len<=0.0){return Double.NaN;}var r=((p.x-this.p0.x)*dx+(p.y-this.p0.y)*dy)/len;return r;};LineSegment.prototype.closestPoints=function closestPoints(line){var intPt=this.intersection(line);if(intPt!==null){return [intPt,intPt];}var closestPt=new Array(2).fill(null);var minDistance=Double.MAX_VALUE;var dist=null;var close00=this.closestPoint(line.p0);minDistance=close00.distance(line.p0);closestPt[0]=close00;closestPt[1]=line.p0;var close01=this.closestPoint(line.p1);dist=close01.distance(line.p1);if(dist<minDistance){minDistance=dist;closestPt[0]=close01;closestPt[1]=line.p1;}var close10=line.closestPoint(this.p0);dist=close10.distance(this.p0);if(dist<minDistance){minDistance=dist;closestPt[0]=this.p0;closestPt[1]=close10;}var close11=line.closestPoint(this.p1);dist=close11.distance(this.p1);if(dist<minDistance){minDistance=dist;closestPt[0]=this.p1;closestPt[1]=close11;}return closestPt;};LineSegment.prototype.closestPoint=function closestPoint(p){var factor=this.projectionFactor(p);if(factor>0&&factor<1){return this.project(p);}var dist0=this.p0.distance(p);var dist1=this.p1.distance(p);if(dist0<dist1){return this.p0;}return this.p1;};LineSegment.prototype.maxX=function maxX(){return Math.max(this.p0.x,this.p1.x);};LineSegment.prototype.getLength=function getLength(){return this.p0.distance(this.p1);};LineSegment.prototype.compareTo=function compareTo(o){var other=o;var comp0=this.p0.compareTo(other.p0);if(comp0!==0){return comp0;}return this.p1.compareTo(other.p1);};LineSegment.prototype.reverse=function reverse(){var temp=this.p0;this.p0=this.p1;this.p1=temp;};LineSegment.prototype.equalsTopo=function equalsTopo(other){return this.p0.equals(other.p0)&&(this.p1.equals(other.p1)||this.p0.equals(other.p1))&&this.p1.equals(other.p0);};LineSegment.prototype.lineIntersection=function lineIntersection(line){try{var intPt=HCoordinate.intersection(this.p0,this.p1,line.p0,line.p1);return intPt;}catch(ex){if(ex instanceof NotRepresentableException);else{throw ex;}}finally{}return null;};LineSegment.prototype.maxY=function maxY(){return Math.max(this.p0.y,this.p1.y);};LineSegment.prototype.pointAlongOffset=function pointAlongOffset(segmentLengthFraction,offsetDistance){var segx=this.p0.x+segmentLengthFraction*(this.p1.x-this.p0.x);var segy=this.p0.y+segmentLengthFraction*(this.p1.y-this.p0.y);var dx=this.p1.x-this.p0.x;var dy=this.p1.y-this.p0.y;var len=Math.sqrt(dx*dx+dy*dy);var ux=0.0;var uy=0.0;if(offsetDistance!==0.0){if(len<=0.0){throw new Error('Cannot compute offset from zero-length line segment');}ux=offsetDistance*dx/len;uy=offsetDistance*dy/len;}var offsetx=segx-uy;var offsety=segy+ux;var coord=new Coordinate(offsetx,offsety);return coord;};LineSegment.prototype.setCoordinates=function setCoordinates(){if(arguments.length===1){var ls=arguments[0];this.setCoordinates(ls.p0,ls.p1);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];this.p0.x=p0.x;this.p0.y=p0.y;this.p1.x=p1.x;this.p1.y=p1.y;}};LineSegment.prototype.segmentFraction=function segmentFraction(inputPt){var segFrac=this.projectionFactor(inputPt);if(segFrac<0.0){segFrac=0.0;}else if(segFrac>1.0||Double.isNaN(segFrac)){segFrac=1.0;}return segFrac;};LineSegment.prototype.toString=function toString(){return 'LINESTRING( '+this.p0.x+' '+this.p0.y+', '+this.p1.x+' '+this.p1.y+')';};LineSegment.prototype.isHorizontal=function isHorizontal(){return this.p0.y===this.p1.y;};LineSegment.prototype.distance=function distance(){if(arguments[0]instanceof LineSegment){var ls=arguments[0];return CGAlgorithms.distanceLineLine(this.p0,this.p1,ls.p0,ls.p1);}else if(arguments[0]instanceof Coordinate){var p=arguments[0];return CGAlgorithms.distancePointLine(p,this.p0,this.p1);}};LineSegment.prototype.pointAlong=function pointAlong(segmentLengthFraction){var coord=new Coordinate();coord.x=this.p0.x+segmentLengthFraction*(this.p1.x-this.p0.x);coord.y=this.p0.y+segmentLengthFraction*(this.p1.y-this.p0.y);return coord;};LineSegment.prototype.hashCode=function hashCode(){var bits0=Double.doubleToLongBits(this.p0.x);bits0^=Double.doubleToLongBits(this.p0.y)*31;var hash0=Math.trunc(bits0)^Math.trunc(bits0>>32);var bits1=Double.doubleToLongBits(this.p1.x);bits1^=Double.doubleToLongBits(this.p1.y)*31;var hash1=Math.trunc(bits1)^Math.trunc(bits1>>32);return hash0^hash1;};LineSegment.prototype.interfaces_=function interfaces_(){return [Comparable,Serializable];};LineSegment.prototype.getClass=function getClass(){return LineSegment;};LineSegment.midPoint=function midPoint(p0,p1){return new Coordinate((p0.x+p1.x)/2,(p0.y+p1.y)/2);};staticAccessors$24.serialVersionUID.get=function(){return 3252005833466256227;};Object.defineProperties(LineSegment,staticAccessors$24);var MonotoneChainOverlapAction=function MonotoneChainOverlapAction(){this.tempEnv1=new Envelope();this.tempEnv2=new Envelope();this._overlapSeg1=new LineSegment();this._overlapSeg2=new LineSegment();};MonotoneChainOverlapAction.prototype.overlap=function overlap(){if(arguments.length===2);else if(arguments.length===4){var mc1=arguments[0];var start1=arguments[1];var mc2=arguments[2];var start2=arguments[3];mc1.getLineSegment(start1,this._overlapSeg1);mc2.getLineSegment(start2,this._overlapSeg2);this.overlap(this._overlapSeg1,this._overlapSeg2);}};MonotoneChainOverlapAction.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainOverlapAction.prototype.getClass=function getClass(){return MonotoneChainOverlapAction;};var MonotoneChain=function MonotoneChain(){this._pts=null;this._start=null;this._end=null;this._env=null;this._context=null;this._id=null;var pts=arguments[0];var start=arguments[1];var end=arguments[2];var context=arguments[3];this._pts=pts;this._start=start;this._end=end;this._context=context;};MonotoneChain.prototype.getLineSegment=function getLineSegment(index,ls){ls.p0=this._pts[index];ls.p1=this._pts[index+1];};MonotoneChain.prototype.computeSelect=function computeSelect(searchEnv,start0,end0,mcs){var p0=this._pts[start0];var p1=this._pts[end0];mcs.tempEnv1.init(p0,p1);if(end0-start0===1){mcs.select(this,start0);return null;}if(!searchEnv.intersects(mcs.tempEnv1)){return null;}var mid=Math.trunc((start0+end0)/2);if(start0<mid){this.computeSelect(searchEnv,start0,mid,mcs);}if(mid<end0){this.computeSelect(searchEnv,mid,end0,mcs);}};MonotoneChain.prototype.getCoordinates=function getCoordinates(){var this$1=this;var coord=new Array(this._end-this._start+1).fill(null);var index=0;for(var i=this._start;i<=this._end;i++){coord[index++]=this$1._pts[i];}return coord;};MonotoneChain.prototype.computeOverlaps=function computeOverlaps(mc,mco){this.computeOverlapsInternal(this._start,this._end,mc,mc._start,mc._end,mco);};MonotoneChain.prototype.setId=function setId(id){this._id=id;};MonotoneChain.prototype.select=function select(searchEnv,mcs){this.computeSelect(searchEnv,this._start,this._end,mcs);};MonotoneChain.prototype.getEnvelope=function getEnvelope(){if(this._env===null){var p0=this._pts[this._start];var p1=this._pts[this._end];this._env=new Envelope(p0,p1);}return this._env;};MonotoneChain.prototype.getEndIndex=function getEndIndex(){return this._end;};MonotoneChain.prototype.getStartIndex=function getStartIndex(){return this._start;};MonotoneChain.prototype.getContext=function getContext(){return this._context;};MonotoneChain.prototype.getId=function getId(){return this._id;};MonotoneChain.prototype.computeOverlapsInternal=function computeOverlapsInternal(start0,end0,mc,start1,end1,mco){var p00=this._pts[start0];var p01=this._pts[end0];var p10=mc._pts[start1];var p11=mc._pts[end1];if(end0-start0===1&&end1-start1===1){mco.overlap(this,start0,mc,start1);return null;}mco.tempEnv1.init(p00,p01);mco.tempEnv2.init(p10,p11);if(!mco.tempEnv1.intersects(mco.tempEnv2)){return null;}var mid0=Math.trunc((start0+end0)/2);var mid1=Math.trunc((start1+end1)/2);if(start0<mid0){if(start1<mid1){this.computeOverlapsInternal(start0,mid0,mc,start1,mid1,mco);}if(mid1<end1){this.computeOverlapsInternal(start0,mid0,mc,mid1,end1,mco);}}if(mid0<end0){if(start1<mid1){this.computeOverlapsInternal(mid0,end0,mc,start1,mid1,mco);}if(mid1<end1){this.computeOverlapsInternal(mid0,end0,mc,mid1,end1,mco);}}};MonotoneChain.prototype.interfaces_=function interfaces_(){return [];};MonotoneChain.prototype.getClass=function getClass(){return MonotoneChain;};var MonotoneChainBuilder=function MonotoneChainBuilder(){};MonotoneChainBuilder.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainBuilder.prototype.getClass=function getClass(){return MonotoneChainBuilder;};MonotoneChainBuilder.getChainStartIndices=function getChainStartIndices(pts){var start=0;var startIndexList=new ArrayList();startIndexList.add(new Integer(start));do{var last=MonotoneChainBuilder.findChainEnd(pts,start);startIndexList.add(new Integer(last));start=last;}while(start<pts.length-1);var startIndex=MonotoneChainBuilder.toIntArray(startIndexList);return startIndex;};MonotoneChainBuilder.findChainEnd=function findChainEnd(pts,start){var safeStart=start;while(safeStart<pts.length-1&&pts[safeStart].equals2D(pts[safeStart+1])){safeStart++;}if(safeStart>=pts.length-1){return pts.length-1;}var chainQuad=Quadrant.quadrant(pts[safeStart],pts[safeStart+1]);var last=start+1;while(last<pts.length){if(!pts[last-1].equals2D(pts[last])){var quad=Quadrant.quadrant(pts[last-1],pts[last]);if(quad!==chainQuad){break;}}last++;}return last-1;};MonotoneChainBuilder.getChains=function getChains(){if(arguments.length===1){var pts=arguments[0];return MonotoneChainBuilder.getChains(pts,null);}else if(arguments.length===2){var pts$1=arguments[0];var context=arguments[1];var mcList=new ArrayList();var startIndex=MonotoneChainBuilder.getChainStartIndices(pts$1);for(var i=0;i<startIndex.length-1;i++){var mc=new MonotoneChain(pts$1,startIndex[i],startIndex[i+1],context);mcList.add(mc);}return mcList;}};MonotoneChainBuilder.toIntArray=function toIntArray(list){var array=new Array(list.size()).fill(null);for(var i=0;i<array.length;i++){array[i]=list.get(i).intValue();}return array;};var Noder=function Noder(){};Noder.prototype.computeNodes=function computeNodes(segStrings){};Noder.prototype.getNodedSubstrings=function getNodedSubstrings(){};Noder.prototype.interfaces_=function interfaces_(){return [];};Noder.prototype.getClass=function getClass(){return Noder;};var SinglePassNoder=function SinglePassNoder(){this._segInt=null;if(arguments.length===0);else if(arguments.length===1){var segInt=arguments[0];this.setSegmentIntersector(segInt);}};SinglePassNoder.prototype.setSegmentIntersector=function setSegmentIntersector(segInt){this._segInt=segInt;};SinglePassNoder.prototype.interfaces_=function interfaces_(){return [Noder];};SinglePassNoder.prototype.getClass=function getClass(){return SinglePassNoder;};var MCIndexNoder=function(SinglePassNoder$$1){function MCIndexNoder(si){if(si){SinglePassNoder$$1.call(this,si);}else{SinglePassNoder$$1.call(this);}this._monoChains=new ArrayList();this._index=new STRtree();this._idCounter=0;this._nodedSegStrings=null;this._nOverlaps=0;}if(SinglePassNoder$$1)MCIndexNoder.__proto__=SinglePassNoder$$1;MCIndexNoder.prototype=Object.create(SinglePassNoder$$1&&SinglePassNoder$$1.prototype);MCIndexNoder.prototype.constructor=MCIndexNoder;var staticAccessors={SegmentOverlapAction:{configurable:true}};MCIndexNoder.prototype.getMonotoneChains=function getMonotoneChains(){return this._monoChains;};MCIndexNoder.prototype.getNodedSubstrings=function getNodedSubstrings(){return NodedSegmentString.getNodedSubstrings(this._nodedSegStrings);};MCIndexNoder.prototype.getIndex=function getIndex(){return this._index;};MCIndexNoder.prototype.add=function add(segStr){var this$1=this;var segChains=MonotoneChainBuilder.getChains(segStr.getCoordinates(),segStr);for(var i=segChains.iterator();i.hasNext();){var mc=i.next();mc.setId(this$1._idCounter++);this$1._index.insert(mc.getEnvelope(),mc);this$1._monoChains.add(mc);}};MCIndexNoder.prototype.computeNodes=function computeNodes(inputSegStrings){var this$1=this;this._nodedSegStrings=inputSegStrings;for(var i=inputSegStrings.iterator();i.hasNext();){this$1.add(i.next());}this.intersectChains();};MCIndexNoder.prototype.intersectChains=function intersectChains(){var this$1=this;var overlapAction=new SegmentOverlapAction(this._segInt);for(var i=this._monoChains.iterator();i.hasNext();){var queryChain=i.next();var overlapChains=this$1._index.query(queryChain.getEnvelope());for(var j=overlapChains.iterator();j.hasNext();){var testChain=j.next();if(testChain.getId()>queryChain.getId()){queryChain.computeOverlaps(testChain,overlapAction);this$1._nOverlaps++;}if(this$1._segInt.isDone()){return null;}}}};MCIndexNoder.prototype.interfaces_=function interfaces_(){return [];};MCIndexNoder.prototype.getClass=function getClass(){return MCIndexNoder;};staticAccessors.SegmentOverlapAction.get=function(){return SegmentOverlapAction;};Object.defineProperties(MCIndexNoder,staticAccessors);return MCIndexNoder;}(SinglePassNoder);var SegmentOverlapAction=function(MonotoneChainOverlapAction$$1){function SegmentOverlapAction(){MonotoneChainOverlapAction$$1.call(this);this._si=null;var si=arguments[0];this._si=si;}if(MonotoneChainOverlapAction$$1)SegmentOverlapAction.__proto__=MonotoneChainOverlapAction$$1;SegmentOverlapAction.prototype=Object.create(MonotoneChainOverlapAction$$1&&MonotoneChainOverlapAction$$1.prototype);SegmentOverlapAction.prototype.constructor=SegmentOverlapAction;SegmentOverlapAction.prototype.overlap=function overlap(){if(arguments.length===4){var mc1=arguments[0];var start1=arguments[1];var mc2=arguments[2];var start2=arguments[3];var ss1=mc1.getContext();var ss2=mc2.getContext();this._si.processIntersections(ss1,start1,ss2,start2);}else{return MonotoneChainOverlapAction$$1.prototype.overlap.apply(this,arguments);}};SegmentOverlapAction.prototype.interfaces_=function interfaces_(){return [];};SegmentOverlapAction.prototype.getClass=function getClass(){return SegmentOverlapAction;};return SegmentOverlapAction;}(MonotoneChainOverlapAction);var BufferParameters=function BufferParameters(){this._quadrantSegments=BufferParameters.DEFAULT_QUADRANT_SEGMENTS;this._endCapStyle=BufferParameters.CAP_ROUND;this._joinStyle=BufferParameters.JOIN_ROUND;this._mitreLimit=BufferParameters.DEFAULT_MITRE_LIMIT;this._isSingleSided=false;this._simplifyFactor=BufferParameters.DEFAULT_SIMPLIFY_FACTOR;if(arguments.length===0);else if(arguments.length===1){var quadrantSegments=arguments[0];this.setQuadrantSegments(quadrantSegments);}else if(arguments.length===2){var quadrantSegments$1=arguments[0];var endCapStyle=arguments[1];this.setQuadrantSegments(quadrantSegments$1);this.setEndCapStyle(endCapStyle);}else if(arguments.length===4){var quadrantSegments$2=arguments[0];var endCapStyle$1=arguments[1];var joinStyle=arguments[2];var mitreLimit=arguments[3];this.setQuadrantSegments(quadrantSegments$2);this.setEndCapStyle(endCapStyle$1);this.setJoinStyle(joinStyle);this.setMitreLimit(mitreLimit);}};var staticAccessors$25={CAP_ROUND:{configurable:true},CAP_FLAT:{configurable:true},CAP_SQUARE:{configurable:true},JOIN_ROUND:{configurable:true},JOIN_MITRE:{configurable:true},JOIN_BEVEL:{configurable:true},DEFAULT_QUADRANT_SEGMENTS:{configurable:true},DEFAULT_MITRE_LIMIT:{configurable:true},DEFAULT_SIMPLIFY_FACTOR:{configurable:true}};BufferParameters.prototype.getEndCapStyle=function getEndCapStyle(){return this._endCapStyle;};BufferParameters.prototype.isSingleSided=function isSingleSided(){return this._isSingleSided;};BufferParameters.prototype.setQuadrantSegments=function setQuadrantSegments(quadSegs){this._quadrantSegments=quadSegs;if(this._quadrantSegments===0){this._joinStyle=BufferParameters.JOIN_BEVEL;}if(this._quadrantSegments<0){this._joinStyle=BufferParameters.JOIN_MITRE;this._mitreLimit=Math.abs(this._quadrantSegments);}if(quadSegs<=0){this._quadrantSegments=1;}if(this._joinStyle!==BufferParameters.JOIN_ROUND){this._quadrantSegments=BufferParameters.DEFAULT_QUADRANT_SEGMENTS;}};BufferParameters.prototype.getJoinStyle=function getJoinStyle(){return this._joinStyle;};BufferParameters.prototype.setJoinStyle=function setJoinStyle(joinStyle){this._joinStyle=joinStyle;};BufferParameters.prototype.setSimplifyFactor=function setSimplifyFactor(simplifyFactor){this._simplifyFactor=simplifyFactor<0?0:simplifyFactor;};BufferParameters.prototype.getSimplifyFactor=function getSimplifyFactor(){return this._simplifyFactor;};BufferParameters.prototype.getQuadrantSegments=function getQuadrantSegments(){return this._quadrantSegments;};BufferParameters.prototype.setEndCapStyle=function setEndCapStyle(endCapStyle){this._endCapStyle=endCapStyle;};BufferParameters.prototype.getMitreLimit=function getMitreLimit(){return this._mitreLimit;};BufferParameters.prototype.setMitreLimit=function setMitreLimit(mitreLimit){this._mitreLimit=mitreLimit;};BufferParameters.prototype.setSingleSided=function setSingleSided(isSingleSided){this._isSingleSided=isSingleSided;};BufferParameters.prototype.interfaces_=function interfaces_(){return [];};BufferParameters.prototype.getClass=function getClass(){return BufferParameters;};BufferParameters.bufferDistanceError=function bufferDistanceError(quadSegs){var alpha=Math.PI/2.0/quadSegs;return 1-Math.cos(alpha/2.0);};staticAccessors$25.CAP_ROUND.get=function(){return 1;};staticAccessors$25.CAP_FLAT.get=function(){return 2;};staticAccessors$25.CAP_SQUARE.get=function(){return 3;};staticAccessors$25.JOIN_ROUND.get=function(){return 1;};staticAccessors$25.JOIN_MITRE.get=function(){return 2;};staticAccessors$25.JOIN_BEVEL.get=function(){return 3;};staticAccessors$25.DEFAULT_QUADRANT_SEGMENTS.get=function(){return 8;};staticAccessors$25.DEFAULT_MITRE_LIMIT.get=function(){return 5.0;};staticAccessors$25.DEFAULT_SIMPLIFY_FACTOR.get=function(){return 0.01;};Object.defineProperties(BufferParameters,staticAccessors$25);var BufferInputLineSimplifier=function BufferInputLineSimplifier(inputLine){this._distanceTol=null;this._isDeleted=null;this._angleOrientation=CGAlgorithms.COUNTERCLOCKWISE;this._inputLine=inputLine||null;};var staticAccessors$26={INIT:{configurable:true},DELETE:{configurable:true},KEEP:{configurable:true},NUM_PTS_TO_CHECK:{configurable:true}};BufferInputLineSimplifier.prototype.isDeletable=function isDeletable(i0,i1,i2,distanceTol){var p0=this._inputLine[i0];var p1=this._inputLine[i1];var p2=this._inputLine[i2];if(!this.isConcave(p0,p1,p2)){return false;}if(!this.isShallow(p0,p1,p2,distanceTol)){return false;}return this.isShallowSampled(p0,p1,i0,i2,distanceTol);};BufferInputLineSimplifier.prototype.deleteShallowConcavities=function deleteShallowConcavities(){var this$1=this;var index=1;// const maxIndex = this._inputLine.length - 1
    var midIndex=this.findNextNonDeletedIndex(index);var lastIndex=this.findNextNonDeletedIndex(midIndex);var isChanged=false;while(lastIndex<this._inputLine.length){var isMiddleVertexDeleted=false;if(this$1.isDeletable(index,midIndex,lastIndex,this$1._distanceTol)){this$1._isDeleted[midIndex]=BufferInputLineSimplifier.DELETE;isMiddleVertexDeleted=true;isChanged=true;}if(isMiddleVertexDeleted){index=lastIndex;}else{index=midIndex;}midIndex=this$1.findNextNonDeletedIndex(index);lastIndex=this$1.findNextNonDeletedIndex(midIndex);}return isChanged;};BufferInputLineSimplifier.prototype.isShallowConcavity=function isShallowConcavity(p0,p1,p2,distanceTol){var orientation=CGAlgorithms.computeOrientation(p0,p1,p2);var isAngleToSimplify=orientation===this._angleOrientation;if(!isAngleToSimplify){return false;}var dist=CGAlgorithms.distancePointLine(p1,p0,p2);return dist<distanceTol;};BufferInputLineSimplifier.prototype.isShallowSampled=function isShallowSampled(p0,p2,i0,i2,distanceTol){var this$1=this;var inc=Math.trunc((i2-i0)/BufferInputLineSimplifier.NUM_PTS_TO_CHECK);if(inc<=0){inc=1;}for(var i=i0;i<i2;i+=inc){if(!this$1.isShallow(p0,p2,this$1._inputLine[i],distanceTol)){return false;}}return true;};BufferInputLineSimplifier.prototype.isConcave=function isConcave(p0,p1,p2){var orientation=CGAlgorithms.computeOrientation(p0,p1,p2);var isConcave=orientation===this._angleOrientation;return isConcave;};BufferInputLineSimplifier.prototype.simplify=function simplify(distanceTol){var this$1=this;this._distanceTol=Math.abs(distanceTol);if(distanceTol<0){this._angleOrientation=CGAlgorithms.CLOCKWISE;}this._isDeleted=new Array(this._inputLine.length).fill(null);var isChanged=false;do{isChanged=this$1.deleteShallowConcavities();}while(isChanged);return this.collapseLine();};BufferInputLineSimplifier.prototype.findNextNonDeletedIndex=function findNextNonDeletedIndex(index){var next=index+1;while(next<this._inputLine.length&&this._isDeleted[next]===BufferInputLineSimplifier.DELETE){next++;}return next;};BufferInputLineSimplifier.prototype.isShallow=function isShallow(p0,p1,p2,distanceTol){var dist=CGAlgorithms.distancePointLine(p1,p0,p2);return dist<distanceTol;};BufferInputLineSimplifier.prototype.collapseLine=function collapseLine(){var this$1=this;var coordList=new CoordinateList();for(var i=0;i<this._inputLine.length;i++){if(this$1._isDeleted[i]!==BufferInputLineSimplifier.DELETE){coordList.add(this$1._inputLine[i]);}}return coordList.toCoordinateArray();};BufferInputLineSimplifier.prototype.interfaces_=function interfaces_(){return [];};BufferInputLineSimplifier.prototype.getClass=function getClass(){return BufferInputLineSimplifier;};BufferInputLineSimplifier.simplify=function simplify(inputLine,distanceTol){var simp=new BufferInputLineSimplifier(inputLine);return simp.simplify(distanceTol);};staticAccessors$26.INIT.get=function(){return 0;};staticAccessors$26.DELETE.get=function(){return 1;};staticAccessors$26.KEEP.get=function(){return 1;};staticAccessors$26.NUM_PTS_TO_CHECK.get=function(){return 10;};Object.defineProperties(BufferInputLineSimplifier,staticAccessors$26);var OffsetSegmentString=function OffsetSegmentString(){this._ptList=null;this._precisionModel=null;this._minimimVertexDistance=0.0;this._ptList=new ArrayList();};var staticAccessors$28={COORDINATE_ARRAY_TYPE:{configurable:true}};OffsetSegmentString.prototype.getCoordinates=function getCoordinates(){var coord=this._ptList.toArray(OffsetSegmentString.COORDINATE_ARRAY_TYPE);return coord;};OffsetSegmentString.prototype.setPrecisionModel=function setPrecisionModel(precisionModel){this._precisionModel=precisionModel;};OffsetSegmentString.prototype.addPt=function addPt(pt){var bufPt=new Coordinate(pt);this._precisionModel.makePrecise(bufPt);if(this.isRedundant(bufPt)){return null;}this._ptList.add(bufPt);};OffsetSegmentString.prototype.revere=function revere(){};OffsetSegmentString.prototype.addPts=function addPts(pt,isForward){var this$1=this;if(isForward){for(var i=0;i<pt.length;i++){this$1.addPt(pt[i]);}}else{for(var i$1=pt.length-1;i$1>=0;i$1--){this$1.addPt(pt[i$1]);}}};OffsetSegmentString.prototype.isRedundant=function isRedundant(pt){if(this._ptList.size()<1){return false;}var lastPt=this._ptList.get(this._ptList.size()-1);var ptDist=pt.distance(lastPt);if(ptDist<this._minimimVertexDistance){return true;}return false;};OffsetSegmentString.prototype.toString=function toString(){var fact=new GeometryFactory();var line=fact.createLineString(this.getCoordinates());return line.toString();};OffsetSegmentString.prototype.closeRing=function closeRing(){if(this._ptList.size()<1){return null;}var startPt=new Coordinate(this._ptList.get(0));var lastPt=this._ptList.get(this._ptList.size()-1);// const last2Pt = null
    // if (this._ptList.size() >= 2) last2Pt = this._ptList.get(this._ptList.size() - 2)
    if(startPt.equals(lastPt)){return null;}this._ptList.add(startPt);};OffsetSegmentString.prototype.setMinimumVertexDistance=function setMinimumVertexDistance(minimimVertexDistance){this._minimimVertexDistance=minimimVertexDistance;};OffsetSegmentString.prototype.interfaces_=function interfaces_(){return [];};OffsetSegmentString.prototype.getClass=function getClass(){return OffsetSegmentString;};staticAccessors$28.COORDINATE_ARRAY_TYPE.get=function(){return new Array(0).fill(null);};Object.defineProperties(OffsetSegmentString,staticAccessors$28);var Angle=function Angle(){};var staticAccessors$29={PI_TIMES_2:{configurable:true},PI_OVER_2:{configurable:true},PI_OVER_4:{configurable:true},COUNTERCLOCKWISE:{configurable:true},CLOCKWISE:{configurable:true},NONE:{configurable:true}};Angle.prototype.interfaces_=function interfaces_(){return [];};Angle.prototype.getClass=function getClass(){return Angle;};Angle.toDegrees=function toDegrees(radians){return radians*180/Math.PI;};Angle.normalize=function normalize(angle){while(angle>Math.PI){angle-=Angle.PI_TIMES_2;}while(angle<=-Math.PI){angle+=Angle.PI_TIMES_2;}return angle;};Angle.angle=function angle(){if(arguments.length===1){var p=arguments[0];return Math.atan2(p.y,p.x);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];var dx=p1.x-p0.x;var dy=p1.y-p0.y;return Math.atan2(dy,dx);}};Angle.isAcute=function isAcute(p0,p1,p2){var dx0=p0.x-p1.x;var dy0=p0.y-p1.y;var dx1=p2.x-p1.x;var dy1=p2.y-p1.y;var dotprod=dx0*dx1+dy0*dy1;return dotprod>0;};Angle.isObtuse=function isObtuse(p0,p1,p2){var dx0=p0.x-p1.x;var dy0=p0.y-p1.y;var dx1=p2.x-p1.x;var dy1=p2.y-p1.y;var dotprod=dx0*dx1+dy0*dy1;return dotprod<0;};Angle.interiorAngle=function interiorAngle(p0,p1,p2){var anglePrev=Angle.angle(p1,p0);var angleNext=Angle.angle(p1,p2);return Math.abs(angleNext-anglePrev);};Angle.normalizePositive=function normalizePositive(angle){if(angle<0.0){while(angle<0.0){angle+=Angle.PI_TIMES_2;}if(angle>=Angle.PI_TIMES_2){angle=0.0;}}else{while(angle>=Angle.PI_TIMES_2){angle-=Angle.PI_TIMES_2;}if(angle<0.0){angle=0.0;}}return angle;};Angle.angleBetween=function angleBetween(tip1,tail,tip2){var a1=Angle.angle(tail,tip1);var a2=Angle.angle(tail,tip2);return Angle.diff(a1,a2);};Angle.diff=function diff(ang1,ang2){var delAngle=null;if(ang1<ang2){delAngle=ang2-ang1;}else{delAngle=ang1-ang2;}if(delAngle>Math.PI){delAngle=2*Math.PI-delAngle;}return delAngle;};Angle.toRadians=function toRadians(angleDegrees){return angleDegrees*Math.PI/180.0;};Angle.getTurn=function getTurn(ang1,ang2){var crossproduct=Math.sin(ang2-ang1);if(crossproduct>0){return Angle.COUNTERCLOCKWISE;}if(crossproduct<0){return Angle.CLOCKWISE;}return Angle.NONE;};Angle.angleBetweenOriented=function angleBetweenOriented(tip1,tail,tip2){var a1=Angle.angle(tail,tip1);var a2=Angle.angle(tail,tip2);var angDel=a2-a1;if(angDel<=-Math.PI){return angDel+Angle.PI_TIMES_2;}if(angDel>Math.PI){return angDel-Angle.PI_TIMES_2;}return angDel;};staticAccessors$29.PI_TIMES_2.get=function(){return 2.0*Math.PI;};staticAccessors$29.PI_OVER_2.get=function(){return Math.PI/2.0;};staticAccessors$29.PI_OVER_4.get=function(){return Math.PI/4.0;};staticAccessors$29.COUNTERCLOCKWISE.get=function(){return CGAlgorithms.COUNTERCLOCKWISE;};staticAccessors$29.CLOCKWISE.get=function(){return CGAlgorithms.CLOCKWISE;};staticAccessors$29.NONE.get=function(){return CGAlgorithms.COLLINEAR;};Object.defineProperties(Angle,staticAccessors$29);var OffsetSegmentGenerator=function OffsetSegmentGenerator(){this._maxCurveSegmentError=0.0;this._filletAngleQuantum=null;this._closingSegLengthFactor=1;this._segList=null;this._distance=0.0;this._precisionModel=null;this._bufParams=null;this._li=null;this._s0=null;this._s1=null;this._s2=null;this._seg0=new LineSegment();this._seg1=new LineSegment();this._offset0=new LineSegment();this._offset1=new LineSegment();this._side=0;this._hasNarrowConcaveAngle=false;var precisionModel=arguments[0];var bufParams=arguments[1];var distance=arguments[2];this._precisionModel=precisionModel;this._bufParams=bufParams;this._li=new RobustLineIntersector();this._filletAngleQuantum=Math.PI/2.0/bufParams.getQuadrantSegments();if(bufParams.getQuadrantSegments()>=8&&bufParams.getJoinStyle()===BufferParameters.JOIN_ROUND){this._closingSegLengthFactor=OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR;}this.init(distance);};var staticAccessors$27={OFFSET_SEGMENT_SEPARATION_FACTOR:{configurable:true},INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:true},CURVE_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:true},MAX_CLOSING_SEG_LEN_FACTOR:{configurable:true}};OffsetSegmentGenerator.prototype.addNextSegment=function addNextSegment(p,addStartPoint){this._s0=this._s1;this._s1=this._s2;this._s2=p;this._seg0.setCoordinates(this._s0,this._s1);this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0);this._seg1.setCoordinates(this._s1,this._s2);this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1);if(this._s1.equals(this._s2)){return null;}var orientation=CGAlgorithms.computeOrientation(this._s0,this._s1,this._s2);var outsideTurn=orientation===CGAlgorithms.CLOCKWISE&&this._side===Position.LEFT||orientation===CGAlgorithms.COUNTERCLOCKWISE&&this._side===Position.RIGHT;if(orientation===0){this.addCollinear(addStartPoint);}else if(outsideTurn){this.addOutsideTurn(orientation,addStartPoint);}else{this.addInsideTurn(orientation,addStartPoint);}};OffsetSegmentGenerator.prototype.addLineEndCap=function addLineEndCap(p0,p1){var seg=new LineSegment(p0,p1);var offsetL=new LineSegment();this.computeOffsetSegment(seg,Position.LEFT,this._distance,offsetL);var offsetR=new LineSegment();this.computeOffsetSegment(seg,Position.RIGHT,this._distance,offsetR);var dx=p1.x-p0.x;var dy=p1.y-p0.y;var angle=Math.atan2(dy,dx);switch(this._bufParams.getEndCapStyle()){case BufferParameters.CAP_ROUND:this._segList.addPt(offsetL.p1);this.addFilletArc(p1,angle+Math.PI/2,angle-Math.PI/2,CGAlgorithms.CLOCKWISE,this._distance);this._segList.addPt(offsetR.p1);break;case BufferParameters.CAP_FLAT:this._segList.addPt(offsetL.p1);this._segList.addPt(offsetR.p1);break;case BufferParameters.CAP_SQUARE:var squareCapSideOffset=new Coordinate();squareCapSideOffset.x=Math.abs(this._distance)*Math.cos(angle);squareCapSideOffset.y=Math.abs(this._distance)*Math.sin(angle);var squareCapLOffset=new Coordinate(offsetL.p1.x+squareCapSideOffset.x,offsetL.p1.y+squareCapSideOffset.y);var squareCapROffset=new Coordinate(offsetR.p1.x+squareCapSideOffset.x,offsetR.p1.y+squareCapSideOffset.y);this._segList.addPt(squareCapLOffset);this._segList.addPt(squareCapROffset);break;default:}};OffsetSegmentGenerator.prototype.getCoordinates=function getCoordinates(){var pts=this._segList.getCoordinates();return pts;};OffsetSegmentGenerator.prototype.addMitreJoin=function addMitreJoin(p,offset0,offset1,distance){var isMitreWithinLimit=true;var intPt=null;try{intPt=HCoordinate.intersection(offset0.p0,offset0.p1,offset1.p0,offset1.p1);var mitreRatio=distance<=0.0?1.0:intPt.distance(p)/Math.abs(distance);if(mitreRatio>this._bufParams.getMitreLimit()){isMitreWithinLimit=false;}}catch(ex){if(ex instanceof NotRepresentableException){intPt=new Coordinate(0,0);isMitreWithinLimit=false;}else{throw ex;}}finally{}if(isMitreWithinLimit){this._segList.addPt(intPt);}else{this.addLimitedMitreJoin(offset0,offset1,distance,this._bufParams.getMitreLimit());}};OffsetSegmentGenerator.prototype.addFilletCorner=function addFilletCorner(p,p0,p1,direction,radius){var dx0=p0.x-p.x;var dy0=p0.y-p.y;var startAngle=Math.atan2(dy0,dx0);var dx1=p1.x-p.x;var dy1=p1.y-p.y;var endAngle=Math.atan2(dy1,dx1);if(direction===CGAlgorithms.CLOCKWISE){if(startAngle<=endAngle){startAngle+=2.0*Math.PI;}}else{if(startAngle>=endAngle){startAngle-=2.0*Math.PI;}}this._segList.addPt(p0);this.addFilletArc(p,startAngle,endAngle,direction,radius);this._segList.addPt(p1);};OffsetSegmentGenerator.prototype.addOutsideTurn=function addOutsideTurn(orientation,addStartPoint){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR){this._segList.addPt(this._offset0.p1);return null;}if(this._bufParams.getJoinStyle()===BufferParameters.JOIN_MITRE){this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance);}else if(this._bufParams.getJoinStyle()===BufferParameters.JOIN_BEVEL){this.addBevelJoin(this._offset0,this._offset1);}else{if(addStartPoint){this._segList.addPt(this._offset0.p1);}this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,orientation,this._distance);this._segList.addPt(this._offset1.p0);}};OffsetSegmentGenerator.prototype.createSquare=function createSquare(p){this._segList.addPt(new Coordinate(p.x+this._distance,p.y+this._distance));this._segList.addPt(new Coordinate(p.x+this._distance,p.y-this._distance));this._segList.addPt(new Coordinate(p.x-this._distance,p.y-this._distance));this._segList.addPt(new Coordinate(p.x-this._distance,p.y+this._distance));this._segList.closeRing();};OffsetSegmentGenerator.prototype.addSegments=function addSegments(pt,isForward){this._segList.addPts(pt,isForward);};OffsetSegmentGenerator.prototype.addFirstSegment=function addFirstSegment(){this._segList.addPt(this._offset1.p0);};OffsetSegmentGenerator.prototype.addLastSegment=function addLastSegment(){this._segList.addPt(this._offset1.p1);};OffsetSegmentGenerator.prototype.initSideSegments=function initSideSegments(s1,s2,side){this._s1=s1;this._s2=s2;this._side=side;this._seg1.setCoordinates(s1,s2);this.computeOffsetSegment(this._seg1,side,this._distance,this._offset1);};OffsetSegmentGenerator.prototype.addLimitedMitreJoin=function addLimitedMitreJoin(offset0,offset1,distance,mitreLimit){var basePt=this._seg0.p1;var ang0=Angle.angle(basePt,this._seg0.p0);// const ang1 = Angle.angle(basePt, this._seg1.p1)
    var angDiff=Angle.angleBetweenOriented(this._seg0.p0,basePt,this._seg1.p1);var angDiffHalf=angDiff/2;var midAng=Angle.normalize(ang0+angDiffHalf);var mitreMidAng=Angle.normalize(midAng+Math.PI);var mitreDist=mitreLimit*distance;var bevelDelta=mitreDist*Math.abs(Math.sin(angDiffHalf));var bevelHalfLen=distance-bevelDelta;var bevelMidX=basePt.x+mitreDist*Math.cos(mitreMidAng);var bevelMidY=basePt.y+mitreDist*Math.sin(mitreMidAng);var bevelMidPt=new Coordinate(bevelMidX,bevelMidY);var mitreMidLine=new LineSegment(basePt,bevelMidPt);var bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);var bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);if(this._side===Position.LEFT){this._segList.addPt(bevelEndLeft);this._segList.addPt(bevelEndRight);}else{this._segList.addPt(bevelEndRight);this._segList.addPt(bevelEndLeft);}};OffsetSegmentGenerator.prototype.computeOffsetSegment=function computeOffsetSegment(seg,side,distance,offset){var sideSign=side===Position.LEFT?1:-1;var dx=seg.p1.x-seg.p0.x;var dy=seg.p1.y-seg.p0.y;var len=Math.sqrt(dx*dx+dy*dy);var ux=sideSign*distance*dx/len;var uy=sideSign*distance*dy/len;offset.p0.x=seg.p0.x-uy;offset.p0.y=seg.p0.y+ux;offset.p1.x=seg.p1.x-uy;offset.p1.y=seg.p1.y+ux;};OffsetSegmentGenerator.prototype.addFilletArc=function addFilletArc(p,startAngle,endAngle,direction,radius){var this$1=this;var directionFactor=direction===CGAlgorithms.CLOCKWISE?-1:1;var totalAngle=Math.abs(startAngle-endAngle);var nSegs=Math.trunc(totalAngle/this._filletAngleQuantum+0.5);if(nSegs<1){return null;}var initAngle=0.0;var currAngleInc=totalAngle/nSegs;var currAngle=initAngle;var pt=new Coordinate();while(currAngle<totalAngle){var angle=startAngle+directionFactor*currAngle;pt.x=p.x+radius*Math.cos(angle);pt.y=p.y+radius*Math.sin(angle);this$1._segList.addPt(pt);currAngle+=currAngleInc;}};OffsetSegmentGenerator.prototype.addInsideTurn=function addInsideTurn(orientation,addStartPoint){this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1);if(this._li.hasIntersection()){this._segList.addPt(this._li.getIntersection(0));}else{this._hasNarrowConcaveAngle=true;if(this._offset0.p1.distance(this._offset1.p0)<this._distance*OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR){this._segList.addPt(this._offset0.p1);}else{this._segList.addPt(this._offset0.p1);if(this._closingSegLengthFactor>0){var mid0=new Coordinate((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(mid0);var mid1=new Coordinate((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(mid1);}else{this._segList.addPt(this._s1);}this._segList.addPt(this._offset1.p0);}}};OffsetSegmentGenerator.prototype.createCircle=function createCircle(p){var pt=new Coordinate(p.x+this._distance,p.y);this._segList.addPt(pt);this.addFilletArc(p,0.0,2.0*Math.PI,-1,this._distance);this._segList.closeRing();};OffsetSegmentGenerator.prototype.addBevelJoin=function addBevelJoin(offset0,offset1){this._segList.addPt(offset0.p1);this._segList.addPt(offset1.p0);};OffsetSegmentGenerator.prototype.init=function init(distance){this._distance=distance;this._maxCurveSegmentError=distance*(1-Math.cos(this._filletAngleQuantum/2.0));this._segList=new OffsetSegmentString();this._segList.setPrecisionModel(this._precisionModel);this._segList.setMinimumVertexDistance(distance*OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR);};OffsetSegmentGenerator.prototype.addCollinear=function addCollinear(addStartPoint){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2);var numInt=this._li.getIntersectionNum();if(numInt>=2){if(this._bufParams.getJoinStyle()===BufferParameters.JOIN_BEVEL||this._bufParams.getJoinStyle()===BufferParameters.JOIN_MITRE){if(addStartPoint){this._segList.addPt(this._offset0.p1);}this._segList.addPt(this._offset1.p0);}else{this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,CGAlgorithms.CLOCKWISE,this._distance);}}};OffsetSegmentGenerator.prototype.closeRing=function closeRing(){this._segList.closeRing();};OffsetSegmentGenerator.prototype.hasNarrowConcaveAngle=function hasNarrowConcaveAngle(){return this._hasNarrowConcaveAngle;};OffsetSegmentGenerator.prototype.interfaces_=function interfaces_(){return [];};OffsetSegmentGenerator.prototype.getClass=function getClass(){return OffsetSegmentGenerator;};staticAccessors$27.OFFSET_SEGMENT_SEPARATION_FACTOR.get=function(){return 1.0E-3;};staticAccessors$27.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return 1.0E-3;};staticAccessors$27.CURVE_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return 1.0E-6;};staticAccessors$27.MAX_CLOSING_SEG_LEN_FACTOR.get=function(){return 80;};Object.defineProperties(OffsetSegmentGenerator,staticAccessors$27);var OffsetCurveBuilder=function OffsetCurveBuilder(){this._distance=0.0;this._precisionModel=null;this._bufParams=null;var precisionModel=arguments[0];var bufParams=arguments[1];this._precisionModel=precisionModel;this._bufParams=bufParams;};OffsetCurveBuilder.prototype.getOffsetCurve=function getOffsetCurve(inputPts,distance){this._distance=distance;if(distance===0.0){return null;}var isRightSide=distance<0.0;var posDistance=Math.abs(distance);var segGen=this.getSegGen(posDistance);if(inputPts.length<=1){this.computePointCurve(inputPts[0],segGen);}else{this.computeOffsetCurve(inputPts,isRightSide,segGen);}var curvePts=segGen.getCoordinates();if(isRightSide){CoordinateArrays.reverse(curvePts);}return curvePts;};OffsetCurveBuilder.prototype.computeSingleSidedBufferCurve=function computeSingleSidedBufferCurve(inputPts,isRightSide,segGen){var distTol=this.simplifyTolerance(this._distance);if(isRightSide){segGen.addSegments(inputPts,true);var simp2=BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],Position.LEFT);segGen.addFirstSegment();for(var i=n2-2;i>=0;i--){segGen.addNextSegment(simp2[i],true);}}else{segGen.addSegments(inputPts,false);var simp1=BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],Position.LEFT);segGen.addFirstSegment();for(var i$1=2;i$1<=n1;i$1++){segGen.addNextSegment(simp1[i$1],true);}}segGen.addLastSegment();segGen.closeRing();};OffsetCurveBuilder.prototype.computeRingBufferCurve=function computeRingBufferCurve(inputPts,side,segGen){var distTol=this.simplifyTolerance(this._distance);if(side===Position.RIGHT){distTol=-distTol;}var simp=BufferInputLineSimplifier.simplify(inputPts,distTol);var n=simp.length-1;segGen.initSideSegments(simp[n-1],simp[0],side);for(var i=1;i<=n;i++){var addStartPoint=i!==1;segGen.addNextSegment(simp[i],addStartPoint);}segGen.closeRing();};OffsetCurveBuilder.prototype.computeLineBufferCurve=function computeLineBufferCurve(inputPts,segGen){var distTol=this.simplifyTolerance(this._distance);var simp1=BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],Position.LEFT);for(var i=2;i<=n1;i++){segGen.addNextSegment(simp1[i],true);}segGen.addLastSegment();segGen.addLineEndCap(simp1[n1-1],simp1[n1]);var simp2=BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],Position.LEFT);for(var i$1=n2-2;i$1>=0;i$1--){segGen.addNextSegment(simp2[i$1],true);}segGen.addLastSegment();segGen.addLineEndCap(simp2[1],simp2[0]);segGen.closeRing();};OffsetCurveBuilder.prototype.computePointCurve=function computePointCurve(pt,segGen){switch(this._bufParams.getEndCapStyle()){case BufferParameters.CAP_ROUND:segGen.createCircle(pt);break;case BufferParameters.CAP_SQUARE:segGen.createSquare(pt);break;default:}};OffsetCurveBuilder.prototype.getLineCurve=function getLineCurve(inputPts,distance){this._distance=distance;if(distance<0.0&&!this._bufParams.isSingleSided()){return null;}if(distance===0.0){return null;}var posDistance=Math.abs(distance);var segGen=this.getSegGen(posDistance);if(inputPts.length<=1){this.computePointCurve(inputPts[0],segGen);}else{if(this._bufParams.isSingleSided()){var isRightSide=distance<0.0;this.computeSingleSidedBufferCurve(inputPts,isRightSide,segGen);}else{this.computeLineBufferCurve(inputPts,segGen);}}var lineCoord=segGen.getCoordinates();return lineCoord;};OffsetCurveBuilder.prototype.getBufferParameters=function getBufferParameters(){return this._bufParams;};OffsetCurveBuilder.prototype.simplifyTolerance=function simplifyTolerance(bufDistance){return bufDistance*this._bufParams.getSimplifyFactor();};OffsetCurveBuilder.prototype.getRingCurve=function getRingCurve(inputPts,side,distance){this._distance=distance;if(inputPts.length<=2){return this.getLineCurve(inputPts,distance);}if(distance===0.0){return OffsetCurveBuilder.copyCoordinates(inputPts);}var segGen=this.getSegGen(distance);this.computeRingBufferCurve(inputPts,side,segGen);return segGen.getCoordinates();};OffsetCurveBuilder.prototype.computeOffsetCurve=function computeOffsetCurve(inputPts,isRightSide,segGen){var distTol=this.simplifyTolerance(this._distance);if(isRightSide){var simp2=BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],Position.LEFT);segGen.addFirstSegment();for(var i=n2-2;i>=0;i--){segGen.addNextSegment(simp2[i],true);}}else{var simp1=BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],Position.LEFT);segGen.addFirstSegment();for(var i$1=2;i$1<=n1;i$1++){segGen.addNextSegment(simp1[i$1],true);}}segGen.addLastSegment();};OffsetCurveBuilder.prototype.getSegGen=function getSegGen(distance){return new OffsetSegmentGenerator(this._precisionModel,this._bufParams,distance);};OffsetCurveBuilder.prototype.interfaces_=function interfaces_(){return [];};OffsetCurveBuilder.prototype.getClass=function getClass(){return OffsetCurveBuilder;};OffsetCurveBuilder.copyCoordinates=function copyCoordinates(pts){var copy=new Array(pts.length).fill(null);for(var i=0;i<copy.length;i++){copy[i]=new Coordinate(pts[i]);}return copy;};var SubgraphDepthLocater=function SubgraphDepthLocater(){this._subgraphs=null;this._seg=new LineSegment();this._cga=new CGAlgorithms();var subgraphs=arguments[0];this._subgraphs=subgraphs;};var staticAccessors$30={DepthSegment:{configurable:true}};SubgraphDepthLocater.prototype.findStabbedSegments=function findStabbedSegments(){var this$1=this;if(arguments.length===1){var stabbingRayLeftPt=arguments[0];var stabbedSegments=new ArrayList();for(var i=this._subgraphs.iterator();i.hasNext();){var bsg=i.next();var env=bsg.getEnvelope();if(stabbingRayLeftPt.y<env.getMinY()||stabbingRayLeftPt.y>env.getMaxY()){continue;}this$1.findStabbedSegments(stabbingRayLeftPt,bsg.getDirectedEdges(),stabbedSegments);}return stabbedSegments;}else if(arguments.length===3){if(hasInterface(arguments[2],List)&&arguments[0]instanceof Coordinate&&arguments[1]instanceof DirectedEdge){var stabbingRayLeftPt$1=arguments[0];var dirEdge=arguments[1];var stabbedSegments$1=arguments[2];var pts=dirEdge.getEdge().getCoordinates();for(var i$1=0;i$1<pts.length-1;i$1++){this$1._seg.p0=pts[i$1];this$1._seg.p1=pts[i$1+1];if(this$1._seg.p0.y>this$1._seg.p1.y){this$1._seg.reverse();}var maxx=Math.max(this$1._seg.p0.x,this$1._seg.p1.x);if(maxx<stabbingRayLeftPt$1.x){continue;}if(this$1._seg.isHorizontal()){continue;}if(stabbingRayLeftPt$1.y<this$1._seg.p0.y||stabbingRayLeftPt$1.y>this$1._seg.p1.y){continue;}if(CGAlgorithms.computeOrientation(this$1._seg.p0,this$1._seg.p1,stabbingRayLeftPt$1)===CGAlgorithms.RIGHT){continue;}var depth=dirEdge.getDepth(Position.LEFT);if(!this$1._seg.p0.equals(pts[i$1])){depth=dirEdge.getDepth(Position.RIGHT);}var ds=new DepthSegment(this$1._seg,depth);stabbedSegments$1.add(ds);}}else if(hasInterface(arguments[2],List)&&arguments[0]instanceof Coordinate&&hasInterface(arguments[1],List)){var stabbingRayLeftPt$2=arguments[0];var dirEdges=arguments[1];var stabbedSegments$2=arguments[2];for(var i$2=dirEdges.iterator();i$2.hasNext();){var de=i$2.next();if(!de.isForward()){continue;}this$1.findStabbedSegments(stabbingRayLeftPt$2,de,stabbedSegments$2);}}}};SubgraphDepthLocater.prototype.getDepth=function getDepth(p){var stabbedSegments=this.findStabbedSegments(p);if(stabbedSegments.size()===0){return 0;}var ds=Collections.min(stabbedSegments);return ds._leftDepth;};SubgraphDepthLocater.prototype.interfaces_=function interfaces_(){return [];};SubgraphDepthLocater.prototype.getClass=function getClass(){return SubgraphDepthLocater;};staticAccessors$30.DepthSegment.get=function(){return DepthSegment;};Object.defineProperties(SubgraphDepthLocater,staticAccessors$30);var DepthSegment=function DepthSegment(){this._upwardSeg=null;this._leftDepth=null;var seg=arguments[0];var depth=arguments[1];this._upwardSeg=new LineSegment(seg);this._leftDepth=depth;};DepthSegment.prototype.compareTo=function compareTo(obj){var other=obj;if(this._upwardSeg.minX()>=other._upwardSeg.maxX()){return 1;}if(this._upwardSeg.maxX()<=other._upwardSeg.minX()){return -1;}var orientIndex=this._upwardSeg.orientationIndex(other._upwardSeg);if(orientIndex!==0){return orientIndex;}orientIndex=-1*other._upwardSeg.orientationIndex(this._upwardSeg);if(orientIndex!==0){return orientIndex;}return this._upwardSeg.compareTo(other._upwardSeg);};DepthSegment.prototype.compareX=function compareX(seg0,seg1){var compare0=seg0.p0.compareTo(seg1.p0);if(compare0!==0){return compare0;}return seg0.p1.compareTo(seg1.p1);};DepthSegment.prototype.toString=function toString(){return this._upwardSeg.toString();};DepthSegment.prototype.interfaces_=function interfaces_(){return [Comparable];};DepthSegment.prototype.getClass=function getClass(){return DepthSegment;};var Triangle=function Triangle(p0,p1,p2){this.p0=p0||null;this.p1=p1||null;this.p2=p2||null;};Triangle.prototype.area=function area(){return Triangle.area(this.p0,this.p1,this.p2);};Triangle.prototype.signedArea=function signedArea(){return Triangle.signedArea(this.p0,this.p1,this.p2);};Triangle.prototype.interpolateZ=function interpolateZ(p){if(p===null){throw new IllegalArgumentException('Supplied point is null.');}return Triangle.interpolateZ(p,this.p0,this.p1,this.p2);};Triangle.prototype.longestSideLength=function longestSideLength(){return Triangle.longestSideLength(this.p0,this.p1,this.p2);};Triangle.prototype.isAcute=function isAcute(){return Triangle.isAcute(this.p0,this.p1,this.p2);};Triangle.prototype.circumcentre=function circumcentre(){return Triangle.circumcentre(this.p0,this.p1,this.p2);};Triangle.prototype.area3D=function area3D(){return Triangle.area3D(this.p0,this.p1,this.p2);};Triangle.prototype.centroid=function centroid(){return Triangle.centroid(this.p0,this.p1,this.p2);};Triangle.prototype.inCentre=function inCentre(){return Triangle.inCentre(this.p0,this.p1,this.p2);};Triangle.prototype.interfaces_=function interfaces_(){return [];};Triangle.prototype.getClass=function getClass(){return Triangle;};Triangle.area=function area(a,b,c){return Math.abs(((c.x-a.x)*(b.y-a.y)-(b.x-a.x)*(c.y-a.y))/2);};Triangle.signedArea=function signedArea(a,b,c){return ((c.x-a.x)*(b.y-a.y)-(b.x-a.x)*(c.y-a.y))/2;};Triangle.det=function det(m00,m01,m10,m11){return m00*m11-m01*m10;};Triangle.interpolateZ=function interpolateZ(p,v0,v1,v2){var x0=v0.x;var y0=v0.y;var a=v1.x-x0;var b=v2.x-x0;var c=v1.y-y0;var d=v2.y-y0;var det=a*d-b*c;var dx=p.x-x0;var dy=p.y-y0;var t=(d*dx-b*dy)/det;var u=(-c*dx+a*dy)/det;var z=v0.z+t*(v1.z-v0.z)+u*(v2.z-v0.z);return z;};Triangle.longestSideLength=function longestSideLength(a,b,c){var lenAB=a.distance(b);var lenBC=b.distance(c);var lenCA=c.distance(a);var maxLen=lenAB;if(lenBC>maxLen){maxLen=lenBC;}if(lenCA>maxLen){maxLen=lenCA;}return maxLen;};Triangle.isAcute=function isAcute(a,b,c){if(!Angle.isAcute(a,b,c)){return false;}if(!Angle.isAcute(b,c,a)){return false;}if(!Angle.isAcute(c,a,b)){return false;}return true;};Triangle.circumcentre=function circumcentre(a,b,c){var cx=c.x;var cy=c.y;var ax=a.x-cx;var ay=a.y-cy;var bx=b.x-cx;var by=b.y-cy;var denom=2*Triangle.det(ax,ay,bx,by);var numx=Triangle.det(ay,ax*ax+ay*ay,by,bx*bx+by*by);var numy=Triangle.det(ax,ax*ax+ay*ay,bx,bx*bx+by*by);var ccx=cx-numx/denom;var ccy=cy+numy/denom;return new Coordinate(ccx,ccy);};Triangle.perpendicularBisector=function perpendicularBisector(a,b){var dx=b.x-a.x;var dy=b.y-a.y;var l1=new HCoordinate(a.x+dx/2.0,a.y+dy/2.0,1.0);var l2=new HCoordinate(a.x-dy+dx/2.0,a.y+dx+dy/2.0,1.0);return new HCoordinate(l1,l2);};Triangle.angleBisector=function angleBisector(a,b,c){var len0=b.distance(a);var len2=b.distance(c);var frac=len0/(len0+len2);var dx=c.x-a.x;var dy=c.y-a.y;var splitPt=new Coordinate(a.x+frac*dx,a.y+frac*dy);return splitPt;};Triangle.area3D=function area3D(a,b,c){var ux=b.x-a.x;var uy=b.y-a.y;var uz=b.z-a.z;var vx=c.x-a.x;var vy=c.y-a.y;var vz=c.z-a.z;var crossx=uy*vz-uz*vy;var crossy=uz*vx-ux*vz;var crossz=ux*vy-uy*vx;var absSq=crossx*crossx+crossy*crossy+crossz*crossz;var area3D=Math.sqrt(absSq)/2;return area3D;};Triangle.centroid=function centroid(a,b,c){var x=(a.x+b.x+c.x)/3;var y=(a.y+b.y+c.y)/3;return new Coordinate(x,y);};Triangle.inCentre=function inCentre(a,b,c){var len0=b.distance(c);var len1=a.distance(c);var len2=a.distance(b);var circum=len0+len1+len2;var inCentreX=(len0*a.x+len1*b.x+len2*c.x)/circum;var inCentreY=(len0*a.y+len1*b.y+len2*c.y)/circum;return new Coordinate(inCentreX,inCentreY);};var OffsetCurveSetBuilder=function OffsetCurveSetBuilder(){this._inputGeom=null;this._distance=null;this._curveBuilder=null;this._curveList=new ArrayList();var inputGeom=arguments[0];var distance=arguments[1];var curveBuilder=arguments[2];this._inputGeom=inputGeom;this._distance=distance;this._curveBuilder=curveBuilder;};OffsetCurveSetBuilder.prototype.addPoint=function addPoint(p){if(this._distance<=0.0){return null;}var coord=p.getCoordinates();var curve=this._curveBuilder.getLineCurve(coord,this._distance);this.addCurve(curve,Location.EXTERIOR,Location.INTERIOR);};OffsetCurveSetBuilder.prototype.addPolygon=function addPolygon(p){var this$1=this;var offsetDistance=this._distance;var offsetSide=Position.LEFT;if(this._distance<0.0){offsetDistance=-this._distance;offsetSide=Position.RIGHT;}var shell=p.getExteriorRing();var shellCoord=CoordinateArrays.removeRepeatedPoints(shell.getCoordinates());if(this._distance<0.0&&this.isErodedCompletely(shell,this._distance)){return null;}if(this._distance<=0.0&&shellCoord.length<3){return null;}this.addPolygonRing(shellCoord,offsetDistance,offsetSide,Location.EXTERIOR,Location.INTERIOR);for(var i=0;i<p.getNumInteriorRing();i++){var hole=p.getInteriorRingN(i);var holeCoord=CoordinateArrays.removeRepeatedPoints(hole.getCoordinates());if(this$1._distance>0.0&&this$1.isErodedCompletely(hole,-this$1._distance)){continue;}this$1.addPolygonRing(holeCoord,offsetDistance,Position.opposite(offsetSide),Location.INTERIOR,Location.EXTERIOR);}};OffsetCurveSetBuilder.prototype.isTriangleErodedCompletely=function isTriangleErodedCompletely(triangleCoord,bufferDistance){var tri=new Triangle(triangleCoord[0],triangleCoord[1],triangleCoord[2]);var inCentre=tri.inCentre();var distToCentre=CGAlgorithms.distancePointLine(inCentre,tri.p0,tri.p1);return distToCentre<Math.abs(bufferDistance);};OffsetCurveSetBuilder.prototype.addLineString=function addLineString(line){if(this._distance<=0.0&&!this._curveBuilder.getBufferParameters().isSingleSided()){return null;}var coord=CoordinateArrays.removeRepeatedPoints(line.getCoordinates());var curve=this._curveBuilder.getLineCurve(coord,this._distance);this.addCurve(curve,Location.EXTERIOR,Location.INTERIOR);};OffsetCurveSetBuilder.prototype.addCurve=function addCurve(coord,leftLoc,rightLoc){if(coord===null||coord.length<2){return null;}var e=new NodedSegmentString(coord,new Label(0,Location.BOUNDARY,leftLoc,rightLoc));this._curveList.add(e);};OffsetCurveSetBuilder.prototype.getCurves=function getCurves(){this.add(this._inputGeom);return this._curveList;};OffsetCurveSetBuilder.prototype.addPolygonRing=function addPolygonRing(coord,offsetDistance,side,cwLeftLoc,cwRightLoc){if(offsetDistance===0.0&&coord.length<LinearRing.MINIMUM_VALID_SIZE){return null;}var leftLoc=cwLeftLoc;var rightLoc=cwRightLoc;if(coord.length>=LinearRing.MINIMUM_VALID_SIZE&&CGAlgorithms.isCCW(coord)){leftLoc=cwRightLoc;rightLoc=cwLeftLoc;side=Position.opposite(side);}var curve=this._curveBuilder.getRingCurve(coord,side,offsetDistance);this.addCurve(curve,leftLoc,rightLoc);};OffsetCurveSetBuilder.prototype.add=function add(g){if(g.isEmpty()){return null;}if(g instanceof Polygon){this.addPolygon(g);}else if(g instanceof LineString){this.addLineString(g);}else if(g instanceof Point){this.addPoint(g);}else if(g instanceof MultiPoint){this.addCollection(g);}else if(g instanceof MultiLineString){this.addCollection(g);}else if(g instanceof MultiPolygon){this.addCollection(g);}else if(g instanceof GeometryCollection){this.addCollection(g);}// else throw new UnsupportedOperationException(g.getClass().getName())
    };OffsetCurveSetBuilder.prototype.isErodedCompletely=function isErodedCompletely(ring,bufferDistance){var ringCoord=ring.getCoordinates();// const minDiam = 0.0
    if(ringCoord.length<4){return bufferDistance<0;}if(ringCoord.length===4){return this.isTriangleErodedCompletely(ringCoord,bufferDistance);}var env=ring.getEnvelopeInternal();var envMinDimension=Math.min(env.getHeight(),env.getWidth());if(bufferDistance<0.0&&2*Math.abs(bufferDistance)>envMinDimension){return true;}return false;};OffsetCurveSetBuilder.prototype.addCollection=function addCollection(gc){var this$1=this;for(var i=0;i<gc.getNumGeometries();i++){var g=gc.getGeometryN(i);this$1.add(g);}};OffsetCurveSetBuilder.prototype.interfaces_=function interfaces_(){return [];};OffsetCurveSetBuilder.prototype.getClass=function getClass(){return OffsetCurveSetBuilder;};var PointOnGeometryLocator=function PointOnGeometryLocator(){};PointOnGeometryLocator.prototype.locate=function locate(p){};PointOnGeometryLocator.prototype.interfaces_=function interfaces_(){return [];};PointOnGeometryLocator.prototype.getClass=function getClass(){return PointOnGeometryLocator;};var GeometryCollectionIterator=function GeometryCollectionIterator(){this._parent=null;this._atStart=null;this._max=null;this._index=null;this._subcollectionIterator=null;var parent=arguments[0];this._parent=parent;this._atStart=true;this._index=0;this._max=parent.getNumGeometries();};GeometryCollectionIterator.prototype.next=function next(){if(this._atStart){this._atStart=false;if(GeometryCollectionIterator.isAtomic(this._parent)){this._index++;}return this._parent;}if(this._subcollectionIterator!==null){if(this._subcollectionIterator.hasNext()){return this._subcollectionIterator.next();}else{this._subcollectionIterator=null;}}if(this._index>=this._max){throw new NoSuchElementException();}var obj=this._parent.getGeometryN(this._index++);if(obj instanceof GeometryCollection){this._subcollectionIterator=new GeometryCollectionIterator(obj);return this._subcollectionIterator.next();}return obj;};GeometryCollectionIterator.prototype.remove=function remove(){throw new Error(this.getClass().getName());};GeometryCollectionIterator.prototype.hasNext=function hasNext(){if(this._atStart){return true;}if(this._subcollectionIterator!==null){if(this._subcollectionIterator.hasNext()){return true;}this._subcollectionIterator=null;}if(this._index>=this._max){return false;}return true;};GeometryCollectionIterator.prototype.interfaces_=function interfaces_(){return [Iterator];};GeometryCollectionIterator.prototype.getClass=function getClass(){return GeometryCollectionIterator;};GeometryCollectionIterator.isAtomic=function isAtomic(geom){return !(geom instanceof GeometryCollection);};var SimplePointInAreaLocator=function SimplePointInAreaLocator(){this._geom=null;var geom=arguments[0];this._geom=geom;};SimplePointInAreaLocator.prototype.locate=function locate(p){return SimplePointInAreaLocator.locate(p,this._geom);};SimplePointInAreaLocator.prototype.interfaces_=function interfaces_(){return [PointOnGeometryLocator];};SimplePointInAreaLocator.prototype.getClass=function getClass(){return SimplePointInAreaLocator;};SimplePointInAreaLocator.isPointInRing=function isPointInRing(p,ring){if(!ring.getEnvelopeInternal().intersects(p)){return false;}return CGAlgorithms.isPointInRing(p,ring.getCoordinates());};SimplePointInAreaLocator.containsPointInPolygon=function containsPointInPolygon(p,poly){if(poly.isEmpty()){return false;}var shell=poly.getExteriorRing();if(!SimplePointInAreaLocator.isPointInRing(p,shell)){return false;}for(var i=0;i<poly.getNumInteriorRing();i++){var hole=poly.getInteriorRingN(i);if(SimplePointInAreaLocator.isPointInRing(p,hole)){return false;}}return true;};SimplePointInAreaLocator.containsPoint=function containsPoint(p,geom){if(geom instanceof Polygon){return SimplePointInAreaLocator.containsPointInPolygon(p,geom);}else if(geom instanceof GeometryCollection){var geomi=new GeometryCollectionIterator(geom);while(geomi.hasNext()){var g2=geomi.next();if(g2!==geom){if(SimplePointInAreaLocator.containsPoint(p,g2)){return true;}}}}return false;};SimplePointInAreaLocator.locate=function locate(p,geom){if(geom.isEmpty()){return Location.EXTERIOR;}if(SimplePointInAreaLocator.containsPoint(p,geom)){return Location.INTERIOR;}return Location.EXTERIOR;};var EdgeEndStar=function EdgeEndStar(){this._edgeMap=new TreeMap();this._edgeList=null;this._ptInAreaLocation=[Location.NONE,Location.NONE];};EdgeEndStar.prototype.getNextCW=function getNextCW(ee){this.getEdges();var i=this._edgeList.indexOf(ee);var iNextCW=i-1;if(i===0){iNextCW=this._edgeList.size()-1;}return this._edgeList.get(iNextCW);};EdgeEndStar.prototype.propagateSideLabels=function propagateSideLabels(geomIndex){var startLoc=Location.NONE;for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();if(label.isArea(geomIndex)&&label.getLocation(geomIndex,Position.LEFT)!==Location.NONE){startLoc=label.getLocation(geomIndex,Position.LEFT);}}if(startLoc===Location.NONE){return null;}var currLoc=startLoc;for(var it$1=this.iterator();it$1.hasNext();){var e$1=it$1.next();var label$1=e$1.getLabel();if(label$1.getLocation(geomIndex,Position.ON)===Location.NONE){label$1.setLocation(geomIndex,Position.ON,currLoc);}if(label$1.isArea(geomIndex)){var leftLoc=label$1.getLocation(geomIndex,Position.LEFT);var rightLoc=label$1.getLocation(geomIndex,Position.RIGHT);if(rightLoc!==Location.NONE){if(rightLoc!==currLoc){throw new TopologyException('side location conflict',e$1.getCoordinate());}if(leftLoc===Location.NONE){Assert.shouldNeverReachHere('found single null side (at '+e$1.getCoordinate()+')');}currLoc=leftLoc;}else{Assert.isTrue(label$1.getLocation(geomIndex,Position.LEFT)===Location.NONE,'found single null side');label$1.setLocation(geomIndex,Position.RIGHT,currLoc);label$1.setLocation(geomIndex,Position.LEFT,currLoc);}}}};EdgeEndStar.prototype.getCoordinate=function getCoordinate(){var it=this.iterator();if(!it.hasNext()){return null;}var e=it.next();return e.getCoordinate();};EdgeEndStar.prototype.print=function print(out){System.out.println('EdgeEndStar:   '+this.getCoordinate());for(var it=this.iterator();it.hasNext();){var e=it.next();e.print(out);}};EdgeEndStar.prototype.isAreaLabelsConsistent=function isAreaLabelsConsistent(geomGraph){this.computeEdgeEndLabels(geomGraph.getBoundaryNodeRule());return this.checkAreaLabelsConsistent(0);};EdgeEndStar.prototype.checkAreaLabelsConsistent=function checkAreaLabelsConsistent(geomIndex){var edges=this.getEdges();if(edges.size()<=0){return true;}var lastEdgeIndex=edges.size()-1;var startLabel=edges.get(lastEdgeIndex).getLabel();var startLoc=startLabel.getLocation(geomIndex,Position.LEFT);Assert.isTrue(startLoc!==Location.NONE,'Found unlabelled area edge');var currLoc=startLoc;for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();Assert.isTrue(label.isArea(geomIndex),'Found non-area edge');var leftLoc=label.getLocation(geomIndex,Position.LEFT);var rightLoc=label.getLocation(geomIndex,Position.RIGHT);if(leftLoc===rightLoc){return false;}if(rightLoc!==currLoc){return false;}currLoc=leftLoc;}return true;};EdgeEndStar.prototype.findIndex=function findIndex(eSearch){var this$1=this;this.iterator();for(var i=0;i<this._edgeList.size();i++){var e=this$1._edgeList.get(i);if(e===eSearch){return i;}}return -1;};EdgeEndStar.prototype.iterator=function iterator(){return this.getEdges().iterator();};EdgeEndStar.prototype.getEdges=function getEdges(){if(this._edgeList===null){this._edgeList=new ArrayList(this._edgeMap.values());}return this._edgeList;};EdgeEndStar.prototype.getLocation=function getLocation(geomIndex,p,geom){if(this._ptInAreaLocation[geomIndex]===Location.NONE){this._ptInAreaLocation[geomIndex]=SimplePointInAreaLocator.locate(p,geom[geomIndex].getGeometry());}return this._ptInAreaLocation[geomIndex];};EdgeEndStar.prototype.toString=function toString(){var buf=new StringBuffer();buf.append('EdgeEndStar:   '+this.getCoordinate());buf.append('\n');for(var it=this.iterator();it.hasNext();){var e=it.next();buf.append(e);buf.append('\n');}return buf.toString();};EdgeEndStar.prototype.computeEdgeEndLabels=function computeEdgeEndLabels(boundaryNodeRule){for(var it=this.iterator();it.hasNext();){var ee=it.next();ee.computeLabel(boundaryNodeRule);}};EdgeEndStar.prototype.computeLabelling=function computeLabelling(geomGraph){var this$1=this;this.computeEdgeEndLabels(geomGraph[0].getBoundaryNodeRule());this.propagateSideLabels(0);this.propagateSideLabels(1);var hasDimensionalCollapseEdge=[false,false];for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();for(var geomi=0;geomi<2;geomi++){if(label.isLine(geomi)&&label.getLocation(geomi)===Location.BOUNDARY){hasDimensionalCollapseEdge[geomi]=true;}}}for(var it$1=this.iterator();it$1.hasNext();){var e$1=it$1.next();var label$1=e$1.getLabel();for(var geomi$1=0;geomi$1<2;geomi$1++){if(label$1.isAnyNull(geomi$1)){var loc=Location.NONE;if(hasDimensionalCollapseEdge[geomi$1]){loc=Location.EXTERIOR;}else{var p=e$1.getCoordinate();loc=this$1.getLocation(geomi$1,p,geomGraph);}label$1.setAllLocationsIfNull(geomi$1,loc);}}}};EdgeEndStar.prototype.getDegree=function getDegree(){return this._edgeMap.size();};EdgeEndStar.prototype.insertEdgeEnd=function insertEdgeEnd(e,obj){this._edgeMap.put(e,obj);this._edgeList=null;};EdgeEndStar.prototype.interfaces_=function interfaces_(){return [];};EdgeEndStar.prototype.getClass=function getClass(){return EdgeEndStar;};var DirectedEdgeStar=function(EdgeEndStar$$1){function DirectedEdgeStar(){EdgeEndStar$$1.call(this);this._resultAreaEdgeList=null;this._label=null;this._SCANNING_FOR_INCOMING=1;this._LINKING_TO_OUTGOING=2;}if(EdgeEndStar$$1)DirectedEdgeStar.__proto__=EdgeEndStar$$1;DirectedEdgeStar.prototype=Object.create(EdgeEndStar$$1&&EdgeEndStar$$1.prototype);DirectedEdgeStar.prototype.constructor=DirectedEdgeStar;DirectedEdgeStar.prototype.linkResultDirectedEdges=function linkResultDirectedEdges(){var this$1=this;this.getResultAreaEdges();var firstOut=null;var incoming=null;var state=this._SCANNING_FOR_INCOMING;for(var i=0;i<this._resultAreaEdgeList.size();i++){var nextOut=this$1._resultAreaEdgeList.get(i);var nextIn=nextOut.getSym();if(!nextOut.getLabel().isArea()){continue;}if(firstOut===null&&nextOut.isInResult()){firstOut=nextOut;}switch(state){case this$1._SCANNING_FOR_INCOMING:if(!nextIn.isInResult()){continue;}incoming=nextIn;state=this$1._LINKING_TO_OUTGOING;break;case this$1._LINKING_TO_OUTGOING:if(!nextOut.isInResult()){continue;}incoming.setNext(nextOut);state=this$1._SCANNING_FOR_INCOMING;break;default:}}if(state===this._LINKING_TO_OUTGOING){if(firstOut===null){throw new TopologyException('no outgoing dirEdge found',this.getCoordinate());}Assert.isTrue(firstOut.isInResult(),'unable to link last incoming dirEdge');incoming.setNext(firstOut);}};DirectedEdgeStar.prototype.insert=function insert(ee){var de=ee;this.insertEdgeEnd(de,de);};DirectedEdgeStar.prototype.getRightmostEdge=function getRightmostEdge(){var edges=this.getEdges();var size=edges.size();if(size<1){return null;}var de0=edges.get(0);if(size===1){return de0;}var deLast=edges.get(size-1);var quad0=de0.getQuadrant();var quad1=deLast.getQuadrant();if(Quadrant.isNorthern(quad0)&&Quadrant.isNorthern(quad1)){return de0;}else if(!Quadrant.isNorthern(quad0)&&!Quadrant.isNorthern(quad1)){return deLast;}else{// const nonHorizontalEdge = null
    if(de0.getDy()!==0){return de0;}else if(deLast.getDy()!==0){return deLast;}}Assert.shouldNeverReachHere('found two horizontal edges incident on node');return null;};DirectedEdgeStar.prototype.print=function print(out){System.out.println('DirectedEdgeStar: '+this.getCoordinate());for(var it=this.iterator();it.hasNext();){var de=it.next();out.print('out ');de.print(out);out.println();out.print('in ');de.getSym().print(out);out.println();}};DirectedEdgeStar.prototype.getResultAreaEdges=function getResultAreaEdges(){var this$1=this;if(this._resultAreaEdgeList!==null){return this._resultAreaEdgeList;}this._resultAreaEdgeList=new ArrayList();for(var it=this.iterator();it.hasNext();){var de=it.next();if(de.isInResult()||de.getSym().isInResult()){this$1._resultAreaEdgeList.add(de);}}return this._resultAreaEdgeList;};DirectedEdgeStar.prototype.updateLabelling=function updateLabelling(nodeLabel){for(var it=this.iterator();it.hasNext();){var de=it.next();var label=de.getLabel();label.setAllLocationsIfNull(0,nodeLabel.getLocation(0));label.setAllLocationsIfNull(1,nodeLabel.getLocation(1));}};DirectedEdgeStar.prototype.linkAllDirectedEdges=function linkAllDirectedEdges(){var this$1=this;this.getEdges();var prevOut=null;var firstIn=null;for(var i=this._edgeList.size()-1;i>=0;i--){var nextOut=this$1._edgeList.get(i);var nextIn=nextOut.getSym();if(firstIn===null){firstIn=nextIn;}if(prevOut!==null){nextIn.setNext(prevOut);}prevOut=nextOut;}firstIn.setNext(prevOut);};DirectedEdgeStar.prototype.computeDepths=function computeDepths(){var this$1=this;if(arguments.length===1){var de=arguments[0];var edgeIndex=this.findIndex(de);// const label = de.getLabel()
    var startDepth=de.getDepth(Position.LEFT);var targetLastDepth=de.getDepth(Position.RIGHT);var nextDepth=this.computeDepths(edgeIndex+1,this._edgeList.size(),startDepth);var lastDepth=this.computeDepths(0,edgeIndex,nextDepth);if(lastDepth!==targetLastDepth){throw new TopologyException('depth mismatch at '+de.getCoordinate());}}else if(arguments.length===3){var startIndex=arguments[0];var endIndex=arguments[1];var startDepth$1=arguments[2];var currDepth=startDepth$1;for(var i=startIndex;i<endIndex;i++){var nextDe=this$1._edgeList.get(i);// const label = nextDe.getLabel()
    nextDe.setEdgeDepths(Position.RIGHT,currDepth);currDepth=nextDe.getDepth(Position.LEFT);}return currDepth;}};DirectedEdgeStar.prototype.mergeSymLabels=function mergeSymLabels(){for(var it=this.iterator();it.hasNext();){var de=it.next();var label=de.getLabel();label.merge(de.getSym().getLabel());}};DirectedEdgeStar.prototype.linkMinimalDirectedEdges=function linkMinimalDirectedEdges(er){var this$1=this;var firstOut=null;var incoming=null;var state=this._SCANNING_FOR_INCOMING;for(var i=this._resultAreaEdgeList.size()-1;i>=0;i--){var nextOut=this$1._resultAreaEdgeList.get(i);var nextIn=nextOut.getSym();if(firstOut===null&&nextOut.getEdgeRing()===er){firstOut=nextOut;}switch(state){case this$1._SCANNING_FOR_INCOMING:if(nextIn.getEdgeRing()!==er){continue;}incoming=nextIn;state=this$1._LINKING_TO_OUTGOING;break;case this$1._LINKING_TO_OUTGOING:if(nextOut.getEdgeRing()!==er){continue;}incoming.setNextMin(nextOut);state=this$1._SCANNING_FOR_INCOMING;break;default:}}if(state===this._LINKING_TO_OUTGOING){Assert.isTrue(firstOut!==null,'found null for first outgoing dirEdge');Assert.isTrue(firstOut.getEdgeRing()===er,'unable to link last incoming dirEdge');incoming.setNextMin(firstOut);}};DirectedEdgeStar.prototype.getOutgoingDegree=function getOutgoingDegree(){if(arguments.length===0){var degree=0;for(var it=this.iterator();it.hasNext();){var de=it.next();if(de.isInResult()){degree++;}}return degree;}else if(arguments.length===1){var er=arguments[0];var degree$1=0;for(var it$1=this.iterator();it$1.hasNext();){var de$1=it$1.next();if(de$1.getEdgeRing()===er){degree$1++;}}return degree$1;}};DirectedEdgeStar.prototype.getLabel=function getLabel(){return this._label;};DirectedEdgeStar.prototype.findCoveredLineEdges=function findCoveredLineEdges(){var startLoc=Location.NONE;for(var it=this.iterator();it.hasNext();){var nextOut=it.next();var nextIn=nextOut.getSym();if(!nextOut.isLineEdge()){if(nextOut.isInResult()){startLoc=Location.INTERIOR;break;}if(nextIn.isInResult()){startLoc=Location.EXTERIOR;break;}}}if(startLoc===Location.NONE){return null;}var currLoc=startLoc;for(var it$1=this.iterator();it$1.hasNext();){var nextOut$1=it$1.next();var nextIn$1=nextOut$1.getSym();if(nextOut$1.isLineEdge()){nextOut$1.getEdge().setCovered(currLoc===Location.INTERIOR);}else{if(nextOut$1.isInResult()){currLoc=Location.EXTERIOR;}if(nextIn$1.isInResult()){currLoc=Location.INTERIOR;}}}};DirectedEdgeStar.prototype.computeLabelling=function computeLabelling(geom){var this$1=this;EdgeEndStar$$1.prototype.computeLabelling.call(this,geom);this._label=new Label(Location.NONE);for(var it=this.iterator();it.hasNext();){var ee=it.next();var e=ee.getEdge();var eLabel=e.getLabel();for(var i=0;i<2;i++){var eLoc=eLabel.getLocation(i);if(eLoc===Location.INTERIOR||eLoc===Location.BOUNDARY){this$1._label.setLocation(i,Location.INTERIOR);}}}};DirectedEdgeStar.prototype.interfaces_=function interfaces_(){return [];};DirectedEdgeStar.prototype.getClass=function getClass(){return DirectedEdgeStar;};return DirectedEdgeStar;}(EdgeEndStar);var OverlayNodeFactory=function(NodeFactory$$1){function OverlayNodeFactory(){NodeFactory$$1.apply(this,arguments);}if(NodeFactory$$1)OverlayNodeFactory.__proto__=NodeFactory$$1;OverlayNodeFactory.prototype=Object.create(NodeFactory$$1&&NodeFactory$$1.prototype);OverlayNodeFactory.prototype.constructor=OverlayNodeFactory;OverlayNodeFactory.prototype.createNode=function createNode(coord){return new Node(coord,new DirectedEdgeStar());};OverlayNodeFactory.prototype.interfaces_=function interfaces_(){return [];};OverlayNodeFactory.prototype.getClass=function getClass(){return OverlayNodeFactory;};return OverlayNodeFactory;}(NodeFactory);var OrientedCoordinateArray=function OrientedCoordinateArray(){this._pts=null;this._orientation=null;var pts=arguments[0];this._pts=pts;this._orientation=OrientedCoordinateArray.orientation(pts);};OrientedCoordinateArray.prototype.compareTo=function compareTo(o1){var oca=o1;var comp=OrientedCoordinateArray.compareOriented(this._pts,this._orientation,oca._pts,oca._orientation);return comp;};OrientedCoordinateArray.prototype.interfaces_=function interfaces_(){return [Comparable];};OrientedCoordinateArray.prototype.getClass=function getClass(){return OrientedCoordinateArray;};OrientedCoordinateArray.orientation=function orientation(pts){return CoordinateArrays.increasingDirection(pts)===1;};OrientedCoordinateArray.compareOriented=function compareOriented(pts1,orientation1,pts2,orientation2){var dir1=orientation1?1:-1;var dir2=orientation2?1:-1;var limit1=orientation1?pts1.length:-1;var limit2=orientation2?pts2.length:-1;var i1=orientation1?0:pts1.length-1;var i2=orientation2?0:pts2.length-1;// const comp = 0
    while(true){var compPt=pts1[i1].compareTo(pts2[i2]);if(compPt!==0){return compPt;}i1+=dir1;i2+=dir2;var done1=i1===limit1;var done2=i2===limit2;if(done1&&!done2){return -1;}if(!done1&&done2){return 1;}if(done1&&done2){return 0;}}};var EdgeList=function EdgeList(){this._edges=new ArrayList();this._ocaMap=new TreeMap();};EdgeList.prototype.print=function print(out){var this$1=this;out.print('MULTILINESTRING ( ');for(var j=0;j<this._edges.size();j++){var e=this$1._edges.get(j);if(j>0){out.print(',');}out.print('(');var pts=e.getCoordinates();for(var i=0;i<pts.length;i++){if(i>0){out.print(',');}out.print(pts[i].x+' '+pts[i].y);}out.println(')');}out.print(')  ');};EdgeList.prototype.addAll=function addAll(edgeColl){var this$1=this;for(var i=edgeColl.iterator();i.hasNext();){this$1.add(i.next());}};EdgeList.prototype.findEdgeIndex=function findEdgeIndex(e){var this$1=this;for(var i=0;i<this._edges.size();i++){if(this$1._edges.get(i).equals(e)){return i;}}return -1;};EdgeList.prototype.iterator=function iterator(){return this._edges.iterator();};EdgeList.prototype.getEdges=function getEdges(){return this._edges;};EdgeList.prototype.get=function get(i){return this._edges.get(i);};EdgeList.prototype.findEqualEdge=function findEqualEdge(e){var oca=new OrientedCoordinateArray(e.getCoordinates());var matchEdge=this._ocaMap.get(oca);return matchEdge;};EdgeList.prototype.add=function add(e){this._edges.add(e);var oca=new OrientedCoordinateArray(e.getCoordinates());this._ocaMap.put(oca,e);};EdgeList.prototype.interfaces_=function interfaces_(){return [];};EdgeList.prototype.getClass=function getClass(){return EdgeList;};var SegmentIntersector=function SegmentIntersector(){};SegmentIntersector.prototype.processIntersections=function processIntersections(e0,segIndex0,e1,segIndex1){};SegmentIntersector.prototype.isDone=function isDone(){};SegmentIntersector.prototype.interfaces_=function interfaces_(){return [];};SegmentIntersector.prototype.getClass=function getClass(){return SegmentIntersector;};var IntersectionAdder=function IntersectionAdder(){this._hasIntersection=false;this._hasProper=false;this._hasProperInterior=false;this._hasInterior=false;this._properIntersectionPoint=null;this._li=null;this._isSelfIntersection=null;this.numIntersections=0;this.numInteriorIntersections=0;this.numProperIntersections=0;this.numTests=0;var li=arguments[0];this._li=li;};IntersectionAdder.prototype.isTrivialIntersection=function isTrivialIntersection(e0,segIndex0,e1,segIndex1){if(e0===e1){if(this._li.getIntersectionNum()===1){if(IntersectionAdder.isAdjacentSegments(segIndex0,segIndex1)){return true;}if(e0.isClosed()){var maxSegIndex=e0.size()-1;if(segIndex0===0&&segIndex1===maxSegIndex||segIndex1===0&&segIndex0===maxSegIndex){return true;}}}}return false;};IntersectionAdder.prototype.getProperIntersectionPoint=function getProperIntersectionPoint(){return this._properIntersectionPoint;};IntersectionAdder.prototype.hasProperInteriorIntersection=function hasProperInteriorIntersection(){return this._hasProperInterior;};IntersectionAdder.prototype.getLineIntersector=function getLineIntersector(){return this._li;};IntersectionAdder.prototype.hasProperIntersection=function hasProperIntersection(){return this._hasProper;};IntersectionAdder.prototype.processIntersections=function processIntersections(e0,segIndex0,e1,segIndex1){if(e0===e1&&segIndex0===segIndex1){return null;}this.numTests++;var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){this.numIntersections++;if(this._li.isInteriorIntersection()){this.numInteriorIntersections++;this._hasInterior=true;}if(!this.isTrivialIntersection(e0,segIndex0,e1,segIndex1)){this._hasIntersection=true;e0.addIntersections(this._li,segIndex0,0);e1.addIntersections(this._li,segIndex1,1);if(this._li.isProper()){this.numProperIntersections++;this._hasProper=true;this._hasProperInterior=true;}}}};IntersectionAdder.prototype.hasIntersection=function hasIntersection(){return this._hasIntersection;};IntersectionAdder.prototype.isDone=function isDone(){return false;};IntersectionAdder.prototype.hasInteriorIntersection=function hasInteriorIntersection(){return this._hasInterior;};IntersectionAdder.prototype.interfaces_=function interfaces_(){return [SegmentIntersector];};IntersectionAdder.prototype.getClass=function getClass(){return IntersectionAdder;};IntersectionAdder.isAdjacentSegments=function isAdjacentSegments(i1,i2){return Math.abs(i1-i2)===1;};var EdgeIntersection=function EdgeIntersection(){this.coord=null;this.segmentIndex=null;this.dist=null;var coord=arguments[0];var segmentIndex=arguments[1];var dist=arguments[2];this.coord=new Coordinate(coord);this.segmentIndex=segmentIndex;this.dist=dist;};EdgeIntersection.prototype.getSegmentIndex=function getSegmentIndex(){return this.segmentIndex;};EdgeIntersection.prototype.getCoordinate=function getCoordinate(){return this.coord;};EdgeIntersection.prototype.print=function print(out){out.print(this.coord);out.print(' seg # = '+this.segmentIndex);out.println(' dist = '+this.dist);};EdgeIntersection.prototype.compareTo=function compareTo(obj){var other=obj;return this.compare(other.segmentIndex,other.dist);};EdgeIntersection.prototype.isEndPoint=function isEndPoint(maxSegmentIndex){if(this.segmentIndex===0&&this.dist===0.0){return true;}if(this.segmentIndex===maxSegmentIndex){return true;}return false;};EdgeIntersection.prototype.toString=function toString(){return this.coord+' seg # = '+this.segmentIndex+' dist = '+this.dist;};EdgeIntersection.prototype.getDistance=function getDistance(){return this.dist;};EdgeIntersection.prototype.compare=function compare(segmentIndex,dist){if(this.segmentIndex<segmentIndex){return -1;}if(this.segmentIndex>segmentIndex){return 1;}if(this.dist<dist){return -1;}if(this.dist>dist){return 1;}return 0;};EdgeIntersection.prototype.interfaces_=function interfaces_(){return [Comparable];};EdgeIntersection.prototype.getClass=function getClass(){return EdgeIntersection;};var EdgeIntersectionList=function EdgeIntersectionList(){this._nodeMap=new TreeMap();this.edge=null;var edge=arguments[0];this.edge=edge;};EdgeIntersectionList.prototype.print=function print(out){out.println('Intersections:');for(var it=this.iterator();it.hasNext();){var ei=it.next();ei.print(out);}};EdgeIntersectionList.prototype.iterator=function iterator(){return this._nodeMap.values().iterator();};EdgeIntersectionList.prototype.addSplitEdges=function addSplitEdges(edgeList){var this$1=this;this.addEndpoints();var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var newEdge=this$1.createSplitEdge(eiPrev,ei);edgeList.add(newEdge);eiPrev=ei;}};EdgeIntersectionList.prototype.addEndpoints=function addEndpoints(){var maxSegIndex=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0.0);this.add(this.edge.pts[maxSegIndex],maxSegIndex,0.0);};EdgeIntersectionList.prototype.createSplitEdge=function createSplitEdge(ei0,ei1){var this$1=this;var npts=ei1.segmentIndex-ei0.segmentIndex+2;var lastSegStartPt=this.edge.pts[ei1.segmentIndex];var useIntPt1=ei1.dist>0.0||!ei1.coord.equals2D(lastSegStartPt);if(!useIntPt1){npts--;}var pts=new Array(npts).fill(null);var ipt=0;pts[ipt++]=new Coordinate(ei0.coord);for(var i=ei0.segmentIndex+1;i<=ei1.segmentIndex;i++){pts[ipt++]=this$1.edge.pts[i];}if(useIntPt1){pts[ipt]=ei1.coord;}return new Edge(pts,new Label(this.edge._label));};EdgeIntersectionList.prototype.add=function add(intPt,segmentIndex,dist){var eiNew=new EdgeIntersection(intPt,segmentIndex,dist);var ei=this._nodeMap.get(eiNew);if(ei!==null){return ei;}this._nodeMap.put(eiNew,eiNew);return eiNew;};EdgeIntersectionList.prototype.isIntersection=function isIntersection(pt){for(var it=this.iterator();it.hasNext();){var ei=it.next();if(ei.coord.equals(pt)){return true;}}return false;};EdgeIntersectionList.prototype.interfaces_=function interfaces_(){return [];};EdgeIntersectionList.prototype.getClass=function getClass(){return EdgeIntersectionList;};var MonotoneChainIndexer=function MonotoneChainIndexer(){};MonotoneChainIndexer.prototype.getChainStartIndices=function getChainStartIndices(pts){var this$1=this;var start=0;var startIndexList=new ArrayList();startIndexList.add(new Integer(start));do{var last=this$1.findChainEnd(pts,start);startIndexList.add(new Integer(last));start=last;}while(start<pts.length-1);var startIndex=MonotoneChainIndexer.toIntArray(startIndexList);return startIndex;};MonotoneChainIndexer.prototype.findChainEnd=function findChainEnd(pts,start){var chainQuad=Quadrant.quadrant(pts[start],pts[start+1]);var last=start+1;while(last<pts.length){var quad=Quadrant.quadrant(pts[last-1],pts[last]);if(quad!==chainQuad){break;}last++;}return last-1;};MonotoneChainIndexer.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainIndexer.prototype.getClass=function getClass(){return MonotoneChainIndexer;};MonotoneChainIndexer.toIntArray=function toIntArray(list){var array=new Array(list.size()).fill(null);for(var i=0;i<array.length;i++){array[i]=list.get(i).intValue();}return array;};var MonotoneChainEdge=function MonotoneChainEdge(){this.e=null;this.pts=null;this.startIndex=null;this.env1=new Envelope();this.env2=new Envelope();var e=arguments[0];this.e=e;this.pts=e.getCoordinates();var mcb=new MonotoneChainIndexer();this.startIndex=mcb.getChainStartIndices(this.pts);};MonotoneChainEdge.prototype.getCoordinates=function getCoordinates(){return this.pts;};MonotoneChainEdge.prototype.getMaxX=function getMaxX(chainIndex){var x1=this.pts[this.startIndex[chainIndex]].x;var x2=this.pts[this.startIndex[chainIndex+1]].x;return x1>x2?x1:x2;};MonotoneChainEdge.prototype.getMinX=function getMinX(chainIndex){var x1=this.pts[this.startIndex[chainIndex]].x;var x2=this.pts[this.startIndex[chainIndex+1]].x;return x1<x2?x1:x2;};MonotoneChainEdge.prototype.computeIntersectsForChain=function computeIntersectsForChain(){if(arguments.length===4){var chainIndex0=arguments[0];var mce=arguments[1];var chainIndex1=arguments[2];var si=arguments[3];this.computeIntersectsForChain(this.startIndex[chainIndex0],this.startIndex[chainIndex0+1],mce,mce.startIndex[chainIndex1],mce.startIndex[chainIndex1+1],si);}else if(arguments.length===6){var start0=arguments[0];var end0=arguments[1];var mce$1=arguments[2];var start1=arguments[3];var end1=arguments[4];var ei=arguments[5];var p00=this.pts[start0];var p01=this.pts[end0];var p10=mce$1.pts[start1];var p11=mce$1.pts[end1];if(end0-start0===1&&end1-start1===1){ei.addIntersections(this.e,start0,mce$1.e,start1);return null;}this.env1.init(p00,p01);this.env2.init(p10,p11);if(!this.env1.intersects(this.env2)){return null;}var mid0=Math.trunc((start0+end0)/2);var mid1=Math.trunc((start1+end1)/2);if(start0<mid0){if(start1<mid1){this.computeIntersectsForChain(start0,mid0,mce$1,start1,mid1,ei);}if(mid1<end1){this.computeIntersectsForChain(start0,mid0,mce$1,mid1,end1,ei);}}if(mid0<end0){if(start1<mid1){this.computeIntersectsForChain(mid0,end0,mce$1,start1,mid1,ei);}if(mid1<end1){this.computeIntersectsForChain(mid0,end0,mce$1,mid1,end1,ei);}}}};MonotoneChainEdge.prototype.getStartIndexes=function getStartIndexes(){return this.startIndex;};MonotoneChainEdge.prototype.computeIntersects=function computeIntersects(mce,si){var this$1=this;for(var i=0;i<this.startIndex.length-1;i++){for(var j=0;j<mce.startIndex.length-1;j++){this$1.computeIntersectsForChain(i,mce,j,si);}}};MonotoneChainEdge.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainEdge.prototype.getClass=function getClass(){return MonotoneChainEdge;};var Depth=function Depth(){var this$1=this;this._depth=Array(2).fill().map(function(){return Array(3);});for(var i=0;i<2;i++){for(var j=0;j<3;j++){this$1._depth[i][j]=Depth.NULL_VALUE;}}};var staticAccessors$31={NULL_VALUE:{configurable:true}};Depth.prototype.getDepth=function getDepth(geomIndex,posIndex){return this._depth[geomIndex][posIndex];};Depth.prototype.setDepth=function setDepth(geomIndex,posIndex,depthValue){this._depth[geomIndex][posIndex]=depthValue;};Depth.prototype.isNull=function isNull(){var this$1=this;if(arguments.length===0){for(var i=0;i<2;i++){for(var j=0;j<3;j++){if(this$1._depth[i][j]!==Depth.NULL_VALUE){return false;}}}return true;}else if(arguments.length===1){var geomIndex=arguments[0];return this._depth[geomIndex][1]===Depth.NULL_VALUE;}else if(arguments.length===2){var geomIndex$1=arguments[0];var posIndex=arguments[1];return this._depth[geomIndex$1][posIndex]===Depth.NULL_VALUE;}};Depth.prototype.normalize=function normalize(){var this$1=this;for(var i=0;i<2;i++){if(!this$1.isNull(i)){var minDepth=this$1._depth[i][1];if(this$1._depth[i][2]<minDepth){minDepth=this$1._depth[i][2];}if(minDepth<0){minDepth=0;}for(var j=1;j<3;j++){var newValue=0;if(this$1._depth[i][j]>minDepth){newValue=1;}this$1._depth[i][j]=newValue;}}}};Depth.prototype.getDelta=function getDelta(geomIndex){return this._depth[geomIndex][Position.RIGHT]-this._depth[geomIndex][Position.LEFT];};Depth.prototype.getLocation=function getLocation(geomIndex,posIndex){if(this._depth[geomIndex][posIndex]<=0){return Location.EXTERIOR;}return Location.INTERIOR;};Depth.prototype.toString=function toString(){return 'A: '+this._depth[0][1]+','+this._depth[0][2]+' B: '+this._depth[1][1]+','+this._depth[1][2];};Depth.prototype.add=function add(){var this$1=this;if(arguments.length===1){var lbl=arguments[0];for(var i=0;i<2;i++){for(var j=1;j<3;j++){var loc=lbl.getLocation(i,j);if(loc===Location.EXTERIOR||loc===Location.INTERIOR){if(this$1.isNull(i,j)){this$1._depth[i][j]=Depth.depthAtLocation(loc);}else{this$1._depth[i][j]+=Depth.depthAtLocation(loc);}}}}}else if(arguments.length===3){var geomIndex=arguments[0];var posIndex=arguments[1];var location=arguments[2];if(location===Location.INTERIOR){this._depth[geomIndex][posIndex]++;}}};Depth.prototype.interfaces_=function interfaces_(){return [];};Depth.prototype.getClass=function getClass(){return Depth;};Depth.depthAtLocation=function depthAtLocation(location){if(location===Location.EXTERIOR){return 0;}if(location===Location.INTERIOR){return 1;}return Depth.NULL_VALUE;};staticAccessors$31.NULL_VALUE.get=function(){return -1;};Object.defineProperties(Depth,staticAccessors$31);var Edge=function(GraphComponent$$1){function Edge(){GraphComponent$$1.call(this);this.pts=null;this._env=null;this.eiList=new EdgeIntersectionList(this);this._name=null;this._mce=null;this._isIsolated=true;this._depth=new Depth();this._depthDelta=0;if(arguments.length===1){var pts=arguments[0];Edge.call(this,pts,null);}else if(arguments.length===2){var pts$1=arguments[0];var label=arguments[1];this.pts=pts$1;this._label=label;}}if(GraphComponent$$1)Edge.__proto__=GraphComponent$$1;Edge.prototype=Object.create(GraphComponent$$1&&GraphComponent$$1.prototype);Edge.prototype.constructor=Edge;Edge.prototype.getDepth=function getDepth(){return this._depth;};Edge.prototype.getCollapsedEdge=function getCollapsedEdge(){var newPts=new Array(2).fill(null);newPts[0]=this.pts[0];newPts[1]=this.pts[1];var newe=new Edge(newPts,Label.toLineLabel(this._label));return newe;};Edge.prototype.isIsolated=function isIsolated(){return this._isIsolated;};Edge.prototype.getCoordinates=function getCoordinates(){return this.pts;};Edge.prototype.setIsolated=function setIsolated(isIsolated){this._isIsolated=isIsolated;};Edge.prototype.setName=function setName(name){this._name=name;};Edge.prototype.equals=function equals(o){var this$1=this;if(!(o instanceof Edge)){return false;}var e=o;if(this.pts.length!==e.pts.length){return false;}var isEqualForward=true;var isEqualReverse=true;var iRev=this.pts.length;for(var i=0;i<this.pts.length;i++){if(!this$1.pts[i].equals2D(e.pts[i])){isEqualForward=false;}if(!this$1.pts[i].equals2D(e.pts[--iRev])){isEqualReverse=false;}if(!isEqualForward&&!isEqualReverse){return false;}}return true;};Edge.prototype.getCoordinate=function getCoordinate(){if(arguments.length===0){if(this.pts.length>0){return this.pts[0];}return null;}else if(arguments.length===1){var i=arguments[0];return this.pts[i];}};Edge.prototype.print=function print(out){var this$1=this;out.print('edge '+this._name+': ');out.print('LINESTRING (');for(var i=0;i<this.pts.length;i++){if(i>0){out.print(',');}out.print(this$1.pts[i].x+' '+this$1.pts[i].y);}out.print(')  '+this._label+' '+this._depthDelta);};Edge.prototype.computeIM=function computeIM(im){Edge.updateIM(this._label,im);};Edge.prototype.isCollapsed=function isCollapsed(){if(!this._label.isArea()){return false;}if(this.pts.length!==3){return false;}if(this.pts[0].equals(this.pts[2])){return true;}return false;};Edge.prototype.isClosed=function isClosed(){return this.pts[0].equals(this.pts[this.pts.length-1]);};Edge.prototype.getMaximumSegmentIndex=function getMaximumSegmentIndex(){return this.pts.length-1;};Edge.prototype.getDepthDelta=function getDepthDelta(){return this._depthDelta;};Edge.prototype.getNumPoints=function getNumPoints(){return this.pts.length;};Edge.prototype.printReverse=function printReverse(out){var this$1=this;out.print('edge '+this._name+': ');for(var i=this.pts.length-1;i>=0;i--){out.print(this$1.pts[i]+' ');}out.println('');};Edge.prototype.getMonotoneChainEdge=function getMonotoneChainEdge(){if(this._mce===null){this._mce=new MonotoneChainEdge(this);}return this._mce;};Edge.prototype.getEnvelope=function getEnvelope(){var this$1=this;if(this._env===null){this._env=new Envelope();for(var i=0;i<this.pts.length;i++){this$1._env.expandToInclude(this$1.pts[i]);}}return this._env;};Edge.prototype.addIntersection=function addIntersection(li,segmentIndex,geomIndex,intIndex){var intPt=new Coordinate(li.getIntersection(intIndex));var normalizedSegmentIndex=segmentIndex;var dist=li.getEdgeDistance(geomIndex,intIndex);var nextSegIndex=normalizedSegmentIndex+1;if(nextSegIndex<this.pts.length){var nextPt=this.pts[nextSegIndex];if(intPt.equals2D(nextPt)){normalizedSegmentIndex=nextSegIndex;dist=0.0;}}this.eiList.add(intPt,normalizedSegmentIndex,dist);};Edge.prototype.toString=function toString(){var this$1=this;var buf=new StringBuffer();buf.append('edge '+this._name+': ');buf.append('LINESTRING (');for(var i=0;i<this.pts.length;i++){if(i>0){buf.append(',');}buf.append(this$1.pts[i].x+' '+this$1.pts[i].y);}buf.append(')  '+this._label+' '+this._depthDelta);return buf.toString();};Edge.prototype.isPointwiseEqual=function isPointwiseEqual(e){var this$1=this;if(this.pts.length!==e.pts.length){return false;}for(var i=0;i<this.pts.length;i++){if(!this$1.pts[i].equals2D(e.pts[i])){return false;}}return true;};Edge.prototype.setDepthDelta=function setDepthDelta(depthDelta){this._depthDelta=depthDelta;};Edge.prototype.getEdgeIntersectionList=function getEdgeIntersectionList(){return this.eiList;};Edge.prototype.addIntersections=function addIntersections(li,segmentIndex,geomIndex){var this$1=this;for(var i=0;i<li.getIntersectionNum();i++){this$1.addIntersection(li,segmentIndex,geomIndex,i);}};Edge.prototype.interfaces_=function interfaces_(){return [];};Edge.prototype.getClass=function getClass(){return Edge;};Edge.updateIM=function updateIM(){if(arguments.length===2){var label=arguments[0];var im=arguments[1];im.setAtLeastIfValid(label.getLocation(0,Position.ON),label.getLocation(1,Position.ON),1);if(label.isArea()){im.setAtLeastIfValid(label.getLocation(0,Position.LEFT),label.getLocation(1,Position.LEFT),2);im.setAtLeastIfValid(label.getLocation(0,Position.RIGHT),label.getLocation(1,Position.RIGHT),2);}}else{return GraphComponent$$1.prototype.updateIM.apply(this,arguments);}};return Edge;}(GraphComponent);var BufferBuilder=function BufferBuilder(bufParams){this._workingPrecisionModel=null;this._workingNoder=null;this._geomFact=null;this._graph=null;this._edgeList=new EdgeList();this._bufParams=bufParams||null;};BufferBuilder.prototype.setWorkingPrecisionModel=function setWorkingPrecisionModel(pm){this._workingPrecisionModel=pm;};BufferBuilder.prototype.insertUniqueEdge=function insertUniqueEdge(e){var existingEdge=this._edgeList.findEqualEdge(e);if(existingEdge!==null){var existingLabel=existingEdge.getLabel();var labelToMerge=e.getLabel();if(!existingEdge.isPointwiseEqual(e)){labelToMerge=new Label(e.getLabel());labelToMerge.flip();}existingLabel.merge(labelToMerge);var mergeDelta=BufferBuilder.depthDelta(labelToMerge);var existingDelta=existingEdge.getDepthDelta();var newDelta=existingDelta+mergeDelta;existingEdge.setDepthDelta(newDelta);}else{this._edgeList.add(e);e.setDepthDelta(BufferBuilder.depthDelta(e.getLabel()));}};BufferBuilder.prototype.buildSubgraphs=function buildSubgraphs(subgraphList,polyBuilder){var processedGraphs=new ArrayList();for(var i=subgraphList.iterator();i.hasNext();){var subgraph=i.next();var p=subgraph.getRightmostCoordinate();var locater=new SubgraphDepthLocater(processedGraphs);var outsideDepth=locater.getDepth(p);subgraph.computeDepth(outsideDepth);subgraph.findResultEdges();processedGraphs.add(subgraph);polyBuilder.add(subgraph.getDirectedEdges(),subgraph.getNodes());}};BufferBuilder.prototype.createSubgraphs=function createSubgraphs(graph){var subgraphList=new ArrayList();for(var i=graph.getNodes().iterator();i.hasNext();){var node=i.next();if(!node.isVisited()){var subgraph=new BufferSubgraph();subgraph.create(node);subgraphList.add(subgraph);}}Collections.sort(subgraphList,Collections.reverseOrder());return subgraphList;};BufferBuilder.prototype.createEmptyResultGeometry=function createEmptyResultGeometry(){var emptyGeom=this._geomFact.createPolygon();return emptyGeom;};BufferBuilder.prototype.getNoder=function getNoder(precisionModel){if(this._workingNoder!==null){return this._workingNoder;}var noder=new MCIndexNoder();var li=new RobustLineIntersector();li.setPrecisionModel(precisionModel);noder.setSegmentIntersector(new IntersectionAdder(li));return noder;};BufferBuilder.prototype.buffer=function buffer(g,distance){var precisionModel=this._workingPrecisionModel;if(precisionModel===null){precisionModel=g.getPrecisionModel();}this._geomFact=g.getFactory();var curveBuilder=new OffsetCurveBuilder(precisionModel,this._bufParams);var curveSetBuilder=new OffsetCurveSetBuilder(g,distance,curveBuilder);var bufferSegStrList=curveSetBuilder.getCurves();if(bufferSegStrList.size()<=0){return this.createEmptyResultGeometry();}this.computeNodedEdges(bufferSegStrList,precisionModel);this._graph=new PlanarGraph(new OverlayNodeFactory());this._graph.addEdges(this._edgeList.getEdges());var subgraphList=this.createSubgraphs(this._graph);var polyBuilder=new PolygonBuilder(this._geomFact);this.buildSubgraphs(subgraphList,polyBuilder);var resultPolyList=polyBuilder.getPolygons();if(resultPolyList.size()<=0){return this.createEmptyResultGeometry();}var resultGeom=this._geomFact.buildGeometry(resultPolyList);return resultGeom;};BufferBuilder.prototype.computeNodedEdges=function computeNodedEdges(bufferSegStrList,precisionModel){var this$1=this;var noder=this.getNoder(precisionModel);noder.computeNodes(bufferSegStrList);var nodedSegStrings=noder.getNodedSubstrings();for(var i=nodedSegStrings.iterator();i.hasNext();){var segStr=i.next();var pts=segStr.getCoordinates();if(pts.length===2&&pts[0].equals2D(pts[1])){continue;}var oldLabel=segStr.getData();var edge=new Edge(segStr.getCoordinates(),new Label(oldLabel));this$1.insertUniqueEdge(edge);}};BufferBuilder.prototype.setNoder=function setNoder(noder){this._workingNoder=noder;};BufferBuilder.prototype.interfaces_=function interfaces_(){return [];};BufferBuilder.prototype.getClass=function getClass(){return BufferBuilder;};BufferBuilder.depthDelta=function depthDelta(label){var lLoc=label.getLocation(0,Position.LEFT);var rLoc=label.getLocation(0,Position.RIGHT);if(lLoc===Location.INTERIOR&&rLoc===Location.EXTERIOR){return 1;}else if(lLoc===Location.EXTERIOR&&rLoc===Location.INTERIOR){return -1;}return 0;};BufferBuilder.convertSegStrings=function convertSegStrings(it){var fact=new GeometryFactory();var lines=new ArrayList();while(it.hasNext()){var ss=it.next();var line=fact.createLineString(ss.getCoordinates());lines.add(line);}return fact.buildGeometry(lines);};var ScaledNoder=function ScaledNoder(){this._noder=null;this._scaleFactor=null;this._offsetX=null;this._offsetY=null;this._isScaled=false;if(arguments.length===2){var noder=arguments[0];var scaleFactor=arguments[1];this._noder=noder;this._scaleFactor=scaleFactor;this._offsetX=0.0;this._offsetY=0.0;this._isScaled=!this.isIntegerPrecision();}else if(arguments.length===4){var noder$1=arguments[0];var scaleFactor$1=arguments[1];var offsetX=arguments[2];var offsetY=arguments[3];this._noder=noder$1;this._scaleFactor=scaleFactor$1;this._offsetX=offsetX;this._offsetY=offsetY;this._isScaled=!this.isIntegerPrecision();}};ScaledNoder.prototype.rescale=function rescale(){var this$1=this;if(hasInterface(arguments[0],Collection)){var segStrings=arguments[0];for(var i=segStrings.iterator();i.hasNext();){var ss=i.next();this$1.rescale(ss.getCoordinates());}}else if(arguments[0]instanceof Array){var pts=arguments[0];// let p0 = null
    // let p1 = null
    // if (pts.length === 2) {
    // p0 = new Coordinate(pts[0])
    // p1 = new Coordinate(pts[1])
    // }
    for(var i$1=0;i$1<pts.length;i$1++){pts[i$1].x=pts[i$1].x/this$1._scaleFactor+this$1._offsetX;pts[i$1].y=pts[i$1].y/this$1._scaleFactor+this$1._offsetY;}if(pts.length===2&&pts[0].equals2D(pts[1])){System.out.println(pts);}}};ScaledNoder.prototype.scale=function scale(){var this$1=this;if(hasInterface(arguments[0],Collection)){var segStrings=arguments[0];var nodedSegmentStrings=new ArrayList();for(var i=segStrings.iterator();i.hasNext();){var ss=i.next();nodedSegmentStrings.add(new NodedSegmentString(this$1.scale(ss.getCoordinates()),ss.getData()));}return nodedSegmentStrings;}else if(arguments[0]instanceof Array){var pts=arguments[0];var roundPts=new Array(pts.length).fill(null);for(var i$1=0;i$1<pts.length;i$1++){roundPts[i$1]=new Coordinate(Math.round((pts[i$1].x-this$1._offsetX)*this$1._scaleFactor),Math.round((pts[i$1].y-this$1._offsetY)*this$1._scaleFactor),pts[i$1].z);}var roundPtsNoDup=CoordinateArrays.removeRepeatedPoints(roundPts);return roundPtsNoDup;}};ScaledNoder.prototype.isIntegerPrecision=function isIntegerPrecision(){return this._scaleFactor===1.0;};ScaledNoder.prototype.getNodedSubstrings=function getNodedSubstrings(){var splitSS=this._noder.getNodedSubstrings();if(this._isScaled){this.rescale(splitSS);}return splitSS;};ScaledNoder.prototype.computeNodes=function computeNodes(inputSegStrings){var intSegStrings=inputSegStrings;if(this._isScaled){intSegStrings=this.scale(inputSegStrings);}this._noder.computeNodes(intSegStrings);};ScaledNoder.prototype.interfaces_=function interfaces_(){return [Noder];};ScaledNoder.prototype.getClass=function getClass(){return ScaledNoder;};var NodingValidator=function NodingValidator(){this._li=new RobustLineIntersector();this._segStrings=null;var segStrings=arguments[0];this._segStrings=segStrings;};var staticAccessors$33={fact:{configurable:true}};NodingValidator.prototype.checkEndPtVertexIntersections=function checkEndPtVertexIntersections(){var this$1=this;if(arguments.length===0){for(var i=this._segStrings.iterator();i.hasNext();){var ss=i.next();var pts=ss.getCoordinates();this$1.checkEndPtVertexIntersections(pts[0],this$1._segStrings);this$1.checkEndPtVertexIntersections(pts[pts.length-1],this$1._segStrings);}}else if(arguments.length===2){var testPt=arguments[0];var segStrings=arguments[1];for(var i$1=segStrings.iterator();i$1.hasNext();){var ss$1=i$1.next();var pts$1=ss$1.getCoordinates();for(var j=1;j<pts$1.length-1;j++){if(pts$1[j].equals(testPt)){throw new RuntimeException('found endpt/interior pt intersection at index '+j+' :pt '+testPt);}}}}};NodingValidator.prototype.checkInteriorIntersections=function checkInteriorIntersections(){var this$1=this;if(arguments.length===0){for(var i=this._segStrings.iterator();i.hasNext();){var ss0=i.next();for(var j=this._segStrings.iterator();j.hasNext();){var ss1=j.next();this$1.checkInteriorIntersections(ss0,ss1);}}}else if(arguments.length===2){var ss0$1=arguments[0];var ss1$1=arguments[1];var pts0=ss0$1.getCoordinates();var pts1=ss1$1.getCoordinates();for(var i0=0;i0<pts0.length-1;i0++){for(var i1=0;i1<pts1.length-1;i1++){this$1.checkInteriorIntersections(ss0$1,i0,ss1$1,i1);}}}else if(arguments.length===4){var e0=arguments[0];var segIndex0=arguments[1];var e1=arguments[2];var segIndex1=arguments[3];if(e0===e1&&segIndex0===segIndex1){return null;}var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){if(this._li.isProper()||this.hasInteriorIntersection(this._li,p00,p01)||this.hasInteriorIntersection(this._li,p10,p11)){throw new RuntimeException('found non-noded intersection at '+p00+'-'+p01+' and '+p10+'-'+p11);}}}};NodingValidator.prototype.checkValid=function checkValid(){this.checkEndPtVertexIntersections();this.checkInteriorIntersections();this.checkCollapses();};NodingValidator.prototype.checkCollapses=function checkCollapses(){var this$1=this;if(arguments.length===0){for(var i=this._segStrings.iterator();i.hasNext();){var ss=i.next();this$1.checkCollapses(ss);}}else if(arguments.length===1){var ss$1=arguments[0];var pts=ss$1.getCoordinates();for(var i$1=0;i$1<pts.length-2;i$1++){this$1.checkCollapse(pts[i$1],pts[i$1+1],pts[i$1+2]);}}};NodingValidator.prototype.hasInteriorIntersection=function hasInteriorIntersection(li,p0,p1){for(var i=0;i<li.getIntersectionNum();i++){var intPt=li.getIntersection(i);if(!(intPt.equals(p0)||intPt.equals(p1))){return true;}}return false;};NodingValidator.prototype.checkCollapse=function checkCollapse(p0,p1,p2){if(p0.equals(p2)){throw new RuntimeException('found non-noded collapse at '+NodingValidator.fact.createLineString([p0,p1,p2]));}};NodingValidator.prototype.interfaces_=function interfaces_(){return [];};NodingValidator.prototype.getClass=function getClass(){return NodingValidator;};staticAccessors$33.fact.get=function(){return new GeometryFactory();};Object.defineProperties(NodingValidator,staticAccessors$33);var HotPixel=function HotPixel(){this._li=null;this._pt=null;this._originalPt=null;this._ptScaled=null;this._p0Scaled=null;this._p1Scaled=null;this._scaleFactor=null;this._minx=null;this._maxx=null;this._miny=null;this._maxy=null;this._corner=new Array(4).fill(null);this._safeEnv=null;var pt=arguments[0];var scaleFactor=arguments[1];var li=arguments[2];this._originalPt=pt;this._pt=pt;this._scaleFactor=scaleFactor;this._li=li;if(scaleFactor<=0){throw new IllegalArgumentException('Scale factor must be non-zero');}if(scaleFactor!==1.0){this._pt=new Coordinate(this.scale(pt.x),this.scale(pt.y));this._p0Scaled=new Coordinate();this._p1Scaled=new Coordinate();}this.initCorners(this._pt);};var staticAccessors$34={SAFE_ENV_EXPANSION_FACTOR:{configurable:true}};HotPixel.prototype.intersectsScaled=function intersectsScaled(p0,p1){var segMinx=Math.min(p0.x,p1.x);var segMaxx=Math.max(p0.x,p1.x);var segMiny=Math.min(p0.y,p1.y);var segMaxy=Math.max(p0.y,p1.y);var isOutsidePixelEnv=this._maxx<segMinx||this._minx>segMaxx||this._maxy<segMiny||this._miny>segMaxy;if(isOutsidePixelEnv){return false;}var intersects=this.intersectsToleranceSquare(p0,p1);Assert.isTrue(!(isOutsidePixelEnv&&intersects),'Found bad envelope test');return intersects;};HotPixel.prototype.initCorners=function initCorners(pt){var tolerance=0.5;this._minx=pt.x-tolerance;this._maxx=pt.x+tolerance;this._miny=pt.y-tolerance;this._maxy=pt.y+tolerance;this._corner[0]=new Coordinate(this._maxx,this._maxy);this._corner[1]=new Coordinate(this._minx,this._maxy);this._corner[2]=new Coordinate(this._minx,this._miny);this._corner[3]=new Coordinate(this._maxx,this._miny);};HotPixel.prototype.intersects=function intersects(p0,p1){if(this._scaleFactor===1.0){return this.intersectsScaled(p0,p1);}this.copyScaled(p0,this._p0Scaled);this.copyScaled(p1,this._p1Scaled);return this.intersectsScaled(this._p0Scaled,this._p1Scaled);};HotPixel.prototype.scale=function scale(val){return Math.round(val*this._scaleFactor);};HotPixel.prototype.getCoordinate=function getCoordinate(){return this._originalPt;};HotPixel.prototype.copyScaled=function copyScaled(p,pScaled){pScaled.x=this.scale(p.x);pScaled.y=this.scale(p.y);};HotPixel.prototype.getSafeEnvelope=function getSafeEnvelope(){if(this._safeEnv===null){var safeTolerance=HotPixel.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new Envelope(this._originalPt.x-safeTolerance,this._originalPt.x+safeTolerance,this._originalPt.y-safeTolerance,this._originalPt.y+safeTolerance);}return this._safeEnv;};HotPixel.prototype.intersectsPixelClosure=function intersectsPixelClosure(p0,p1){this._li.computeIntersection(p0,p1,this._corner[0],this._corner[1]);if(this._li.hasIntersection()){return true;}this._li.computeIntersection(p0,p1,this._corner[1],this._corner[2]);if(this._li.hasIntersection()){return true;}this._li.computeIntersection(p0,p1,this._corner[2],this._corner[3]);if(this._li.hasIntersection()){return true;}this._li.computeIntersection(p0,p1,this._corner[3],this._corner[0]);if(this._li.hasIntersection()){return true;}return false;};HotPixel.prototype.intersectsToleranceSquare=function intersectsToleranceSquare(p0,p1){var intersectsLeft=false;var intersectsBottom=false;this._li.computeIntersection(p0,p1,this._corner[0],this._corner[1]);if(this._li.isProper()){return true;}this._li.computeIntersection(p0,p1,this._corner[1],this._corner[2]);if(this._li.isProper()){return true;}if(this._li.hasIntersection()){intersectsLeft=true;}this._li.computeIntersection(p0,p1,this._corner[2],this._corner[3]);if(this._li.isProper()){return true;}if(this._li.hasIntersection()){intersectsBottom=true;}this._li.computeIntersection(p0,p1,this._corner[3],this._corner[0]);if(this._li.isProper()){return true;}if(intersectsLeft&&intersectsBottom){return true;}if(p0.equals(this._pt)){return true;}if(p1.equals(this._pt)){return true;}return false;};HotPixel.prototype.addSnappedNode=function addSnappedNode(segStr,segIndex){var p0=segStr.getCoordinate(segIndex);var p1=segStr.getCoordinate(segIndex+1);if(this.intersects(p0,p1)){segStr.addIntersection(this.getCoordinate(),segIndex);return true;}return false;};HotPixel.prototype.interfaces_=function interfaces_(){return [];};HotPixel.prototype.getClass=function getClass(){return HotPixel;};staticAccessors$34.SAFE_ENV_EXPANSION_FACTOR.get=function(){return 0.75;};Object.defineProperties(HotPixel,staticAccessors$34);var MonotoneChainSelectAction=function MonotoneChainSelectAction(){this.tempEnv1=new Envelope();this.selectedSegment=new LineSegment();};MonotoneChainSelectAction.prototype.select=function select(){if(arguments.length===1);else if(arguments.length===2){var mc=arguments[0];var startIndex=arguments[1];mc.getLineSegment(startIndex,this.selectedSegment);this.select(this.selectedSegment);}};MonotoneChainSelectAction.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainSelectAction.prototype.getClass=function getClass(){return MonotoneChainSelectAction;};var MCIndexPointSnapper=function MCIndexPointSnapper(){this._index=null;var index=arguments[0];this._index=index;};var staticAccessors$35={HotPixelSnapAction:{configurable:true}};MCIndexPointSnapper.prototype.snap=function snap(){if(arguments.length===1){var hotPixel=arguments[0];return this.snap(hotPixel,null,-1);}else if(arguments.length===3){var hotPixel$1=arguments[0];var parentEdge=arguments[1];var hotPixelVertexIndex=arguments[2];var pixelEnv=hotPixel$1.getSafeEnvelope();var hotPixelSnapAction=new HotPixelSnapAction(hotPixel$1,parentEdge,hotPixelVertexIndex);this._index.query(pixelEnv,{interfaces_:function interfaces_(){return [ItemVisitor];},visitItem:function visitItem(item){var testChain=item;testChain.select(pixelEnv,hotPixelSnapAction);}});return hotPixelSnapAction.isNodeAdded();}};MCIndexPointSnapper.prototype.interfaces_=function interfaces_(){return [];};MCIndexPointSnapper.prototype.getClass=function getClass(){return MCIndexPointSnapper;};staticAccessors$35.HotPixelSnapAction.get=function(){return HotPixelSnapAction;};Object.defineProperties(MCIndexPointSnapper,staticAccessors$35);var HotPixelSnapAction=function(MonotoneChainSelectAction$$1){function HotPixelSnapAction(){MonotoneChainSelectAction$$1.call(this);this._hotPixel=null;this._parentEdge=null;this._hotPixelVertexIndex=null;this._isNodeAdded=false;var hotPixel=arguments[0];var parentEdge=arguments[1];var hotPixelVertexIndex=arguments[2];this._hotPixel=hotPixel;this._parentEdge=parentEdge;this._hotPixelVertexIndex=hotPixelVertexIndex;}if(MonotoneChainSelectAction$$1)HotPixelSnapAction.__proto__=MonotoneChainSelectAction$$1;HotPixelSnapAction.prototype=Object.create(MonotoneChainSelectAction$$1&&MonotoneChainSelectAction$$1.prototype);HotPixelSnapAction.prototype.constructor=HotPixelSnapAction;HotPixelSnapAction.prototype.isNodeAdded=function isNodeAdded(){return this._isNodeAdded;};HotPixelSnapAction.prototype.select=function select(){if(arguments.length===2){var mc=arguments[0];var startIndex=arguments[1];var ss=mc.getContext();if(this._parentEdge!==null){if(ss===this._parentEdge&&startIndex===this._hotPixelVertexIndex){return null;}}this._isNodeAdded=this._hotPixel.addSnappedNode(ss,startIndex);}else{return MonotoneChainSelectAction$$1.prototype.select.apply(this,arguments);}};HotPixelSnapAction.prototype.interfaces_=function interfaces_(){return [];};HotPixelSnapAction.prototype.getClass=function getClass(){return HotPixelSnapAction;};return HotPixelSnapAction;}(MonotoneChainSelectAction);var InteriorIntersectionFinderAdder=function InteriorIntersectionFinderAdder(){this._li=null;this._interiorIntersections=null;var li=arguments[0];this._li=li;this._interiorIntersections=new ArrayList();};InteriorIntersectionFinderAdder.prototype.processIntersections=function processIntersections(e0,segIndex0,e1,segIndex1){var this$1=this;if(e0===e1&&segIndex0===segIndex1){return null;}var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){if(this._li.isInteriorIntersection()){for(var intIndex=0;intIndex<this._li.getIntersectionNum();intIndex++){this$1._interiorIntersections.add(this$1._li.getIntersection(intIndex));}e0.addIntersections(this._li,segIndex0,0);e1.addIntersections(this._li,segIndex1,1);}}};InteriorIntersectionFinderAdder.prototype.isDone=function isDone(){return false;};InteriorIntersectionFinderAdder.prototype.getInteriorIntersections=function getInteriorIntersections(){return this._interiorIntersections;};InteriorIntersectionFinderAdder.prototype.interfaces_=function interfaces_(){return [SegmentIntersector];};InteriorIntersectionFinderAdder.prototype.getClass=function getClass(){return InteriorIntersectionFinderAdder;};var MCIndexSnapRounder=function MCIndexSnapRounder(){this._pm=null;this._li=null;this._scaleFactor=null;this._noder=null;this._pointSnapper=null;this._nodedSegStrings=null;var pm=arguments[0];this._pm=pm;this._li=new RobustLineIntersector();this._li.setPrecisionModel(pm);this._scaleFactor=pm.getScale();};MCIndexSnapRounder.prototype.checkCorrectness=function checkCorrectness(inputSegmentStrings){var resultSegStrings=NodedSegmentString.getNodedSubstrings(inputSegmentStrings);var nv=new NodingValidator(resultSegStrings);try{nv.checkValid();}catch(ex){if(ex instanceof Exception){ex.printStackTrace();}else{throw ex;}}finally{}};MCIndexSnapRounder.prototype.getNodedSubstrings=function getNodedSubstrings(){return NodedSegmentString.getNodedSubstrings(this._nodedSegStrings);};MCIndexSnapRounder.prototype.snapRound=function snapRound(segStrings,li){var intersections=this.findInteriorIntersections(segStrings,li);this.computeIntersectionSnaps(intersections);this.computeVertexSnaps(segStrings);};MCIndexSnapRounder.prototype.findInteriorIntersections=function findInteriorIntersections(segStrings,li){var intFinderAdder=new InteriorIntersectionFinderAdder(li);this._noder.setSegmentIntersector(intFinderAdder);this._noder.computeNodes(segStrings);return intFinderAdder.getInteriorIntersections();};MCIndexSnapRounder.prototype.computeVertexSnaps=function computeVertexSnaps(){var this$1=this;if(hasInterface(arguments[0],Collection)){var edges=arguments[0];for(var i0=edges.iterator();i0.hasNext();){var edge0=i0.next();this$1.computeVertexSnaps(edge0);}}else if(arguments[0]instanceof NodedSegmentString){var e=arguments[0];var pts0=e.getCoordinates();for(var i=0;i<pts0.length;i++){var hotPixel=new HotPixel(pts0[i],this$1._scaleFactor,this$1._li);var isNodeAdded=this$1._pointSnapper.snap(hotPixel,e,i);if(isNodeAdded){e.addIntersection(pts0[i],i);}}}};MCIndexSnapRounder.prototype.computeNodes=function computeNodes(inputSegmentStrings){this._nodedSegStrings=inputSegmentStrings;this._noder=new MCIndexNoder();this._pointSnapper=new MCIndexPointSnapper(this._noder.getIndex());this.snapRound(inputSegmentStrings,this._li);};MCIndexSnapRounder.prototype.computeIntersectionSnaps=function computeIntersectionSnaps(snapPts){var this$1=this;for(var it=snapPts.iterator();it.hasNext();){var snapPt=it.next();var hotPixel=new HotPixel(snapPt,this$1._scaleFactor,this$1._li);this$1._pointSnapper.snap(hotPixel);}};MCIndexSnapRounder.prototype.interfaces_=function interfaces_(){return [Noder];};MCIndexSnapRounder.prototype.getClass=function getClass(){return MCIndexSnapRounder;};var BufferOp=function BufferOp(){this._argGeom=null;this._distance=null;this._bufParams=new BufferParameters();this._resultGeometry=null;this._saveException=null;if(arguments.length===1){var g=arguments[0];this._argGeom=g;}else if(arguments.length===2){var g$1=arguments[0];var bufParams=arguments[1];this._argGeom=g$1;this._bufParams=bufParams;}};var staticAccessors$32={CAP_ROUND:{configurable:true},CAP_BUTT:{configurable:true},CAP_FLAT:{configurable:true},CAP_SQUARE:{configurable:true},MAX_PRECISION_DIGITS:{configurable:true}};BufferOp.prototype.bufferFixedPrecision=function bufferFixedPrecision(fixedPM){var noder=new ScaledNoder(new MCIndexSnapRounder(new PrecisionModel(1.0)),fixedPM.getScale());var bufBuilder=new BufferBuilder(this._bufParams);bufBuilder.setWorkingPrecisionModel(fixedPM);bufBuilder.setNoder(noder);this._resultGeometry=bufBuilder.buffer(this._argGeom,this._distance);};BufferOp.prototype.bufferReducedPrecision=function bufferReducedPrecision(){var this$1=this;if(arguments.length===0){for(var precDigits=BufferOp.MAX_PRECISION_DIGITS;precDigits>=0;precDigits--){try{this$1.bufferReducedPrecision(precDigits);}catch(ex){if(ex instanceof TopologyException){this$1._saveException=ex;}else{throw ex;}}finally{}if(this$1._resultGeometry!==null){return null;}}throw this._saveException;}else if(arguments.length===1){var precisionDigits=arguments[0];var sizeBasedScaleFactor=BufferOp.precisionScaleFactor(this._argGeom,this._distance,precisionDigits);var fixedPM=new PrecisionModel(sizeBasedScaleFactor);this.bufferFixedPrecision(fixedPM);}};BufferOp.prototype.computeGeometry=function computeGeometry(){this.bufferOriginalPrecision();if(this._resultGeometry!==null){return null;}var argPM=this._argGeom.getFactory().getPrecisionModel();if(argPM.getType()===PrecisionModel.FIXED){this.bufferFixedPrecision(argPM);}else{this.bufferReducedPrecision();}};BufferOp.prototype.setQuadrantSegments=function setQuadrantSegments(quadrantSegments){this._bufParams.setQuadrantSegments(quadrantSegments);};BufferOp.prototype.bufferOriginalPrecision=function bufferOriginalPrecision(){try{var bufBuilder=new BufferBuilder(this._bufParams);this._resultGeometry=bufBuilder.buffer(this._argGeom,this._distance);}catch(ex){if(ex instanceof RuntimeException){this._saveException=ex;}else{throw ex;}}finally{}};BufferOp.prototype.getResultGeometry=function getResultGeometry(distance){this._distance=distance;this.computeGeometry();return this._resultGeometry;};BufferOp.prototype.setEndCapStyle=function setEndCapStyle(endCapStyle){this._bufParams.setEndCapStyle(endCapStyle);};BufferOp.prototype.interfaces_=function interfaces_(){return [];};BufferOp.prototype.getClass=function getClass(){return BufferOp;};BufferOp.bufferOp=function bufferOp(){if(arguments.length===2){var g=arguments[0];var distance=arguments[1];var gBuf=new BufferOp(g);var geomBuf=gBuf.getResultGeometry(distance);return geomBuf;}else if(arguments.length===3){if(Number.isInteger(arguments[2])&&arguments[0]instanceof Geometry&&typeof arguments[1]==='number'){var g$1=arguments[0];var distance$1=arguments[1];var quadrantSegments=arguments[2];var bufOp=new BufferOp(g$1);bufOp.setQuadrantSegments(quadrantSegments);var geomBuf$1=bufOp.getResultGeometry(distance$1);return geomBuf$1;}else if(arguments[2]instanceof BufferParameters&&arguments[0]instanceof Geometry&&typeof arguments[1]==='number'){var g$2=arguments[0];var distance$2=arguments[1];var params=arguments[2];var bufOp$1=new BufferOp(g$2,params);var geomBuf$2=bufOp$1.getResultGeometry(distance$2);return geomBuf$2;}}else if(arguments.length===4){var g$3=arguments[0];var distance$3=arguments[1];var quadrantSegments$1=arguments[2];var endCapStyle=arguments[3];var bufOp$2=new BufferOp(g$3);bufOp$2.setQuadrantSegments(quadrantSegments$1);bufOp$2.setEndCapStyle(endCapStyle);var geomBuf$3=bufOp$2.getResultGeometry(distance$3);return geomBuf$3;}};BufferOp.precisionScaleFactor=function precisionScaleFactor(g,distance,maxPrecisionDigits){var env=g.getEnvelopeInternal();var envMax=MathUtil.max(Math.abs(env.getMaxX()),Math.abs(env.getMaxY()),Math.abs(env.getMinX()),Math.abs(env.getMinY()));var expandByDistance=distance>0.0?distance:0.0;var bufEnvMax=envMax+2*expandByDistance;var bufEnvPrecisionDigits=Math.trunc(Math.log(bufEnvMax)/Math.log(10)+1.0);var minUnitLog10=maxPrecisionDigits-bufEnvPrecisionDigits;var scaleFactor=Math.pow(10.0,minUnitLog10);return scaleFactor;};staticAccessors$32.CAP_ROUND.get=function(){return BufferParameters.CAP_ROUND;};staticAccessors$32.CAP_BUTT.get=function(){return BufferParameters.CAP_FLAT;};staticAccessors$32.CAP_FLAT.get=function(){return BufferParameters.CAP_FLAT;};staticAccessors$32.CAP_SQUARE.get=function(){return BufferParameters.CAP_SQUARE;};staticAccessors$32.MAX_PRECISION_DIGITS.get=function(){return 12;};Object.defineProperties(BufferOp,staticAccessors$32);var PointPairDistance=function PointPairDistance(){this._pt=[new Coordinate(),new Coordinate()];this._distance=Double.NaN;this._isNull=true;};PointPairDistance.prototype.getCoordinates=function getCoordinates(){return this._pt;};PointPairDistance.prototype.getCoordinate=function getCoordinate(i){return this._pt[i];};PointPairDistance.prototype.setMinimum=function setMinimum(){if(arguments.length===1){var ptDist=arguments[0];this.setMinimum(ptDist._pt[0],ptDist._pt[1]);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];if(this._isNull){this.initialize(p0,p1);return null;}var dist=p0.distance(p1);if(dist<this._distance){this.initialize(p0,p1,dist);}}};PointPairDistance.prototype.initialize=function initialize(){if(arguments.length===0){this._isNull=true;}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];this._pt[0].setCoordinate(p0);this._pt[1].setCoordinate(p1);this._distance=p0.distance(p1);this._isNull=false;}else if(arguments.length===3){var p0$1=arguments[0];var p1$1=arguments[1];var distance=arguments[2];this._pt[0].setCoordinate(p0$1);this._pt[1].setCoordinate(p1$1);this._distance=distance;this._isNull=false;}};PointPairDistance.prototype.getDistance=function getDistance(){return this._distance;};PointPairDistance.prototype.setMaximum=function setMaximum(){if(arguments.length===1){var ptDist=arguments[0];this.setMaximum(ptDist._pt[0],ptDist._pt[1]);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];if(this._isNull){this.initialize(p0,p1);return null;}var dist=p0.distance(p1);if(dist>this._distance){this.initialize(p0,p1,dist);}}};PointPairDistance.prototype.interfaces_=function interfaces_(){return [];};PointPairDistance.prototype.getClass=function getClass(){return PointPairDistance;};var DistanceToPointFinder=function DistanceToPointFinder(){};DistanceToPointFinder.prototype.interfaces_=function interfaces_(){return [];};DistanceToPointFinder.prototype.getClass=function getClass(){return DistanceToPointFinder;};DistanceToPointFinder.computeDistance=function computeDistance(){if(arguments[2]instanceof PointPairDistance&&arguments[0]instanceof LineString&&arguments[1]instanceof Coordinate){var line=arguments[0];var pt=arguments[1];var ptDist=arguments[2];var coords=line.getCoordinates();var tempSegment=new LineSegment();for(var i=0;i<coords.length-1;i++){tempSegment.setCoordinates(coords[i],coords[i+1]);var closestPt=tempSegment.closestPoint(pt);ptDist.setMinimum(closestPt,pt);}}else if(arguments[2]instanceof PointPairDistance&&arguments[0]instanceof Polygon&&arguments[1]instanceof Coordinate){var poly=arguments[0];var pt$1=arguments[1];var ptDist$1=arguments[2];DistanceToPointFinder.computeDistance(poly.getExteriorRing(),pt$1,ptDist$1);for(var i$1=0;i$1<poly.getNumInteriorRing();i$1++){DistanceToPointFinder.computeDistance(poly.getInteriorRingN(i$1),pt$1,ptDist$1);}}else if(arguments[2]instanceof PointPairDistance&&arguments[0]instanceof Geometry&&arguments[1]instanceof Coordinate){var geom=arguments[0];var pt$2=arguments[1];var ptDist$2=arguments[2];if(geom instanceof LineString){DistanceToPointFinder.computeDistance(geom,pt$2,ptDist$2);}else if(geom instanceof Polygon){DistanceToPointFinder.computeDistance(geom,pt$2,ptDist$2);}else if(geom instanceof GeometryCollection){var gc=geom;for(var i$2=0;i$2<gc.getNumGeometries();i$2++){var g=gc.getGeometryN(i$2);DistanceToPointFinder.computeDistance(g,pt$2,ptDist$2);}}else{ptDist$2.setMinimum(geom.getCoordinate(),pt$2);}}else if(arguments[2]instanceof PointPairDistance&&arguments[0]instanceof LineSegment&&arguments[1]instanceof Coordinate){var segment=arguments[0];var pt$3=arguments[1];var ptDist$3=arguments[2];var closestPt$1=segment.closestPoint(pt$3);ptDist$3.setMinimum(closestPt$1,pt$3);}};var BufferCurveMaximumDistanceFinder=function BufferCurveMaximumDistanceFinder(inputGeom){this._maxPtDist=new PointPairDistance();this._inputGeom=inputGeom||null;};var staticAccessors$36={MaxPointDistanceFilter:{configurable:true},MaxMidpointDistanceFilter:{configurable:true}};BufferCurveMaximumDistanceFinder.prototype.computeMaxMidpointDistance=function computeMaxMidpointDistance(curve){var distFilter=new MaxMidpointDistanceFilter(this._inputGeom);curve.apply(distFilter);this._maxPtDist.setMaximum(distFilter.getMaxPointDistance());};BufferCurveMaximumDistanceFinder.prototype.computeMaxVertexDistance=function computeMaxVertexDistance(curve){var distFilter=new MaxPointDistanceFilter(this._inputGeom);curve.apply(distFilter);this._maxPtDist.setMaximum(distFilter.getMaxPointDistance());};BufferCurveMaximumDistanceFinder.prototype.findDistance=function findDistance(bufferCurve){this.computeMaxVertexDistance(bufferCurve);this.computeMaxMidpointDistance(bufferCurve);return this._maxPtDist.getDistance();};BufferCurveMaximumDistanceFinder.prototype.getDistancePoints=function getDistancePoints(){return this._maxPtDist;};BufferCurveMaximumDistanceFinder.prototype.interfaces_=function interfaces_(){return [];};BufferCurveMaximumDistanceFinder.prototype.getClass=function getClass(){return BufferCurveMaximumDistanceFinder;};staticAccessors$36.MaxPointDistanceFilter.get=function(){return MaxPointDistanceFilter;};staticAccessors$36.MaxMidpointDistanceFilter.get=function(){return MaxMidpointDistanceFilter;};Object.defineProperties(BufferCurveMaximumDistanceFinder,staticAccessors$36);var MaxPointDistanceFilter=function MaxPointDistanceFilter(geom){this._maxPtDist=new PointPairDistance();this._minPtDist=new PointPairDistance();this._geom=geom||null;};MaxPointDistanceFilter.prototype.filter=function filter(pt){this._minPtDist.initialize();DistanceToPointFinder.computeDistance(this._geom,pt,this._minPtDist);this._maxPtDist.setMaximum(this._minPtDist);};MaxPointDistanceFilter.prototype.getMaxPointDistance=function getMaxPointDistance(){return this._maxPtDist;};MaxPointDistanceFilter.prototype.interfaces_=function interfaces_(){return [CoordinateFilter];};MaxPointDistanceFilter.prototype.getClass=function getClass(){return MaxPointDistanceFilter;};var MaxMidpointDistanceFilter=function MaxMidpointDistanceFilter(geom){this._maxPtDist=new PointPairDistance();this._minPtDist=new PointPairDistance();this._geom=geom||null;};MaxMidpointDistanceFilter.prototype.filter=function filter(seq,index){if(index===0){return null;}var p0=seq.getCoordinate(index-1);var p1=seq.getCoordinate(index);var midPt=new Coordinate((p0.x+p1.x)/2,(p0.y+p1.y)/2);this._minPtDist.initialize();DistanceToPointFinder.computeDistance(this._geom,midPt,this._minPtDist);this._maxPtDist.setMaximum(this._minPtDist);};MaxMidpointDistanceFilter.prototype.isDone=function isDone(){return false;};MaxMidpointDistanceFilter.prototype.isGeometryChanged=function isGeometryChanged(){return false;};MaxMidpointDistanceFilter.prototype.getMaxPointDistance=function getMaxPointDistance(){return this._maxPtDist;};MaxMidpointDistanceFilter.prototype.interfaces_=function interfaces_(){return [CoordinateSequenceFilter];};MaxMidpointDistanceFilter.prototype.getClass=function getClass(){return MaxMidpointDistanceFilter;};var PolygonExtracter=function PolygonExtracter(comps){this._comps=comps||null;};PolygonExtracter.prototype.filter=function filter(geom){if(geom instanceof Polygon){this._comps.add(geom);}};PolygonExtracter.prototype.interfaces_=function interfaces_(){return [GeometryFilter];};PolygonExtracter.prototype.getClass=function getClass(){return PolygonExtracter;};PolygonExtracter.getPolygons=function getPolygons(){if(arguments.length===1){var geom=arguments[0];return PolygonExtracter.getPolygons(geom,new ArrayList());}else if(arguments.length===2){var geom$1=arguments[0];var list=arguments[1];if(geom$1 instanceof Polygon){list.add(geom$1);}else if(geom$1 instanceof GeometryCollection){geom$1.apply(new PolygonExtracter(list));}return list;}};var LinearComponentExtracter=function LinearComponentExtracter(){this._lines=null;this._isForcedToLineString=false;if(arguments.length===1){var lines=arguments[0];this._lines=lines;}else if(arguments.length===2){var lines$1=arguments[0];var isForcedToLineString=arguments[1];this._lines=lines$1;this._isForcedToLineString=isForcedToLineString;}};LinearComponentExtracter.prototype.filter=function filter(geom){if(this._isForcedToLineString&&geom instanceof LinearRing){var line=geom.getFactory().createLineString(geom.getCoordinateSequence());this._lines.add(line);return null;}if(geom instanceof LineString){this._lines.add(geom);}};LinearComponentExtracter.prototype.setForceToLineString=function setForceToLineString(isForcedToLineString){this._isForcedToLineString=isForcedToLineString;};LinearComponentExtracter.prototype.interfaces_=function interfaces_(){return [GeometryComponentFilter];};LinearComponentExtracter.prototype.getClass=function getClass(){return LinearComponentExtracter;};LinearComponentExtracter.getGeometry=function getGeometry(){if(arguments.length===1){var geom=arguments[0];return geom.getFactory().buildGeometry(LinearComponentExtracter.getLines(geom));}else if(arguments.length===2){var geom$1=arguments[0];var forceToLineString=arguments[1];return geom$1.getFactory().buildGeometry(LinearComponentExtracter.getLines(geom$1,forceToLineString));}};LinearComponentExtracter.getLines=function getLines(){if(arguments.length===1){var geom=arguments[0];return LinearComponentExtracter.getLines(geom,false);}else if(arguments.length===2){if(hasInterface(arguments[0],Collection)&&hasInterface(arguments[1],Collection)){var geoms=arguments[0];var lines$1=arguments[1];for(var i=geoms.iterator();i.hasNext();){var g=i.next();LinearComponentExtracter.getLines(g,lines$1);}return lines$1;}else if(arguments[0]instanceof Geometry&&typeof arguments[1]==='boolean'){var geom$1=arguments[0];var forceToLineString=arguments[1];var lines=new ArrayList();geom$1.apply(new LinearComponentExtracter(lines,forceToLineString));return lines;}else if(arguments[0]instanceof Geometry&&hasInterface(arguments[1],Collection)){var geom$2=arguments[0];var lines$2=arguments[1];if(geom$2 instanceof LineString){lines$2.add(geom$2);}else{geom$2.apply(new LinearComponentExtracter(lines$2));}return lines$2;}}else if(arguments.length===3){if(typeof arguments[2]==='boolean'&&hasInterface(arguments[0],Collection)&&hasInterface(arguments[1],Collection)){var geoms$1=arguments[0];var lines$3=arguments[1];var forceToLineString$1=arguments[2];for(var i$1=geoms$1.iterator();i$1.hasNext();){var g$1=i$1.next();LinearComponentExtracter.getLines(g$1,lines$3,forceToLineString$1);}return lines$3;}else if(typeof arguments[2]==='boolean'&&arguments[0]instanceof Geometry&&hasInterface(arguments[1],Collection)){var geom$3=arguments[0];var lines$4=arguments[1];var forceToLineString$2=arguments[2];geom$3.apply(new LinearComponentExtracter(lines$4,forceToLineString$2));return lines$4;}}};var PointLocator=function PointLocator(){this._boundaryRule=BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;this._isIn=null;this._numBoundaries=null;if(arguments.length===0);else if(arguments.length===1){var boundaryRule=arguments[0];if(boundaryRule===null){throw new IllegalArgumentException('Rule must be non-null');}this._boundaryRule=boundaryRule;}};PointLocator.prototype.locateInternal=function locateInternal(){var this$1=this;if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Polygon){var p=arguments[0];var poly=arguments[1];if(poly.isEmpty()){return Location.EXTERIOR;}var shell=poly.getExteriorRing();var shellLoc=this.locateInPolygonRing(p,shell);if(shellLoc===Location.EXTERIOR){return Location.EXTERIOR;}if(shellLoc===Location.BOUNDARY){return Location.BOUNDARY;}for(var i=0;i<poly.getNumInteriorRing();i++){var hole=poly.getInteriorRingN(i);var holeLoc=this$1.locateInPolygonRing(p,hole);if(holeLoc===Location.INTERIOR){return Location.EXTERIOR;}if(holeLoc===Location.BOUNDARY){return Location.BOUNDARY;}}return Location.INTERIOR;}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof LineString){var p$1=arguments[0];var l=arguments[1];if(!l.getEnvelopeInternal().intersects(p$1)){return Location.EXTERIOR;}var pt=l.getCoordinates();if(!l.isClosed()){if(p$1.equals(pt[0])||p$1.equals(pt[pt.length-1])){return Location.BOUNDARY;}}if(CGAlgorithms.isOnLine(p$1,pt)){return Location.INTERIOR;}return Location.EXTERIOR;}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Point){var p$2=arguments[0];var pt$1=arguments[1];var ptCoord=pt$1.getCoordinate();if(ptCoord.equals2D(p$2)){return Location.INTERIOR;}return Location.EXTERIOR;}};PointLocator.prototype.locateInPolygonRing=function locateInPolygonRing(p,ring){if(!ring.getEnvelopeInternal().intersects(p)){return Location.EXTERIOR;}return CGAlgorithms.locatePointInRing(p,ring.getCoordinates());};PointLocator.prototype.intersects=function intersects(p,geom){return this.locate(p,geom)!==Location.EXTERIOR;};PointLocator.prototype.updateLocationInfo=function updateLocationInfo(loc){if(loc===Location.INTERIOR){this._isIn=true;}if(loc===Location.BOUNDARY){this._numBoundaries++;}};PointLocator.prototype.computeLocation=function computeLocation(p,geom){var this$1=this;if(geom instanceof Point){this.updateLocationInfo(this.locateInternal(p,geom));}if(geom instanceof LineString){this.updateLocationInfo(this.locateInternal(p,geom));}else if(geom instanceof Polygon){this.updateLocationInfo(this.locateInternal(p,geom));}else if(geom instanceof MultiLineString){var ml=geom;for(var i=0;i<ml.getNumGeometries();i++){var l=ml.getGeometryN(i);this$1.updateLocationInfo(this$1.locateInternal(p,l));}}else if(geom instanceof MultiPolygon){var mpoly=geom;for(var i$1=0;i$1<mpoly.getNumGeometries();i$1++){var poly=mpoly.getGeometryN(i$1);this$1.updateLocationInfo(this$1.locateInternal(p,poly));}}else if(geom instanceof GeometryCollection){var geomi=new GeometryCollectionIterator(geom);while(geomi.hasNext()){var g2=geomi.next();if(g2!==geom){this$1.computeLocation(p,g2);}}}};PointLocator.prototype.locate=function locate(p,geom){if(geom.isEmpty()){return Location.EXTERIOR;}if(geom instanceof LineString){return this.locateInternal(p,geom);}else if(geom instanceof Polygon){return this.locateInternal(p,geom);}this._isIn=false;this._numBoundaries=0;this.computeLocation(p,geom);if(this._boundaryRule.isInBoundary(this._numBoundaries)){return Location.BOUNDARY;}if(this._numBoundaries>0||this._isIn){return Location.INTERIOR;}return Location.EXTERIOR;};PointLocator.prototype.interfaces_=function interfaces_(){return [];};PointLocator.prototype.getClass=function getClass(){return PointLocator;};var GeometryLocation=function GeometryLocation(){this._component=null;this._segIndex=null;this._pt=null;if(arguments.length===2){var component=arguments[0];var pt=arguments[1];GeometryLocation.call(this,component,GeometryLocation.INSIDE_AREA,pt);}else if(arguments.length===3){var component$1=arguments[0];var segIndex=arguments[1];var pt$1=arguments[2];this._component=component$1;this._segIndex=segIndex;this._pt=pt$1;}};var staticAccessors$38={INSIDE_AREA:{configurable:true}};GeometryLocation.prototype.isInsideArea=function isInsideArea(){return this._segIndex===GeometryLocation.INSIDE_AREA;};GeometryLocation.prototype.getCoordinate=function getCoordinate(){return this._pt;};GeometryLocation.prototype.getGeometryComponent=function getGeometryComponent(){return this._component;};GeometryLocation.prototype.getSegmentIndex=function getSegmentIndex(){return this._segIndex;};GeometryLocation.prototype.interfaces_=function interfaces_(){return [];};GeometryLocation.prototype.getClass=function getClass(){return GeometryLocation;};staticAccessors$38.INSIDE_AREA.get=function(){return -1;};Object.defineProperties(GeometryLocation,staticAccessors$38);var PointExtracter=function PointExtracter(pts){this._pts=pts||null;};PointExtracter.prototype.filter=function filter(geom){if(geom instanceof Point){this._pts.add(geom);}};PointExtracter.prototype.interfaces_=function interfaces_(){return [GeometryFilter];};PointExtracter.prototype.getClass=function getClass(){return PointExtracter;};PointExtracter.getPoints=function getPoints(){if(arguments.length===1){var geom=arguments[0];if(geom instanceof Point){return Collections.singletonList(geom);}return PointExtracter.getPoints(geom,new ArrayList());}else if(arguments.length===2){var geom$1=arguments[0];var list=arguments[1];if(geom$1 instanceof Point){list.add(geom$1);}else if(geom$1 instanceof GeometryCollection){geom$1.apply(new PointExtracter(list));}return list;}};var ConnectedElementLocationFilter=function ConnectedElementLocationFilter(){this._locations=null;var locations=arguments[0];this._locations=locations;};ConnectedElementLocationFilter.prototype.filter=function filter(geom){if(geom instanceof Point||geom instanceof LineString||geom instanceof Polygon){this._locations.add(new GeometryLocation(geom,0,geom.getCoordinate()));}};ConnectedElementLocationFilter.prototype.interfaces_=function interfaces_(){return [GeometryFilter];};ConnectedElementLocationFilter.prototype.getClass=function getClass(){return ConnectedElementLocationFilter;};ConnectedElementLocationFilter.getLocations=function getLocations(geom){var locations=new ArrayList();geom.apply(new ConnectedElementLocationFilter(locations));return locations;};var DistanceOp=function DistanceOp(){this._geom=null;this._terminateDistance=0.0;this._ptLocator=new PointLocator();this._minDistanceLocation=null;this._minDistance=Double.MAX_VALUE;if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];this._geom=[g0,g1];this._terminateDistance=0.0;}else if(arguments.length===3){var g0$1=arguments[0];var g1$1=arguments[1];var terminateDistance=arguments[2];this._geom=new Array(2).fill(null);this._geom[0]=g0$1;this._geom[1]=g1$1;this._terminateDistance=terminateDistance;}};DistanceOp.prototype.computeContainmentDistance=function computeContainmentDistance(){var this$1=this;if(arguments.length===0){var locPtPoly=new Array(2).fill(null);this.computeContainmentDistance(0,locPtPoly);if(this._minDistance<=this._terminateDistance){return null;}this.computeContainmentDistance(1,locPtPoly);}else if(arguments.length===2){var polyGeomIndex=arguments[0];var locPtPoly$1=arguments[1];var locationsIndex=1-polyGeomIndex;var polys=PolygonExtracter.getPolygons(this._geom[polyGeomIndex]);if(polys.size()>0){var insideLocs=ConnectedElementLocationFilter.getLocations(this._geom[locationsIndex]);this.computeContainmentDistance(insideLocs,polys,locPtPoly$1);if(this._minDistance<=this._terminateDistance){this._minDistanceLocation[locationsIndex]=locPtPoly$1[0];this._minDistanceLocation[polyGeomIndex]=locPtPoly$1[1];return null;}}}else if(arguments.length===3){if(arguments[2]instanceof Array&&hasInterface(arguments[0],List)&&hasInterface(arguments[1],List)){var locs=arguments[0];var polys$1=arguments[1];var locPtPoly$2=arguments[2];for(var i=0;i<locs.size();i++){var loc=locs.get(i);for(var j=0;j<polys$1.size();j++){this$1.computeContainmentDistance(loc,polys$1.get(j),locPtPoly$2);if(this$1._minDistance<=this$1._terminateDistance){return null;}}}}else if(arguments[2]instanceof Array&&arguments[0]instanceof GeometryLocation&&arguments[1]instanceof Polygon){var ptLoc=arguments[0];var poly=arguments[1];var locPtPoly$3=arguments[2];var pt=ptLoc.getCoordinate();if(Location.EXTERIOR!==this._ptLocator.locate(pt,poly)){this._minDistance=0.0;locPtPoly$3[0]=ptLoc;locPtPoly$3[1]=new GeometryLocation(poly,pt);return null;}}}};DistanceOp.prototype.computeMinDistanceLinesPoints=function computeMinDistanceLinesPoints(lines,points,locGeom){var this$1=this;for(var i=0;i<lines.size();i++){var line=lines.get(i);for(var j=0;j<points.size();j++){var pt=points.get(j);this$1.computeMinDistance(line,pt,locGeom);if(this$1._minDistance<=this$1._terminateDistance){return null;}}}};DistanceOp.prototype.computeFacetDistance=function computeFacetDistance(){var locGeom=new Array(2).fill(null);var lines0=LinearComponentExtracter.getLines(this._geom[0]);var lines1=LinearComponentExtracter.getLines(this._geom[1]);var pts0=PointExtracter.getPoints(this._geom[0]);var pts1=PointExtracter.getPoints(this._geom[1]);this.computeMinDistanceLines(lines0,lines1,locGeom);this.updateMinDistance(locGeom,false);if(this._minDistance<=this._terminateDistance){return null;}locGeom[0]=null;locGeom[1]=null;this.computeMinDistanceLinesPoints(lines0,pts1,locGeom);this.updateMinDistance(locGeom,false);if(this._minDistance<=this._terminateDistance){return null;}locGeom[0]=null;locGeom[1]=null;this.computeMinDistanceLinesPoints(lines1,pts0,locGeom);this.updateMinDistance(locGeom,true);if(this._minDistance<=this._terminateDistance){return null;}locGeom[0]=null;locGeom[1]=null;this.computeMinDistancePoints(pts0,pts1,locGeom);this.updateMinDistance(locGeom,false);};DistanceOp.prototype.nearestLocations=function nearestLocations(){this.computeMinDistance();return this._minDistanceLocation;};DistanceOp.prototype.updateMinDistance=function updateMinDistance(locGeom,flip){if(locGeom[0]===null){return null;}if(flip){this._minDistanceLocation[0]=locGeom[1];this._minDistanceLocation[1]=locGeom[0];}else{this._minDistanceLocation[0]=locGeom[0];this._minDistanceLocation[1]=locGeom[1];}};DistanceOp.prototype.nearestPoints=function nearestPoints(){this.computeMinDistance();var nearestPts=[this._minDistanceLocation[0].getCoordinate(),this._minDistanceLocation[1].getCoordinate()];return nearestPts;};DistanceOp.prototype.computeMinDistance=function computeMinDistance(){var this$1=this;if(arguments.length===0){if(this._minDistanceLocation!==null){return null;}this._minDistanceLocation=new Array(2).fill(null);this.computeContainmentDistance();if(this._minDistance<=this._terminateDistance){return null;}this.computeFacetDistance();}else if(arguments.length===3){if(arguments[2]instanceof Array&&arguments[0]instanceof LineString&&arguments[1]instanceof Point){var line=arguments[0];var pt=arguments[1];var locGeom=arguments[2];if(line.getEnvelopeInternal().distance(pt.getEnvelopeInternal())>this._minDistance){return null;}var coord0=line.getCoordinates();var coord=pt.getCoordinate();for(var i=0;i<coord0.length-1;i++){var dist=CGAlgorithms.distancePointLine(coord,coord0[i],coord0[i+1]);if(dist<this$1._minDistance){this$1._minDistance=dist;var seg=new LineSegment(coord0[i],coord0[i+1]);var segClosestPoint=seg.closestPoint(coord);locGeom[0]=new GeometryLocation(line,i,segClosestPoint);locGeom[1]=new GeometryLocation(pt,0,coord);}if(this$1._minDistance<=this$1._terminateDistance){return null;}}}else if(arguments[2]instanceof Array&&arguments[0]instanceof LineString&&arguments[1]instanceof LineString){var line0=arguments[0];var line1=arguments[1];var locGeom$1=arguments[2];if(line0.getEnvelopeInternal().distance(line1.getEnvelopeInternal())>this._minDistance){return null;}var coord0$1=line0.getCoordinates();var coord1=line1.getCoordinates();for(var i$1=0;i$1<coord0$1.length-1;i$1++){for(var j=0;j<coord1.length-1;j++){var dist$1=CGAlgorithms.distanceLineLine(coord0$1[i$1],coord0$1[i$1+1],coord1[j],coord1[j+1]);if(dist$1<this$1._minDistance){this$1._minDistance=dist$1;var seg0=new LineSegment(coord0$1[i$1],coord0$1[i$1+1]);var seg1=new LineSegment(coord1[j],coord1[j+1]);var closestPt=seg0.closestPoints(seg1);locGeom$1[0]=new GeometryLocation(line0,i$1,closestPt[0]);locGeom$1[1]=new GeometryLocation(line1,j,closestPt[1]);}if(this$1._minDistance<=this$1._terminateDistance){return null;}}}}}};DistanceOp.prototype.computeMinDistancePoints=function computeMinDistancePoints(points0,points1,locGeom){var this$1=this;for(var i=0;i<points0.size();i++){var pt0=points0.get(i);for(var j=0;j<points1.size();j++){var pt1=points1.get(j);var dist=pt0.getCoordinate().distance(pt1.getCoordinate());if(dist<this$1._minDistance){this$1._minDistance=dist;locGeom[0]=new GeometryLocation(pt0,0,pt0.getCoordinate());locGeom[1]=new GeometryLocation(pt1,0,pt1.getCoordinate());}if(this$1._minDistance<=this$1._terminateDistance){return null;}}}};DistanceOp.prototype.distance=function distance(){if(this._geom[0]===null||this._geom[1]===null){throw new IllegalArgumentException('null geometries are not supported');}if(this._geom[0].isEmpty()||this._geom[1].isEmpty()){return 0.0;}this.computeMinDistance();return this._minDistance;};DistanceOp.prototype.computeMinDistanceLines=function computeMinDistanceLines(lines0,lines1,locGeom){var this$1=this;for(var i=0;i<lines0.size();i++){var line0=lines0.get(i);for(var j=0;j<lines1.size();j++){var line1=lines1.get(j);this$1.computeMinDistance(line0,line1,locGeom);if(this$1._minDistance<=this$1._terminateDistance){return null;}}}};DistanceOp.prototype.interfaces_=function interfaces_(){return [];};DistanceOp.prototype.getClass=function getClass(){return DistanceOp;};DistanceOp.distance=function distance(g0,g1){var distOp=new DistanceOp(g0,g1);return distOp.distance();};DistanceOp.isWithinDistance=function isWithinDistance(g0,g1,distance){var distOp=new DistanceOp(g0,g1,distance);return distOp.distance()<=distance;};DistanceOp.nearestPoints=function nearestPoints(g0,g1){var distOp=new DistanceOp(g0,g1);return distOp.nearestPoints();};var PointPairDistance$2=function PointPairDistance(){this._pt=[new Coordinate(),new Coordinate()];this._distance=Double.NaN;this._isNull=true;};PointPairDistance$2.prototype.getCoordinates=function getCoordinates(){return this._pt;};PointPairDistance$2.prototype.getCoordinate=function getCoordinate(i){return this._pt[i];};PointPairDistance$2.prototype.setMinimum=function setMinimum(){if(arguments.length===1){var ptDist=arguments[0];this.setMinimum(ptDist._pt[0],ptDist._pt[1]);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];if(this._isNull){this.initialize(p0,p1);return null;}var dist=p0.distance(p1);if(dist<this._distance){this.initialize(p0,p1,dist);}}};PointPairDistance$2.prototype.initialize=function initialize(){if(arguments.length===0){this._isNull=true;}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];this._pt[0].setCoordinate(p0);this._pt[1].setCoordinate(p1);this._distance=p0.distance(p1);this._isNull=false;}else if(arguments.length===3){var p0$1=arguments[0];var p1$1=arguments[1];var distance=arguments[2];this._pt[0].setCoordinate(p0$1);this._pt[1].setCoordinate(p1$1);this._distance=distance;this._isNull=false;}};PointPairDistance$2.prototype.toString=function toString(){return WKTWriter.toLineString(this._pt[0],this._pt[1]);};PointPairDistance$2.prototype.getDistance=function getDistance(){return this._distance;};PointPairDistance$2.prototype.setMaximum=function setMaximum(){if(arguments.length===1){var ptDist=arguments[0];this.setMaximum(ptDist._pt[0],ptDist._pt[1]);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];if(this._isNull){this.initialize(p0,p1);return null;}var dist=p0.distance(p1);if(dist>this._distance){this.initialize(p0,p1,dist);}}};PointPairDistance$2.prototype.interfaces_=function interfaces_(){return [];};PointPairDistance$2.prototype.getClass=function getClass(){return PointPairDistance$2;};var DistanceToPoint=function DistanceToPoint(){};DistanceToPoint.prototype.interfaces_=function interfaces_(){return [];};DistanceToPoint.prototype.getClass=function getClass(){return DistanceToPoint;};DistanceToPoint.computeDistance=function computeDistance(){if(arguments[2]instanceof PointPairDistance$2&&arguments[0]instanceof LineString&&arguments[1]instanceof Coordinate){var line=arguments[0];var pt=arguments[1];var ptDist=arguments[2];var tempSegment=new LineSegment();var coords=line.getCoordinates();for(var i=0;i<coords.length-1;i++){tempSegment.setCoordinates(coords[i],coords[i+1]);var closestPt=tempSegment.closestPoint(pt);ptDist.setMinimum(closestPt,pt);}}else if(arguments[2]instanceof PointPairDistance$2&&arguments[0]instanceof Polygon&&arguments[1]instanceof Coordinate){var poly=arguments[0];var pt$1=arguments[1];var ptDist$1=arguments[2];DistanceToPoint.computeDistance(poly.getExteriorRing(),pt$1,ptDist$1);for(var i$1=0;i$1<poly.getNumInteriorRing();i$1++){DistanceToPoint.computeDistance(poly.getInteriorRingN(i$1),pt$1,ptDist$1);}}else if(arguments[2]instanceof PointPairDistance$2&&arguments[0]instanceof Geometry&&arguments[1]instanceof Coordinate){var geom=arguments[0];var pt$2=arguments[1];var ptDist$2=arguments[2];if(geom instanceof LineString){DistanceToPoint.computeDistance(geom,pt$2,ptDist$2);}else if(geom instanceof Polygon){DistanceToPoint.computeDistance(geom,pt$2,ptDist$2);}else if(geom instanceof GeometryCollection){var gc=geom;for(var i$2=0;i$2<gc.getNumGeometries();i$2++){var g=gc.getGeometryN(i$2);DistanceToPoint.computeDistance(g,pt$2,ptDist$2);}}else{ptDist$2.setMinimum(geom.getCoordinate(),pt$2);}}else if(arguments[2]instanceof PointPairDistance$2&&arguments[0]instanceof LineSegment&&arguments[1]instanceof Coordinate){var segment=arguments[0];var pt$3=arguments[1];var ptDist$3=arguments[2];var closestPt$1=segment.closestPoint(pt$3);ptDist$3.setMinimum(closestPt$1,pt$3);}};var DiscreteHausdorffDistance=function DiscreteHausdorffDistance(){this._g0=null;this._g1=null;this._ptDist=new PointPairDistance$2();this._densifyFrac=0.0;var g0=arguments[0];var g1=arguments[1];this._g0=g0;this._g1=g1;};var staticAccessors$39={MaxPointDistanceFilter:{configurable:true},MaxDensifiedByFractionDistanceFilter:{configurable:true}};DiscreteHausdorffDistance.prototype.getCoordinates=function getCoordinates(){return this._ptDist.getCoordinates();};DiscreteHausdorffDistance.prototype.setDensifyFraction=function setDensifyFraction(densifyFrac){if(densifyFrac>1.0||densifyFrac<=0.0){throw new IllegalArgumentException('Fraction is not in range (0.0 - 1.0]');}this._densifyFrac=densifyFrac;};DiscreteHausdorffDistance.prototype.compute=function compute(g0,g1){this.computeOrientedDistance(g0,g1,this._ptDist);this.computeOrientedDistance(g1,g0,this._ptDist);};DiscreteHausdorffDistance.prototype.distance=function distance(){this.compute(this._g0,this._g1);return this._ptDist.getDistance();};DiscreteHausdorffDistance.prototype.computeOrientedDistance=function computeOrientedDistance(discreteGeom,geom,ptDist){var distFilter=new MaxPointDistanceFilter$1(geom);discreteGeom.apply(distFilter);ptDist.setMaximum(distFilter.getMaxPointDistance());if(this._densifyFrac>0){var fracFilter=new MaxDensifiedByFractionDistanceFilter(geom,this._densifyFrac);discreteGeom.apply(fracFilter);ptDist.setMaximum(fracFilter.getMaxPointDistance());}};DiscreteHausdorffDistance.prototype.orientedDistance=function orientedDistance(){this.computeOrientedDistance(this._g0,this._g1,this._ptDist);return this._ptDist.getDistance();};DiscreteHausdorffDistance.prototype.interfaces_=function interfaces_(){return [];};DiscreteHausdorffDistance.prototype.getClass=function getClass(){return DiscreteHausdorffDistance;};DiscreteHausdorffDistance.distance=function distance(){if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];var dist=new DiscreteHausdorffDistance(g0,g1);return dist.distance();}else if(arguments.length===3){var g0$1=arguments[0];var g1$1=arguments[1];var densifyFrac=arguments[2];var dist$1=new DiscreteHausdorffDistance(g0$1,g1$1);dist$1.setDensifyFraction(densifyFrac);return dist$1.distance();}};staticAccessors$39.MaxPointDistanceFilter.get=function(){return MaxPointDistanceFilter$1;};staticAccessors$39.MaxDensifiedByFractionDistanceFilter.get=function(){return MaxDensifiedByFractionDistanceFilter;};Object.defineProperties(DiscreteHausdorffDistance,staticAccessors$39);var MaxPointDistanceFilter$1=function MaxPointDistanceFilter(){this._maxPtDist=new PointPairDistance$2();this._minPtDist=new PointPairDistance$2();this._euclideanDist=new DistanceToPoint();this._geom=null;var geom=arguments[0];this._geom=geom;};MaxPointDistanceFilter$1.prototype.filter=function filter(pt){this._minPtDist.initialize();DistanceToPoint.computeDistance(this._geom,pt,this._minPtDist);this._maxPtDist.setMaximum(this._minPtDist);};MaxPointDistanceFilter$1.prototype.getMaxPointDistance=function getMaxPointDistance(){return this._maxPtDist;};MaxPointDistanceFilter$1.prototype.interfaces_=function interfaces_(){return [CoordinateFilter];};MaxPointDistanceFilter$1.prototype.getClass=function getClass(){return MaxPointDistanceFilter$1;};var MaxDensifiedByFractionDistanceFilter=function MaxDensifiedByFractionDistanceFilter(){this._maxPtDist=new PointPairDistance$2();this._minPtDist=new PointPairDistance$2();this._geom=null;this._numSubSegs=0;var geom=arguments[0];var fraction=arguments[1];this._geom=geom;this._numSubSegs=Math.trunc(Math.round(1.0/fraction));};MaxDensifiedByFractionDistanceFilter.prototype.filter=function filter(seq,index){var this$1=this;if(index===0){return null;}var p0=seq.getCoordinate(index-1);var p1=seq.getCoordinate(index);var delx=(p1.x-p0.x)/this._numSubSegs;var dely=(p1.y-p0.y)/this._numSubSegs;for(var i=0;i<this._numSubSegs;i++){var x=p0.x+i*delx;var y=p0.y+i*dely;var pt=new Coordinate(x,y);this$1._minPtDist.initialize();DistanceToPoint.computeDistance(this$1._geom,pt,this$1._minPtDist);this$1._maxPtDist.setMaximum(this$1._minPtDist);}};MaxDensifiedByFractionDistanceFilter.prototype.isDone=function isDone(){return false;};MaxDensifiedByFractionDistanceFilter.prototype.isGeometryChanged=function isGeometryChanged(){return false;};MaxDensifiedByFractionDistanceFilter.prototype.getMaxPointDistance=function getMaxPointDistance(){return this._maxPtDist;};MaxDensifiedByFractionDistanceFilter.prototype.interfaces_=function interfaces_(){return [CoordinateSequenceFilter];};MaxDensifiedByFractionDistanceFilter.prototype.getClass=function getClass(){return MaxDensifiedByFractionDistanceFilter;};var BufferDistanceValidator=function BufferDistanceValidator(input,bufDistance,result){this._minValidDistance=null;this._maxValidDistance=null;this._minDistanceFound=null;this._maxDistanceFound=null;this._isValid=true;this._errMsg=null;this._errorLocation=null;this._errorIndicator=null;this._input=input||null;this._bufDistance=bufDistance||null;this._result=result||null;};var staticAccessors$37={VERBOSE:{configurable:true},MAX_DISTANCE_DIFF_FRAC:{configurable:true}};BufferDistanceValidator.prototype.checkMaximumDistance=function checkMaximumDistance(input,bufCurve,maxDist){var haus=new DiscreteHausdorffDistance(bufCurve,input);haus.setDensifyFraction(0.25);this._maxDistanceFound=haus.orientedDistance();if(this._maxDistanceFound>maxDist){this._isValid=false;var pts=haus.getCoordinates();this._errorLocation=pts[1];this._errorIndicator=input.getFactory().createLineString(pts);this._errMsg='Distance between buffer curve and input is too large ('+this._maxDistanceFound+' at '+WKTWriter.toLineString(pts[0],pts[1])+')';}};BufferDistanceValidator.prototype.isValid=function isValid(){var posDistance=Math.abs(this._bufDistance);var distDelta=BufferDistanceValidator.MAX_DISTANCE_DIFF_FRAC*posDistance;this._minValidDistance=posDistance-distDelta;this._maxValidDistance=posDistance+distDelta;if(this._input.isEmpty()||this._result.isEmpty()){return true;}if(this._bufDistance>0.0){this.checkPositiveValid();}else{this.checkNegativeValid();}if(BufferDistanceValidator.VERBOSE){System.out.println('Min Dist= '+this._minDistanceFound+'  err= '+(1.0-this._minDistanceFound/this._bufDistance)+'  Max Dist= '+this._maxDistanceFound+'  err= '+(this._maxDistanceFound/this._bufDistance-1.0));}return this._isValid;};BufferDistanceValidator.prototype.checkNegativeValid=function checkNegativeValid(){if(!(this._input instanceof Polygon||this._input instanceof MultiPolygon||this._input instanceof GeometryCollection)){return null;}var inputCurve=this.getPolygonLines(this._input);this.checkMinimumDistance(inputCurve,this._result,this._minValidDistance);if(!this._isValid){return null;}this.checkMaximumDistance(inputCurve,this._result,this._maxValidDistance);};BufferDistanceValidator.prototype.getErrorIndicator=function getErrorIndicator(){return this._errorIndicator;};BufferDistanceValidator.prototype.checkMinimumDistance=function checkMinimumDistance(g1,g2,minDist){var distOp=new DistanceOp(g1,g2,minDist);this._minDistanceFound=distOp.distance();if(this._minDistanceFound<minDist){this._isValid=false;var pts=distOp.nearestPoints();this._errorLocation=distOp.nearestPoints()[1];this._errorIndicator=g1.getFactory().createLineString(pts);this._errMsg='Distance between buffer curve and input is too small ('+this._minDistanceFound+' at '+WKTWriter.toLineString(pts[0],pts[1])+' )';}};BufferDistanceValidator.prototype.checkPositiveValid=function checkPositiveValid(){var bufCurve=this._result.getBoundary();this.checkMinimumDistance(this._input,bufCurve,this._minValidDistance);if(!this._isValid){return null;}this.checkMaximumDistance(this._input,bufCurve,this._maxValidDistance);};BufferDistanceValidator.prototype.getErrorLocation=function getErrorLocation(){return this._errorLocation;};BufferDistanceValidator.prototype.getPolygonLines=function getPolygonLines(g){var lines=new ArrayList();var lineExtracter=new LinearComponentExtracter(lines);var polys=PolygonExtracter.getPolygons(g);for(var i=polys.iterator();i.hasNext();){var poly=i.next();poly.apply(lineExtracter);}return g.getFactory().buildGeometry(lines);};BufferDistanceValidator.prototype.getErrorMessage=function getErrorMessage(){return this._errMsg;};BufferDistanceValidator.prototype.interfaces_=function interfaces_(){return [];};BufferDistanceValidator.prototype.getClass=function getClass(){return BufferDistanceValidator;};staticAccessors$37.VERBOSE.get=function(){return false;};staticAccessors$37.MAX_DISTANCE_DIFF_FRAC.get=function(){return 0.012;};Object.defineProperties(BufferDistanceValidator,staticAccessors$37);var BufferResultValidator=function BufferResultValidator(input,distance,result){this._isValid=true;this._errorMsg=null;this._errorLocation=null;this._errorIndicator=null;this._input=input||null;this._distance=distance||null;this._result=result||null;};var staticAccessors$40={VERBOSE:{configurable:true},MAX_ENV_DIFF_FRAC:{configurable:true}};BufferResultValidator.prototype.isValid=function isValid(){this.checkPolygonal();if(!this._isValid){return this._isValid;}this.checkExpectedEmpty();if(!this._isValid){return this._isValid;}this.checkEnvelope();if(!this._isValid){return this._isValid;}this.checkArea();if(!this._isValid){return this._isValid;}this.checkDistance();return this._isValid;};BufferResultValidator.prototype.checkEnvelope=function checkEnvelope(){if(this._distance<0.0){return null;}var padding=this._distance*BufferResultValidator.MAX_ENV_DIFF_FRAC;if(padding===0.0){padding=0.001;}var expectedEnv=new Envelope(this._input.getEnvelopeInternal());expectedEnv.expandBy(this._distance);var bufEnv=new Envelope(this._result.getEnvelopeInternal());bufEnv.expandBy(padding);if(!bufEnv.contains(expectedEnv)){this._isValid=false;this._errorMsg='Buffer envelope is incorrect';this._errorIndicator=this._input.getFactory().toGeometry(bufEnv);}this.report('Envelope');};BufferResultValidator.prototype.checkDistance=function checkDistance(){var distValid=new BufferDistanceValidator(this._input,this._distance,this._result);if(!distValid.isValid()){this._isValid=false;this._errorMsg=distValid.getErrorMessage();this._errorLocation=distValid.getErrorLocation();this._errorIndicator=distValid.getErrorIndicator();}this.report('Distance');};BufferResultValidator.prototype.checkArea=function checkArea(){var inputArea=this._input.getArea();var resultArea=this._result.getArea();if(this._distance>0.0&&inputArea>resultArea){this._isValid=false;this._errorMsg='Area of positive buffer is smaller than input';this._errorIndicator=this._result;}if(this._distance<0.0&&inputArea<resultArea){this._isValid=false;this._errorMsg='Area of negative buffer is larger than input';this._errorIndicator=this._result;}this.report('Area');};BufferResultValidator.prototype.checkPolygonal=function checkPolygonal(){if(!(this._result instanceof Polygon||this._result instanceof MultiPolygon)){this._isValid=false;}this._errorMsg='Result is not polygonal';this._errorIndicator=this._result;this.report('Polygonal');};BufferResultValidator.prototype.getErrorIndicator=function getErrorIndicator(){return this._errorIndicator;};BufferResultValidator.prototype.getErrorLocation=function getErrorLocation(){return this._errorLocation;};BufferResultValidator.prototype.checkExpectedEmpty=function checkExpectedEmpty(){if(this._input.getDimension()>=2){return null;}if(this._distance>0.0){return null;}if(!this._result.isEmpty()){this._isValid=false;this._errorMsg='Result is non-empty';this._errorIndicator=this._result;}this.report('ExpectedEmpty');};BufferResultValidator.prototype.report=function report(checkName){if(!BufferResultValidator.VERBOSE){return null;}System.out.println('Check '+checkName+': '+(this._isValid?'passed':'FAILED'));};BufferResultValidator.prototype.getErrorMessage=function getErrorMessage(){return this._errorMsg;};BufferResultValidator.prototype.interfaces_=function interfaces_(){return [];};BufferResultValidator.prototype.getClass=function getClass(){return BufferResultValidator;};BufferResultValidator.isValidMsg=function isValidMsg(g,distance,result){var validator=new BufferResultValidator(g,distance,result);if(!validator.isValid()){return validator.getErrorMessage();}return null;};BufferResultValidator.isValid=function isValid(g,distance,result){var validator=new BufferResultValidator(g,distance,result);if(validator.isValid()){return true;}return false;};staticAccessors$40.VERBOSE.get=function(){return false;};staticAccessors$40.MAX_ENV_DIFF_FRAC.get=function(){return 0.012;};Object.defineProperties(BufferResultValidator,staticAccessors$40);// operation.buffer
    var BasicSegmentString=function BasicSegmentString(){this._pts=null;this._data=null;var pts=arguments[0];var data=arguments[1];this._pts=pts;this._data=data;};BasicSegmentString.prototype.getCoordinates=function getCoordinates(){return this._pts;};BasicSegmentString.prototype.size=function size(){return this._pts.length;};BasicSegmentString.prototype.getCoordinate=function getCoordinate(i){return this._pts[i];};BasicSegmentString.prototype.isClosed=function isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1]);};BasicSegmentString.prototype.getSegmentOctant=function getSegmentOctant(index){if(index===this._pts.length-1){return -1;}return Octant.octant(this.getCoordinate(index),this.getCoordinate(index+1));};BasicSegmentString.prototype.setData=function setData(data){this._data=data;};BasicSegmentString.prototype.getData=function getData(){return this._data;};BasicSegmentString.prototype.toString=function toString(){return WKTWriter.toLineString(new CoordinateArraySequence(this._pts));};BasicSegmentString.prototype.interfaces_=function interfaces_(){return [SegmentString];};BasicSegmentString.prototype.getClass=function getClass(){return BasicSegmentString;};var InteriorIntersectionFinder=function InteriorIntersectionFinder(){this._findAllIntersections=false;this._isCheckEndSegmentsOnly=false;this._li=null;this._interiorIntersection=null;this._intSegments=null;this._intersections=new ArrayList();this._intersectionCount=0;this._keepIntersections=true;var li=arguments[0];this._li=li;this._interiorIntersection=null;};InteriorIntersectionFinder.prototype.getInteriorIntersection=function getInteriorIntersection(){return this._interiorIntersection;};InteriorIntersectionFinder.prototype.setCheckEndSegmentsOnly=function setCheckEndSegmentsOnly(isCheckEndSegmentsOnly){this._isCheckEndSegmentsOnly=isCheckEndSegmentsOnly;};InteriorIntersectionFinder.prototype.getIntersectionSegments=function getIntersectionSegments(){return this._intSegments;};InteriorIntersectionFinder.prototype.count=function count(){return this._intersectionCount;};InteriorIntersectionFinder.prototype.getIntersections=function getIntersections(){return this._intersections;};InteriorIntersectionFinder.prototype.setFindAllIntersections=function setFindAllIntersections(findAllIntersections){this._findAllIntersections=findAllIntersections;};InteriorIntersectionFinder.prototype.setKeepIntersections=function setKeepIntersections(keepIntersections){this._keepIntersections=keepIntersections;};InteriorIntersectionFinder.prototype.processIntersections=function processIntersections(e0,segIndex0,e1,segIndex1){if(!this._findAllIntersections&&this.hasIntersection()){return null;}if(e0===e1&&segIndex0===segIndex1){return null;}if(this._isCheckEndSegmentsOnly){var isEndSegPresent=this.isEndSegment(e0,segIndex0)||this.isEndSegment(e1,segIndex1);if(!isEndSegPresent){return null;}}var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){if(this._li.isInteriorIntersection()){this._intSegments=new Array(4).fill(null);this._intSegments[0]=p00;this._intSegments[1]=p01;this._intSegments[2]=p10;this._intSegments[3]=p11;this._interiorIntersection=this._li.getIntersection(0);if(this._keepIntersections){this._intersections.add(this._interiorIntersection);}this._intersectionCount++;}}};InteriorIntersectionFinder.prototype.isEndSegment=function isEndSegment(segStr,index){if(index===0){return true;}if(index>=segStr.size()-2){return true;}return false;};InteriorIntersectionFinder.prototype.hasIntersection=function hasIntersection(){return this._interiorIntersection!==null;};InteriorIntersectionFinder.prototype.isDone=function isDone(){if(this._findAllIntersections){return false;}return this._interiorIntersection!==null;};InteriorIntersectionFinder.prototype.interfaces_=function interfaces_(){return [SegmentIntersector];};InteriorIntersectionFinder.prototype.getClass=function getClass(){return InteriorIntersectionFinder;};InteriorIntersectionFinder.createAllIntersectionsFinder=function createAllIntersectionsFinder(li){var finder=new InteriorIntersectionFinder(li);finder.setFindAllIntersections(true);return finder;};InteriorIntersectionFinder.createAnyIntersectionFinder=function createAnyIntersectionFinder(li){return new InteriorIntersectionFinder(li);};InteriorIntersectionFinder.createIntersectionCounter=function createIntersectionCounter(li){var finder=new InteriorIntersectionFinder(li);finder.setFindAllIntersections(true);finder.setKeepIntersections(false);return finder;};var FastNodingValidator=function FastNodingValidator(){this._li=new RobustLineIntersector();this._segStrings=null;this._findAllIntersections=false;this._segInt=null;this._isValid=true;var segStrings=arguments[0];this._segStrings=segStrings;};FastNodingValidator.prototype.execute=function execute(){if(this._segInt!==null){return null;}this.checkInteriorIntersections();};FastNodingValidator.prototype.getIntersections=function getIntersections(){return this._segInt.getIntersections();};FastNodingValidator.prototype.isValid=function isValid(){this.execute();return this._isValid;};FastNodingValidator.prototype.setFindAllIntersections=function setFindAllIntersections(findAllIntersections){this._findAllIntersections=findAllIntersections;};FastNodingValidator.prototype.checkInteriorIntersections=function checkInteriorIntersections(){this._isValid=true;this._segInt=new InteriorIntersectionFinder(this._li);this._segInt.setFindAllIntersections(this._findAllIntersections);var noder=new MCIndexNoder();noder.setSegmentIntersector(this._segInt);noder.computeNodes(this._segStrings);if(this._segInt.hasIntersection()){this._isValid=false;return null;}};FastNodingValidator.prototype.checkValid=function checkValid(){this.execute();if(!this._isValid){throw new TopologyException(this.getErrorMessage(),this._segInt.getInteriorIntersection());}};FastNodingValidator.prototype.getErrorMessage=function getErrorMessage(){if(this._isValid){return 'no intersections found';}var intSegs=this._segInt.getIntersectionSegments();return 'found non-noded intersection between '+WKTWriter.toLineString(intSegs[0],intSegs[1])+' and '+WKTWriter.toLineString(intSegs[2],intSegs[3]);};FastNodingValidator.prototype.interfaces_=function interfaces_(){return [];};FastNodingValidator.prototype.getClass=function getClass(){return FastNodingValidator;};FastNodingValidator.computeIntersections=function computeIntersections(segStrings){var nv=new FastNodingValidator(segStrings);nv.setFindAllIntersections(true);nv.isValid();return nv.getIntersections();};var EdgeNodingValidator=function EdgeNodingValidator(){this._nv=null;var edges=arguments[0];this._nv=new FastNodingValidator(EdgeNodingValidator.toSegmentStrings(edges));};EdgeNodingValidator.prototype.checkValid=function checkValid(){this._nv.checkValid();};EdgeNodingValidator.prototype.interfaces_=function interfaces_(){return [];};EdgeNodingValidator.prototype.getClass=function getClass(){return EdgeNodingValidator;};EdgeNodingValidator.toSegmentStrings=function toSegmentStrings(edges){var segStrings=new ArrayList();for(var i=edges.iterator();i.hasNext();){var e=i.next();segStrings.add(new BasicSegmentString(e.getCoordinates(),e));}return segStrings;};EdgeNodingValidator.checkValid=function checkValid(edges){var validator=new EdgeNodingValidator(edges);validator.checkValid();};var GeometryCollectionMapper=function GeometryCollectionMapper(mapOp){this._mapOp=mapOp;};GeometryCollectionMapper.prototype.map=function map(gc){var this$1=this;var mapped=new ArrayList();for(var i=0;i<gc.getNumGeometries();i++){var g=this$1._mapOp.map(gc.getGeometryN(i));if(!g.isEmpty()){mapped.add(g);}}return gc.getFactory().createGeometryCollection(GeometryFactory.toGeometryArray(mapped));};GeometryCollectionMapper.prototype.interfaces_=function interfaces_(){return [];};GeometryCollectionMapper.prototype.getClass=function getClass(){return GeometryCollectionMapper;};GeometryCollectionMapper.map=function map(gc,op){var mapper=new GeometryCollectionMapper(op);return mapper.map(gc);};var LineBuilder=function LineBuilder(){this._op=null;this._geometryFactory=null;this._ptLocator=null;this._lineEdgesList=new ArrayList();this._resultLineList=new ArrayList();var op=arguments[0];var geometryFactory=arguments[1];var ptLocator=arguments[2];this._op=op;this._geometryFactory=geometryFactory;this._ptLocator=ptLocator;};LineBuilder.prototype.collectLines=function collectLines(opCode){var this$1=this;for(var it=this._op.getGraph().getEdgeEnds().iterator();it.hasNext();){var de=it.next();this$1.collectLineEdge(de,opCode,this$1._lineEdgesList);this$1.collectBoundaryTouchEdge(de,opCode,this$1._lineEdgesList);}};LineBuilder.prototype.labelIsolatedLine=function labelIsolatedLine(e,targetIndex){var loc=this._ptLocator.locate(e.getCoordinate(),this._op.getArgGeometry(targetIndex));e.getLabel().setLocation(targetIndex,loc);};LineBuilder.prototype.build=function build(opCode){this.findCoveredLineEdges();this.collectLines(opCode);this.buildLines(opCode);return this._resultLineList;};LineBuilder.prototype.collectLineEdge=function collectLineEdge(de,opCode,edges){var label=de.getLabel();var e=de.getEdge();if(de.isLineEdge()){if(!de.isVisited()&&OverlayOp.isResultOfOp(label,opCode)&&!e.isCovered()){edges.add(e);de.setVisitedEdge(true);}}};LineBuilder.prototype.findCoveredLineEdges=function findCoveredLineEdges(){var this$1=this;for(var nodeit=this._op.getGraph().getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().findCoveredLineEdges();}for(var it=this._op.getGraph().getEdgeEnds().iterator();it.hasNext();){var de=it.next();var e=de.getEdge();if(de.isLineEdge()&&!e.isCoveredSet()){var isCovered=this$1._op.isCoveredByA(de.getCoordinate());e.setCovered(isCovered);}}};LineBuilder.prototype.labelIsolatedLines=function labelIsolatedLines(edgesList){var this$1=this;for(var it=edgesList.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();if(e.isIsolated()){if(label.isNull(0)){this$1.labelIsolatedLine(e,0);}else{this$1.labelIsolatedLine(e,1);}}}};LineBuilder.prototype.buildLines=function buildLines(opCode){var this$1=this;for(var it=this._lineEdgesList.iterator();it.hasNext();){var e=it.next();// const label = e.getLabel()
    var line=this$1._geometryFactory.createLineString(e.getCoordinates());this$1._resultLineList.add(line);e.setInResult(true);}};LineBuilder.prototype.collectBoundaryTouchEdge=function collectBoundaryTouchEdge(de,opCode,edges){var label=de.getLabel();if(de.isLineEdge()){return null;}if(de.isVisited()){return null;}if(de.isInteriorAreaEdge()){return null;}if(de.getEdge().isInResult()){return null;}Assert.isTrue(!(de.isInResult()||de.getSym().isInResult())||!de.getEdge().isInResult());if(OverlayOp.isResultOfOp(label,opCode)&&opCode===OverlayOp.INTERSECTION){edges.add(de.getEdge());de.setVisitedEdge(true);}};LineBuilder.prototype.interfaces_=function interfaces_(){return [];};LineBuilder.prototype.getClass=function getClass(){return LineBuilder;};var PointBuilder=function PointBuilder(){this._op=null;this._geometryFactory=null;this._resultPointList=new ArrayList();var op=arguments[0];var geometryFactory=arguments[1];// const ptLocator = arguments[2]
    this._op=op;this._geometryFactory=geometryFactory;};PointBuilder.prototype.filterCoveredNodeToPoint=function filterCoveredNodeToPoint(n){var coord=n.getCoordinate();if(!this._op.isCoveredByLA(coord)){var pt=this._geometryFactory.createPoint(coord);this._resultPointList.add(pt);}};PointBuilder.prototype.extractNonCoveredResultNodes=function extractNonCoveredResultNodes(opCode){var this$1=this;for(var nodeit=this._op.getGraph().getNodes().iterator();nodeit.hasNext();){var n=nodeit.next();if(n.isInResult()){continue;}if(n.isIncidentEdgeInResult()){continue;}if(n.getEdges().getDegree()===0||opCode===OverlayOp.INTERSECTION){var label=n.getLabel();if(OverlayOp.isResultOfOp(label,opCode)){this$1.filterCoveredNodeToPoint(n);}}}};PointBuilder.prototype.build=function build(opCode){this.extractNonCoveredResultNodes(opCode);return this._resultPointList;};PointBuilder.prototype.interfaces_=function interfaces_(){return [];};PointBuilder.prototype.getClass=function getClass(){return PointBuilder;};var GeometryTransformer=function GeometryTransformer(){this._inputGeom=null;this._factory=null;this._pruneEmptyGeometry=true;this._preserveGeometryCollectionType=true;this._preserveCollections=false;this._preserveType=false;};GeometryTransformer.prototype.transformPoint=function transformPoint(geom,parent){return this._factory.createPoint(this.transformCoordinates(geom.getCoordinateSequence(),geom));};GeometryTransformer.prototype.transformPolygon=function transformPolygon(geom,parent){var this$1=this;var isAllValidLinearRings=true;var shell=this.transformLinearRing(geom.getExteriorRing(),geom);if(shell===null||!(shell instanceof LinearRing)||shell.isEmpty()){isAllValidLinearRings=false;}var holes=new ArrayList();for(var i=0;i<geom.getNumInteriorRing();i++){var hole=this$1.transformLinearRing(geom.getInteriorRingN(i),geom);if(hole===null||hole.isEmpty()){continue;}if(!(hole instanceof LinearRing)){isAllValidLinearRings=false;}holes.add(hole);}if(isAllValidLinearRings){return this._factory.createPolygon(shell,holes.toArray([]));}else{var components=new ArrayList();if(shell!==null){components.add(shell);}components.addAll(holes);return this._factory.buildGeometry(components);}};GeometryTransformer.prototype.createCoordinateSequence=function createCoordinateSequence(coords){return this._factory.getCoordinateSequenceFactory().create(coords);};GeometryTransformer.prototype.getInputGeometry=function getInputGeometry(){return this._inputGeom;};GeometryTransformer.prototype.transformMultiLineString=function transformMultiLineString(geom,parent){var this$1=this;var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this$1.transformLineString(geom.getGeometryN(i),geom);if(transformGeom===null){continue;}if(transformGeom.isEmpty()){continue;}transGeomList.add(transformGeom);}return this._factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transformCoordinates=function transformCoordinates(coords,parent){return this.copy(coords);};GeometryTransformer.prototype.transformLineString=function transformLineString(geom,parent){return this._factory.createLineString(this.transformCoordinates(geom.getCoordinateSequence(),geom));};GeometryTransformer.prototype.transformMultiPoint=function transformMultiPoint(geom,parent){var this$1=this;var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this$1.transformPoint(geom.getGeometryN(i),geom);if(transformGeom===null){continue;}if(transformGeom.isEmpty()){continue;}transGeomList.add(transformGeom);}return this._factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transformMultiPolygon=function transformMultiPolygon(geom,parent){var this$1=this;var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this$1.transformPolygon(geom.getGeometryN(i),geom);if(transformGeom===null){continue;}if(transformGeom.isEmpty()){continue;}transGeomList.add(transformGeom);}return this._factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.copy=function copy(seq){return seq.copy();};GeometryTransformer.prototype.transformGeometryCollection=function transformGeometryCollection(geom,parent){var this$1=this;var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this$1.transform(geom.getGeometryN(i));if(transformGeom===null){continue;}if(this$1._pruneEmptyGeometry&&transformGeom.isEmpty()){continue;}transGeomList.add(transformGeom);}if(this._preserveGeometryCollectionType){return this._factory.createGeometryCollection(GeometryFactory.toGeometryArray(transGeomList));}return this._factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transform=function transform(inputGeom){this._inputGeom=inputGeom;this._factory=inputGeom.getFactory();if(inputGeom instanceof Point){return this.transformPoint(inputGeom,null);}if(inputGeom instanceof MultiPoint){return this.transformMultiPoint(inputGeom,null);}if(inputGeom instanceof LinearRing){return this.transformLinearRing(inputGeom,null);}if(inputGeom instanceof LineString){return this.transformLineString(inputGeom,null);}if(inputGeom instanceof MultiLineString){return this.transformMultiLineString(inputGeom,null);}if(inputGeom instanceof Polygon){return this.transformPolygon(inputGeom,null);}if(inputGeom instanceof MultiPolygon){return this.transformMultiPolygon(inputGeom,null);}if(inputGeom instanceof GeometryCollection){return this.transformGeometryCollection(inputGeom,null);}throw new IllegalArgumentException('Unknown Geometry subtype: '+inputGeom.getClass().getName());};GeometryTransformer.prototype.transformLinearRing=function transformLinearRing(geom,parent){var seq=this.transformCoordinates(geom.getCoordinateSequence(),geom);if(seq===null){return this._factory.createLinearRing(null);}var seqSize=seq.size();if(seqSize>0&&seqSize<4&&!this._preserveType){return this._factory.createLineString(seq);}return this._factory.createLinearRing(seq);};GeometryTransformer.prototype.interfaces_=function interfaces_(){return [];};GeometryTransformer.prototype.getClass=function getClass(){return GeometryTransformer;};var LineStringSnapper=function LineStringSnapper(){this._snapTolerance=0.0;this._srcPts=null;this._seg=new LineSegment();this._allowSnappingToSourceVertices=false;this._isClosed=false;if(arguments[0]instanceof LineString&&typeof arguments[1]==='number'){var srcLine=arguments[0];var snapTolerance=arguments[1];LineStringSnapper.call(this,srcLine.getCoordinates(),snapTolerance);}else if(arguments[0]instanceof Array&&typeof arguments[1]==='number'){var srcPts=arguments[0];var snapTolerance$1=arguments[1];this._srcPts=srcPts;this._isClosed=LineStringSnapper.isClosed(srcPts);this._snapTolerance=snapTolerance$1;}};LineStringSnapper.prototype.snapVertices=function snapVertices(srcCoords,snapPts){var this$1=this;var end=this._isClosed?srcCoords.size()-1:srcCoords.size();for(var i=0;i<end;i++){var srcPt=srcCoords.get(i);var snapVert=this$1.findSnapForVertex(srcPt,snapPts);if(snapVert!==null){srcCoords.set(i,new Coordinate(snapVert));if(i===0&&this$1._isClosed){srcCoords.set(srcCoords.size()-1,new Coordinate(snapVert));}}}};LineStringSnapper.prototype.findSnapForVertex=function findSnapForVertex(pt,snapPts){var this$1=this;for(var i=0;i<snapPts.length;i++){if(pt.equals2D(snapPts[i])){return null;}if(pt.distance(snapPts[i])<this$1._snapTolerance){return snapPts[i];}}return null;};LineStringSnapper.prototype.snapTo=function snapTo(snapPts){var coordList=new CoordinateList(this._srcPts);this.snapVertices(coordList,snapPts);this.snapSegments(coordList,snapPts);var newPts=coordList.toCoordinateArray();return newPts;};LineStringSnapper.prototype.snapSegments=function snapSegments(srcCoords,snapPts){var this$1=this;if(snapPts.length===0){return null;}var distinctPtCount=snapPts.length;if(snapPts[0].equals2D(snapPts[snapPts.length-1])){distinctPtCount=snapPts.length-1;}for(var i=0;i<distinctPtCount;i++){var snapPt=snapPts[i];var index=this$1.findSegmentIndexToSnap(snapPt,srcCoords);if(index>=0){srcCoords.add(index+1,new Coordinate(snapPt),false);}}};LineStringSnapper.prototype.findSegmentIndexToSnap=function findSegmentIndexToSnap(snapPt,srcCoords){var this$1=this;var minDist=Double.MAX_VALUE;var snapIndex=-1;for(var i=0;i<srcCoords.size()-1;i++){this$1._seg.p0=srcCoords.get(i);this$1._seg.p1=srcCoords.get(i+1);if(this$1._seg.p0.equals2D(snapPt)||this$1._seg.p1.equals2D(snapPt)){if(this$1._allowSnappingToSourceVertices){continue;}else{return -1;}}var dist=this$1._seg.distance(snapPt);if(dist<this$1._snapTolerance&&dist<minDist){minDist=dist;snapIndex=i;}}return snapIndex;};LineStringSnapper.prototype.setAllowSnappingToSourceVertices=function setAllowSnappingToSourceVertices(allowSnappingToSourceVertices){this._allowSnappingToSourceVertices=allowSnappingToSourceVertices;};LineStringSnapper.prototype.interfaces_=function interfaces_(){return [];};LineStringSnapper.prototype.getClass=function getClass(){return LineStringSnapper;};LineStringSnapper.isClosed=function isClosed(pts){if(pts.length<=1){return false;}return pts[0].equals2D(pts[pts.length-1]);};var GeometrySnapper=function GeometrySnapper(srcGeom){this._srcGeom=srcGeom||null;};var staticAccessors$41={SNAP_PRECISION_FACTOR:{configurable:true}};GeometrySnapper.prototype.snapTo=function snapTo(snapGeom,snapTolerance){var snapPts=this.extractTargetCoordinates(snapGeom);var snapTrans=new SnapTransformer(snapTolerance,snapPts);return snapTrans.transform(this._srcGeom);};GeometrySnapper.prototype.snapToSelf=function snapToSelf(snapTolerance,cleanResult){var snapPts=this.extractTargetCoordinates(this._srcGeom);var snapTrans=new SnapTransformer(snapTolerance,snapPts,true);var snappedGeom=snapTrans.transform(this._srcGeom);var result=snappedGeom;if(cleanResult&&hasInterface(result,Polygonal)){result=snappedGeom.buffer(0);}return result;};GeometrySnapper.prototype.computeSnapTolerance=function computeSnapTolerance(ringPts){var minSegLen=this.computeMinimumSegmentLength(ringPts);var snapTol=minSegLen/10;return snapTol;};GeometrySnapper.prototype.extractTargetCoordinates=function extractTargetCoordinates(g){var ptSet=new TreeSet();var pts=g.getCoordinates();for(var i=0;i<pts.length;i++){ptSet.add(pts[i]);}return ptSet.toArray(new Array(0).fill(null));};GeometrySnapper.prototype.computeMinimumSegmentLength=function computeMinimumSegmentLength(pts){var minSegLen=Double.MAX_VALUE;for(var i=0;i<pts.length-1;i++){var segLen=pts[i].distance(pts[i+1]);if(segLen<minSegLen){minSegLen=segLen;}}return minSegLen;};GeometrySnapper.prototype.interfaces_=function interfaces_(){return [];};GeometrySnapper.prototype.getClass=function getClass(){return GeometrySnapper;};GeometrySnapper.snap=function snap(g0,g1,snapTolerance){var snapGeom=new Array(2).fill(null);var snapper0=new GeometrySnapper(g0);snapGeom[0]=snapper0.snapTo(g1,snapTolerance);var snapper1=new GeometrySnapper(g1);snapGeom[1]=snapper1.snapTo(snapGeom[0],snapTolerance);return snapGeom;};GeometrySnapper.computeOverlaySnapTolerance=function computeOverlaySnapTolerance(){if(arguments.length===1){var g=arguments[0];var snapTolerance=GeometrySnapper.computeSizeBasedSnapTolerance(g);var pm=g.getPrecisionModel();if(pm.getType()===PrecisionModel.FIXED){var fixedSnapTol=1/pm.getScale()*2/1.415;if(fixedSnapTol>snapTolerance){snapTolerance=fixedSnapTol;}}return snapTolerance;}else if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];return Math.min(GeometrySnapper.computeOverlaySnapTolerance(g0),GeometrySnapper.computeOverlaySnapTolerance(g1));}};GeometrySnapper.computeSizeBasedSnapTolerance=function computeSizeBasedSnapTolerance(g){var env=g.getEnvelopeInternal();var minDimension=Math.min(env.getHeight(),env.getWidth());var snapTol=minDimension*GeometrySnapper.SNAP_PRECISION_FACTOR;return snapTol;};GeometrySnapper.snapToSelf=function snapToSelf(geom,snapTolerance,cleanResult){var snapper0=new GeometrySnapper(geom);return snapper0.snapToSelf(snapTolerance,cleanResult);};staticAccessors$41.SNAP_PRECISION_FACTOR.get=function(){return 1e-9;};Object.defineProperties(GeometrySnapper,staticAccessors$41);var SnapTransformer=function(GeometryTransformer$$1){function SnapTransformer(snapTolerance,snapPts,isSelfSnap){GeometryTransformer$$1.call(this);this._snapTolerance=snapTolerance||null;this._snapPts=snapPts||null;this._isSelfSnap=isSelfSnap!==undefined?isSelfSnap:false;}if(GeometryTransformer$$1)SnapTransformer.__proto__=GeometryTransformer$$1;SnapTransformer.prototype=Object.create(GeometryTransformer$$1&&GeometryTransformer$$1.prototype);SnapTransformer.prototype.constructor=SnapTransformer;SnapTransformer.prototype.snapLine=function snapLine(srcPts,snapPts){var snapper=new LineStringSnapper(srcPts,this._snapTolerance);snapper.setAllowSnappingToSourceVertices(this._isSelfSnap);return snapper.snapTo(snapPts);};SnapTransformer.prototype.transformCoordinates=function transformCoordinates(coords,parent){var srcPts=coords.toCoordinateArray();var newPts=this.snapLine(srcPts,this._snapPts);return this._factory.getCoordinateSequenceFactory().create(newPts);};SnapTransformer.prototype.interfaces_=function interfaces_(){return [];};SnapTransformer.prototype.getClass=function getClass(){return SnapTransformer;};return SnapTransformer;}(GeometryTransformer);var CommonBits=function CommonBits(){this._isFirst=true;this._commonMantissaBitsCount=53;this._commonBits=0;this._commonSignExp=null;};CommonBits.prototype.getCommon=function getCommon(){return Double.longBitsToDouble(this._commonBits);};CommonBits.prototype.add=function add(num){var numBits=Double.doubleToLongBits(num);if(this._isFirst){this._commonBits=numBits;this._commonSignExp=CommonBits.signExpBits(this._commonBits);this._isFirst=false;return null;}var numSignExp=CommonBits.signExpBits(numBits);if(numSignExp!==this._commonSignExp){this._commonBits=0;return null;}this._commonMantissaBitsCount=CommonBits.numCommonMostSigMantissaBits(this._commonBits,numBits);this._commonBits=CommonBits.zeroLowerBits(this._commonBits,64-(12+this._commonMantissaBitsCount));};CommonBits.prototype.toString=function toString(){if(arguments.length===1){var bits=arguments[0];var x=Double.longBitsToDouble(bits);var numStr=Double.toBinaryString(bits);var padStr='0000000000000000000000000000000000000000000000000000000000000000'+numStr;var bitStr=padStr.substring(padStr.length-64);var str=bitStr.substring(0,1)+'  '+bitStr.substring(1,12)+'(exp) '+bitStr.substring(12)+' [ '+x+' ]';return str;}};CommonBits.prototype.interfaces_=function interfaces_(){return [];};CommonBits.prototype.getClass=function getClass(){return CommonBits;};CommonBits.getBit=function getBit(bits,i){var mask=1<<i;return (bits&mask)!==0?1:0;};CommonBits.signExpBits=function signExpBits(num){return num>>52;};CommonBits.zeroLowerBits=function zeroLowerBits(bits,nBits){var invMask=(1<<nBits)-1;var mask=~invMask;var zeroed=bits&mask;return zeroed;};CommonBits.numCommonMostSigMantissaBits=function numCommonMostSigMantissaBits(num1,num2){var count=0;for(var i=52;i>=0;i--){if(CommonBits.getBit(num1,i)!==CommonBits.getBit(num2,i)){return count;}count++;}return 52;};var CommonBitsRemover=function CommonBitsRemover(){this._commonCoord=null;this._ccFilter=new CommonCoordinateFilter();};var staticAccessors$42={CommonCoordinateFilter:{configurable:true},Translater:{configurable:true}};CommonBitsRemover.prototype.addCommonBits=function addCommonBits(geom){var trans=new Translater(this._commonCoord);geom.apply(trans);geom.geometryChanged();};CommonBitsRemover.prototype.removeCommonBits=function removeCommonBits(geom){if(this._commonCoord.x===0.0&&this._commonCoord.y===0.0){return geom;}var invCoord=new Coordinate(this._commonCoord);invCoord.x=-invCoord.x;invCoord.y=-invCoord.y;var trans=new Translater(invCoord);geom.apply(trans);geom.geometryChanged();return geom;};CommonBitsRemover.prototype.getCommonCoordinate=function getCommonCoordinate(){return this._commonCoord;};CommonBitsRemover.prototype.add=function add(geom){geom.apply(this._ccFilter);this._commonCoord=this._ccFilter.getCommonCoordinate();};CommonBitsRemover.prototype.interfaces_=function interfaces_(){return [];};CommonBitsRemover.prototype.getClass=function getClass(){return CommonBitsRemover;};staticAccessors$42.CommonCoordinateFilter.get=function(){return CommonCoordinateFilter;};staticAccessors$42.Translater.get=function(){return Translater;};Object.defineProperties(CommonBitsRemover,staticAccessors$42);var CommonCoordinateFilter=function CommonCoordinateFilter(){this._commonBitsX=new CommonBits();this._commonBitsY=new CommonBits();};CommonCoordinateFilter.prototype.filter=function filter(coord){this._commonBitsX.add(coord.x);this._commonBitsY.add(coord.y);};CommonCoordinateFilter.prototype.getCommonCoordinate=function getCommonCoordinate(){return new Coordinate(this._commonBitsX.getCommon(),this._commonBitsY.getCommon());};CommonCoordinateFilter.prototype.interfaces_=function interfaces_(){return [CoordinateFilter];};CommonCoordinateFilter.prototype.getClass=function getClass(){return CommonCoordinateFilter;};var Translater=function Translater(){this.trans=null;var trans=arguments[0];this.trans=trans;};Translater.prototype.filter=function filter(seq,i){var xp=seq.getOrdinate(i,0)+this.trans.x;var yp=seq.getOrdinate(i,1)+this.trans.y;seq.setOrdinate(i,0,xp);seq.setOrdinate(i,1,yp);};Translater.prototype.isDone=function isDone(){return false;};Translater.prototype.isGeometryChanged=function isGeometryChanged(){return true;};Translater.prototype.interfaces_=function interfaces_(){return [CoordinateSequenceFilter];};Translater.prototype.getClass=function getClass(){return Translater;};var SnapOverlayOp=function SnapOverlayOp(g1,g2){this._geom=new Array(2).fill(null);this._snapTolerance=null;this._cbr=null;this._geom[0]=g1;this._geom[1]=g2;this.computeSnapTolerance();};SnapOverlayOp.prototype.selfSnap=function selfSnap(geom){var snapper0=new GeometrySnapper(geom);var snapGeom=snapper0.snapTo(geom,this._snapTolerance);return snapGeom;};SnapOverlayOp.prototype.removeCommonBits=function removeCommonBits(geom){this._cbr=new CommonBitsRemover();this._cbr.add(geom[0]);this._cbr.add(geom[1]);var remGeom=new Array(2).fill(null);remGeom[0]=this._cbr.removeCommonBits(geom[0].copy());remGeom[1]=this._cbr.removeCommonBits(geom[1].copy());return remGeom;};SnapOverlayOp.prototype.prepareResult=function prepareResult(geom){this._cbr.addCommonBits(geom);return geom;};SnapOverlayOp.prototype.getResultGeometry=function getResultGeometry(opCode){var prepGeom=this.snap(this._geom);var result=OverlayOp.overlayOp(prepGeom[0],prepGeom[1],opCode);return this.prepareResult(result);};SnapOverlayOp.prototype.checkValid=function checkValid(g){if(!g.isValid()){System.out.println('Snapped geometry is invalid');}};SnapOverlayOp.prototype.computeSnapTolerance=function computeSnapTolerance(){this._snapTolerance=GeometrySnapper.computeOverlaySnapTolerance(this._geom[0],this._geom[1]);};SnapOverlayOp.prototype.snap=function snap(geom){var remGeom=this.removeCommonBits(geom);var snapGeom=GeometrySnapper.snap(remGeom[0],remGeom[1],this._snapTolerance);return snapGeom;};SnapOverlayOp.prototype.interfaces_=function interfaces_(){return [];};SnapOverlayOp.prototype.getClass=function getClass(){return SnapOverlayOp;};SnapOverlayOp.overlayOp=function overlayOp(g0,g1,opCode){var op=new SnapOverlayOp(g0,g1);return op.getResultGeometry(opCode);};SnapOverlayOp.union=function union(g0,g1){return SnapOverlayOp.overlayOp(g0,g1,OverlayOp.UNION);};SnapOverlayOp.intersection=function intersection(g0,g1){return SnapOverlayOp.overlayOp(g0,g1,OverlayOp.INTERSECTION);};SnapOverlayOp.symDifference=function symDifference(g0,g1){return SnapOverlayOp.overlayOp(g0,g1,OverlayOp.SYMDIFFERENCE);};SnapOverlayOp.difference=function difference(g0,g1){return SnapOverlayOp.overlayOp(g0,g1,OverlayOp.DIFFERENCE);};var SnapIfNeededOverlayOp=function SnapIfNeededOverlayOp(g1,g2){this._geom=new Array(2).fill(null);this._geom[0]=g1;this._geom[1]=g2;};SnapIfNeededOverlayOp.prototype.getResultGeometry=function getResultGeometry(opCode){var result=null;var isSuccess=false;var savedException=null;try{result=OverlayOp.overlayOp(this._geom[0],this._geom[1],opCode);{isSuccess=true;}}catch(ex){if(ex instanceof RuntimeException){savedException=ex;}else{throw ex;}}finally{}if(!isSuccess){try{result=SnapOverlayOp.overlayOp(this._geom[0],this._geom[1],opCode);}catch(ex){if(ex instanceof RuntimeException){throw savedException;}else{throw ex;}}finally{}}return result;};SnapIfNeededOverlayOp.prototype.interfaces_=function interfaces_(){return [];};SnapIfNeededOverlayOp.prototype.getClass=function getClass(){return SnapIfNeededOverlayOp;};SnapIfNeededOverlayOp.overlayOp=function overlayOp(g0,g1,opCode){var op=new SnapIfNeededOverlayOp(g0,g1);return op.getResultGeometry(opCode);};SnapIfNeededOverlayOp.union=function union(g0,g1){return SnapIfNeededOverlayOp.overlayOp(g0,g1,OverlayOp.UNION);};SnapIfNeededOverlayOp.intersection=function intersection(g0,g1){return SnapIfNeededOverlayOp.overlayOp(g0,g1,OverlayOp.INTERSECTION);};SnapIfNeededOverlayOp.symDifference=function symDifference(g0,g1){return SnapIfNeededOverlayOp.overlayOp(g0,g1,OverlayOp.SYMDIFFERENCE);};SnapIfNeededOverlayOp.difference=function difference(g0,g1){return SnapIfNeededOverlayOp.overlayOp(g0,g1,OverlayOp.DIFFERENCE);};var MonotoneChain$2=function MonotoneChain(){this.mce=null;this.chainIndex=null;var mce=arguments[0];var chainIndex=arguments[1];this.mce=mce;this.chainIndex=chainIndex;};MonotoneChain$2.prototype.computeIntersections=function computeIntersections(mc,si){this.mce.computeIntersectsForChain(this.chainIndex,mc.mce,mc.chainIndex,si);};MonotoneChain$2.prototype.interfaces_=function interfaces_(){return [];};MonotoneChain$2.prototype.getClass=function getClass(){return MonotoneChain$2;};var SweepLineEvent=function SweepLineEvent(){this._label=null;this._xValue=null;this._eventType=null;this._insertEvent=null;this._deleteEventIndex=null;this._obj=null;if(arguments.length===2){var x=arguments[0];var insertEvent=arguments[1];this._eventType=SweepLineEvent.DELETE;this._xValue=x;this._insertEvent=insertEvent;}else if(arguments.length===3){var label=arguments[0];var x$1=arguments[1];var obj=arguments[2];this._eventType=SweepLineEvent.INSERT;this._label=label;this._xValue=x$1;this._obj=obj;}};var staticAccessors$43={INSERT:{configurable:true},DELETE:{configurable:true}};SweepLineEvent.prototype.isDelete=function isDelete(){return this._eventType===SweepLineEvent.DELETE;};SweepLineEvent.prototype.setDeleteEventIndex=function setDeleteEventIndex(deleteEventIndex){this._deleteEventIndex=deleteEventIndex;};SweepLineEvent.prototype.getObject=function getObject(){return this._obj;};SweepLineEvent.prototype.compareTo=function compareTo(o){var pe=o;if(this._xValue<pe._xValue){return -1;}if(this._xValue>pe._xValue){return 1;}if(this._eventType<pe._eventType){return -1;}if(this._eventType>pe._eventType){return 1;}return 0;};SweepLineEvent.prototype.getInsertEvent=function getInsertEvent(){return this._insertEvent;};SweepLineEvent.prototype.isInsert=function isInsert(){return this._eventType===SweepLineEvent.INSERT;};SweepLineEvent.prototype.isSameLabel=function isSameLabel(ev){if(this._label===null){return false;}return this._label===ev._label;};SweepLineEvent.prototype.getDeleteEventIndex=function getDeleteEventIndex(){return this._deleteEventIndex;};SweepLineEvent.prototype.interfaces_=function interfaces_(){return [Comparable];};SweepLineEvent.prototype.getClass=function getClass(){return SweepLineEvent;};staticAccessors$43.INSERT.get=function(){return 1;};staticAccessors$43.DELETE.get=function(){return 2;};Object.defineProperties(SweepLineEvent,staticAccessors$43);var EdgeSetIntersector=function EdgeSetIntersector(){};EdgeSetIntersector.prototype.interfaces_=function interfaces_(){return [];};EdgeSetIntersector.prototype.getClass=function getClass(){return EdgeSetIntersector;};var SegmentIntersector$2=function SegmentIntersector(){this._hasIntersection=false;this._hasProper=false;this._hasProperInterior=false;this._properIntersectionPoint=null;this._li=null;this._includeProper=null;this._recordIsolated=null;this._isSelfIntersection=null;this._numIntersections=0;this.numTests=0;this._bdyNodes=null;this._isDone=false;this._isDoneWhenProperInt=false;var li=arguments[0];var includeProper=arguments[1];var recordIsolated=arguments[2];this._li=li;this._includeProper=includeProper;this._recordIsolated=recordIsolated;};SegmentIntersector$2.prototype.isTrivialIntersection=function isTrivialIntersection(e0,segIndex0,e1,segIndex1){if(e0===e1){if(this._li.getIntersectionNum()===1){if(SegmentIntersector$2.isAdjacentSegments(segIndex0,segIndex1)){return true;}if(e0.isClosed()){var maxSegIndex=e0.getNumPoints()-1;if(segIndex0===0&&segIndex1===maxSegIndex||segIndex1===0&&segIndex0===maxSegIndex){return true;}}}}return false;};SegmentIntersector$2.prototype.getProperIntersectionPoint=function getProperIntersectionPoint(){return this._properIntersectionPoint;};SegmentIntersector$2.prototype.setIsDoneIfProperInt=function setIsDoneIfProperInt(isDoneWhenProperInt){this._isDoneWhenProperInt=isDoneWhenProperInt;};SegmentIntersector$2.prototype.hasProperInteriorIntersection=function hasProperInteriorIntersection(){return this._hasProperInterior;};SegmentIntersector$2.prototype.isBoundaryPointInternal=function isBoundaryPointInternal(li,bdyNodes){for(var i=bdyNodes.iterator();i.hasNext();){var node=i.next();var pt=node.getCoordinate();if(li.isIntersection(pt)){return true;}}return false;};SegmentIntersector$2.prototype.hasProperIntersection=function hasProperIntersection(){return this._hasProper;};SegmentIntersector$2.prototype.hasIntersection=function hasIntersection(){return this._hasIntersection;};SegmentIntersector$2.prototype.isDone=function isDone(){return this._isDone;};SegmentIntersector$2.prototype.isBoundaryPoint=function isBoundaryPoint(li,bdyNodes){if(bdyNodes===null){return false;}if(this.isBoundaryPointInternal(li,bdyNodes[0])){return true;}if(this.isBoundaryPointInternal(li,bdyNodes[1])){return true;}return false;};SegmentIntersector$2.prototype.setBoundaryNodes=function setBoundaryNodes(bdyNodes0,bdyNodes1){this._bdyNodes=new Array(2).fill(null);this._bdyNodes[0]=bdyNodes0;this._bdyNodes[1]=bdyNodes1;};SegmentIntersector$2.prototype.addIntersections=function addIntersections(e0,segIndex0,e1,segIndex1){if(e0===e1&&segIndex0===segIndex1){return null;}this.numTests++;var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){if(this._recordIsolated){e0.setIsolated(false);e1.setIsolated(false);}this._numIntersections++;if(!this.isTrivialIntersection(e0,segIndex0,e1,segIndex1)){this._hasIntersection=true;if(this._includeProper||!this._li.isProper()){e0.addIntersections(this._li,segIndex0,0);e1.addIntersections(this._li,segIndex1,1);}if(this._li.isProper()){this._properIntersectionPoint=this._li.getIntersection(0).copy();this._hasProper=true;if(this._isDoneWhenProperInt){this._isDone=true;}if(!this.isBoundaryPoint(this._li,this._bdyNodes)){this._hasProperInterior=true;}}}}};SegmentIntersector$2.prototype.interfaces_=function interfaces_(){return [];};SegmentIntersector$2.prototype.getClass=function getClass(){return SegmentIntersector$2;};SegmentIntersector$2.isAdjacentSegments=function isAdjacentSegments(i1,i2){return Math.abs(i1-i2)===1;};var SimpleMCSweepLineIntersector=function(EdgeSetIntersector$$1){function SimpleMCSweepLineIntersector(){EdgeSetIntersector$$1.call(this);this.events=new ArrayList();this.nOverlaps=null;}if(EdgeSetIntersector$$1)SimpleMCSweepLineIntersector.__proto__=EdgeSetIntersector$$1;SimpleMCSweepLineIntersector.prototype=Object.create(EdgeSetIntersector$$1&&EdgeSetIntersector$$1.prototype);SimpleMCSweepLineIntersector.prototype.constructor=SimpleMCSweepLineIntersector;SimpleMCSweepLineIntersector.prototype.prepareEvents=function prepareEvents(){var this$1=this;Collections.sort(this.events);for(var i=0;i<this.events.size();i++){var ev=this$1.events.get(i);if(ev.isDelete()){ev.getInsertEvent().setDeleteEventIndex(i);}}};SimpleMCSweepLineIntersector.prototype.computeIntersections=function computeIntersections(){var this$1=this;if(arguments.length===1){var si=arguments[0];this.nOverlaps=0;this.prepareEvents();for(var i=0;i<this.events.size();i++){var ev=this$1.events.get(i);if(ev.isInsert()){this$1.processOverlaps(i,ev.getDeleteEventIndex(),ev,si);}if(si.isDone()){break;}}}else if(arguments.length===3){if(arguments[2]instanceof SegmentIntersector$2&&hasInterface(arguments[0],List)&&hasInterface(arguments[1],List)){var edges0=arguments[0];var edges1=arguments[1];var si$1=arguments[2];this.addEdges(edges0,edges0);this.addEdges(edges1,edges1);this.computeIntersections(si$1);}else if(typeof arguments[2]==='boolean'&&hasInterface(arguments[0],List)&&arguments[1]instanceof SegmentIntersector$2){var edges=arguments[0];var si$2=arguments[1];var testAllSegments=arguments[2];if(testAllSegments){this.addEdges(edges,null);}else{this.addEdges(edges);}this.computeIntersections(si$2);}}};SimpleMCSweepLineIntersector.prototype.addEdge=function addEdge(edge,edgeSet){var this$1=this;var mce=edge.getMonotoneChainEdge();var startIndex=mce.getStartIndexes();for(var i=0;i<startIndex.length-1;i++){var mc=new MonotoneChain$2(mce,i);var insertEvent=new SweepLineEvent(edgeSet,mce.getMinX(i),mc);this$1.events.add(insertEvent);this$1.events.add(new SweepLineEvent(mce.getMaxX(i),insertEvent));}};SimpleMCSweepLineIntersector.prototype.processOverlaps=function processOverlaps(start,end,ev0,si){var this$1=this;var mc0=ev0.getObject();for(var i=start;i<end;i++){var ev1=this$1.events.get(i);if(ev1.isInsert()){var mc1=ev1.getObject();if(!ev0.isSameLabel(ev1)){mc0.computeIntersections(mc1,si);this$1.nOverlaps++;}}}};SimpleMCSweepLineIntersector.prototype.addEdges=function addEdges(){var this$1=this;if(arguments.length===1){var edges=arguments[0];for(var i=edges.iterator();i.hasNext();){var edge=i.next();this$1.addEdge(edge,edge);}}else if(arguments.length===2){var edges$1=arguments[0];var edgeSet=arguments[1];for(var i$1=edges$1.iterator();i$1.hasNext();){var edge$1=i$1.next();this$1.addEdge(edge$1,edgeSet);}}};SimpleMCSweepLineIntersector.prototype.interfaces_=function interfaces_(){return [];};SimpleMCSweepLineIntersector.prototype.getClass=function getClass(){return SimpleMCSweepLineIntersector;};return SimpleMCSweepLineIntersector;}(EdgeSetIntersector);var IntervalRTreeNode=function IntervalRTreeNode(){this._min=Double.POSITIVE_INFINITY;this._max=Double.NEGATIVE_INFINITY;};var staticAccessors$45={NodeComparator:{configurable:true}};IntervalRTreeNode.prototype.getMin=function getMin(){return this._min;};IntervalRTreeNode.prototype.intersects=function intersects(queryMin,queryMax){if(this._min>queryMax||this._max<queryMin){return false;}return true;};IntervalRTreeNode.prototype.getMax=function getMax(){return this._max;};IntervalRTreeNode.prototype.toString=function toString(){return WKTWriter.toLineString(new Coordinate(this._min,0),new Coordinate(this._max,0));};IntervalRTreeNode.prototype.interfaces_=function interfaces_(){return [];};IntervalRTreeNode.prototype.getClass=function getClass(){return IntervalRTreeNode;};staticAccessors$45.NodeComparator.get=function(){return NodeComparator;};Object.defineProperties(IntervalRTreeNode,staticAccessors$45);var NodeComparator=function NodeComparator(){};NodeComparator.prototype.compare=function compare(o1,o2){var n1=o1;var n2=o2;var mid1=(n1._min+n1._max)/2;var mid2=(n2._min+n2._max)/2;if(mid1<mid2){return -1;}if(mid1>mid2){return 1;}return 0;};NodeComparator.prototype.interfaces_=function interfaces_(){return [Comparator];};NodeComparator.prototype.getClass=function getClass(){return NodeComparator;};var IntervalRTreeLeafNode=function(IntervalRTreeNode$$1){function IntervalRTreeLeafNode(){IntervalRTreeNode$$1.call(this);this._item=null;var min=arguments[0];var max=arguments[1];var item=arguments[2];this._min=min;this._max=max;this._item=item;}if(IntervalRTreeNode$$1)IntervalRTreeLeafNode.__proto__=IntervalRTreeNode$$1;IntervalRTreeLeafNode.prototype=Object.create(IntervalRTreeNode$$1&&IntervalRTreeNode$$1.prototype);IntervalRTreeLeafNode.prototype.constructor=IntervalRTreeLeafNode;IntervalRTreeLeafNode.prototype.query=function query(queryMin,queryMax,visitor){if(!this.intersects(queryMin,queryMax)){return null;}visitor.visitItem(this._item);};IntervalRTreeLeafNode.prototype.interfaces_=function interfaces_(){return [];};IntervalRTreeLeafNode.prototype.getClass=function getClass(){return IntervalRTreeLeafNode;};return IntervalRTreeLeafNode;}(IntervalRTreeNode);var IntervalRTreeBranchNode=function(IntervalRTreeNode$$1){function IntervalRTreeBranchNode(){IntervalRTreeNode$$1.call(this);this._node1=null;this._node2=null;var n1=arguments[0];var n2=arguments[1];this._node1=n1;this._node2=n2;this.buildExtent(this._node1,this._node2);}if(IntervalRTreeNode$$1)IntervalRTreeBranchNode.__proto__=IntervalRTreeNode$$1;IntervalRTreeBranchNode.prototype=Object.create(IntervalRTreeNode$$1&&IntervalRTreeNode$$1.prototype);IntervalRTreeBranchNode.prototype.constructor=IntervalRTreeBranchNode;IntervalRTreeBranchNode.prototype.buildExtent=function buildExtent(n1,n2){this._min=Math.min(n1._min,n2._min);this._max=Math.max(n1._max,n2._max);};IntervalRTreeBranchNode.prototype.query=function query(queryMin,queryMax,visitor){if(!this.intersects(queryMin,queryMax)){return null;}if(this._node1!==null){this._node1.query(queryMin,queryMax,visitor);}if(this._node2!==null){this._node2.query(queryMin,queryMax,visitor);}};IntervalRTreeBranchNode.prototype.interfaces_=function interfaces_(){return [];};IntervalRTreeBranchNode.prototype.getClass=function getClass(){return IntervalRTreeBranchNode;};return IntervalRTreeBranchNode;}(IntervalRTreeNode);var SortedPackedIntervalRTree=function SortedPackedIntervalRTree(){this._leaves=new ArrayList();this._root=null;this._level=0;};SortedPackedIntervalRTree.prototype.buildTree=function buildTree(){var this$1=this;Collections.sort(this._leaves,new IntervalRTreeNode.NodeComparator());var src=this._leaves;var temp=null;var dest=new ArrayList();while(true){this$1.buildLevel(src,dest);if(dest.size()===1){return dest.get(0);}temp=src;src=dest;dest=temp;}};SortedPackedIntervalRTree.prototype.insert=function insert(min,max,item){if(this._root!==null){throw new Error('Index cannot be added to once it has been queried');}this._leaves.add(new IntervalRTreeLeafNode(min,max,item));};SortedPackedIntervalRTree.prototype.query=function query(min,max,visitor){this.init();this._root.query(min,max,visitor);};SortedPackedIntervalRTree.prototype.buildRoot=function buildRoot(){if(this._root!==null){return null;}this._root=this.buildTree();};SortedPackedIntervalRTree.prototype.printNode=function printNode(node){System.out.println(WKTWriter.toLineString(new Coordinate(node._min,this._level),new Coordinate(node._max,this._level)));};SortedPackedIntervalRTree.prototype.init=function init(){if(this._root!==null){return null;}this.buildRoot();};SortedPackedIntervalRTree.prototype.buildLevel=function buildLevel(src,dest){this._level++;dest.clear();for(var i=0;i<src.size();i+=2){var n1=src.get(i);var n2=i+1<src.size()?src.get(i):null;if(n2===null){dest.add(n1);}else{var node=new IntervalRTreeBranchNode(src.get(i),src.get(i+1));dest.add(node);}}};SortedPackedIntervalRTree.prototype.interfaces_=function interfaces_(){return [];};SortedPackedIntervalRTree.prototype.getClass=function getClass(){return SortedPackedIntervalRTree;};var ArrayListVisitor=function ArrayListVisitor(){this._items=new ArrayList();};ArrayListVisitor.prototype.visitItem=function visitItem(item){this._items.add(item);};ArrayListVisitor.prototype.getItems=function getItems(){return this._items;};ArrayListVisitor.prototype.interfaces_=function interfaces_(){return [ItemVisitor];};ArrayListVisitor.prototype.getClass=function getClass(){return ArrayListVisitor;};var IndexedPointInAreaLocator=function IndexedPointInAreaLocator(){this._index=null;var g=arguments[0];if(!hasInterface(g,Polygonal)){throw new IllegalArgumentException('Argument must be Polygonal');}this._index=new IntervalIndexedGeometry(g);};var staticAccessors$44={SegmentVisitor:{configurable:true},IntervalIndexedGeometry:{configurable:true}};IndexedPointInAreaLocator.prototype.locate=function locate(p){var rcc=new RayCrossingCounter(p);var visitor=new SegmentVisitor(rcc);this._index.query(p.y,p.y,visitor);return rcc.getLocation();};IndexedPointInAreaLocator.prototype.interfaces_=function interfaces_(){return [PointOnGeometryLocator];};IndexedPointInAreaLocator.prototype.getClass=function getClass(){return IndexedPointInAreaLocator;};staticAccessors$44.SegmentVisitor.get=function(){return SegmentVisitor;};staticAccessors$44.IntervalIndexedGeometry.get=function(){return IntervalIndexedGeometry;};Object.defineProperties(IndexedPointInAreaLocator,staticAccessors$44);var SegmentVisitor=function SegmentVisitor(){this._counter=null;var counter=arguments[0];this._counter=counter;};SegmentVisitor.prototype.visitItem=function visitItem(item){var seg=item;this._counter.countSegment(seg.getCoordinate(0),seg.getCoordinate(1));};SegmentVisitor.prototype.interfaces_=function interfaces_(){return [ItemVisitor];};SegmentVisitor.prototype.getClass=function getClass(){return SegmentVisitor;};var IntervalIndexedGeometry=function IntervalIndexedGeometry(){this._index=new SortedPackedIntervalRTree();var geom=arguments[0];this.init(geom);};IntervalIndexedGeometry.prototype.init=function init(geom){var this$1=this;var lines=LinearComponentExtracter.getLines(geom);for(var i=lines.iterator();i.hasNext();){var line=i.next();var pts=line.getCoordinates();this$1.addLine(pts);}};IntervalIndexedGeometry.prototype.addLine=function addLine(pts){var this$1=this;for(var i=1;i<pts.length;i++){var seg=new LineSegment(pts[i-1],pts[i]);var min=Math.min(seg.p0.y,seg.p1.y);var max=Math.max(seg.p0.y,seg.p1.y);this$1._index.insert(min,max,seg);}};IntervalIndexedGeometry.prototype.query=function query(){if(arguments.length===2){var min=arguments[0];var max=arguments[1];var visitor=new ArrayListVisitor();this._index.query(min,max,visitor);return visitor.getItems();}else if(arguments.length===3){var min$1=arguments[0];var max$1=arguments[1];var visitor$1=arguments[2];this._index.query(min$1,max$1,visitor$1);}};IntervalIndexedGeometry.prototype.interfaces_=function interfaces_(){return [];};IntervalIndexedGeometry.prototype.getClass=function getClass(){return IntervalIndexedGeometry;};var GeometryGraph=function(PlanarGraph$$1){function GeometryGraph(){PlanarGraph$$1.call(this);this._parentGeom=null;this._lineEdgeMap=new HashMap();this._boundaryNodeRule=null;this._useBoundaryDeterminationRule=true;this._argIndex=null;this._boundaryNodes=null;this._hasTooFewPoints=false;this._invalidPoint=null;this._areaPtLocator=null;this._ptLocator=new PointLocator();if(arguments.length===2){var argIndex=arguments[0];var parentGeom=arguments[1];var boundaryNodeRule=BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;this._argIndex=argIndex;this._parentGeom=parentGeom;this._boundaryNodeRule=boundaryNodeRule;if(parentGeom!==null){this.add(parentGeom);}}else if(arguments.length===3){var argIndex$1=arguments[0];var parentGeom$1=arguments[1];var boundaryNodeRule$1=arguments[2];this._argIndex=argIndex$1;this._parentGeom=parentGeom$1;this._boundaryNodeRule=boundaryNodeRule$1;if(parentGeom$1!==null){this.add(parentGeom$1);}}}if(PlanarGraph$$1)GeometryGraph.__proto__=PlanarGraph$$1;GeometryGraph.prototype=Object.create(PlanarGraph$$1&&PlanarGraph$$1.prototype);GeometryGraph.prototype.constructor=GeometryGraph;GeometryGraph.prototype.insertBoundaryPoint=function insertBoundaryPoint(argIndex,coord){var n=this._nodes.addNode(coord);var lbl=n.getLabel();var boundaryCount=1;var loc=Location.NONE;loc=lbl.getLocation(argIndex,Position.ON);if(loc===Location.BOUNDARY){boundaryCount++;}var newLoc=GeometryGraph.determineBoundary(this._boundaryNodeRule,boundaryCount);lbl.setLocation(argIndex,newLoc);};GeometryGraph.prototype.computeSelfNodes=function computeSelfNodes(){if(arguments.length===2){var li=arguments[0];var computeRingSelfNodes=arguments[1];return this.computeSelfNodes(li,computeRingSelfNodes,false);}else if(arguments.length===3){var li$1=arguments[0];var computeRingSelfNodes$1=arguments[1];var isDoneIfProperInt=arguments[2];var si=new SegmentIntersector$2(li$1,true,false);si.setIsDoneIfProperInt(isDoneIfProperInt);var esi=this.createEdgeSetIntersector();var isRings=this._parentGeom instanceof LinearRing||this._parentGeom instanceof Polygon||this._parentGeom instanceof MultiPolygon;var computeAllSegments=computeRingSelfNodes$1||!isRings;esi.computeIntersections(this._edges,si,computeAllSegments);this.addSelfIntersectionNodes(this._argIndex);return si;}};GeometryGraph.prototype.computeSplitEdges=function computeSplitEdges(edgelist){for(var i=this._edges.iterator();i.hasNext();){var e=i.next();e.eiList.addSplitEdges(edgelist);}};GeometryGraph.prototype.computeEdgeIntersections=function computeEdgeIntersections(g,li,includeProper){var si=new SegmentIntersector$2(li,includeProper,true);si.setBoundaryNodes(this.getBoundaryNodes(),g.getBoundaryNodes());var esi=this.createEdgeSetIntersector();esi.computeIntersections(this._edges,g._edges,si);return si;};GeometryGraph.prototype.getGeometry=function getGeometry(){return this._parentGeom;};GeometryGraph.prototype.getBoundaryNodeRule=function getBoundaryNodeRule(){return this._boundaryNodeRule;};GeometryGraph.prototype.hasTooFewPoints=function hasTooFewPoints(){return this._hasTooFewPoints;};GeometryGraph.prototype.addPoint=function addPoint(){if(arguments[0]instanceof Point){var p=arguments[0];var coord=p.getCoordinate();this.insertPoint(this._argIndex,coord,Location.INTERIOR);}else if(arguments[0]instanceof Coordinate){var pt=arguments[0];this.insertPoint(this._argIndex,pt,Location.INTERIOR);}};GeometryGraph.prototype.addPolygon=function addPolygon(p){var this$1=this;this.addPolygonRing(p.getExteriorRing(),Location.EXTERIOR,Location.INTERIOR);for(var i=0;i<p.getNumInteriorRing();i++){var hole=p.getInteriorRingN(i);this$1.addPolygonRing(hole,Location.INTERIOR,Location.EXTERIOR);}};GeometryGraph.prototype.addEdge=function addEdge(e){this.insertEdge(e);var coord=e.getCoordinates();this.insertPoint(this._argIndex,coord[0],Location.BOUNDARY);this.insertPoint(this._argIndex,coord[coord.length-1],Location.BOUNDARY);};GeometryGraph.prototype.addLineString=function addLineString(line){var coord=CoordinateArrays.removeRepeatedPoints(line.getCoordinates());if(coord.length<2){this._hasTooFewPoints=true;this._invalidPoint=coord[0];return null;}var e=new Edge(coord,new Label(this._argIndex,Location.INTERIOR));this._lineEdgeMap.put(line,e);this.insertEdge(e);Assert.isTrue(coord.length>=2,'found LineString with single point');this.insertBoundaryPoint(this._argIndex,coord[0]);this.insertBoundaryPoint(this._argIndex,coord[coord.length-1]);};GeometryGraph.prototype.getInvalidPoint=function getInvalidPoint(){return this._invalidPoint;};GeometryGraph.prototype.getBoundaryPoints=function getBoundaryPoints(){var coll=this.getBoundaryNodes();var pts=new Array(coll.size()).fill(null);var i=0;for(var it=coll.iterator();it.hasNext();){var node=it.next();pts[i++]=node.getCoordinate().copy();}return pts;};GeometryGraph.prototype.getBoundaryNodes=function getBoundaryNodes(){if(this._boundaryNodes===null){this._boundaryNodes=this._nodes.getBoundaryNodes(this._argIndex);}return this._boundaryNodes;};GeometryGraph.prototype.addSelfIntersectionNode=function addSelfIntersectionNode(argIndex,coord,loc){if(this.isBoundaryNode(argIndex,coord)){return null;}if(loc===Location.BOUNDARY&&this._useBoundaryDeterminationRule){this.insertBoundaryPoint(argIndex,coord);}else{this.insertPoint(argIndex,coord,loc);}};GeometryGraph.prototype.addPolygonRing=function addPolygonRing(lr,cwLeft,cwRight){if(lr.isEmpty()){return null;}var coord=CoordinateArrays.removeRepeatedPoints(lr.getCoordinates());if(coord.length<4){this._hasTooFewPoints=true;this._invalidPoint=coord[0];return null;}var left=cwLeft;var right=cwRight;if(CGAlgorithms.isCCW(coord)){left=cwRight;right=cwLeft;}var e=new Edge(coord,new Label(this._argIndex,Location.BOUNDARY,left,right));this._lineEdgeMap.put(lr,e);this.insertEdge(e);this.insertPoint(this._argIndex,coord[0],Location.BOUNDARY);};GeometryGraph.prototype.insertPoint=function insertPoint(argIndex,coord,onLocation){var n=this._nodes.addNode(coord);var lbl=n.getLabel();if(lbl===null){n._label=new Label(argIndex,onLocation);}else{lbl.setLocation(argIndex,onLocation);}};GeometryGraph.prototype.createEdgeSetIntersector=function createEdgeSetIntersector(){return new SimpleMCSweepLineIntersector();};GeometryGraph.prototype.addSelfIntersectionNodes=function addSelfIntersectionNodes(argIndex){var this$1=this;for(var i=this._edges.iterator();i.hasNext();){var e=i.next();var eLoc=e.getLabel().getLocation(argIndex);for(var eiIt=e.eiList.iterator();eiIt.hasNext();){var ei=eiIt.next();this$1.addSelfIntersectionNode(argIndex,ei.coord,eLoc);}}};GeometryGraph.prototype.add=function add(){if(arguments.length===1){var g=arguments[0];if(g.isEmpty()){return null;}if(g instanceof MultiPolygon){this._useBoundaryDeterminationRule=false;}if(g instanceof Polygon){this.addPolygon(g);}else if(g instanceof LineString){this.addLineString(g);}else if(g instanceof Point){this.addPoint(g);}else if(g instanceof MultiPoint){this.addCollection(g);}else if(g instanceof MultiLineString){this.addCollection(g);}else if(g instanceof MultiPolygon){this.addCollection(g);}else if(g instanceof GeometryCollection){this.addCollection(g);}else{throw new Error(g.getClass().getName());}}else{return PlanarGraph$$1.prototype.add.apply(this,arguments);}};GeometryGraph.prototype.addCollection=function addCollection(gc){var this$1=this;for(var i=0;i<gc.getNumGeometries();i++){var g=gc.getGeometryN(i);this$1.add(g);}};GeometryGraph.prototype.locate=function locate(pt){if(hasInterface(this._parentGeom,Polygonal)&&this._parentGeom.getNumGeometries()>50){if(this._areaPtLocator===null){this._areaPtLocator=new IndexedPointInAreaLocator(this._parentGeom);}return this._areaPtLocator.locate(pt);}return this._ptLocator.locate(pt,this._parentGeom);};GeometryGraph.prototype.findEdge=function findEdge(){if(arguments.length===1){var line=arguments[0];return this._lineEdgeMap.get(line);}else{return PlanarGraph$$1.prototype.findEdge.apply(this,arguments);}};GeometryGraph.prototype.interfaces_=function interfaces_(){return [];};GeometryGraph.prototype.getClass=function getClass(){return GeometryGraph;};GeometryGraph.determineBoundary=function determineBoundary(boundaryNodeRule,boundaryCount){return boundaryNodeRule.isInBoundary(boundaryCount)?Location.BOUNDARY:Location.INTERIOR;};return GeometryGraph;}(PlanarGraph);var GeometryGraphOp=function GeometryGraphOp(){this._li=new RobustLineIntersector();this._resultPrecisionModel=null;this._arg=null;if(arguments.length===1){var g0=arguments[0];this.setComputationPrecision(g0.getPrecisionModel());this._arg=new Array(1).fill(null);this._arg[0]=new GeometryGraph(0,g0);}else if(arguments.length===2){var g0$1=arguments[0];var g1=arguments[1];var boundaryNodeRule=BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;if(g0$1.getPrecisionModel().compareTo(g1.getPrecisionModel())>=0){this.setComputationPrecision(g0$1.getPrecisionModel());}else{this.setComputationPrecision(g1.getPrecisionModel());}this._arg=new Array(2).fill(null);this._arg[0]=new GeometryGraph(0,g0$1,boundaryNodeRule);this._arg[1]=new GeometryGraph(1,g1,boundaryNodeRule);}else if(arguments.length===3){var g0$2=arguments[0];var g1$1=arguments[1];var boundaryNodeRule$1=arguments[2];if(g0$2.getPrecisionModel().compareTo(g1$1.getPrecisionModel())>=0){this.setComputationPrecision(g0$2.getPrecisionModel());}else{this.setComputationPrecision(g1$1.getPrecisionModel());}this._arg=new Array(2).fill(null);this._arg[0]=new GeometryGraph(0,g0$2,boundaryNodeRule$1);this._arg[1]=new GeometryGraph(1,g1$1,boundaryNodeRule$1);}};GeometryGraphOp.prototype.getArgGeometry=function getArgGeometry(i){return this._arg[i].getGeometry();};GeometryGraphOp.prototype.setComputationPrecision=function setComputationPrecision(pm){this._resultPrecisionModel=pm;this._li.setPrecisionModel(this._resultPrecisionModel);};GeometryGraphOp.prototype.interfaces_=function interfaces_(){return [];};GeometryGraphOp.prototype.getClass=function getClass(){return GeometryGraphOp;};// operation.geometrygraph
    var GeometryMapper=function GeometryMapper(){};GeometryMapper.prototype.interfaces_=function interfaces_(){return [];};GeometryMapper.prototype.getClass=function getClass(){return GeometryMapper;};GeometryMapper.map=function map(){if(arguments[0]instanceof Geometry&&hasInterface(arguments[1],GeometryMapper.MapOp)){var geom=arguments[0];var op=arguments[1];var mapped=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var g=op.map(geom.getGeometryN(i));if(g!==null){mapped.add(g);}}return geom.getFactory().buildGeometry(mapped);}else if(hasInterface(arguments[0],Collection)&&hasInterface(arguments[1],GeometryMapper.MapOp)){var geoms=arguments[0];var op$1=arguments[1];var mapped$1=new ArrayList();for(var i$1=geoms.iterator();i$1.hasNext();){var g$1=i$1.next();var gr=op$1.map(g$1);if(gr!==null){mapped$1.add(gr);}}return mapped$1;}};GeometryMapper.MapOp=function MapOp(){};var OverlayOp=function(GeometryGraphOp){function OverlayOp(){var g0=arguments[0];var g1=arguments[1];GeometryGraphOp.call(this,g0,g1);this._ptLocator=new PointLocator();this._geomFact=null;this._resultGeom=null;this._graph=null;this._edgeList=new EdgeList();this._resultPolyList=new ArrayList();this._resultLineList=new ArrayList();this._resultPointList=new ArrayList();this._graph=new PlanarGraph(new OverlayNodeFactory());this._geomFact=g0.getFactory();}if(GeometryGraphOp)OverlayOp.__proto__=GeometryGraphOp;OverlayOp.prototype=Object.create(GeometryGraphOp&&GeometryGraphOp.prototype);OverlayOp.prototype.constructor=OverlayOp;OverlayOp.prototype.insertUniqueEdge=function insertUniqueEdge(e){var existingEdge=this._edgeList.findEqualEdge(e);if(existingEdge!==null){var existingLabel=existingEdge.getLabel();var labelToMerge=e.getLabel();if(!existingEdge.isPointwiseEqual(e)){labelToMerge=new Label(e.getLabel());labelToMerge.flip();}var depth=existingEdge.getDepth();if(depth.isNull()){depth.add(existingLabel);}depth.add(labelToMerge);existingLabel.merge(labelToMerge);}else{this._edgeList.add(e);}};OverlayOp.prototype.getGraph=function getGraph(){return this._graph;};OverlayOp.prototype.cancelDuplicateResultEdges=function cancelDuplicateResultEdges(){for(var it=this._graph.getEdgeEnds().iterator();it.hasNext();){var de=it.next();var sym=de.getSym();if(de.isInResult()&&sym.isInResult()){de.setInResult(false);sym.setInResult(false);}}};OverlayOp.prototype.isCoveredByLA=function isCoveredByLA(coord){if(this.isCovered(coord,this._resultLineList)){return true;}if(this.isCovered(coord,this._resultPolyList)){return true;}return false;};OverlayOp.prototype.computeGeometry=function computeGeometry(resultPointList,resultLineList,resultPolyList,opcode){var geomList=new ArrayList();geomList.addAll(resultPointList);geomList.addAll(resultLineList);geomList.addAll(resultPolyList);if(geomList.isEmpty()){return OverlayOp.createEmptyResult(opcode,this._arg[0].getGeometry(),this._arg[1].getGeometry(),this._geomFact);}return this._geomFact.buildGeometry(geomList);};OverlayOp.prototype.mergeSymLabels=function mergeSymLabels(){for(var nodeit=this._graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().mergeSymLabels();}};OverlayOp.prototype.isCovered=function isCovered(coord,geomList){var this$1=this;for(var it=geomList.iterator();it.hasNext();){var geom=it.next();var loc=this$1._ptLocator.locate(coord,geom);if(loc!==Location.EXTERIOR){return true;}}return false;};OverlayOp.prototype.replaceCollapsedEdges=function replaceCollapsedEdges(){var newEdges=new ArrayList();for(var it=this._edgeList.iterator();it.hasNext();){var e=it.next();if(e.isCollapsed()){it.remove();newEdges.add(e.getCollapsedEdge());}}this._edgeList.addAll(newEdges);};OverlayOp.prototype.updateNodeLabelling=function updateNodeLabelling(){for(var nodeit=this._graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();var lbl=node.getEdges().getLabel();node.getLabel().merge(lbl);}};OverlayOp.prototype.getResultGeometry=function getResultGeometry(overlayOpCode){this.computeOverlay(overlayOpCode);return this._resultGeom;};OverlayOp.prototype.insertUniqueEdges=function insertUniqueEdges(edges){var this$1=this;for(var i=edges.iterator();i.hasNext();){var e=i.next();this$1.insertUniqueEdge(e);}};OverlayOp.prototype.computeOverlay=function computeOverlay(opCode){this.copyPoints(0);this.copyPoints(1);this._arg[0].computeSelfNodes(this._li,false);this._arg[1].computeSelfNodes(this._li,false);this._arg[0].computeEdgeIntersections(this._arg[1],this._li,true);var baseSplitEdges=new ArrayList();this._arg[0].computeSplitEdges(baseSplitEdges);this._arg[1].computeSplitEdges(baseSplitEdges);// const splitEdges = baseSplitEdges
    this.insertUniqueEdges(baseSplitEdges);this.computeLabelsFromDepths();this.replaceCollapsedEdges();EdgeNodingValidator.checkValid(this._edgeList.getEdges());this._graph.addEdges(this._edgeList.getEdges());this.computeLabelling();this.labelIncompleteNodes();this.findResultAreaEdges(opCode);this.cancelDuplicateResultEdges();var polyBuilder=new PolygonBuilder(this._geomFact);polyBuilder.add(this._graph);this._resultPolyList=polyBuilder.getPolygons();var lineBuilder=new LineBuilder(this,this._geomFact,this._ptLocator);this._resultLineList=lineBuilder.build(opCode);var pointBuilder=new PointBuilder(this,this._geomFact,this._ptLocator);this._resultPointList=pointBuilder.build(opCode);this._resultGeom=this.computeGeometry(this._resultPointList,this._resultLineList,this._resultPolyList,opCode);};OverlayOp.prototype.labelIncompleteNode=function labelIncompleteNode(n,targetIndex){var loc=this._ptLocator.locate(n.getCoordinate(),this._arg[targetIndex].getGeometry());n.getLabel().setLocation(targetIndex,loc);};OverlayOp.prototype.copyPoints=function copyPoints(argIndex){var this$1=this;for(var i=this._arg[argIndex].getNodeIterator();i.hasNext();){var graphNode=i.next();var newNode=this$1._graph.addNode(graphNode.getCoordinate());newNode.setLabel(argIndex,graphNode.getLabel().getLocation(argIndex));}};OverlayOp.prototype.findResultAreaEdges=function findResultAreaEdges(opCode){for(var it=this._graph.getEdgeEnds().iterator();it.hasNext();){var de=it.next();var label=de.getLabel();if(label.isArea()&&!de.isInteriorAreaEdge()&&OverlayOp.isResultOfOp(label.getLocation(0,Position.RIGHT),label.getLocation(1,Position.RIGHT),opCode)){de.setInResult(true);}}};OverlayOp.prototype.computeLabelsFromDepths=function computeLabelsFromDepths(){for(var it=this._edgeList.iterator();it.hasNext();){var e=it.next();var lbl=e.getLabel();var depth=e.getDepth();if(!depth.isNull()){depth.normalize();for(var i=0;i<2;i++){if(!lbl.isNull(i)&&lbl.isArea()&&!depth.isNull(i)){if(depth.getDelta(i)===0){lbl.toLine(i);}else{Assert.isTrue(!depth.isNull(i,Position.LEFT),'depth of LEFT side has not been initialized');lbl.setLocation(i,Position.LEFT,depth.getLocation(i,Position.LEFT));Assert.isTrue(!depth.isNull(i,Position.RIGHT),'depth of RIGHT side has not been initialized');lbl.setLocation(i,Position.RIGHT,depth.getLocation(i,Position.RIGHT));}}}}}};OverlayOp.prototype.computeLabelling=function computeLabelling(){var this$1=this;for(var nodeit=this._graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().computeLabelling(this$1._arg);}this.mergeSymLabels();this.updateNodeLabelling();};OverlayOp.prototype.labelIncompleteNodes=function labelIncompleteNodes(){var this$1=this;// let nodeCount = 0
    for(var ni=this._graph.getNodes().iterator();ni.hasNext();){var n=ni.next();var label=n.getLabel();if(n.isIsolated()){// nodeCount++
    if(label.isNull(0)){this$1.labelIncompleteNode(n,0);}else{this$1.labelIncompleteNode(n,1);}}n.getEdges().updateLabelling(label);}};OverlayOp.prototype.isCoveredByA=function isCoveredByA(coord){if(this.isCovered(coord,this._resultPolyList)){return true;}return false;};OverlayOp.prototype.interfaces_=function interfaces_(){return [];};OverlayOp.prototype.getClass=function getClass(){return OverlayOp;};return OverlayOp;}(GeometryGraphOp);OverlayOp.overlayOp=function(geom0,geom1,opCode){var gov=new OverlayOp(geom0,geom1);var geomOv=gov.getResultGeometry(opCode);return geomOv;};OverlayOp.intersection=function(g,other){if(g.isEmpty()||other.isEmpty()){return OverlayOp.createEmptyResult(OverlayOp.INTERSECTION,g,other,g.getFactory());}if(g.isGeometryCollection()){var g2=other;return GeometryCollectionMapper.map(g,{interfaces_:function interfaces_(){return [GeometryMapper.MapOp];},map:function map(g){return g.intersection(g2);}});}g.checkNotGeometryCollection(g);g.checkNotGeometryCollection(other);return SnapIfNeededOverlayOp.overlayOp(g,other,OverlayOp.INTERSECTION);};OverlayOp.symDifference=function(g,other){if(g.isEmpty()||other.isEmpty()){if(g.isEmpty()&&other.isEmpty()){return OverlayOp.createEmptyResult(OverlayOp.SYMDIFFERENCE,g,other,g.getFactory());}if(g.isEmpty()){return other.copy();}if(other.isEmpty()){return g.copy();}}g.checkNotGeometryCollection(g);g.checkNotGeometryCollection(other);return SnapIfNeededOverlayOp.overlayOp(g,other,OverlayOp.SYMDIFFERENCE);};OverlayOp.resultDimension=function(opCode,g0,g1){var dim0=g0.getDimension();var dim1=g1.getDimension();var resultDimension=-1;switch(opCode){case OverlayOp.INTERSECTION:resultDimension=Math.min(dim0,dim1);break;case OverlayOp.UNION:resultDimension=Math.max(dim0,dim1);break;case OverlayOp.DIFFERENCE:resultDimension=dim0;break;case OverlayOp.SYMDIFFERENCE:resultDimension=Math.max(dim0,dim1);break;default:}return resultDimension;};OverlayOp.createEmptyResult=function(overlayOpCode,a,b,geomFact){var result=null;switch(OverlayOp.resultDimension(overlayOpCode,a,b)){case-1:result=geomFact.createGeometryCollection(new Array(0).fill(null));break;case 0:result=geomFact.createPoint();break;case 1:result=geomFact.createLineString();break;case 2:result=geomFact.createPolygon();break;default:}return result;};OverlayOp.difference=function(g,other){if(g.isEmpty()){return OverlayOp.createEmptyResult(OverlayOp.DIFFERENCE,g,other,g.getFactory());}if(other.isEmpty()){return g.copy();}g.checkNotGeometryCollection(g);g.checkNotGeometryCollection(other);return SnapIfNeededOverlayOp.overlayOp(g,other,OverlayOp.DIFFERENCE);};OverlayOp.isResultOfOp=function(){if(arguments.length===2){var label=arguments[0];var opCode=arguments[1];var loc0=label.getLocation(0);var loc1=label.getLocation(1);return OverlayOp.isResultOfOp(loc0,loc1,opCode);}else if(arguments.length===3){var loc0$1=arguments[0];var loc1$1=arguments[1];var overlayOpCode=arguments[2];if(loc0$1===Location.BOUNDARY){loc0$1=Location.INTERIOR;}if(loc1$1===Location.BOUNDARY){loc1$1=Location.INTERIOR;}switch(overlayOpCode){case OverlayOp.INTERSECTION:return loc0$1===Location.INTERIOR&&loc1$1===Location.INTERIOR;case OverlayOp.UNION:return loc0$1===Location.INTERIOR||loc1$1===Location.INTERIOR;case OverlayOp.DIFFERENCE:return loc0$1===Location.INTERIOR&&loc1$1!==Location.INTERIOR;case OverlayOp.SYMDIFFERENCE:return loc0$1===Location.INTERIOR&&loc1$1!==Location.INTERIOR||loc0$1!==Location.INTERIOR&&loc1$1===Location.INTERIOR;default:}return false;}};OverlayOp.INTERSECTION=1;OverlayOp.UNION=2;OverlayOp.DIFFERENCE=3;OverlayOp.SYMDIFFERENCE=4;var FuzzyPointLocator=function FuzzyPointLocator(){this._g=null;this._boundaryDistanceTolerance=null;this._linework=null;this._ptLocator=new PointLocator();this._seg=new LineSegment();var g=arguments[0];var boundaryDistanceTolerance=arguments[1];this._g=g;this._boundaryDistanceTolerance=boundaryDistanceTolerance;this._linework=this.extractLinework(g);};FuzzyPointLocator.prototype.isWithinToleranceOfBoundary=function isWithinToleranceOfBoundary(pt){var this$1=this;for(var i=0;i<this._linework.getNumGeometries();i++){var line=this$1._linework.getGeometryN(i);var seq=line.getCoordinateSequence();for(var j=0;j<seq.size()-1;j++){seq.getCoordinate(j,this$1._seg.p0);seq.getCoordinate(j+1,this$1._seg.p1);var dist=this$1._seg.distance(pt);if(dist<=this$1._boundaryDistanceTolerance){return true;}}}return false;};FuzzyPointLocator.prototype.getLocation=function getLocation(pt){if(this.isWithinToleranceOfBoundary(pt)){return Location.BOUNDARY;}return this._ptLocator.locate(pt,this._g);};FuzzyPointLocator.prototype.extractLinework=function extractLinework(g){var extracter=new PolygonalLineworkExtracter();g.apply(extracter);var linework=extracter.getLinework();var lines=GeometryFactory.toLineStringArray(linework);return g.getFactory().createMultiLineString(lines);};FuzzyPointLocator.prototype.interfaces_=function interfaces_(){return [];};FuzzyPointLocator.prototype.getClass=function getClass(){return FuzzyPointLocator;};var PolygonalLineworkExtracter=function PolygonalLineworkExtracter(){this._linework=null;this._linework=new ArrayList();};PolygonalLineworkExtracter.prototype.getLinework=function getLinework(){return this._linework;};PolygonalLineworkExtracter.prototype.filter=function filter(g){var this$1=this;if(g instanceof Polygon){var poly=g;this._linework.add(poly.getExteriorRing());for(var i=0;i<poly.getNumInteriorRing();i++){this$1._linework.add(poly.getInteriorRingN(i));}}};PolygonalLineworkExtracter.prototype.interfaces_=function interfaces_(){return [GeometryFilter];};PolygonalLineworkExtracter.prototype.getClass=function getClass(){return PolygonalLineworkExtracter;};var OffsetPointGenerator=function OffsetPointGenerator(){this._g=null;this._doLeft=true;this._doRight=true;var g=arguments[0];this._g=g;};OffsetPointGenerator.prototype.extractPoints=function extractPoints(line,offsetDistance,offsetPts){var this$1=this;var pts=line.getCoordinates();for(var i=0;i<pts.length-1;i++){this$1.computeOffsetPoints(pts[i],pts[i+1],offsetDistance,offsetPts);}};OffsetPointGenerator.prototype.setSidesToGenerate=function setSidesToGenerate(doLeft,doRight){this._doLeft=doLeft;this._doRight=doRight;};OffsetPointGenerator.prototype.getPoints=function getPoints(offsetDistance){var this$1=this;var offsetPts=new ArrayList();var lines=LinearComponentExtracter.getLines(this._g);for(var i=lines.iterator();i.hasNext();){var line=i.next();this$1.extractPoints(line,offsetDistance,offsetPts);}return offsetPts;};OffsetPointGenerator.prototype.computeOffsetPoints=function computeOffsetPoints(p0,p1,offsetDistance,offsetPts){var dx=p1.x-p0.x;var dy=p1.y-p0.y;var len=Math.sqrt(dx*dx+dy*dy);var ux=offsetDistance*dx/len;var uy=offsetDistance*dy/len;var midX=(p1.x+p0.x)/2;var midY=(p1.y+p0.y)/2;if(this._doLeft){var offsetLeft=new Coordinate(midX-uy,midY+ux);offsetPts.add(offsetLeft);}if(this._doRight){var offsetRight=new Coordinate(midX+uy,midY-ux);offsetPts.add(offsetRight);}};OffsetPointGenerator.prototype.interfaces_=function interfaces_(){return [];};OffsetPointGenerator.prototype.getClass=function getClass(){return OffsetPointGenerator;};var OverlayResultValidator=function OverlayResultValidator(){this._geom=null;this._locFinder=null;this._location=new Array(3).fill(null);this._invalidLocation=null;this._boundaryDistanceTolerance=OverlayResultValidator.TOLERANCE;this._testCoords=new ArrayList();var a=arguments[0];var b=arguments[1];var result=arguments[2];this._boundaryDistanceTolerance=OverlayResultValidator.computeBoundaryDistanceTolerance(a,b);this._geom=[a,b,result];this._locFinder=[new FuzzyPointLocator(this._geom[0],this._boundaryDistanceTolerance),new FuzzyPointLocator(this._geom[1],this._boundaryDistanceTolerance),new FuzzyPointLocator(this._geom[2],this._boundaryDistanceTolerance)];};var staticAccessors$46={TOLERANCE:{configurable:true}};OverlayResultValidator.prototype.reportResult=function reportResult(overlayOp,location,expectedInterior){System.out.println('Overlay result invalid - A:'+Location.toLocationSymbol(location[0])+' B:'+Location.toLocationSymbol(location[1])+' expected:'+(expectedInterior?'i':'e')+' actual:'+Location.toLocationSymbol(location[2]));};OverlayResultValidator.prototype.isValid=function isValid(overlayOp){this.addTestPts(this._geom[0]);this.addTestPts(this._geom[1]);var isValid=this.checkValid(overlayOp);return isValid;};OverlayResultValidator.prototype.checkValid=function checkValid(){var this$1=this;if(arguments.length===1){var overlayOp=arguments[0];for(var i=0;i<this._testCoords.size();i++){var pt=this$1._testCoords.get(i);if(!this$1.checkValid(overlayOp,pt)){this$1._invalidLocation=pt;return false;}}return true;}else if(arguments.length===2){var overlayOp$1=arguments[0];var pt$1=arguments[1];this._location[0]=this._locFinder[0].getLocation(pt$1);this._location[1]=this._locFinder[1].getLocation(pt$1);this._location[2]=this._locFinder[2].getLocation(pt$1);if(OverlayResultValidator.hasLocation(this._location,Location.BOUNDARY)){return true;}return this.isValidResult(overlayOp$1,this._location);}};OverlayResultValidator.prototype.addTestPts=function addTestPts(g){var ptGen=new OffsetPointGenerator(g);this._testCoords.addAll(ptGen.getPoints(5*this._boundaryDistanceTolerance));};OverlayResultValidator.prototype.isValidResult=function isValidResult(overlayOp,location){var expectedInterior=OverlayOp.isResultOfOp(location[0],location[1],overlayOp);var resultInInterior=location[2]===Location.INTERIOR;var isValid=!(expectedInterior^resultInInterior);if(!isValid){this.reportResult(overlayOp,location,expectedInterior);}return isValid;};OverlayResultValidator.prototype.getInvalidLocation=function getInvalidLocation(){return this._invalidLocation;};OverlayResultValidator.prototype.interfaces_=function interfaces_(){return [];};OverlayResultValidator.prototype.getClass=function getClass(){return OverlayResultValidator;};OverlayResultValidator.hasLocation=function hasLocation(location,loc){for(var i=0;i<3;i++){if(location[i]===loc){return true;}}return false;};OverlayResultValidator.computeBoundaryDistanceTolerance=function computeBoundaryDistanceTolerance(g0,g1){return Math.min(GeometrySnapper.computeSizeBasedSnapTolerance(g0),GeometrySnapper.computeSizeBasedSnapTolerance(g1));};OverlayResultValidator.isValid=function isValid(a,b,overlayOp,result){var validator=new OverlayResultValidator(a,b,result);return validator.isValid(overlayOp);};staticAccessors$46.TOLERANCE.get=function(){return 0.000001;};Object.defineProperties(OverlayResultValidator,staticAccessors$46);// operation.overlay
    var GeometryCombiner=function GeometryCombiner(geoms){this._geomFactory=null;this._skipEmpty=false;this._inputGeoms=null;this._geomFactory=GeometryCombiner.extractFactory(geoms);this._inputGeoms=geoms;};GeometryCombiner.prototype.extractElements=function extractElements(geom,elems){var this$1=this;if(geom===null){return null;}for(var i=0;i<geom.getNumGeometries();i++){var elemGeom=geom.getGeometryN(i);if(this$1._skipEmpty&&elemGeom.isEmpty()){continue;}elems.add(elemGeom);}};GeometryCombiner.prototype.combine=function combine(){var this$1=this;var elems=new ArrayList();for(var i=this._inputGeoms.iterator();i.hasNext();){var g=i.next();this$1.extractElements(g,elems);}if(elems.size()===0){if(this._geomFactory!==null){return this._geomFactory.createGeometryCollection(null);}return null;}return this._geomFactory.buildGeometry(elems);};GeometryCombiner.prototype.interfaces_=function interfaces_(){return [];};GeometryCombiner.prototype.getClass=function getClass(){return GeometryCombiner;};GeometryCombiner.combine=function combine(){if(arguments.length===1){var geoms=arguments[0];var combiner=new GeometryCombiner(geoms);return combiner.combine();}else if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];var combiner$1=new GeometryCombiner(GeometryCombiner.createList(g0,g1));return combiner$1.combine();}else if(arguments.length===3){var g0$1=arguments[0];var g1$1=arguments[1];var g2=arguments[2];var combiner$2=new GeometryCombiner(GeometryCombiner.createList(g0$1,g1$1,g2));return combiner$2.combine();}};GeometryCombiner.extractFactory=function extractFactory(geoms){if(geoms.isEmpty()){return null;}return geoms.iterator().next().getFactory();};GeometryCombiner.createList=function createList(){if(arguments.length===2){var obj0=arguments[0];var obj1=arguments[1];var list=new ArrayList();list.add(obj0);list.add(obj1);return list;}else if(arguments.length===3){var obj0$1=arguments[0];var obj1$1=arguments[1];var obj2=arguments[2];var list$1=new ArrayList();list$1.add(obj0$1);list$1.add(obj1$1);list$1.add(obj2);return list$1;}};var CascadedPolygonUnion=function CascadedPolygonUnion(){this._inputPolys=null;this._geomFactory=null;var polys=arguments[0];this._inputPolys=polys;if(this._inputPolys===null){this._inputPolys=new ArrayList();}};var staticAccessors$47={STRTREE_NODE_CAPACITY:{configurable:true}};CascadedPolygonUnion.prototype.reduceToGeometries=function reduceToGeometries(geomTree){var this$1=this;var geoms=new ArrayList();for(var i=geomTree.iterator();i.hasNext();){var o=i.next();var geom=null;if(hasInterface(o,List)){geom=this$1.unionTree(o);}else if(o instanceof Geometry){geom=o;}geoms.add(geom);}return geoms;};CascadedPolygonUnion.prototype.extractByEnvelope=function extractByEnvelope(env,geom,disjointGeoms){var intersectingGeoms=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var elem=geom.getGeometryN(i);if(elem.getEnvelopeInternal().intersects(env)){intersectingGeoms.add(elem);}else{disjointGeoms.add(elem);}}return this._geomFactory.buildGeometry(intersectingGeoms);};CascadedPolygonUnion.prototype.unionOptimized=function unionOptimized(g0,g1){var g0Env=g0.getEnvelopeInternal();var g1Env=g1.getEnvelopeInternal();if(!g0Env.intersects(g1Env)){var combo=GeometryCombiner.combine(g0,g1);return combo;}if(g0.getNumGeometries()<=1&&g1.getNumGeometries()<=1){return this.unionActual(g0,g1);}var commonEnv=g0Env.intersection(g1Env);return this.unionUsingEnvelopeIntersection(g0,g1,commonEnv);};CascadedPolygonUnion.prototype.union=function union(){if(this._inputPolys===null){throw new Error('union() method cannot be called twice');}if(this._inputPolys.isEmpty()){return null;}this._geomFactory=this._inputPolys.iterator().next().getFactory();var index=new STRtree(CascadedPolygonUnion.STRTREE_NODE_CAPACITY);for(var i=this._inputPolys.iterator();i.hasNext();){var item=i.next();index.insert(item.getEnvelopeInternal(),item);}this._inputPolys=null;var itemTree=index.itemsTree();var unionAll=this.unionTree(itemTree);return unionAll;};CascadedPolygonUnion.prototype.binaryUnion=function binaryUnion(){if(arguments.length===1){var geoms=arguments[0];return this.binaryUnion(geoms,0,geoms.size());}else if(arguments.length===3){var geoms$1=arguments[0];var start=arguments[1];var end=arguments[2];if(end-start<=1){var g0=CascadedPolygonUnion.getGeometry(geoms$1,start);return this.unionSafe(g0,null);}else if(end-start===2){return this.unionSafe(CascadedPolygonUnion.getGeometry(geoms$1,start),CascadedPolygonUnion.getGeometry(geoms$1,start+1));}else{var mid=Math.trunc((end+start)/2);var g0$1=this.binaryUnion(geoms$1,start,mid);var g1=this.binaryUnion(geoms$1,mid,end);return this.unionSafe(g0$1,g1);}}};CascadedPolygonUnion.prototype.repeatedUnion=function repeatedUnion(geoms){var union=null;for(var i=geoms.iterator();i.hasNext();){var g=i.next();if(union===null){union=g.copy();}else{union=union.union(g);}}return union;};CascadedPolygonUnion.prototype.unionSafe=function unionSafe(g0,g1){if(g0===null&&g1===null){return null;}if(g0===null){return g1.copy();}if(g1===null){return g0.copy();}return this.unionOptimized(g0,g1);};CascadedPolygonUnion.prototype.unionActual=function unionActual(g0,g1){return CascadedPolygonUnion.restrictToPolygons(g0.union(g1));};CascadedPolygonUnion.prototype.unionTree=function unionTree(geomTree){var geoms=this.reduceToGeometries(geomTree);var union=this.binaryUnion(geoms);return union;};CascadedPolygonUnion.prototype.unionUsingEnvelopeIntersection=function unionUsingEnvelopeIntersection(g0,g1,common){var disjointPolys=new ArrayList();var g0Int=this.extractByEnvelope(common,g0,disjointPolys);var g1Int=this.extractByEnvelope(common,g1,disjointPolys);var union=this.unionActual(g0Int,g1Int);disjointPolys.add(union);var overallUnion=GeometryCombiner.combine(disjointPolys);return overallUnion;};CascadedPolygonUnion.prototype.bufferUnion=function bufferUnion(){if(arguments.length===1){var geoms=arguments[0];var factory=geoms.get(0).getFactory();var gColl=factory.buildGeometry(geoms);var unionAll=gColl.buffer(0.0);return unionAll;}else if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];var factory$1=g0.getFactory();var gColl$1=factory$1.createGeometryCollection([g0,g1]);var unionAll$1=gColl$1.buffer(0.0);return unionAll$1;}};CascadedPolygonUnion.prototype.interfaces_=function interfaces_(){return [];};CascadedPolygonUnion.prototype.getClass=function getClass(){return CascadedPolygonUnion;};CascadedPolygonUnion.restrictToPolygons=function restrictToPolygons(g){if(hasInterface(g,Polygonal)){return g;}var polygons=PolygonExtracter.getPolygons(g);if(polygons.size()===1){return polygons.get(0);}return g.getFactory().createMultiPolygon(GeometryFactory.toPolygonArray(polygons));};CascadedPolygonUnion.getGeometry=function getGeometry(list,index){if(index>=list.size()){return null;}return list.get(index);};CascadedPolygonUnion.union=function union(polys){var op=new CascadedPolygonUnion(polys);return op.union();};staticAccessors$47.STRTREE_NODE_CAPACITY.get=function(){return 4;};Object.defineProperties(CascadedPolygonUnion,staticAccessors$47);

    /**
     * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.
     *
     * @name truncate
     * @param {GeoJSON} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.
     * @param {Object} [options={}] Optional parameters
     * @param {number} [options.precision=6] coordinate decimal precision
     * @param {number} [options.coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)
     * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
     * @returns {GeoJSON} layer with truncated geometry
     * @example
     * var point = turf.point([
     *     70.46923055566859,
     *     58.11088890802906,
     *     1508
     * ]);
     * var options = {precision: 3, coordinates: 2};
     * var truncated = turf.truncate(point, options);
     * //=truncated.geometry.coordinates => [70.469, 58.111]
     *
     * //addToMap
     * var addToMap = [truncated];
     */
    function truncate(geojson, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        var precision = options.precision;
        var coordinates = options.coordinates;
        var mutate = options.mutate;

        // default params
        precision = precision === undefined || precision === null || isNaN(precision) ? 6 : precision;
        coordinates = coordinates === undefined || coordinates === null || isNaN(coordinates) ? 3 : coordinates;

        // validation
        if (!geojson) throw new Error('<geojson> is required');
        if (typeof precision !== 'number') throw new Error('<precision> must be a number');
        if (typeof coordinates !== 'number') throw new Error('<coordinates> must be a number');

        // prevent input mutation
        if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));

        var factor = Math.pow(10, precision);

        // Truncate Coordinates
        coordEach(geojson, function (coords) {
            truncateCoords(coords, factor, coordinates);
        });
        return geojson;
    }

    /**
     * Truncate Coordinates - Mutates coordinates in place
     *
     * @private
     * @param {Array<any>} coords Geometry Coordinates
     * @param {number} factor rounding factor for coordinate decimal precision
     * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)
     * @returns {Array<any>} mutated coordinates
     */
    function truncateCoords(coords, factor, coordinates) {
        // Remove extra coordinates (usually elevation coordinates and more)
        if (coords.length > coordinates) coords.splice(coordinates, coords.length);

        // Truncate coordinate decimals
        for (var i = 0; i < coords.length; i++) {
            coords[i] = Math.round(coords[i] * factor) / factor;
        }
        return coords;
    }

    /**
     * Removes redundant coordinates from any GeoJSON Geometry.
     *
     * @name cleanCoords
     * @param {Geometry|Feature} geojson Feature or Geometry
     * @param {Object} [options={}] Optional parameters
     * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated
     * @returns {Geometry|Feature} the cleaned input Feature/Geometry
     * @example
     * var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);
     * var multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);
     *
     * turf.cleanCoords(line).geometry.coordinates;
     * //= [[0, 0], [0, 10]]
     *
     * turf.cleanCoords(multiPoint).geometry.coordinates;
     * //= [[0, 0], [2, 2]]
     */
    function cleanCoords(geojson, options) {
        // Backwards compatible with v4.0
        var mutate = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options.mutate : options;
        if (!geojson) throw new Error('geojson is required');
        var type = getType(geojson);

        // Store new "clean" points in this Array
        var newCoords = [];

        switch (type) {
            case 'LineString':
                newCoords = cleanLine(geojson);
                break;
            case 'MultiLineString':
            case 'Polygon':
                getCoords(geojson).forEach(function (line) {
                    newCoords.push(cleanLine(line));
                });
                break;
            case 'MultiPolygon':
                getCoords(geojson).forEach(function (polygons$$1) {
                    var polyPoints = [];
                    polygons$$1.forEach(function (ring) {
                        polyPoints.push(cleanLine(ring));
                    });
                    newCoords.push(polyPoints);
                });
                break;
            case 'Point':
                return geojson;
            case 'MultiPoint':
                var existing = {};
                getCoords(geojson).forEach(function (coord) {
                    var key = coord.join('-');
                    if (!existing.hasOwnProperty(key)) {
                        newCoords.push(coord);
                        existing[key] = true;
                    }
                });
                break;
            default:
                throw new Error(type + ' geometry not supported');
        }

        // Support input mutation
        if (geojson.coordinates) {
            if (mutate === true) {
                geojson.coordinates = newCoords;
                return geojson;
            }
            return { type: type, coordinates: newCoords };
        } else {
            if (mutate === true) {
                geojson.geometry.coordinates = newCoords;
                return geojson;
            }
            return feature({ type: type, coordinates: newCoords }, geojson.properties, geojson.bbox, geojson.id);
        }
    }

    /**
     * Clean Coords
     *
     * @private
     * @param {Array<number>|LineString} line Line
     * @returns {Array<number>} Cleaned coordinates
     */
    function cleanLine(line) {
        var points$$1 = getCoords(line);
        // handle "clean" segment
        if (points$$1.length === 2 && !equals(points$$1[0], points$$1[1])) return points$$1;

        var prevPoint, point$$1, nextPoint;
        var newPoints = [];
        var secondToLast = points$$1.length - 1;

        newPoints.push(points$$1[0]);
        for (var i = 1; i < secondToLast; i++) {
            prevPoint = points$$1[i - 1];
            point$$1 = points$$1[i];
            nextPoint = points$$1[i + 1];

            if (!isPointOnLineSegment(prevPoint, nextPoint, point$$1)) {
                newPoints.push(point$$1);
            }
        }
        newPoints.push(nextPoint);
        return newPoints;
    }

    /**
     * Compares two points and returns if they are equals
     *
     * @private
     * @param {Position} pt1 point
     * @param {Position} pt2 point
     * @returns {boolean} true if they are equals
     */
    function equals(pt1, pt2) {
        return pt1[0] === pt2[0] && pt1[1] === pt2[1];
    }

    /**
     * Returns if `point` is on the segment between `start` and `end`.
     * Borrowed from `@turf/boolean-point-on-line` to speed up the evaluation (instead of using the module as dependency)
     *
     * @private
     * @param {Position} start coord pair of start of line
     * @param {Position} end coord pair of end of line
     * @param {Position} point coord pair of point to check
     * @returns {boolean} true/false
     */
    function isPointOnLineSegment(start, end, point$$1) {
        var x = point$$1[0],
            y = point$$1[1];
        var startX = start[0],
            startY = start[1];
        var endX = end[0],
            endY = end[1];

        var dxc = x - startX;
        var dyc = y - startY;
        var dxl = endX - startX;
        var dyl = endY - startY;
        var cross = dxc * dyl - dyc * dxl;

        if (cross !== 0) return false;else if (Math.abs(dxl) >= Math.abs(dyl)) return dxl > 0 ? startX <= x && x <= endX : endX <= x && x <= startX;else return dyl > 0 ? startY <= y && y <= endY : endY <= y && y <= startY;
    }

    // depend on jsts for now http://bjornharrtell.github.io/jsts/
    /**
     * Takes two {@link Polygon|polygons} and finds their intersection. If they share a border, returns the border; if they don't intersect, returns undefined.
     *
     * @name intersect
     * @param {Feature<Polygon>} poly1 the first polygon
     * @param {Feature<Polygon>} poly2 the second polygon
     * @returns {Feature|null} returns a feature representing the point(s) they share (in case of a {@link Point}  or {@link MultiPoint}), the borders they share (in case of a {@link LineString} or a {@link MultiLineString}), the area they share (in case of {@link Polygon} or {@link MultiPolygon}). If they do not share any point, returns `null`.
     * @example
     * var poly1 = turf.polygon([[
     *   [-122.801742, 45.48565],
     *   [-122.801742, 45.60491],
     *   [-122.584762, 45.60491],
     *   [-122.584762, 45.48565],
     *   [-122.801742, 45.48565]
     * ]]);
     *
     * var poly2 = turf.polygon([[
     *   [-122.520217, 45.535693],
     *   [-122.64038, 45.553967],
     *   [-122.720031, 45.526554],
     *   [-122.669906, 45.507309],
     *   [-122.723464, 45.446643],
     *   [-122.532577, 45.408574],
     *   [-122.487258, 45.477466],
     *   [-122.520217, 45.535693]
     * ]]);
     *
     * var intersection = turf.intersect(poly1, poly2);
     *
     * //addToMap
     * var addToMap = [poly1, poly2, intersection];
     */
    function intersect(poly1, poly2) {
      var geom1 = getGeom(poly1);
      var geom2 = getGeom(poly2);

      // Return null if geometry is too narrow in coordinate precision
      // fixes topology errors with JSTS
      // https://github.com/Turfjs/turf/issues/463
      // https://github.com/Turfjs/turf/pull/1004
      if (cleanCoords(truncate(geom2, { precision: 4 })).coordinates[0].length < 4) return null;
      if (cleanCoords(truncate(geom1, { precision: 4 })).coordinates[0].length < 4) return null;

      var reader = new GeoJSONReader();
      var a = reader.read(truncate(geom1));
      var b = reader.read(truncate(geom2));
      var intersection = OverlayOp.intersection(a, b);

      // https://github.com/Turfjs/turf/issues/951
      if (intersection.isEmpty()) return null;

      var writer = new GeoJSONWriter();
      var geom = writer.write(intersection);
      return feature(geom);
    }

    /**
     * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped
     * hexagons or triangles ({@link Polygon} features) aligned in an "odd-q" vertical grid as
     * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).
     *
     * @name hexGrid
     * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order
     * @param {number} cellSide length of the side of the the hexagons or triangles, in units. It will also coincide with the
     * radius of the circumcircle of the hexagons.
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.units='kilometers'] used in calculating cell size, can be degrees, radians, miles, or kilometers
     * @param {Object} [options.properties={}] passed to each hexagon or triangle of the grid
     * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it
     * @param {boolean} [options.triangles=false] whether to return as triangles instead of hexagons
     * @returns {FeatureCollection<Polygon>} a hexagonal grid
     * @example
     * var bbox = [-96,31,-84,40];
     * var cellSide = 50;
     * var options = {units: 'miles'};
     *
     * var hexgrid = turf.hexGrid(bbox, cellSide, options);
     *
     * //addToMap
     * var addToMap = [hexgrid];
     */
    function hexGrid(bbox, cellSide, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        // var units = options.units;
        var properties = options.properties || {};
        var triangles = options.triangles;
        var mask = options.mask;

        // validation
        if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');
        if (!isNumber(cellSide)) throw new Error('cellSide is invalid');
        if (!bbox) throw new Error('bbox is required');
        if (!Array.isArray(bbox)) throw new Error('bbox must be array');
        if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');
        if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');

        var west = bbox[0];
        var south = bbox[1];
        var east = bbox[2];
        var north = bbox[3];
        var centerY = (south + north) / 2;
        var centerX = (west + east) / 2;

        // https://github.com/Turfjs/turf/issues/758
        var xFraction = cellSide * 2 / distance([west, centerY], [east, centerY], options);
        var cellWidth = xFraction * (east - west);
        var yFraction = cellSide * 2 / distance([centerX, south], [centerX, north], options);
        var cellHeight = yFraction * (north - south);
        var radius = cellWidth / 2;

        var hex_width = radius * 2;
        var hex_height = Math.sqrt(3) / 2 * cellHeight;

        var box_width = east - west;
        var box_height = north - south;

        var x_interval = 3 / 4 * hex_width;
        var y_interval = hex_height;

        // adjust box_width so all hexagons will be inside the bbox
        var x_span = (box_width - hex_width) / (hex_width - radius / 2);
        var x_count = Math.floor(x_span);

        var x_adjust = (x_count * x_interval - radius / 2 - box_width) / 2 - radius / 2 + x_interval / 2;

        // adjust box_height so all hexagons will be inside the bbox
        var y_count = Math.floor((box_height - hex_height) / hex_height);

        var y_adjust = (box_height - y_count * hex_height) / 2;

        var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;
        if (hasOffsetY) {
            y_adjust -= hex_height / 4;
        }

        // Precompute cosines and sines of angles used in hexagon creation for performance gain
        var cosines = [];
        var sines = [];
        for (var i = 0; i < 6; i++) {
            var angle = 2 * Math.PI / 6 * i;
            cosines.push(Math.cos(angle));
            sines.push(Math.sin(angle));
        }

        var results = [];
        for (var x = 0; x <= x_count; x++) {
            for (var y = 0; y <= y_count; y++) {

                var isOdd = x % 2 === 1;
                if (y === 0 && isOdd) continue;
                if (y === 0 && hasOffsetY) continue;

                var center_x = x * x_interval + west - x_adjust;
                var center_y = y * y_interval + south + y_adjust;

                if (isOdd) {
                    center_y -= hex_height / 2;
                }

                if (triangles === true) {
                    hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2, properties, cosines, sines).forEach(function (triangle) {
                        if (mask) {
                            if (intersect(mask, triangle)) results.push(triangle);
                        } else {
                            results.push(triangle);
                        }
                    });
                } else {
                    var hex = hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2, properties, cosines, sines);
                    if (mask) {
                        if (intersect(mask, hex)) results.push(hex);
                    } else {
                        results.push(hex);
                    }
                }
            }
        }

        return featureCollection(results);
    }

    /**
     * Creates hexagon
     *
     * @private
     * @param {Array<number>} center of the hexagon
     * @param {number} rx half hexagon width
     * @param {number} ry half hexagon height
     * @param {Object} properties passed to each hexagon
     * @param {Array<number>} cosines precomputed
     * @param {Array<number>} sines precomputed
     * @returns {Feature<Polygon>} hexagon
     */
    function hexagon(center, rx, ry, properties, cosines, sines) {
        var vertices = [];
        for (var i = 0; i < 6; i++) {
            var x = center[0] + rx * cosines[i];
            var y = center[1] + ry * sines[i];
            vertices.push([x, y]);
        }
        //first and last vertex must be the same
        vertices.push(vertices[0].slice());
        return polygon([vertices], properties);
    }

    /**
     * Creates triangles composing an hexagon
     *
     * @private
     * @param {Array<number>} center of the hexagon
     * @param {number} rx half triangle width
     * @param {number} ry half triangle height
     * @param {Object} properties passed to each triangle
     * @param {Array<number>} cosines precomputed
     * @param {Array<number>} sines precomputed
     * @returns {Array<Feature<Polygon>>} triangles
     */
    function hexTriangles(center, rx, ry, properties, cosines, sines) {
        var triangles = [];
        for (var i = 0; i < 6; i++) {
            var vertices = [];
            vertices.push(center);
            vertices.push([center[0] + rx * cosines[i], center[1] + ry * sines[i]]);
            vertices.push([center[0] + rx * cosines[(i + 1) % 6], center[1] + ry * sines[(i + 1) % 6]]);
            vertices.push(center);
            triangles.push(polygon([vertices], properties));
        }
        return triangles;
    }

    /**
     * Returns true if a point is on a line. Accepts a optional parameter to ignore the start and end vertices of the linestring.
     *
     * @name booleanPointOnLine
     * @param {Coord} pt GeoJSON Point
     * @param {Feature<LineString>} line GeoJSON LineString
     * @param {Object} [options={}] Optional parameters
     * @param {boolean} [options.ignoreEndVertices=false] whether to ignore the start and end vertices.
     * @returns {boolean} true/false
     * @example
     * var pt = turf.point([0, 0]);
     * var line = turf.lineString([[-1, -1],[1, 1],[1.5, 2.2]]);
     * var isPointOnLine = turf.booleanPointOnLine(pt, line);
     * //=true
     */
    function booleanPointOnLine(pt, line, options) {
        // Optional parameters
        options = options || {};
        var ignoreEndVertices = options.ignoreEndVertices;
        if (!isObject(options)) throw new Error('invalid options');

        // Validate input
        if (!pt) throw new Error('pt is required');
        if (!line) throw new Error('line is required');

        // Normalize inputs
        var ptCoords = getCoord(pt);
        var lineCoords = getCoords(line);

        // Main
        for (var i = 0; i < lineCoords.length - 1; i++) {
            var ignoreBoundary = false;
            if (ignoreEndVertices) {
                if (i === 0) ignoreBoundary = 'start';
                if (i === lineCoords.length - 2) ignoreBoundary = 'end';
                if (i === 0 && i + 1 === lineCoords.length - 1) ignoreBoundary = 'both';
            }
            if (isPointOnLineSegment$1(lineCoords[i], lineCoords[i + 1], ptCoords, ignoreBoundary)) return true;
        }
        return false;
    }

    // See http://stackoverflow.com/a/4833823/1979085
    /**
     * @private
     * @param {Position} lineSegmentStart coord pair of start of line
     * @param {Position} lineSegmentEnd coord pair of end of line
     * @param {Position} pt coord pair of point to check
     * @param {boolean|string} excludeBoundary whether the point is allowed to fall on the line ends. If true which end to ignore.
     * @returns {boolean} true/false
     */
    function isPointOnLineSegment$1(lineSegmentStart, lineSegmentEnd, pt, excludeBoundary) {
        var x = pt[0];
        var y = pt[1];
        var x1 = lineSegmentStart[0];
        var y1 = lineSegmentStart[1];
        var x2 = lineSegmentEnd[0];
        var y2 = lineSegmentEnd[1];
        var dxc = pt[0] - x1;
        var dyc = pt[1] - y1;
        var dxl = x2 - x1;
        var dyl = y2 - y1;
        var cross = dxc * dyl - dyc * dxl;
        if (cross !== 0) {
            return false;
        }
        if (!excludeBoundary) {
            if (Math.abs(dxl) >= Math.abs(dyl)) {
                return dxl > 0 ? x1 <= x && x <= x2 : x2 <= x && x <= x1;
            }
            return dyl > 0 ? y1 <= y && y <= y2 : y2 <= y && y <= y1;
        } else if (excludeBoundary === 'start') {
            if (Math.abs(dxl) >= Math.abs(dyl)) {
                return dxl > 0 ? x1 < x && x <= x2 : x2 <= x && x < x1;
            }
            return dyl > 0 ? y1 < y && y <= y2 : y2 <= y && y < y1;
        } else if (excludeBoundary === 'end') {
            if (Math.abs(dxl) >= Math.abs(dyl)) {
                return dxl > 0 ? x1 <= x && x < x2 : x2 < x && x <= x1;
            }
            return dyl > 0 ? y1 <= y && y < y2 : y2 < y && y <= y1;
        } else if (excludeBoundary === 'both') {
            if (Math.abs(dxl) >= Math.abs(dyl)) {
                return dxl > 0 ? x1 < x && x < x2 : x2 < x && x < x1;
            }
            return dyl > 0 ? y1 < y && y < y2 : y2 < y && y < y1;
        }
    }

    // http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule
    // modified from: https://github.com/substack/point-in-polygon/blob/master/index.js
    // which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

    /**
     * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point resides inside the polygon. The polygon can
     * be convex or concave. The function accounts for holes.
     *
     * @name booleanPointInPolygon
     * @param {Coord} point input point
     * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon
     * @param {Object} [options={}] Optional parameters
     * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.
     * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon
     * @example
     * var pt = turf.point([-77, 44]);
     * var poly = turf.polygon([[
     *   [-81, 41],
     *   [-81, 47],
     *   [-72, 47],
     *   [-72, 41],
     *   [-81, 41]
     * ]]);
     *
     * turf.booleanPointInPolygon(pt, poly);
     * //= true
     */
    function booleanPointInPolygon(point, polygon, options) {
        // Optional parameters
        options = options || {};
        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') throw new Error('options is invalid');
        var ignoreBoundary = options.ignoreBoundary;

        // validation
        if (!point) throw new Error('point is required');
        if (!polygon) throw new Error('polygon is required');

        var pt = getCoord(point);
        var polys = getCoords(polygon);
        var type = polygon.geometry ? polygon.geometry.type : polygon.type;
        var bbox = polygon.bbox;

        // Quick elimination if point is not inside bbox
        if (bbox && inBBox(pt, bbox) === false) return false;

        // normalize to multipolygon
        if (type === 'Polygon') polys = [polys];

        for (var i = 0, insidePoly = false; i < polys.length && !insidePoly; i++) {
            // check if it is in the outer ring first
            if (inRing(pt, polys[i][0], ignoreBoundary)) {
                var inHole = false;
                var k = 1;
                // check for the point in any of the holes
                while (k < polys[i].length && !inHole) {
                    if (inRing(pt, polys[i][k], !ignoreBoundary)) {
                        inHole = true;
                    }
                    k++;
                }
                if (!inHole) insidePoly = true;
            }
        }
        return insidePoly;
    }

    /**
     * inRing
     *
     * @private
     * @param {Array<number>} pt [x,y]
     * @param {Array<Array<number>>} ring [[x,y], [x,y],..]
     * @param {boolean} ignoreBoundary ignoreBoundary
     * @returns {boolean} inRing
     */
    function inRing(pt, ring, ignoreBoundary) {
        var isInside = false;
        if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) ring = ring.slice(0, ring.length - 1);

        for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {
            var xi = ring[i][0],
                yi = ring[i][1];
            var xj = ring[j][0],
                yj = ring[j][1];
            var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 && (xi - pt[0]) * (xj - pt[0]) <= 0 && (yi - pt[1]) * (yj - pt[1]) <= 0;
            if (onBoundary) return !ignoreBoundary;
            var intersect = yi > pt[1] !== yj > pt[1] && pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi;
            if (intersect) isInside = !isInside;
        }
        return isInside;
    }

    /**
     * inBBox
     *
     * @private
     * @param {Position} pt point [x,y]
     * @param {BBox} bbox BBox [west, south, east, north]
     * @returns {boolean} true/false if point is inside BBox
     */
    function inBBox(pt, bbox) {
        return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];
    }

    /**
     * Boolean-within returns true if the first geometry is completely within the second geometry.
     * The interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)
     * must not intersect the exterior of the secondary (geometry b).
     * Boolean-within returns the exact opposite result of the `@turf/boolean-contains`.
     *
     * @name booleanWithin
     * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
     * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
     * @returns {boolean} true/false
     * @example
     * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
     * var point = turf.point([1, 2]);
     *
     * turf.booleanWithin(point, line);
     * //=true
     */
    function booleanWithin(feature1, feature2) {
        var type1 = getType(feature1);
        var type2 = getType(feature2);
        var geom1 = getGeom(feature1);
        var geom2 = getGeom(feature2);

        switch (type1) {
            case 'Point':
                switch (type2) {
                    case 'MultiPoint':
                        return isPointInMultiPoint(geom1, geom2);
                    case 'LineString':
                        return booleanPointOnLine(geom1, geom2, { ignoreEndVertices: true });
                    case 'Polygon':
                        return booleanPointInPolygon(geom1, geom2, { ignoreBoundary: true });
                    default:
                        throw new Error('feature2 ' + type2 + ' geometry not supported');
                }
            case 'MultiPoint':
                switch (type2) {
                    case 'MultiPoint':
                        return isMultiPointInMultiPoint(geom1, geom2);
                    case 'LineString':
                        return isMultiPointOnLine(geom1, geom2);
                    case 'Polygon':
                        return isMultiPointInPoly(geom1, geom2);
                    default:
                        throw new Error('feature2 ' + type2 + ' geometry not supported');
                }
            case 'LineString':
                switch (type2) {
                    case 'LineString':
                        return isLineOnLine(geom1, geom2);
                    case 'Polygon':
                        return isLineInPoly(geom1, geom2);
                    default:
                        throw new Error('feature2 ' + type2 + ' geometry not supported');
                }
            case 'Polygon':
                switch (type2) {
                    case 'Polygon':
                        return isPolyInPoly(geom1, geom2);
                    default:
                        throw new Error('feature2 ' + type2 + ' geometry not supported');
                }
            default:
                throw new Error('feature1 ' + type1 + ' geometry not supported');
        }
    }

    function isPointInMultiPoint(point, multiPoint) {
        var i;
        var output = false;
        for (i = 0; i < multiPoint.coordinates.length; i++) {
            if (compareCoords(multiPoint.coordinates[i], point.coordinates)) {
                output = true;
                break;
            }
        }
        return output;
    }

    function isMultiPointInMultiPoint(multiPoint1, multiPoint2) {
        for (var i = 0; i < multiPoint1.coordinates.length; i++) {
            var anyMatch = false;
            for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {
                if (compareCoords(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])) {
                    anyMatch = true;
                }
            }
            if (!anyMatch) {
                return false;
            }
        }
        return true;
    }

    function isMultiPointOnLine(multiPoint, lineString) {
        var foundInsidePoint = false;

        for (var i = 0; i < multiPoint.coordinates.length; i++) {
            if (!booleanPointOnLine(multiPoint.coordinates[i], lineString)) {
                return false;
            }
            if (!foundInsidePoint) {
                foundInsidePoint = booleanPointOnLine(multiPoint.coordinates[i], lineString, { ignoreEndVertices: true });
            }
        }
        return foundInsidePoint;
    }

    function isMultiPointInPoly(multiPoint, polygon) {
        var output = true;
        for (var i = 0; i < multiPoint.coordinates.length; i++) {
            var isInside = booleanPointInPolygon(multiPoint.coordinates[1], polygon);
            if (!isInside) {
                output = false;
                break;
            }
            {
                isInside = booleanPointInPolygon(multiPoint.coordinates[1], polygon, { ignoreBoundary: true });
            }
        }
        return output && isInside;
    }

    function isLineOnLine(lineString1, lineString2) {
        for (var i = 0; i < lineString1.coordinates.length; i++) {
            if (!booleanPointOnLine(lineString1.coordinates[i], lineString2)) {
                return false;
            }
        }
        return true;
    }

    function isLineInPoly(linestring, polygon) {
        var polyBbox = bbox(polygon);
        var lineBbox = bbox(linestring);
        if (!doBBoxOverlap(polyBbox, lineBbox)) {
            return false;
        }
        var foundInsidePoint = false;

        for (var i = 0; i < linestring.coordinates.length - 1; i++) {
            if (!booleanPointInPolygon(linestring.coordinates[i], polygon)) {
                return false;
            }
            if (!foundInsidePoint) {
                foundInsidePoint = booleanPointInPolygon(linestring.coordinates[i], polygon, { ignoreBoundary: true });
            }
            if (!foundInsidePoint) {
                var midpoint = getMidpoint(linestring.coordinates[i], linestring.coordinates[i + 1]);
                foundInsidePoint = booleanPointInPolygon(midpoint, polygon, { ignoreBoundary: true });
            }
        }
        return foundInsidePoint;
    }

    /**
     * Is Polygon2 in Polygon1
     * Only takes into account outer rings
     *
     * @private
     * @param {Geometry|Feature<Polygon>} feature1 Polygon1
     * @param {Geometry|Feature<Polygon>} feature2 Polygon2
     * @returns {boolean} true/false
     */
    function isPolyInPoly(feature1, feature2) {
        var poly1Bbox = bbox(feature1);
        var poly2Bbox = bbox(feature2);
        if (!doBBoxOverlap(poly2Bbox, poly1Bbox)) {
            return false;
        }
        for (var i = 0; i < feature1.coordinates[0].length; i++) {
            if (!booleanPointInPolygon(feature1.coordinates[0][i], feature2)) {
                return false;
            }
        }
        return true;
    }

    function doBBoxOverlap(bbox1, bbox2) {
        if (bbox1[0] > bbox2[0]) return false;
        if (bbox1[2] < bbox2[2]) return false;
        if (bbox1[1] > bbox2[1]) return false;
        if (bbox1[3] < bbox2[3]) return false;
        return true;
    }

    /**
     * compareCoords
     *
     * @private
     * @param {Position} pair1 point [x,y]
     * @param {Position} pair2 point [x,y]
     * @returns {boolean} true/false if coord pairs match
     */
    function compareCoords(pair1, pair2) {
        return pair1[0] === pair2[0] && pair1[1] === pair2[1];
    }

    /**
     * getMidpoint
     *
     * @private
     * @param {Position} pair1 point [x,y]
     * @param {Position} pair2 point [x,y]
     * @returns {Position} midpoint of pair1 and pair2
     */
    function getMidpoint(pair1, pair2) {
        return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];
    }

    /**
     * Creates a {@link Point} grid from a bounding box, {@link FeatureCollection} or {@link Feature}.
     *
     * @name pointGrid
     * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
     * @param {number} cellSide the distance between points, in units
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers
     * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it
     * @param {Object} [options.properties={}] passed to each point of the grid
     * @returns {FeatureCollection<Point>} grid of points
     * @example
     * var extent = [-70.823364, -33.553984, -70.473175, -33.302986];
     * var cellSide = 3;
     * var options = {units: 'miles'};
     *
     * var grid = turf.pointGrid(extent, cellSide, options);
     *
     * //addToMap
     * var addToMap = [grid];
     */
    function pointGrid(bbox, cellSide, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        // var units = options.units;
        var mask = options.mask;
        var properties = options.properties;

        // Containers
        var results = [];

        // Input Validation
        if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');
        if (!isNumber(cellSide)) throw new Error('cellSide is invalid');
        if (!bbox) throw new Error('bbox is required');
        if (!Array.isArray(bbox)) throw new Error('bbox must be array');
        if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');
        if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');

        var west = bbox[0];
        var south = bbox[1];
        var east = bbox[2];
        var north = bbox[3];

        var xFraction = cellSide / distance([west, south], [east, south], options);
        var cellWidth = xFraction * (east - west);
        var yFraction = cellSide / distance([west, south], [west, north], options);
        var cellHeight = yFraction * (north - south);

        var bboxWidth = east - west;
        var bboxHeight = north - south;
        var columns = Math.floor(bboxWidth / cellWidth);
        var rows = Math.floor(bboxHeight / cellHeight);
        // adjust origin of the grid
        var deltaX = (bboxWidth - columns * cellWidth) / 2;
        var deltaY = (bboxHeight - rows * cellHeight) / 2;

        var currentX = west + deltaX;
        while (currentX <= east) {
            var currentY = south + deltaY;
            while (currentY <= north) {
                var cellPt = point([currentX, currentY], properties);
                if (mask) {
                    if (booleanWithin(cellPt, mask)) results.push(cellPt);
                } else {
                    results.push(cellPt);
                }
                currentY += cellHeight;
            }
            currentX += cellWidth;
        }

        return featureCollection(results);
    }

    /**
     * Takes one or more features and calculates the centroid using the mean of all vertices.
     * This lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.
     *
     * @name centroid
     * @param {GeoJSON} geojson GeoJSON to be centered
     * @param {Object} [properties={}] an Object that is used as the {@link Feature}'s properties
     * @returns {Feature<Point>} the centroid of the input features
     * @example
     * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
     *
     * var centroid = turf.centroid(polygon);
     *
     * //addToMap
     * var addToMap = [polygon, centroid]
     */
    function centroid(geojson, properties) {
        var xSum = 0;
        var ySum = 0;
        var len = 0;
        coordEach(geojson, function (coord) {
            xSum += coord[0];
            ySum += coord[1];
            len++;
        }, true);
        return point([xSum / len, ySum / len], properties);
    }

    /**
     * Creates a square grid from a bounding box, {@link Feature} or {@link FeatureCollection}.
     *
     * @name squareGrid
     * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
     * @param {number} cellSide of each cell, in units
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers
     * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it
     * @param {Object} [options.properties={}] passed to each point of the grid
     * @returns {FeatureCollection<Polygon>} grid a grid of polygons
     * @example
     * var bbox = [-95, 30 ,-85, 40];
     * var cellSide = 50;
     * var options = {units: 'miles'};
     *
     * var squareGrid = turf.squareGrid(bbox, cellSide, options);
     *
     * //addToMap
     * var addToMap = [squareGrid]
     */
    function squareGrid(bbox, cellSide, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        // var units = options.units;
        var properties = options.properties;
        var mask = options.mask;

        // Containers
        var results = [];

        // Input Validation
        if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');
        if (!isNumber(cellSide)) throw new Error('cellSide is invalid');
        if (!bbox) throw new Error('bbox is required');
        if (!Array.isArray(bbox)) throw new Error('bbox must be array');
        if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');
        if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');

        var west = bbox[0];
        var south = bbox[1];
        var east = bbox[2];
        var north = bbox[3];

        var xFraction = cellSide / distance([west, south], [east, south], options);
        var cellWidth = xFraction * (east - west);
        var yFraction = cellSide / distance([west, south], [west, north], options);
        var cellHeight = yFraction * (north - south);

        // rows & columns
        var bboxWidth = east - west;
        var bboxHeight = north - south;
        var columns = Math.floor(bboxWidth / cellWidth);
        var rows = Math.floor(bboxHeight / cellHeight);

        // adjust origin of the grid
        var deltaX = (bboxWidth - columns * cellWidth) / 2;
        var deltaY = (bboxHeight - rows * cellHeight) / 2;

        // iterate over columns & rows
        var currentX = west + deltaX;
        for (var column = 0; column < columns; column++) {
            var currentY = south + deltaY;
            for (var row = 0; row < rows; row++) {
                var cellPoly = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], properties);
                if (mask) {
                    if (intersect(mask, cellPoly)) results.push(cellPoly);
                } else {
                    results.push(cellPoly);
                }

                currentY += cellHeight;
            }
            currentX += cellWidth;
        }
        return featureCollection(results);
    }

    /**
     * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.
     *
     * @name triangleGrid
     * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
     * @param {number} cellSide dimension of each cell
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers
     * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it
     * @param {Object} [options.properties={}] passed to each point of the grid
     * @returns {FeatureCollection<Polygon>} grid of polygons
     * @example
     * var bbox = [-95, 30 ,-85, 40];
     * var cellSide = 50;
     * var options = {units: 'miles'};
     *
     * var triangleGrid = turf.triangleGrid(bbox, cellSide, options);
     *
     * //addToMap
     * var addToMap = [triangleGrid];
     */
    function triangleGrid(bbox, cellSide, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        // var units = options.units;
        var properties = options.properties;
        var mask = options.mask;

        // Containers
        var results = [];

        // Input Validation
        if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');
        if (!isNumber(cellSide)) throw new Error('cellSide is invalid');
        if (!bbox) throw new Error('bbox is required');
        if (!Array.isArray(bbox)) throw new Error('bbox must be array');
        if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');
        if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');

        // Main
        var xFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);
        var cellWidth = xFraction * (bbox[2] - bbox[0]);
        var yFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);
        var cellHeight = yFraction * (bbox[3] - bbox[1]);

        var xi = 0;
        var currentX = bbox[0];
        while (currentX <= bbox[2]) {
            var yi = 0;
            var currentY = bbox[1];
            while (currentY <= bbox[3]) {
                var cellTriangle1 = null;
                var cellTriangle2 = null;

                if (xi % 2 === 0 && yi % 2 === 0) {
                    cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], properties);
                    cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], properties);
                } else if (xi % 2 === 0 && yi % 2 === 1) {
                    cellTriangle1 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], properties);
                    cellTriangle2 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], properties);
                } else if (yi % 2 === 0 && xi % 2 === 1) {
                    cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], properties);
                    cellTriangle2 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], properties);
                } else if (yi % 2 === 1 && xi % 2 === 1) {
                    cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], properties);
                    cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], properties);
                }
                if (mask) {
                    if (intersect(mask, cellTriangle1)) results.push(cellTriangle1);
                    if (intersect(mask, cellTriangle2)) results.push(cellTriangle2);
                } else {
                    results.push(cellTriangle1);
                    results.push(cellTriangle2);
                }

                currentY += cellHeight;
                yi++;
            }
            xi++;
            currentX += cellWidth;
        }
        return featureCollection(results);
    }

    /**
     * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.
     * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.
     *
     * @name clone
     * @param {GeoJSON} geojson GeoJSON Object
     * @returns {GeoJSON} cloned GeoJSON Object
     * @example
     * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});
     *
     * var lineCloned = turf.clone(line);
     */
    function clone(geojson) {
        if (!geojson) throw new Error('geojson is required');

        switch (geojson.type) {
            case 'Feature':
                return cloneFeature(geojson);
            case 'FeatureCollection':
                return cloneFeatureCollection(geojson);
            case 'Point':
            case 'LineString':
            case 'Polygon':
            case 'MultiPoint':
            case 'MultiLineString':
            case 'MultiPolygon':
            case 'GeometryCollection':
                return cloneGeometry(geojson);
            default:
                throw new Error('unknown GeoJSON type');
        }
    }

    /**
     * Clone Feature
     *
     * @private
     * @param {Feature<any>} geojson GeoJSON Feature
     * @returns {Feature<any>} cloned Feature
     */
    function cloneFeature(geojson) {
        var cloned = { type: 'Feature' };
        // Preserve Foreign Members
        Object.keys(geojson).forEach(function (key) {
            switch (key) {
                case 'type':
                case 'properties':
                case 'geometry':
                    return;
                default:
                    cloned[key] = geojson[key];
            }
        });
        // Add properties & geometry last
        cloned.properties = cloneProperties(geojson.properties);
        cloned.geometry = cloneGeometry(geojson.geometry);
        return cloned;
    }

    /**
     * Clone Properties
     *
     * @private
     * @param {Object} properties GeoJSON Properties
     * @returns {Object} cloned Properties
     */
    function cloneProperties(properties) {
        var cloned = {};
        if (!properties) return cloned;
        Object.keys(properties).forEach(function (key) {
            var value = properties[key];
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                if (value === null) {
                    // handle null
                    cloned[key] = null;
                } else if (value.length) {
                    // handle Array
                    cloned[key] = value.map(function (item) {
                        return item;
                    });
                } else {
                    // handle generic Object
                    cloned[key] = cloneProperties(value);
                }
            } else cloned[key] = value;
        });
        return cloned;
    }

    /**
     * Clone Feature Collection
     *
     * @private
     * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection
     * @returns {FeatureCollection<any>} cloned Feature Collection
     */
    function cloneFeatureCollection(geojson) {
        var cloned = { type: 'FeatureCollection' };

        // Preserve Foreign Members
        Object.keys(geojson).forEach(function (key) {
            switch (key) {
                case 'type':
                case 'features':
                    return;
                default:
                    cloned[key] = geojson[key];
            }
        });
        // Add features
        cloned.features = geojson.features.map(function (feature) {
            return cloneFeature(feature);
        });
        return cloned;
    }

    /**
     * Clone Geometry
     *
     * @private
     * @param {Geometry<any>} geometry GeoJSON Geometry
     * @returns {Geometry<any>} cloned Geometry
     */
    function cloneGeometry(geometry) {
        var geom = { type: geometry.type };
        if (geometry.bbox) geom.bbox = geometry.bbox;

        if (geometry.type === 'GeometryCollection') {
            geom.geometries = geometry.geometries.map(function (geom) {
                return cloneGeometry(geom);
            });
            return geom;
        }
        geom.coordinates = deepSlice(geometry.coordinates);
        return geom;
    }

    /**
     * Deep Slice coordinates
     *
     * @private
     * @param {Coordinates} coords Coordinates
     * @returns {Coordinates} all coordinates sliced
     */
    function deepSlice(coords) {
        if (_typeof(coords[0]) !== 'object') {
            return coords.slice();
        }
        return coords.map(function (coord) {
            return deepSlice(coord);
        });
    }

    /**
     * Takes a set of points and estimates their 'property' values on a grid using the [Inverse Distance Weighting (IDW) method](https://en.wikipedia.org/wiki/Inverse_distance_weighting).
     *
     * @name interpolate
     * @param {FeatureCollection<Point>} points with known value
     * @param {number} cellSize the distance across each grid point
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.gridType='square'] defines the output format based on a Grid Type (options: 'square' | 'point' | 'hex' | 'triangle')
     * @param {string} [options.property='elevation'] the property name in `points` from which z-values will be pulled, zValue fallbacks to 3rd coordinate if no property exists.
     * @param {string} [options.units='kilometers'] used in calculating cellSize, can be degrees, radians, miles, or kilometers
     * @param {number} [options.weight=1] exponent regulating the distance-decay weighting
     * @returns {FeatureCollection<Point|Polygon>} grid of points or polygons with interpolated 'property'
     * @example
     * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});
     *
     * // add a random property to each point
     * turf.featureEach(points, function(point) {
     *     point.properties.solRad = Math.random() * 50;
     * });
     * var options = {gridType: 'points', property: 'solRad', units: 'miles'};
     * var grid = turf.interpolate(points, 100, options);
     *
     * //addToMap
     * var addToMap = [grid];
     */
    function interpolate(points$$1, cellSize, options) {
        // Optional parameters
        options = options || {};
        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') throw new Error('options is invalid');
        var gridType = options.gridType;
        var property = options.property;
        var weight = options.weight;

        // validation
        if (!points$$1) throw new Error('points is required');
        collectionOf(points$$1, 'Point', 'input must contain Points');
        if (!cellSize) throw new Error('cellSize is required');
        if (weight !== undefined && typeof weight !== 'number') throw new Error('weight must be a number');

        // default values
        property = property || 'elevation';
        gridType = gridType || 'square';
        weight = weight || 1;

        var box = bbox(points$$1);
        var grid;
        switch (gridType) {
            case 'point':
            case 'points':
                grid = pointGrid(box, cellSize, options);
                break;
            case 'square':
            case 'squares':
                grid = squareGrid(box, cellSize, options);
                break;
            case 'hex':
            case 'hexes':
                grid = hexGrid(box, cellSize, options);
                break;
            case 'triangle':
            case 'triangles':
                grid = triangleGrid(box, cellSize, options);
                break;
            default:
                throw new Error('invalid gridType');
        }
        var results = [];
        featureEach(grid, function (gridFeature) {
            var zw = 0;
            var sw = 0;
            // calculate the distance from each input point to the grid points
            featureEach(points$$1, function (point$$1) {
                var gridPoint = gridType === 'point' ? gridFeature : centroid(gridFeature);
                var d = distance(gridPoint, point$$1, options);
                var zValue;
                // property has priority for zValue, fallbacks to 3rd coordinate from geometry
                if (property !== undefined) zValue = point$$1.properties[property];
                if (zValue === undefined) zValue = point$$1.geometry.coordinates[2];
                if (zValue === undefined) throw new Error('zValue is missing');
                if (d === 0) zw = zValue;
                var w = 1.0 / Math.pow(d, weight);
                sw += w;
                zw += w * zValue;
            });
            // write interpolated value for each grid point
            var newFeature = clone(gridFeature);
            newFeature.properties[property] = zw / sw;
            results.push(newFeature);
        });
        return featureCollection(results);
    }

    /**
     * Takes one or more features and returns their area in square meters.
     *
     * @name area
     * @param {GeoJSON} geojson input GeoJSON feature(s)
     * @returns {number} area in square meters
     * @example
     * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);
     *
     * var area = turf.area(polygon);
     *
     * //addToMap
     * var addToMap = [polygon]
     * polygon.properties.area = area
     */
    function area(geojson) {
        return geomReduce(geojson, function (value, geom) {
            return value + calculateArea(geom);
        }, 0);
    }

    var RADIUS = 6378137;
    // var FLATTENING_DENOM = 298.257223563;
    // var FLATTENING = 1 / FLATTENING_DENOM;
    // var POLAR_RADIUS = RADIUS * (1 - FLATTENING);

    /**
     * Calculate Area
     *
     * @private
     * @param {GeoJSON} geojson GeoJSON
     * @returns {number} area
     */
    function calculateArea(geojson) {
        var area = 0,
            i;
        switch (geojson.type) {
            case 'Polygon':
                return polygonArea(geojson.coordinates);
            case 'MultiPolygon':
                for (i = 0; i < geojson.coordinates.length; i++) {
                    area += polygonArea(geojson.coordinates[i]);
                }
                return area;
            case 'Point':
            case 'MultiPoint':
            case 'LineString':
            case 'MultiLineString':
                return 0;
            case 'GeometryCollection':
                for (i = 0; i < geojson.geometries.length; i++) {
                    area += calculateArea(geojson.geometries[i]);
                }
                return area;
        }
    }

    function polygonArea(coords) {
        var area = 0;
        if (coords && coords.length > 0) {
            area += Math.abs(ringArea(coords[0]));
            for (var i = 1; i < coords.length; i++) {
                area -= Math.abs(ringArea(coords[i]));
            }
        }
        return area;
    }

    /**
     * @private
     * Calculate the approximate area of the polygon were it projected onto the earth.
     * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.
     *
     * Reference:
     * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
     * Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409
     *
     * @param {Array<Array<number>>} coords Ring Coordinates
     * @returns {number} The approximate signed geodesic area of the polygon in square meters.
     */
    function ringArea(coords) {
        var p1;
        var p2;
        var p3;
        var lowerIndex;
        var middleIndex;
        var upperIndex;
        var i;
        var area = 0;
        var coordsLength = coords.length;

        if (coordsLength > 2) {
            for (i = 0; i < coordsLength; i++) {
                if (i === coordsLength - 2) {
                    // i = N-2
                    lowerIndex = coordsLength - 2;
                    middleIndex = coordsLength - 1;
                    upperIndex = 0;
                } else if (i === coordsLength - 1) {
                    // i = N-1
                    lowerIndex = coordsLength - 1;
                    middleIndex = 0;
                    upperIndex = 1;
                } else {
                    // i = 0 to N-3
                    lowerIndex = i;
                    middleIndex = i + 1;
                    upperIndex = i + 2;
                }
                p1 = coords[lowerIndex];
                p2 = coords[middleIndex];
                p3 = coords[upperIndex];
                area += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));
            }

            area = area * RADIUS * RADIUS / 2;
        }

        return area;
    }

    function rad(_) {
        return _ * Math.PI / 180;
    }

    /**
     * Takes a feature or set of features and returns all positions as {@link Point|points}.
     *
     * @name explode
     * @param {GeoJSON} geojson input features
     * @returns {FeatureCollection<point>} points representing the exploded input features
     * @throws {Error} if it encounters an unknown geometry type
     * @example
     * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
     *
     * var explode = turf.explode(polygon);
     *
     * //addToMap
     * var addToMap = [polygon, explode]
     */
    function explode(geojson) {
        var points$$1 = [];
        if (geojson.type === 'FeatureCollection') {
            featureEach(geojson, function (feature$$1) {
                coordEach(feature$$1, function (coord) {
                    points$$1.push(point(coord, feature$$1.properties));
                });
            });
        } else {
            coordEach(geojson, function (coord) {
                points$$1.push(point(coord, geojson.properties));
            });
        }
        return featureCollection(points$$1);
    }

    /**
     * Takes a {@link Point} grid and returns a correspondent matrix {Array<Array<number>>}
     * of the 'property' values
     *
     * @name gridToMatrix
     * @param {FeatureCollection<Point>} grid of points
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled
     * @param {boolean} [options.flip=false] returns the matrix upside-down
     * @param {boolean} [options.flags=false] flags, adding a `matrixPosition` array field ([row, column]) to its properties,
     * the grid points with coordinates on the matrix
     * @returns {Array<Array<number>>} matrix of property values
     * @example
     *   var extent = [-70.823364, -33.553984, -70.473175, -33.302986];
     *   var cellSize = 3;
     *   var grid = turf.pointGrid(extent, cellSize);
     *   // add a random property to each point between 0 and 60
     *   for (var i = 0; i < grid.features.length; i++) {
     *     grid.features[i].properties.elevation = (Math.random() * 60);
     *   }
     *   gridToMatrix(grid);
     *   //= [
     *     [ 1, 13, 10,  9, 10, 13, 18],
     *     [34,  8,  5,  4,  5,  8, 13],
     *     [10,  5,  2,  1,  2,  5,  4],
     *     [ 0,  4, 56, 19,  1,  4,  9],
     *     [10,  5,  2,  1,  2,  5, 10],
     *     [57,  8,  5,  4,  5,  0, 57],
     *     [ 3, 13, 10,  9,  5, 13, 18],
     *     [18, 13, 10,  9, 78, 13, 18]
     *   ]
     */
    function gridToMatrix(grid, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        var zProperty = options.zProperty || 'elevation';
        var flip = options.flip;
        var flags = options.flags;

        // validation
        collectionOf(grid, 'Point', 'input must contain Points');

        var pointsMatrix = sortPointsByLatLng(grid, flip);

        var matrix = [];
        // create property matrix from sorted points
        // looping order matters here
        for (var r = 0; r < pointsMatrix.length; r++) {
            var pointRow = pointsMatrix[r];
            var row = [];
            for (var c = 0; c < pointRow.length; c++) {
                var point$$1 = pointRow[c];
                // Check if zProperty exist
                if (point$$1.properties[zProperty]) row.push(point$$1.properties[zProperty]);else row.push(0);
                // add flags
                if (flags === true) point$$1.properties.matrixPosition = [r, c];
            }
            matrix.push(row);
        }

        return matrix;
    }

    /**
     * Sorts points by latitude and longitude, creating a 2-dimensional array of points
     *
     * @private
     * @param {FeatureCollection<Point>} points GeoJSON Point features
     * @param {boolean} [flip=false] returns the matrix upside-down
     * @returns {Array<Array<Point>>} points ordered by latitude and longitude
     */
    function sortPointsByLatLng(points$$1, flip) {
        var pointsByLatitude = {};

        // divide points by rows with the same latitude
        featureEach(points$$1, function (point$$1) {
            var lat = getCoords(point$$1)[1];
            if (!pointsByLatitude[lat]) pointsByLatitude[lat] = [];
            pointsByLatitude[lat].push(point$$1);
        });

        // sort points (with the same latitude) by longitude
        var orderedRowsByLatitude = Object.keys(pointsByLatitude).map(function (lat) {
            var row = pointsByLatitude[lat];
            var rowOrderedByLongitude = row.sort(function (a, b) {
                return getCoords(a)[0] - getCoords(b)[0];
            });
            return rowOrderedByLongitude;
        });

        // sort rows (of points with the same latitude) by latitude
        var pointMatrix = orderedRowsByLatitude.sort(function (a, b) {
            if (flip) return getCoords(a[0])[1] - getCoords(b[0])[1];else return getCoords(b[0])[1] - getCoords(a[0])[1];
        });

        return pointMatrix;
    }

    /*!
    * @license GNU Affero General Public License.
    * Copyright (c) 2015, 2015 Ronny Lorenz <ronny@tbi.univie.ac.at>
    * v. 1.2.0
    * https://github.com/RaumZeit/MarchingSquares.js
    */

    var defaultSettings = {
        successCallback: null,
        verbose: false,
        polygons: false
    };

    var settings = {};

    /*
      Compute isobands(s) of a scalar 2D field given a certain
      threshold and a bandwidth by applying the Marching Squares
      Algorithm. The function returns a list of path coordinates
      either for individual polygons within each grid cell, or the
      outline of connected polygons.
    */
    function isoBands(data, minV, bandwidth, options) {
        /* process options */
        options = options ? options : {};

        var optionKeys = Object.keys(defaultSettings);

        for (var i = 0; i < optionKeys.length; i++) {
            var key = optionKeys[i];
            var val = options[key];
            val = typeof val !== 'undefined' && val !== null ? val : defaultSettings[key];

            settings[key] = val;
        }

        if (settings.verbose) console.log('MarchingSquaresJS-isoBands: computing isobands for [' + minV + ':' + (minV + bandwidth) + ']');

        var grid = computeBandGrid(data, minV, bandwidth);

        var ret;
        if (settings.polygons) {
            if (settings.verbose) console.log('MarchingSquaresJS-isoBands: returning single polygons for each grid cell');
            ret = BandGrid2Areas(grid);
        } else {
            if (settings.verbose) console.log('MarchingSquaresJS-isoBands: returning polygon paths for entire data grid');
            ret = BandGrid2AreaPaths(grid);
        }

        if (typeof settings.successCallback === 'function') settings.successCallback(ret);

        return ret;
    }

    /*
      Thats all for the public interface, below follows the actual
      implementation
    */

    /* Some private variables */
    var Node0 = 64;
    var Node1 = 16;
    var Node2 = 4;
    var Node3 = 1;

    /*
      The look-up tables for tracing back the contour path
      of isoBands
    */

    var isoBandNextXTL = [];
    var isoBandNextYTL = [];
    var isoBandNextOTL = [];

    var isoBandNextXTR = [];
    var isoBandNextYTR = [];
    var isoBandNextOTR = [];

    var isoBandNextXRT = [];
    var isoBandNextYRT = [];
    var isoBandNextORT = [];

    var isoBandNextXRB = [];
    var isoBandNextYRB = [];
    var isoBandNextORB = [];

    var isoBandNextXBL = [];
    var isoBandNextYBL = [];
    var isoBandNextOBL = [];

    var isoBandNextXBR = [];
    var isoBandNextYBR = [];
    var isoBandNextOBR = [];

    var isoBandNextXLT = [];
    var isoBandNextYLT = [];
    var isoBandNextOLT = [];

    var isoBandNextXLB = [];
    var isoBandNextYLB = [];
    var isoBandNextOLB = [];

    isoBandNextXRT[85] = isoBandNextXRB[85] = -1;
    isoBandNextYRT[85] = isoBandNextYRB[85] = 0;
    isoBandNextORT[85] = isoBandNextORB[85] = 1;
    isoBandNextXLT[85] = isoBandNextXLB[85] = 1;
    isoBandNextYLT[85] = isoBandNextYLB[85] = 0;
    isoBandNextOLT[85] = isoBandNextOLB[85] = 1;

    isoBandNextXTL[85] = isoBandNextXTR[85] = 0;
    isoBandNextYTL[85] = isoBandNextYTR[85] = -1;
    isoBandNextOTL[85] = isoBandNextOBL[85] = 0;
    isoBandNextXBR[85] = isoBandNextXBL[85] = 0;
    isoBandNextYBR[85] = isoBandNextYBL[85] = 1;
    isoBandNextOTR[85] = isoBandNextOBR[85] = 1;

    /* triangle cases */
    isoBandNextXLB[1] = isoBandNextXLB[169] = 0;
    isoBandNextYLB[1] = isoBandNextYLB[169] = -1;
    isoBandNextOLB[1] = isoBandNextOLB[169] = 0;
    isoBandNextXBL[1] = isoBandNextXBL[169] = -1;
    isoBandNextYBL[1] = isoBandNextYBL[169] = 0;
    isoBandNextOBL[1] = isoBandNextOBL[169] = 0;

    isoBandNextXRB[4] = isoBandNextXRB[166] = 0;
    isoBandNextYRB[4] = isoBandNextYRB[166] = -1;
    isoBandNextORB[4] = isoBandNextORB[166] = 1;
    isoBandNextXBR[4] = isoBandNextXBR[166] = 1;
    isoBandNextYBR[4] = isoBandNextYBR[166] = 0;
    isoBandNextOBR[4] = isoBandNextOBR[166] = 0;

    isoBandNextXRT[16] = isoBandNextXRT[154] = 0;
    isoBandNextYRT[16] = isoBandNextYRT[154] = 1;
    isoBandNextORT[16] = isoBandNextORT[154] = 1;
    isoBandNextXTR[16] = isoBandNextXTR[154] = 1;
    isoBandNextYTR[16] = isoBandNextYTR[154] = 0;
    isoBandNextOTR[16] = isoBandNextOTR[154] = 1;

    isoBandNextXLT[64] = isoBandNextXLT[106] = 0;
    isoBandNextYLT[64] = isoBandNextYLT[106] = 1;
    isoBandNextOLT[64] = isoBandNextOLT[106] = 0;
    isoBandNextXTL[64] = isoBandNextXTL[106] = -1;
    isoBandNextYTL[64] = isoBandNextYTL[106] = 0;
    isoBandNextOTL[64] = isoBandNextOTL[106] = 1;

    /* single trapezoid cases */
    isoBandNextXLT[2] = isoBandNextXLT[168] = 0;
    isoBandNextYLT[2] = isoBandNextYLT[168] = -1;
    isoBandNextOLT[2] = isoBandNextOLT[168] = 1;
    isoBandNextXLB[2] = isoBandNextXLB[168] = 0;
    isoBandNextYLB[2] = isoBandNextYLB[168] = -1;
    isoBandNextOLB[2] = isoBandNextOLB[168] = 0;
    isoBandNextXBL[2] = isoBandNextXBL[168] = -1;
    isoBandNextYBL[2] = isoBandNextYBL[168] = 0;
    isoBandNextOBL[2] = isoBandNextOBL[168] = 0;
    isoBandNextXBR[2] = isoBandNextXBR[168] = -1;
    isoBandNextYBR[2] = isoBandNextYBR[168] = 0;
    isoBandNextOBR[2] = isoBandNextOBR[168] = 1;

    isoBandNextXRT[8] = isoBandNextXRT[162] = 0;
    isoBandNextYRT[8] = isoBandNextYRT[162] = -1;
    isoBandNextORT[8] = isoBandNextORT[162] = 0;
    isoBandNextXRB[8] = isoBandNextXRB[162] = 0;
    isoBandNextYRB[8] = isoBandNextYRB[162] = -1;
    isoBandNextORB[8] = isoBandNextORB[162] = 1;
    isoBandNextXBL[8] = isoBandNextXBL[162] = 1;
    isoBandNextYBL[8] = isoBandNextYBL[162] = 0;
    isoBandNextOBL[8] = isoBandNextOBL[162] = 1;
    isoBandNextXBR[8] = isoBandNextXBR[162] = 1;
    isoBandNextYBR[8] = isoBandNextYBR[162] = 0;
    isoBandNextOBR[8] = isoBandNextOBR[162] = 0;

    isoBandNextXRT[32] = isoBandNextXRT[138] = 0;
    isoBandNextYRT[32] = isoBandNextYRT[138] = 1;
    isoBandNextORT[32] = isoBandNextORT[138] = 1;
    isoBandNextXRB[32] = isoBandNextXRB[138] = 0;
    isoBandNextYRB[32] = isoBandNextYRB[138] = 1;
    isoBandNextORB[32] = isoBandNextORB[138] = 0;
    isoBandNextXTL[32] = isoBandNextXTL[138] = 1;
    isoBandNextYTL[32] = isoBandNextYTL[138] = 0;
    isoBandNextOTL[32] = isoBandNextOTL[138] = 0;
    isoBandNextXTR[32] = isoBandNextXTR[138] = 1;
    isoBandNextYTR[32] = isoBandNextYTR[138] = 0;
    isoBandNextOTR[32] = isoBandNextOTR[138] = 1;

    isoBandNextXLB[128] = isoBandNextXLB[42] = 0;
    isoBandNextYLB[128] = isoBandNextYLB[42] = 1;
    isoBandNextOLB[128] = isoBandNextOLB[42] = 1;
    isoBandNextXLT[128] = isoBandNextXLT[42] = 0;
    isoBandNextYLT[128] = isoBandNextYLT[42] = 1;
    isoBandNextOLT[128] = isoBandNextOLT[42] = 0;
    isoBandNextXTL[128] = isoBandNextXTL[42] = -1;
    isoBandNextYTL[128] = isoBandNextYTL[42] = 0;
    isoBandNextOTL[128] = isoBandNextOTL[42] = 1;
    isoBandNextXTR[128] = isoBandNextXTR[42] = -1;
    isoBandNextYTR[128] = isoBandNextYTR[42] = 0;
    isoBandNextOTR[128] = isoBandNextOTR[42] = 0;

    /* single rectangle cases */
    isoBandNextXRB[5] = isoBandNextXRB[165] = -1;
    isoBandNextYRB[5] = isoBandNextYRB[165] = 0;
    isoBandNextORB[5] = isoBandNextORB[165] = 0;
    isoBandNextXLB[5] = isoBandNextXLB[165] = 1;
    isoBandNextYLB[5] = isoBandNextYLB[165] = 0;
    isoBandNextOLB[5] = isoBandNextOLB[165] = 0;

    isoBandNextXBR[20] = isoBandNextXBR[150] = 0;
    isoBandNextYBR[20] = isoBandNextYBR[150] = 1;
    isoBandNextOBR[20] = isoBandNextOBR[150] = 1;
    isoBandNextXTR[20] = isoBandNextXTR[150] = 0;
    isoBandNextYTR[20] = isoBandNextYTR[150] = -1;
    isoBandNextOTR[20] = isoBandNextOTR[150] = 1;

    isoBandNextXRT[80] = isoBandNextXRT[90] = -1;
    isoBandNextYRT[80] = isoBandNextYRT[90] = 0;
    isoBandNextORT[80] = isoBandNextORT[90] = 1;
    isoBandNextXLT[80] = isoBandNextXLT[90] = 1;
    isoBandNextYLT[80] = isoBandNextYLT[90] = 0;
    isoBandNextOLT[80] = isoBandNextOLT[90] = 1;

    isoBandNextXBL[65] = isoBandNextXBL[105] = 0;
    isoBandNextYBL[65] = isoBandNextYBL[105] = 1;
    isoBandNextOBL[65] = isoBandNextOBL[105] = 0;
    isoBandNextXTL[65] = isoBandNextXTL[105] = 0;
    isoBandNextYTL[65] = isoBandNextYTL[105] = -1;
    isoBandNextOTL[65] = isoBandNextOTL[105] = 0;

    isoBandNextXRT[160] = isoBandNextXRT[10] = -1;
    isoBandNextYRT[160] = isoBandNextYRT[10] = 0;
    isoBandNextORT[160] = isoBandNextORT[10] = 1;
    isoBandNextXRB[160] = isoBandNextXRB[10] = -1;
    isoBandNextYRB[160] = isoBandNextYRB[10] = 0;
    isoBandNextORB[160] = isoBandNextORB[10] = 0;
    isoBandNextXLB[160] = isoBandNextXLB[10] = 1;
    isoBandNextYLB[160] = isoBandNextYLB[10] = 0;
    isoBandNextOLB[160] = isoBandNextOLB[10] = 0;
    isoBandNextXLT[160] = isoBandNextXLT[10] = 1;
    isoBandNextYLT[160] = isoBandNextYLT[10] = 0;
    isoBandNextOLT[160] = isoBandNextOLT[10] = 1;

    isoBandNextXBR[130] = isoBandNextXBR[40] = 0;
    isoBandNextYBR[130] = isoBandNextYBR[40] = 1;
    isoBandNextOBR[130] = isoBandNextOBR[40] = 1;
    isoBandNextXBL[130] = isoBandNextXBL[40] = 0;
    isoBandNextYBL[130] = isoBandNextYBL[40] = 1;
    isoBandNextOBL[130] = isoBandNextOBL[40] = 0;
    isoBandNextXTL[130] = isoBandNextXTL[40] = 0;
    isoBandNextYTL[130] = isoBandNextYTL[40] = -1;
    isoBandNextOTL[130] = isoBandNextOTL[40] = 0;
    isoBandNextXTR[130] = isoBandNextXTR[40] = 0;
    isoBandNextYTR[130] = isoBandNextYTR[40] = -1;
    isoBandNextOTR[130] = isoBandNextOTR[40] = 1;

    /* single hexagon cases */
    isoBandNextXRB[37] = isoBandNextXRB[133] = 0;
    isoBandNextYRB[37] = isoBandNextYRB[133] = 1;
    isoBandNextORB[37] = isoBandNextORB[133] = 1;
    isoBandNextXLB[37] = isoBandNextXLB[133] = 0;
    isoBandNextYLB[37] = isoBandNextYLB[133] = 1;
    isoBandNextOLB[37] = isoBandNextOLB[133] = 0;
    isoBandNextXTL[37] = isoBandNextXTL[133] = -1;
    isoBandNextYTL[37] = isoBandNextYTL[133] = 0;
    isoBandNextOTL[37] = isoBandNextOTL[133] = 0;
    isoBandNextXTR[37] = isoBandNextXTR[133] = 1;
    isoBandNextYTR[37] = isoBandNextYTR[133] = 0;
    isoBandNextOTR[37] = isoBandNextOTR[133] = 0;

    isoBandNextXBR[148] = isoBandNextXBR[22] = -1;
    isoBandNextYBR[148] = isoBandNextYBR[22] = 0;
    isoBandNextOBR[148] = isoBandNextOBR[22] = 0;
    isoBandNextXLB[148] = isoBandNextXLB[22] = 0;
    isoBandNextYLB[148] = isoBandNextYLB[22] = -1;
    isoBandNextOLB[148] = isoBandNextOLB[22] = 1;
    isoBandNextXLT[148] = isoBandNextXLT[22] = 0;
    isoBandNextYLT[148] = isoBandNextYLT[22] = 1;
    isoBandNextOLT[148] = isoBandNextOLT[22] = 1;
    isoBandNextXTR[148] = isoBandNextXTR[22] = -1;
    isoBandNextYTR[148] = isoBandNextYTR[22] = 0;
    isoBandNextOTR[148] = isoBandNextOTR[22] = 1;

    isoBandNextXRT[82] = isoBandNextXRT[88] = 0;
    isoBandNextYRT[82] = isoBandNextYRT[88] = -1;
    isoBandNextORT[82] = isoBandNextORT[88] = 1;
    isoBandNextXBR[82] = isoBandNextXBR[88] = 1;
    isoBandNextYBR[82] = isoBandNextYBR[88] = 0;
    isoBandNextOBR[82] = isoBandNextOBR[88] = 1;
    isoBandNextXBL[82] = isoBandNextXBL[88] = -1;
    isoBandNextYBL[82] = isoBandNextYBL[88] = 0;
    isoBandNextOBL[82] = isoBandNextOBL[88] = 1;
    isoBandNextXLT[82] = isoBandNextXLT[88] = 0;
    isoBandNextYLT[82] = isoBandNextYLT[88] = -1;
    isoBandNextOLT[82] = isoBandNextOLT[88] = 0;

    isoBandNextXRT[73] = isoBandNextXRT[97] = 0;
    isoBandNextYRT[73] = isoBandNextYRT[97] = 1;
    isoBandNextORT[73] = isoBandNextORT[97] = 0;
    isoBandNextXRB[73] = isoBandNextXRB[97] = 0;
    isoBandNextYRB[73] = isoBandNextYRB[97] = -1;
    isoBandNextORB[73] = isoBandNextORB[97] = 0;
    isoBandNextXBL[73] = isoBandNextXBL[97] = 1;
    isoBandNextYBL[73] = isoBandNextYBL[97] = 0;
    isoBandNextOBL[73] = isoBandNextOBL[97] = 0;
    isoBandNextXTL[73] = isoBandNextXTL[97] = 1;
    isoBandNextYTL[73] = isoBandNextYTL[97] = 0;
    isoBandNextOTL[73] = isoBandNextOTL[97] = 1;

    isoBandNextXRT[145] = isoBandNextXRT[25] = 0;
    isoBandNextYRT[145] = isoBandNextYRT[25] = -1;
    isoBandNextORT[145] = isoBandNextORT[25] = 0;
    isoBandNextXBL[145] = isoBandNextXBL[25] = 1;
    isoBandNextYBL[145] = isoBandNextYBL[25] = 0;
    isoBandNextOBL[145] = isoBandNextOBL[25] = 1;
    isoBandNextXLB[145] = isoBandNextXLB[25] = 0;
    isoBandNextYLB[145] = isoBandNextYLB[25] = 1;
    isoBandNextOLB[145] = isoBandNextOLB[25] = 1;
    isoBandNextXTR[145] = isoBandNextXTR[25] = -1;
    isoBandNextYTR[145] = isoBandNextYTR[25] = 0;
    isoBandNextOTR[145] = isoBandNextOTR[25] = 0;

    isoBandNextXRB[70] = isoBandNextXRB[100] = 0;
    isoBandNextYRB[70] = isoBandNextYRB[100] = 1;
    isoBandNextORB[70] = isoBandNextORB[100] = 0;
    isoBandNextXBR[70] = isoBandNextXBR[100] = -1;
    isoBandNextYBR[70] = isoBandNextYBR[100] = 0;
    isoBandNextOBR[70] = isoBandNextOBR[100] = 1;
    isoBandNextXLT[70] = isoBandNextXLT[100] = 0;
    isoBandNextYLT[70] = isoBandNextYLT[100] = -1;
    isoBandNextOLT[70] = isoBandNextOLT[100] = 1;
    isoBandNextXTL[70] = isoBandNextXTL[100] = 1;
    isoBandNextYTL[70] = isoBandNextYTL[100] = 0;
    isoBandNextOTL[70] = isoBandNextOTL[100] = 0;

    /* single pentagon cases */
    isoBandNextXRB[101] = isoBandNextXRB[69] = 0;
    isoBandNextYRB[101] = isoBandNextYRB[69] = 1;
    isoBandNextORB[101] = isoBandNextORB[69] = 0;
    isoBandNextXTL[101] = isoBandNextXTL[69] = 1;
    isoBandNextYTL[101] = isoBandNextYTL[69] = 0;
    isoBandNextOTL[101] = isoBandNextOTL[69] = 0;

    isoBandNextXLB[149] = isoBandNextXLB[21] = 0;
    isoBandNextYLB[149] = isoBandNextYLB[21] = 1;
    isoBandNextOLB[149] = isoBandNextOLB[21] = 1;
    isoBandNextXTR[149] = isoBandNextXTR[21] = -1;
    isoBandNextYTR[149] = isoBandNextYTR[21] = 0;
    isoBandNextOTR[149] = isoBandNextOTR[21] = 0;

    isoBandNextXBR[86] = isoBandNextXBR[84] = -1;
    isoBandNextYBR[86] = isoBandNextYBR[84] = 0;
    isoBandNextOBR[86] = isoBandNextOBR[84] = 1;
    isoBandNextXLT[86] = isoBandNextXLT[84] = 0;
    isoBandNextYLT[86] = isoBandNextYLT[84] = -1;
    isoBandNextOLT[86] = isoBandNextOLT[84] = 1;

    isoBandNextXRT[89] = isoBandNextXRT[81] = 0;
    isoBandNextYRT[89] = isoBandNextYRT[81] = -1;
    isoBandNextORT[89] = isoBandNextORT[81] = 0;
    isoBandNextXBL[89] = isoBandNextXBL[81] = 1;
    isoBandNextYBL[89] = isoBandNextYBL[81] = 0;
    isoBandNextOBL[89] = isoBandNextOBL[81] = 1;

    isoBandNextXRT[96] = isoBandNextXRT[74] = 0;
    isoBandNextYRT[96] = isoBandNextYRT[74] = 1;
    isoBandNextORT[96] = isoBandNextORT[74] = 0;
    isoBandNextXRB[96] = isoBandNextXRB[74] = -1;
    isoBandNextYRB[96] = isoBandNextYRB[74] = 0;
    isoBandNextORB[96] = isoBandNextORB[74] = 1;
    isoBandNextXLT[96] = isoBandNextXLT[74] = 1;
    isoBandNextYLT[96] = isoBandNextYLT[74] = 0;
    isoBandNextOLT[96] = isoBandNextOLT[74] = 0;
    isoBandNextXTL[96] = isoBandNextXTL[74] = 1;
    isoBandNextYTL[96] = isoBandNextYTL[74] = 0;
    isoBandNextOTL[96] = isoBandNextOTL[74] = 1;

    isoBandNextXRT[24] = isoBandNextXRT[146] = 0;
    isoBandNextYRT[24] = isoBandNextYRT[146] = -1;
    isoBandNextORT[24] = isoBandNextORT[146] = 1;
    isoBandNextXBR[24] = isoBandNextXBR[146] = 1;
    isoBandNextYBR[24] = isoBandNextYBR[146] = 0;
    isoBandNextOBR[24] = isoBandNextOBR[146] = 1;
    isoBandNextXBL[24] = isoBandNextXBL[146] = 0;
    isoBandNextYBL[24] = isoBandNextYBL[146] = 1;
    isoBandNextOBL[24] = isoBandNextOBL[146] = 1;
    isoBandNextXTR[24] = isoBandNextXTR[146] = 0;
    isoBandNextYTR[24] = isoBandNextYTR[146] = -1;
    isoBandNextOTR[24] = isoBandNextOTR[146] = 0;

    isoBandNextXRB[6] = isoBandNextXRB[164] = -1;
    isoBandNextYRB[6] = isoBandNextYRB[164] = 0;
    isoBandNextORB[6] = isoBandNextORB[164] = 1;
    isoBandNextXBR[6] = isoBandNextXBR[164] = -1;
    isoBandNextYBR[6] = isoBandNextYBR[164] = 0;
    isoBandNextOBR[6] = isoBandNextOBR[164] = 0;
    isoBandNextXLB[6] = isoBandNextXLB[164] = 0;
    isoBandNextYLB[6] = isoBandNextYLB[164] = -1;
    isoBandNextOLB[6] = isoBandNextOLB[164] = 1;
    isoBandNextXLT[6] = isoBandNextXLT[164] = 1;
    isoBandNextYLT[6] = isoBandNextYLT[164] = 0;
    isoBandNextOLT[6] = isoBandNextOLT[164] = 0;

    isoBandNextXBL[129] = isoBandNextXBL[41] = 0;
    isoBandNextYBL[129] = isoBandNextYBL[41] = 1;
    isoBandNextOBL[129] = isoBandNextOBL[41] = 1;
    isoBandNextXLB[129] = isoBandNextXLB[41] = 0;
    isoBandNextYLB[129] = isoBandNextYLB[41] = 1;
    isoBandNextOLB[129] = isoBandNextOLB[41] = 0;
    isoBandNextXTL[129] = isoBandNextXTL[41] = -1;
    isoBandNextYTL[129] = isoBandNextYTL[41] = 0;
    isoBandNextOTL[129] = isoBandNextOTL[41] = 0;
    isoBandNextXTR[129] = isoBandNextXTR[41] = 0;
    isoBandNextYTR[129] = isoBandNextYTR[41] = -1;
    isoBandNextOTR[129] = isoBandNextOTR[41] = 0;

    isoBandNextXBR[66] = isoBandNextXBR[104] = 0;
    isoBandNextYBR[66] = isoBandNextYBR[104] = 1;
    isoBandNextOBR[66] = isoBandNextOBR[104] = 0;
    isoBandNextXBL[66] = isoBandNextXBL[104] = -1;
    isoBandNextYBL[66] = isoBandNextYBL[104] = 0;
    isoBandNextOBL[66] = isoBandNextOBL[104] = 1;
    isoBandNextXLT[66] = isoBandNextXLT[104] = 0;
    isoBandNextYLT[66] = isoBandNextYLT[104] = -1;
    isoBandNextOLT[66] = isoBandNextOLT[104] = 0;
    isoBandNextXTL[66] = isoBandNextXTL[104] = 0;
    isoBandNextYTL[66] = isoBandNextYTL[104] = -1;
    isoBandNextOTL[66] = isoBandNextOTL[104] = 1;

    isoBandNextXRT[144] = isoBandNextXRT[26] = -1;
    isoBandNextYRT[144] = isoBandNextYRT[26] = 0;
    isoBandNextORT[144] = isoBandNextORT[26] = 0;
    isoBandNextXLB[144] = isoBandNextXLB[26] = 1;
    isoBandNextYLB[144] = isoBandNextYLB[26] = 0;
    isoBandNextOLB[144] = isoBandNextOLB[26] = 1;
    isoBandNextXLT[144] = isoBandNextXLT[26] = 0;
    isoBandNextYLT[144] = isoBandNextYLT[26] = 1;
    isoBandNextOLT[144] = isoBandNextOLT[26] = 1;
    isoBandNextXTR[144] = isoBandNextXTR[26] = -1;
    isoBandNextYTR[144] = isoBandNextYTR[26] = 0;
    isoBandNextOTR[144] = isoBandNextOTR[26] = 1;

    isoBandNextXRB[36] = isoBandNextXRB[134] = 0;
    isoBandNextYRB[36] = isoBandNextYRB[134] = 1;
    isoBandNextORB[36] = isoBandNextORB[134] = 1;
    isoBandNextXBR[36] = isoBandNextXBR[134] = 0;
    isoBandNextYBR[36] = isoBandNextYBR[134] = 1;
    isoBandNextOBR[36] = isoBandNextOBR[134] = 0;
    isoBandNextXTL[36] = isoBandNextXTL[134] = 0;
    isoBandNextYTL[36] = isoBandNextYTL[134] = -1;
    isoBandNextOTL[36] = isoBandNextOTL[134] = 1;
    isoBandNextXTR[36] = isoBandNextXTR[134] = 1;
    isoBandNextYTR[36] = isoBandNextYTR[134] = 0;
    isoBandNextOTR[36] = isoBandNextOTR[134] = 0;

    isoBandNextXRT[9] = isoBandNextXRT[161] = -1;
    isoBandNextYRT[9] = isoBandNextYRT[161] = 0;
    isoBandNextORT[9] = isoBandNextORT[161] = 0;
    isoBandNextXRB[9] = isoBandNextXRB[161] = 0;
    isoBandNextYRB[9] = isoBandNextYRB[161] = -1;
    isoBandNextORB[9] = isoBandNextORB[161] = 0;
    isoBandNextXBL[9] = isoBandNextXBL[161] = 1;
    isoBandNextYBL[9] = isoBandNextYBL[161] = 0;
    isoBandNextOBL[9] = isoBandNextOBL[161] = 0;
    isoBandNextXLB[9] = isoBandNextXLB[161] = 1;
    isoBandNextYLB[9] = isoBandNextYLB[161] = 0;
    isoBandNextOLB[9] = isoBandNextOLB[161] = 1;

    /* 8-sided cases */
    isoBandNextXRT[136] = 0;
    isoBandNextYRT[136] = 1;
    isoBandNextORT[136] = 1;
    isoBandNextXRB[136] = 0;
    isoBandNextYRB[136] = 1;
    isoBandNextORB[136] = 0;
    isoBandNextXBR[136] = -1;
    isoBandNextYBR[136] = 0;
    isoBandNextOBR[136] = 1;
    isoBandNextXBL[136] = -1;
    isoBandNextYBL[136] = 0;
    isoBandNextOBL[136] = 0;
    isoBandNextXLB[136] = 0;
    isoBandNextYLB[136] = -1;
    isoBandNextOLB[136] = 0;
    isoBandNextXLT[136] = 0;
    isoBandNextYLT[136] = -1;
    isoBandNextOLT[136] = 1;
    isoBandNextXTL[136] = 1;
    isoBandNextYTL[136] = 0;
    isoBandNextOTL[136] = 0;
    isoBandNextXTR[136] = 1;
    isoBandNextYTR[136] = 0;
    isoBandNextOTR[136] = 1;

    isoBandNextXRT[34] = 0;
    isoBandNextYRT[34] = -1;
    isoBandNextORT[34] = 0;
    isoBandNextXRB[34] = 0;
    isoBandNextYRB[34] = -1;
    isoBandNextORB[34] = 1;
    isoBandNextXBR[34] = 1;
    isoBandNextYBR[34] = 0;
    isoBandNextOBR[34] = 0;
    isoBandNextXBL[34] = 1;
    isoBandNextYBL[34] = 0;
    isoBandNextOBL[34] = 1;
    isoBandNextXLB[34] = 0;
    isoBandNextYLB[34] = 1;
    isoBandNextOLB[34] = 1;
    isoBandNextXLT[34] = 0;
    isoBandNextYLT[34] = 1;
    isoBandNextOLT[34] = 0;
    isoBandNextXTL[34] = -1;
    isoBandNextYTL[34] = 0;
    isoBandNextOTL[34] = 1;
    isoBandNextXTR[34] = -1;
    isoBandNextYTR[34] = 0;
    isoBandNextOTR[34] = 0;

    isoBandNextXRT[35] = 0;
    isoBandNextYRT[35] = 1;
    isoBandNextORT[35] = 1;
    isoBandNextXRB[35] = 0;
    isoBandNextYRB[35] = -1;
    isoBandNextORB[35] = 1;
    isoBandNextXBR[35] = 1;
    isoBandNextYBR[35] = 0;
    isoBandNextOBR[35] = 0;
    isoBandNextXBL[35] = -1;
    isoBandNextYBL[35] = 0;
    isoBandNextOBL[35] = 0;
    isoBandNextXLB[35] = 0;
    isoBandNextYLB[35] = -1;
    isoBandNextOLB[35] = 0;
    isoBandNextXLT[35] = 0;
    isoBandNextYLT[35] = 1;
    isoBandNextOLT[35] = 0;
    isoBandNextXTL[35] = -1;
    isoBandNextYTL[35] = 0;
    isoBandNextOTL[35] = 1;
    isoBandNextXTR[35] = 1;
    isoBandNextYTR[35] = 0;
    isoBandNextOTR[35] = 1;

    /* 6-sided cases */
    isoBandNextXRT[153] = 0;
    isoBandNextYRT[153] = 1;
    isoBandNextORT[153] = 1;
    isoBandNextXBL[153] = -1;
    isoBandNextYBL[153] = 0;
    isoBandNextOBL[153] = 0;
    isoBandNextXLB[153] = 0;
    isoBandNextYLB[153] = -1;
    isoBandNextOLB[153] = 0;
    isoBandNextXTR[153] = 1;
    isoBandNextYTR[153] = 0;
    isoBandNextOTR[153] = 1;

    isoBandNextXRB[102] = 0;
    isoBandNextYRB[102] = -1;
    isoBandNextORB[102] = 1;
    isoBandNextXBR[102] = 1;
    isoBandNextYBR[102] = 0;
    isoBandNextOBR[102] = 0;
    isoBandNextXLT[102] = 0;
    isoBandNextYLT[102] = 1;
    isoBandNextOLT[102] = 0;
    isoBandNextXTL[102] = -1;
    isoBandNextYTL[102] = 0;
    isoBandNextOTL[102] = 1;

    isoBandNextXRT[155] = 0;
    isoBandNextYRT[155] = -1;
    isoBandNextORT[155] = 0;
    isoBandNextXBL[155] = 1;
    isoBandNextYBL[155] = 0;
    isoBandNextOBL[155] = 1;
    isoBandNextXLB[155] = 0;
    isoBandNextYLB[155] = 1;
    isoBandNextOLB[155] = 1;
    isoBandNextXTR[155] = -1;
    isoBandNextYTR[155] = 0;
    isoBandNextOTR[155] = 0;

    isoBandNextXRB[103] = 0;
    isoBandNextYRB[103] = 1;
    isoBandNextORB[103] = 0;
    isoBandNextXBR[103] = -1;
    isoBandNextYBR[103] = 0;
    isoBandNextOBR[103] = 1;
    isoBandNextXLT[103] = 0;
    isoBandNextYLT[103] = -1;
    isoBandNextOLT[103] = 1;
    isoBandNextXTL[103] = 1;
    isoBandNextYTL[103] = 0;
    isoBandNextOTL[103] = 0;

    /* 7-sided cases */
    isoBandNextXRT[152] = 0;
    isoBandNextYRT[152] = 1;
    isoBandNextORT[152] = 1;
    isoBandNextXBR[152] = -1;
    isoBandNextYBR[152] = 0;
    isoBandNextOBR[152] = 1;
    isoBandNextXBL[152] = -1;
    isoBandNextYBL[152] = 0;
    isoBandNextOBL[152] = 0;
    isoBandNextXLB[152] = 0;
    isoBandNextYLB[152] = -1;
    isoBandNextOLB[152] = 0;
    isoBandNextXLT[152] = 0;
    isoBandNextYLT[152] = -1;
    isoBandNextOLT[152] = 1;
    isoBandNextXTR[152] = 1;
    isoBandNextYTR[152] = 0;
    isoBandNextOTR[152] = 1;

    isoBandNextXRT[156] = 0;
    isoBandNextYRT[156] = -1;
    isoBandNextORT[156] = 1;
    isoBandNextXBR[156] = 1;
    isoBandNextYBR[156] = 0;
    isoBandNextOBR[156] = 1;
    isoBandNextXBL[156] = -1;
    isoBandNextYBL[156] = 0;
    isoBandNextOBL[156] = 0;
    isoBandNextXLB[156] = 0;
    isoBandNextYLB[156] = -1;
    isoBandNextOLB[156] = 0;
    isoBandNextXLT[156] = 0;
    isoBandNextYLT[156] = 1;
    isoBandNextOLT[156] = 1;
    isoBandNextXTR[156] = -1;
    isoBandNextYTR[156] = 0;
    isoBandNextOTR[156] = 1;

    isoBandNextXRT[137] = 0;
    isoBandNextYRT[137] = 1;
    isoBandNextORT[137] = 1;
    isoBandNextXRB[137] = 0;
    isoBandNextYRB[137] = 1;
    isoBandNextORB[137] = 0;
    isoBandNextXBL[137] = -1;
    isoBandNextYBL[137] = 0;
    isoBandNextOBL[137] = 0;
    isoBandNextXLB[137] = 0;
    isoBandNextYLB[137] = -1;
    isoBandNextOLB[137] = 0;
    isoBandNextXTL[137] = 1;
    isoBandNextYTL[137] = 0;
    isoBandNextOTL[137] = 0;
    isoBandNextXTR[137] = 1;
    isoBandNextYTR[137] = 0;
    isoBandNextOTR[137] = 1;

    isoBandNextXRT[139] = 0;
    isoBandNextYRT[139] = 1;
    isoBandNextORT[139] = 1;
    isoBandNextXRB[139] = 0;
    isoBandNextYRB[139] = -1;
    isoBandNextORB[139] = 0;
    isoBandNextXBL[139] = 1;
    isoBandNextYBL[139] = 0;
    isoBandNextOBL[139] = 0;
    isoBandNextXLB[139] = 0;
    isoBandNextYLB[139] = 1;
    isoBandNextOLB[139] = 0;
    isoBandNextXTL[139] = -1;
    isoBandNextYTL[139] = 0;
    isoBandNextOTL[139] = 0;
    isoBandNextXTR[139] = 1;
    isoBandNextYTR[139] = 0;
    isoBandNextOTR[139] = 1;

    isoBandNextXRT[98] = 0;
    isoBandNextYRT[98] = -1;
    isoBandNextORT[98] = 0;
    isoBandNextXRB[98] = 0;
    isoBandNextYRB[98] = -1;
    isoBandNextORB[98] = 1;
    isoBandNextXBR[98] = 1;
    isoBandNextYBR[98] = 0;
    isoBandNextOBR[98] = 0;
    isoBandNextXBL[98] = 1;
    isoBandNextYBL[98] = 0;
    isoBandNextOBL[98] = 1;
    isoBandNextXLT[98] = 0;
    isoBandNextYLT[98] = 1;
    isoBandNextOLT[98] = 0;
    isoBandNextXTL[98] = -1;
    isoBandNextYTL[98] = 0;
    isoBandNextOTL[98] = 1;

    isoBandNextXRT[99] = 0;
    isoBandNextYRT[99] = 1;
    isoBandNextORT[99] = 0;
    isoBandNextXRB[99] = 0;
    isoBandNextYRB[99] = -1;
    isoBandNextORB[99] = 1;
    isoBandNextXBR[99] = 1;
    isoBandNextYBR[99] = 0;
    isoBandNextOBR[99] = 0;
    isoBandNextXBL[99] = -1;
    isoBandNextYBL[99] = 0;
    isoBandNextOBL[99] = 1;
    isoBandNextXLT[99] = 0;
    isoBandNextYLT[99] = -1;
    isoBandNextOLT[99] = 0;
    isoBandNextXTL[99] = 1;
    isoBandNextYTL[99] = 0;
    isoBandNextOTL[99] = 1;

    isoBandNextXRB[38] = 0;
    isoBandNextYRB[38] = -1;
    isoBandNextORB[38] = 1;
    isoBandNextXBR[38] = 1;
    isoBandNextYBR[38] = 0;
    isoBandNextOBR[38] = 0;
    isoBandNextXLB[38] = 0;
    isoBandNextYLB[38] = 1;
    isoBandNextOLB[38] = 1;
    isoBandNextXLT[38] = 0;
    isoBandNextYLT[38] = 1;
    isoBandNextOLT[38] = 0;
    isoBandNextXTL[38] = -1;
    isoBandNextYTL[38] = 0;
    isoBandNextOTL[38] = 1;
    isoBandNextXTR[38] = -1;
    isoBandNextYTR[38] = 0;
    isoBandNextOTR[38] = 0;

    isoBandNextXRB[39] = 0;
    isoBandNextYRB[39] = 1;
    isoBandNextORB[39] = 1;
    isoBandNextXBR[39] = -1;
    isoBandNextYBR[39] = 0;
    isoBandNextOBR[39] = 0;
    isoBandNextXLB[39] = 0;
    isoBandNextYLB[39] = -1;
    isoBandNextOLB[39] = 1;
    isoBandNextXLT[39] = 0;
    isoBandNextYLT[39] = 1;
    isoBandNextOLT[39] = 0;
    isoBandNextXTL[39] = -1;
    isoBandNextYTL[39] = 0;
    isoBandNextOTL[39] = 1;
    isoBandNextXTR[39] = 1;
    isoBandNextYTR[39] = 0;
    isoBandNextOTR[39] = 0;

    /*
      Define helper functions for the polygon_table
      */

    /* triangle cases */
    var p00 = function p00(cell) {
        return [[cell.bottomleft, 0], [0, 0], [0, cell.leftbottom]];
    };
    var p01 = function p01(cell) {
        return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0]];
    };
    var p02 = function p02(cell) {
        return [[cell.topright, 1], [1, 1], [1, cell.righttop]];
    };
    var p03 = function p03(cell) {
        return [[0, cell.lefttop], [0, 1], [cell.topleft, 1]];
    };
    /* trapezoid cases */
    var p04 = function p04(cell) {
        return [[cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop]];
    };
    var p05 = function p05(cell) {
        return [[cell.bottomright, 0], [cell.bottomleft, 0], [1, cell.righttop], [1, cell.rightbottom]];
    };
    var p06 = function p06(cell) {
        return [[1, cell.righttop], [1, cell.rightbottom], [cell.topleft, 1], [cell.topright, 1]];
    };
    var p07 = function p07(cell) {
        return [[0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
    };
    /* rectangle cases */
    var p08 = function p08(cell) {
        return [[0, 0], [0, cell.leftbottom], [1, cell.rightbottom], [1, 0]];
    };
    var p09 = function p09(cell) {
        return [[1, 0], [cell.bottomright, 0], [cell.topright, 1], [1, 1]];
    };
    var p10 = function p10(cell) {
        return [[1, 1], [1, cell.righttop], [0, cell.lefttop], [0, 1]];
    };
    var p11 = function p11(cell) {
        return [[cell.bottomleft, 0], [0, 0], [0, 1], [cell.topleft, 1]];
    };
    var p12 = function p12(cell) {
        return [[1, cell.righttop], [1, cell.rightbottom], [0, cell.leftbottom], [0, cell.lefttop]];
    };
    var p13 = function p13(cell) {
        return [[cell.topleft, 1], [cell.topright, 1], [cell.bottomright, 0], [cell.bottomleft, 0]];
    };
    /* square case */
    var p14 = function p14() {
        return [[0, 0], [0, 1], [1, 1], [1, 0]];
    };
    /* pentagon cases */
    var p15 = function p15(cell) {
        return [[1, cell.rightbottom], [1, 0], [0, 0], [0, 1], [cell.topleft, 1]];
    };
    /* 1211 || 1011 */
    var p16 = function p16(cell) {
        return [[cell.topright, 1], [1, 1], [1, 0], [0, 0], [0, cell.leftbottom]];
    };
    /* 2111 || 0111 */
    var p17 = function p17(cell) {
        return [[1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [1, 1]];
    };
    /* 1112 || 1110 */
    var p18 = function p18(cell) {
        return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, 1]];
    };
    /* 1121 || 1101 */
    var p19 = function p19(cell) {
        return [[1, cell.righttop], [1, cell.rightbottom], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
    };
    /* 1200 || 1022 */
    var p20 = function p20(cell) {
        return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [cell.topright, 1]];
    };
    /* 0120 || 2102 */
    var p21 = function p21(cell) {
        return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop]];
    };
    /* 0012 || 2210 */
    var p22 = function p22(cell) {
        return [[cell.topright, 1], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1]];
    };
    /* 2001 || 0221 */
    var p23 = function p23(cell) {
        return [[cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
    };
    /* 1002 || 1220 */
    var p24 = function p24(cell) {
        return [[1, 1], [1, cell.righttop], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
    };
    /* 2100 || 0122 */
    var p25 = function p25(cell) {
        return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [cell.topleft, 1], [cell.topright, 1]];
    };
    /* 0210 || 2012 */
    var p26 = function p26(cell) {
        return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom]];
    };
    /* 0021 || 2201 */
    /*hexagon cases */
    var p27 = function p27(cell) {
        return [[1, cell.rightbottom], [1, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1], [cell.topright, 1]];
    };
    /* 0211 || 2011 */
    var p28 = function p28(cell) {
        return [[1, 1], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
    };
    /* 2110 || 0112 */
    var p29 = function p29(cell) {
        return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1]];
    };
    /* 1102 || 1120 */
    var p30 = function p30(cell) {
        return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, 1], [cell.topleft, 1]];
    };
    /* 1021 || 1201 */
    var p31 = function p31(cell) {
        return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topright, 1]];
    };
    /* 2101 || 0121 */
    var p32 = function p32(cell) {
        return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
    };
    /* 1012 || 1210 */
    /* 8-sided cases */
    var p33 = function p33(cell) {
        return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
    };
    /* flipped == 1 state for 0202 and 2020 */
    /* 6-sided cases */
    var p34 = function p34(cell) {
        return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topright, 1]];
    };
    /* 0101 with flipped == 1 || 2121 with flipped == 1 */
    var p35 = function p35(cell) {
        return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
    };
    /* 1010 with flipped == 1 || 1212 with flipped == 1 */
    /* 7-sided cases */
    var p36 = function p36(cell) {
        return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
    };
    /* 2120 with flipped == 1 || 0102 with flipped == 1 */
    var p37 = function p37(cell) {
        return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1], [cell.topright, 1]];
    };
    /* 2021 with flipped == 1 || 0201 with flipped == 1 */
    var p38 = function p38(cell) {
        return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
    };
    /* 1202 with flipped == 1 || 1020 with flipped == 1 */
    var p39 = function p39(cell) {
        return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
    };
    /* 0212 with flipped == 1 || 2010 with flipped == 1 */

    /*
      The lookup tables for edge number given the polygon
      is entered at a specific location
    */

    var isoBandEdgeRT = [];
    var isoBandEdgeRB = [];
    var isoBandEdgeBR = [];
    var isoBandEdgeBL = [];
    var isoBandEdgeLB = [];
    var isoBandEdgeLT = [];
    var isoBandEdgeTL = [];
    var isoBandEdgeTR = [];

    /* triangle cases */
    isoBandEdgeBL[1] = isoBandEdgeLB[1] = 18;
    isoBandEdgeBL[169] = isoBandEdgeLB[169] = 18;
    isoBandEdgeBR[4] = isoBandEdgeRB[4] = 12;
    isoBandEdgeBR[166] = isoBandEdgeRB[166] = 12;
    isoBandEdgeRT[16] = isoBandEdgeTR[16] = 4;
    isoBandEdgeRT[154] = isoBandEdgeTR[154] = 4;
    isoBandEdgeLT[64] = isoBandEdgeTL[64] = 22;
    isoBandEdgeLT[106] = isoBandEdgeTL[106] = 22;

    /* trapezoid cases */
    isoBandEdgeBR[2] = isoBandEdgeLT[2] = 17;
    isoBandEdgeBL[2] = isoBandEdgeLB[2] = 18;
    isoBandEdgeBR[168] = isoBandEdgeLT[168] = 17;
    isoBandEdgeBL[168] = isoBandEdgeLB[168] = 18;
    isoBandEdgeRT[8] = isoBandEdgeBL[8] = 9;
    isoBandEdgeRB[8] = isoBandEdgeBR[8] = 12;
    isoBandEdgeRT[162] = isoBandEdgeBL[162] = 9;
    isoBandEdgeRB[162] = isoBandEdgeBR[162] = 12;
    isoBandEdgeRT[32] = isoBandEdgeTR[32] = 4;
    isoBandEdgeRB[32] = isoBandEdgeTL[32] = 1;
    isoBandEdgeRT[138] = isoBandEdgeTR[138] = 4;
    isoBandEdgeRB[138] = isoBandEdgeTL[138] = 1;
    isoBandEdgeLB[128] = isoBandEdgeTR[128] = 21;
    isoBandEdgeLT[128] = isoBandEdgeTL[128] = 22;
    isoBandEdgeLB[42] = isoBandEdgeTR[42] = 21;
    isoBandEdgeLT[42] = isoBandEdgeTL[42] = 22;

    /* rectangle cases */
    isoBandEdgeRB[5] = isoBandEdgeLB[5] = 14;
    isoBandEdgeRB[165] = isoBandEdgeLB[165] = 14;
    isoBandEdgeBR[20] = isoBandEdgeTR[20] = 6;
    isoBandEdgeBR[150] = isoBandEdgeTR[150] = 6;
    isoBandEdgeRT[80] = isoBandEdgeLT[80] = 11;
    isoBandEdgeRT[90] = isoBandEdgeLT[90] = 11;
    isoBandEdgeBL[65] = isoBandEdgeTL[65] = 3;
    isoBandEdgeBL[105] = isoBandEdgeTL[105] = 3;
    isoBandEdgeRT[160] = isoBandEdgeLT[160] = 11;
    isoBandEdgeRB[160] = isoBandEdgeLB[160] = 14;
    isoBandEdgeRT[10] = isoBandEdgeLT[10] = 11;
    isoBandEdgeRB[10] = isoBandEdgeLB[10] = 14;
    isoBandEdgeBR[130] = isoBandEdgeTR[130] = 6;
    isoBandEdgeBL[130] = isoBandEdgeTL[130] = 3;
    isoBandEdgeBR[40] = isoBandEdgeTR[40] = 6;
    isoBandEdgeBL[40] = isoBandEdgeTL[40] = 3;

    /* pentagon cases */
    isoBandEdgeRB[101] = isoBandEdgeTL[101] = 1;
    isoBandEdgeRB[69] = isoBandEdgeTL[69] = 1;
    isoBandEdgeLB[149] = isoBandEdgeTR[149] = 21;
    isoBandEdgeLB[21] = isoBandEdgeTR[21] = 21;
    isoBandEdgeBR[86] = isoBandEdgeLT[86] = 17;
    isoBandEdgeBR[84] = isoBandEdgeLT[84] = 17;
    isoBandEdgeRT[89] = isoBandEdgeBL[89] = 9;
    isoBandEdgeRT[81] = isoBandEdgeBL[81] = 9;
    isoBandEdgeRT[96] = isoBandEdgeTL[96] = 0;
    isoBandEdgeRB[96] = isoBandEdgeLT[96] = 15;
    isoBandEdgeRT[74] = isoBandEdgeTL[74] = 0;
    isoBandEdgeRB[74] = isoBandEdgeLT[74] = 15;
    isoBandEdgeRT[24] = isoBandEdgeBR[24] = 8;
    isoBandEdgeBL[24] = isoBandEdgeTR[24] = 7;
    isoBandEdgeRT[146] = isoBandEdgeBR[146] = 8;
    isoBandEdgeBL[146] = isoBandEdgeTR[146] = 7;
    isoBandEdgeRB[6] = isoBandEdgeLT[6] = 15;
    isoBandEdgeBR[6] = isoBandEdgeLB[6] = 16;
    isoBandEdgeRB[164] = isoBandEdgeLT[164] = 15;
    isoBandEdgeBR[164] = isoBandEdgeLB[164] = 16;
    isoBandEdgeBL[129] = isoBandEdgeTR[129] = 7;
    isoBandEdgeLB[129] = isoBandEdgeTL[129] = 20;
    isoBandEdgeBL[41] = isoBandEdgeTR[41] = 7;
    isoBandEdgeLB[41] = isoBandEdgeTL[41] = 20;
    isoBandEdgeBR[66] = isoBandEdgeTL[66] = 2;
    isoBandEdgeBL[66] = isoBandEdgeLT[66] = 19;
    isoBandEdgeBR[104] = isoBandEdgeTL[104] = 2;
    isoBandEdgeBL[104] = isoBandEdgeLT[104] = 19;
    isoBandEdgeRT[144] = isoBandEdgeLB[144] = 10;
    isoBandEdgeLT[144] = isoBandEdgeTR[144] = 23;
    isoBandEdgeRT[26] = isoBandEdgeLB[26] = 10;
    isoBandEdgeLT[26] = isoBandEdgeTR[26] = 23;
    isoBandEdgeRB[36] = isoBandEdgeTR[36] = 5;
    isoBandEdgeBR[36] = isoBandEdgeTL[36] = 2;
    isoBandEdgeRB[134] = isoBandEdgeTR[134] = 5;
    isoBandEdgeBR[134] = isoBandEdgeTL[134] = 2;
    isoBandEdgeRT[9] = isoBandEdgeLB[9] = 10;
    isoBandEdgeRB[9] = isoBandEdgeBL[9] = 13;
    isoBandEdgeRT[161] = isoBandEdgeLB[161] = 10;
    isoBandEdgeRB[161] = isoBandEdgeBL[161] = 13;

    /* hexagon cases */
    isoBandEdgeRB[37] = isoBandEdgeTR[37] = 5;
    isoBandEdgeLB[37] = isoBandEdgeTL[37] = 20;
    isoBandEdgeRB[133] = isoBandEdgeTR[133] = 5;
    isoBandEdgeLB[133] = isoBandEdgeTL[133] = 20;
    isoBandEdgeBR[148] = isoBandEdgeLB[148] = 16;
    isoBandEdgeLT[148] = isoBandEdgeTR[148] = 23;
    isoBandEdgeBR[22] = isoBandEdgeLB[22] = 16;
    isoBandEdgeLT[22] = isoBandEdgeTR[22] = 23;
    isoBandEdgeRT[82] = isoBandEdgeBR[82] = 8;
    isoBandEdgeBL[82] = isoBandEdgeLT[82] = 19;
    isoBandEdgeRT[88] = isoBandEdgeBR[88] = 8;
    isoBandEdgeBL[88] = isoBandEdgeLT[88] = 19;
    isoBandEdgeRT[73] = isoBandEdgeTL[73] = 0;
    isoBandEdgeRB[73] = isoBandEdgeBL[73] = 13;
    isoBandEdgeRT[97] = isoBandEdgeTL[97] = 0;
    isoBandEdgeRB[97] = isoBandEdgeBL[97] = 13;
    isoBandEdgeRT[145] = isoBandEdgeBL[145] = 9;
    isoBandEdgeLB[145] = isoBandEdgeTR[145] = 21;
    isoBandEdgeRT[25] = isoBandEdgeBL[25] = 9;
    isoBandEdgeLB[25] = isoBandEdgeTR[25] = 21;
    isoBandEdgeRB[70] = isoBandEdgeTL[70] = 1;
    isoBandEdgeBR[70] = isoBandEdgeLT[70] = 17;
    isoBandEdgeRB[100] = isoBandEdgeTL[100] = 1;
    isoBandEdgeBR[100] = isoBandEdgeLT[100] = 17;

    /* 8-sided cases */
    isoBandEdgeRT[34] = isoBandEdgeBL[34] = 9;
    isoBandEdgeRB[34] = isoBandEdgeBR[34] = 12;
    isoBandEdgeLB[34] = isoBandEdgeTR[34] = 21;
    isoBandEdgeLT[34] = isoBandEdgeTL[34] = 22;
    isoBandEdgeRT[136] = isoBandEdgeTR[136] = 4;
    isoBandEdgeRB[136] = isoBandEdgeTL[136] = 1;
    isoBandEdgeBR[136] = isoBandEdgeLT[136] = 17;
    isoBandEdgeBL[136] = isoBandEdgeLB[136] = 18;
    isoBandEdgeRT[35] = isoBandEdgeTR[35] = 4;
    isoBandEdgeRB[35] = isoBandEdgeBR[35] = 12;
    isoBandEdgeBL[35] = isoBandEdgeLB[35] = 18;
    isoBandEdgeLT[35] = isoBandEdgeTL[35] = 22;

    /* 6-sided cases */
    isoBandEdgeRT[153] = isoBandEdgeTR[153] = 4;
    isoBandEdgeBL[153] = isoBandEdgeLB[153] = 18;
    isoBandEdgeRB[102] = isoBandEdgeBR[102] = 12;
    isoBandEdgeLT[102] = isoBandEdgeTL[102] = 22;
    isoBandEdgeRT[155] = isoBandEdgeBL[155] = 9;
    isoBandEdgeLB[155] = isoBandEdgeTR[155] = 23;
    isoBandEdgeRB[103] = isoBandEdgeTL[103] = 1;
    isoBandEdgeBR[103] = isoBandEdgeLT[103] = 17;

    /* 7-sided cases */
    isoBandEdgeRT[152] = isoBandEdgeTR[152] = 4;
    isoBandEdgeBR[152] = isoBandEdgeLT[152] = 17;
    isoBandEdgeBL[152] = isoBandEdgeLB[152] = 18;
    isoBandEdgeRT[156] = isoBandEdgeBR[156] = 8;
    isoBandEdgeBL[156] = isoBandEdgeLB[156] = 18;
    isoBandEdgeLT[156] = isoBandEdgeTR[156] = 23;
    isoBandEdgeRT[137] = isoBandEdgeTR[137] = 4;
    isoBandEdgeRB[137] = isoBandEdgeTL[137] = 1;
    isoBandEdgeBL[137] = isoBandEdgeLB[137] = 18;
    isoBandEdgeRT[139] = isoBandEdgeTR[139] = 4;
    isoBandEdgeRB[139] = isoBandEdgeBL[139] = 13;
    isoBandEdgeLB[139] = isoBandEdgeTL[139] = 20;
    isoBandEdgeRT[98] = isoBandEdgeBL[98] = 9;
    isoBandEdgeRB[98] = isoBandEdgeBR[98] = 12;
    isoBandEdgeLT[98] = isoBandEdgeTL[98] = 22;
    isoBandEdgeRT[99] = isoBandEdgeTL[99] = 0;
    isoBandEdgeRB[99] = isoBandEdgeBR[99] = 12;
    isoBandEdgeBL[99] = isoBandEdgeLT[99] = 19;
    isoBandEdgeRB[38] = isoBandEdgeBR[38] = 12;
    isoBandEdgeLB[38] = isoBandEdgeTR[38] = 21;
    isoBandEdgeLT[38] = isoBandEdgeTL[38] = 22;
    isoBandEdgeRB[39] = isoBandEdgeTR[39] = 5;
    isoBandEdgeBR[39] = isoBandEdgeLB[39] = 16;
    isoBandEdgeLT[39] = isoBandEdgeTL[39] = 22;

    /*
      The lookup tables for all different polygons that
      may appear within a grid cell
    */

    var polygon_table = [];

    /* triangle cases */
    polygon_table[1] = polygon_table[169] = p00; /* 2221 || 0001 */
    polygon_table[4] = polygon_table[166] = p01; /* 2212 || 0010 */
    polygon_table[16] = polygon_table[154] = p02; /* 2122 || 0100 */
    polygon_table[64] = polygon_table[106] = p03; /* 1222 || 1000 */

    /* trapezoid cases */
    polygon_table[168] = polygon_table[2] = p04; /* 2220 || 0002 */
    polygon_table[162] = polygon_table[8] = p05; /* 2202 || 0020 */
    polygon_table[138] = polygon_table[32] = p06; /* 2022 || 0200 */
    polygon_table[42] = polygon_table[128] = p07; /* 0222 || 2000 */

    /* rectangle cases */
    polygon_table[5] = polygon_table[165] = p08; /* 0011 || 2211 */
    polygon_table[20] = polygon_table[150] = p09; /* 0110 || 2112 */
    polygon_table[80] = polygon_table[90] = p10; /* 1100 || 1122 */
    polygon_table[65] = polygon_table[105] = p11; /* 1001 || 1221 */
    polygon_table[160] = polygon_table[10] = p12; /* 2200 || 0022 */
    polygon_table[130] = polygon_table[40] = p13; /* 2002 || 0220 */

    /* square case */
    polygon_table[85] = p14; /* 1111 */

    /* pentagon cases */
    polygon_table[101] = polygon_table[69] = p15; /* 1211 || 1011 */
    polygon_table[149] = polygon_table[21] = p16; /* 2111 || 0111 */
    polygon_table[86] = polygon_table[84] = p17; /* 1112 || 1110 */
    polygon_table[89] = polygon_table[81] = p18; /* 1121 || 1101 */
    polygon_table[96] = polygon_table[74] = p19; /* 1200 || 1022 */
    polygon_table[24] = polygon_table[146] = p20; /* 0120 || 2102 */
    polygon_table[6] = polygon_table[164] = p21; /* 0012 || 2210 */
    polygon_table[129] = polygon_table[41] = p22; /* 2001 || 0221 */
    polygon_table[66] = polygon_table[104] = p23; /* 1002 || 1220 */
    polygon_table[144] = polygon_table[26] = p24; /* 2100 || 0122 */
    polygon_table[36] = polygon_table[134] = p25; /* 0210 || 2012 */
    polygon_table[9] = polygon_table[161] = p26; /* 0021 || 2201 */

    /* hexagon cases */
    polygon_table[37] = polygon_table[133] = p27; /* 0211 || 2011 */
    polygon_table[148] = polygon_table[22] = p28; /* 2110 || 0112 */
    polygon_table[82] = polygon_table[88] = p29; /* 1102 || 1120 */
    polygon_table[73] = polygon_table[97] = p30; /* 1021 || 1201 */
    polygon_table[145] = polygon_table[25] = p31; /* 2101 || 0121 */
    polygon_table[70] = polygon_table[100] = p32; /* 1012 || 1210 */

    /* 8-sided cases */
    polygon_table[34] = function (c) {
        return [p07(c), p05(c)];
    }; /* 0202 || 2020 with flipped == 0 */
    polygon_table[35] = p33; /* flipped == 1 state for 0202 and 2020 */
    polygon_table[136] = function (c) {
        return [p06(c), p04(c)];
    }; /* 2020 || 0202 with flipped == 0 */

    /* 6-sided cases */
    polygon_table[153] = function (c) {
        return [p02(c), p00(c)];
    }; /* 0101 with flipped == 0 || 2121 with flipped == 2 */
    polygon_table[102] = function (c) {
        return [p01(c), p03(c)];
    }; /* 1010 with flipped == 0 || 1212 with flipped == 2 */
    polygon_table[155] = p34; /* 0101 with flipped == 1 || 2121 with flipped == 1 */
    polygon_table[103] = p35; /* 1010 with flipped == 1 || 1212 with flipped == 1 */

    /* 7-sided cases */
    polygon_table[152] = function (c) {
        return [p02(c), p04(c)];
    }; /* 2120 with flipped == 2 || 0102 with flipped == 0 */
    polygon_table[156] = p36; /* 2120 with flipped == 1 || 0102 with flipped == 1 */
    polygon_table[137] = function (c) {
        return [p06(c), p00(c)];
    }; /* 2021 with flipped == 2 || 0201 with flipped == 0 */
    polygon_table[139] = p37; /* 2021 with flipped == 1 || 0201 with flipped == 1 */
    polygon_table[98] = function (c) {
        return [p05(c), p03(c)];
    }; /* 1202 with flipped == 2 || 1020 with flipped == 0 */
    polygon_table[99] = p38; /* 1202 with flipped == 1 || 1020 with flipped == 1 */
    polygon_table[38] = function (c) {
        return [p01(c), p07(c)];
    }; /* 0212 with flipped == 2 || 2010 with flipped == 0 */
    polygon_table[39] = p39; /* 0212 with flipped == 1 || 2010 with flipped == 1 */

    /*
    ####################################
    Some small helper functions
    ####################################
    */

    /* assume that x1 == 1 &&  x0 == 0 */
    function interpolateX(y, y0, y1) {
        return (y - y0) / (y1 - y0);
    }

    function isArray(myArray) {
        return myArray.constructor.toString().indexOf('Array') > -1;
    }

    /*
    ####################################
    Below is the actual Marching Squares implementation
    ####################################
    */

    function computeBandGrid(data, minV, bandwidth) {
        var rows = data.length - 1;
        var cols = data[0].length - 1;
        var BandGrid = { rows: rows, cols: cols, cells: [] };

        var maxV = minV + Math.abs(bandwidth);

        for (var j = 0; j < rows; ++j) {
            BandGrid.cells[j] = [];
            for (var i = 0; i < cols; ++i) {
                /*  compose the 4-trit corner representation */
                var cval = 0;

                var tl = data[j + 1][i];
                var tr = data[j + 1][i + 1];
                var br = data[j][i + 1];
                var bl = data[j][i];

                if (isNaN(tl) || isNaN(tr) || isNaN(br) || isNaN(bl)) {
                    continue;
                }

                cval |= tl < minV ? 0 : tl > maxV ? 128 : 64;
                cval |= tr < minV ? 0 : tr > maxV ? 32 : 16;
                cval |= br < minV ? 0 : br > maxV ? 8 : 4;
                cval |= bl < minV ? 0 : bl > maxV ? 2 : 1;

                var cval_real = +cval;

                /* resolve ambiguity via averaging */
                var flipped = 0;
                if (cval === 17 || /* 0101 */
                cval === 18 || /* 0102 */
                cval === 33 || /* 0201 */
                cval === 34 || /* 0202 */
                cval === 38 || /* 0212 */
                cval === 68 || /* 1010 */
                cval === 72 || /* 1020 */
                cval === 98 || /* 1202 */
                cval === 102 || /* 1212 */
                cval === 132 || /* 2010 */
                cval === 136 || /* 2020 */
                cval === 137 || /* 2021 */
                cval === 152 || /* 2120 */
                cval === 153 /* 2121 */
                ) {
                        var average = (tl + tr + br + bl) / 4;
                        /* set flipped state */
                        flipped = average > maxV ? 2 : average < minV ? 0 : 1;

                        /* adjust cval for flipped cases */

                        /* 8-sided cases */
                        if (cval === 34) {
                            if (flipped === 1) {
                                cval = 35;
                            } else if (flipped === 0) {
                                cval = 136;
                            }
                        } else if (cval === 136) {
                            if (flipped === 1) {
                                cval = 35;
                                flipped = 4;
                            } else if (flipped === 0) {
                                cval = 34;
                            }
                        }

                        /* 6-sided polygon cases */
                        else if (cval === 17) {
                                if (flipped === 1) {
                                    cval = 155;
                                    flipped = 4;
                                } else if (flipped === 0) {
                                    cval = 153;
                                }
                            } else if (cval === 68) {
                                if (flipped === 1) {
                                    cval = 103;
                                    flipped = 4;
                                } else if (flipped === 0) {
                                    cval = 102;
                                }
                            } else if (cval === 153) {
                                if (flipped === 1) cval = 155;
                            } else if (cval === 102) {
                                if (flipped === 1) cval = 103;
                            }

                            /* 7-sided polygon cases */
                            else if (cval === 152) {
                                    if (flipped < 2) {
                                        cval = 156;
                                        flipped = 1;
                                    }
                                } else if (cval === 137) {
                                    if (flipped < 2) {
                                        cval = 139;
                                        flipped = 1;
                                    }
                                } else if (cval === 98) {
                                    if (flipped < 2) {
                                        cval = 99;
                                        flipped = 1;
                                    }
                                } else if (cval === 38) {
                                    if (flipped < 2) {
                                        cval = 39;
                                        flipped = 1;
                                    }
                                } else if (cval === 18) {
                                    if (flipped > 0) {
                                        cval = 156;
                                        flipped = 4;
                                    } else {
                                        cval = 152;
                                    }
                                } else if (cval === 33) {
                                    if (flipped > 0) {
                                        cval = 139;
                                        flipped = 4;
                                    } else {
                                        cval = 137;
                                    }
                                } else if (cval === 72) {
                                    if (flipped > 0) {
                                        cval = 99;
                                        flipped = 4;
                                    } else {
                                        cval = 98;
                                    }
                                } else if (cval === 132) {
                                    if (flipped > 0) {
                                        cval = 39;
                                        flipped = 4;
                                    } else {
                                        cval = 38;
                                    }
                                }
                    }

                /* add cell to BandGrid if it contains at least one polygon-side */
                if (cval != 0 && cval != 170) {
                    var topleft, topright, bottomleft, bottomright, righttop, rightbottom, lefttop, leftbottom;

                    topleft = topright = bottomleft = bottomright = righttop = rightbottom = lefttop = leftbottom = 0.5;

                    var edges = [];

                    /* do interpolation here */
                    /* 1st Triangles */
                    if (cval === 1) {
                        /* 0001 */
                        bottomleft = 1 - interpolateX(minV, br, bl);
                        leftbottom = 1 - interpolateX(minV, tl, bl);
                        edges.push(isoBandEdgeBL[cval]);
                    } else if (cval === 169) {
                        /* 2221 */
                        bottomleft = interpolateX(maxV, bl, br);
                        leftbottom = interpolateX(maxV, bl, tl);
                        edges.push(isoBandEdgeBL[cval]);
                    } else if (cval === 4) {
                        /* 0010 */
                        rightbottom = 1 - interpolateX(minV, tr, br);
                        bottomright = interpolateX(minV, bl, br);
                        edges.push(isoBandEdgeRB[cval]);
                    } else if (cval === 166) {
                        /* 2212 */
                        rightbottom = interpolateX(maxV, br, tr);
                        bottomright = 1 - interpolateX(maxV, br, bl);
                        edges.push(isoBandEdgeRB[cval]);
                    } else if (cval === 16) {
                        /* 0100 */
                        righttop = interpolateX(minV, br, tr);
                        topright = interpolateX(minV, tl, tr);
                        edges.push(isoBandEdgeRT[cval]);
                    } else if (cval === 154) {
                        /* 2122 */
                        righttop = 1 - interpolateX(maxV, tr, br);
                        topright = 1 - interpolateX(maxV, tr, tl);
                        edges.push(isoBandEdgeRT[cval]);
                    } else if (cval === 64) {
                        /* 1000 */
                        lefttop = interpolateX(minV, bl, tl);
                        topleft = 1 - interpolateX(minV, tr, tl);
                        edges.push(isoBandEdgeLT[cval]);
                    } else if (cval === 106) {
                        /* 1222 */
                        lefttop = 1 - interpolateX(maxV, tl, bl);
                        topleft = interpolateX(maxV, tl, tr);
                        edges.push(isoBandEdgeLT[cval]);
                    }
                    /* 2nd Trapezoids */
                    else if (cval === 168) {
                            /* 2220 */
                            bottomright = interpolateX(maxV, bl, br);
                            bottomleft = interpolateX(minV, bl, br);
                            leftbottom = interpolateX(minV, bl, tl);
                            lefttop = interpolateX(maxV, bl, tl);
                            edges.push(isoBandEdgeBR[cval]);
                            edges.push(isoBandEdgeBL[cval]);
                        } else if (cval === 2) {
                            /* 0002 */
                            bottomright = 1 - interpolateX(minV, br, bl);
                            bottomleft = 1 - interpolateX(maxV, br, bl);
                            leftbottom = 1 - interpolateX(maxV, tl, bl);
                            lefttop = 1 - interpolateX(minV, tl, bl);
                            edges.push(isoBandEdgeBR[cval]);
                            edges.push(isoBandEdgeBL[cval]);
                        } else if (cval === 162) {
                            /* 2202 */
                            righttop = interpolateX(maxV, br, tr);
                            rightbottom = interpolateX(minV, br, tr);
                            bottomright = 1 - interpolateX(minV, br, bl);
                            bottomleft = 1 - interpolateX(maxV, br, bl);
                            edges.push(isoBandEdgeBR[cval]);
                            edges.push(isoBandEdgeBL[cval]);
                        } else if (cval === 8) {
                            /* 0020 */
                            righttop = 1 - interpolateX(minV, tr, br);
                            rightbottom = 1 - interpolateX(maxV, tr, br);
                            bottomright = interpolateX(maxV, bl, br);
                            bottomleft = interpolateX(minV, bl, br);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeRB[cval]);
                        } else if (cval === 138) {
                            /* 2022 */
                            righttop = 1 - interpolateX(minV, tr, br);
                            rightbottom = 1 - interpolateX(maxV, tr, br);
                            topleft = 1 - interpolateX(maxV, tr, tl);
                            topright = 1 - interpolateX(minV, tr, tl);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeRB[cval]);
                        } else if (cval === 32) {
                            /* 0200 */
                            righttop = interpolateX(maxV, br, tr);
                            rightbottom = interpolateX(minV, br, tr);
                            topleft = interpolateX(minV, tl, tr);
                            topright = interpolateX(maxV, tl, tr);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeRB[cval]);
                        } else if (cval === 42) {
                            /* 0222 */
                            leftbottom = 1 - interpolateX(maxV, tl, bl);
                            lefttop = 1 - interpolateX(minV, tl, bl);
                            topleft = interpolateX(minV, tl, tr);
                            topright = interpolateX(maxV, tl, tr);
                            edges.push(isoBandEdgeLB[cval]);
                            edges.push(isoBandEdgeLT[cval]);
                        } else if (cval === 128) {
                            /* 2000 */
                            leftbottom = interpolateX(minV, bl, tl);
                            lefttop = interpolateX(maxV, bl, tl);
                            topleft = 1 - interpolateX(maxV, tr, tl);
                            topright = 1 - interpolateX(minV, tr, tl);
                            edges.push(isoBandEdgeLB[cval]);
                            edges.push(isoBandEdgeLT[cval]);
                        }

                    /* 3rd rectangle cases */
                    if (cval === 5) {
                        /* 0011 */
                        rightbottom = 1 - interpolateX(minV, tr, br);
                        leftbottom = 1 - interpolateX(minV, tl, bl);
                        edges.push(isoBandEdgeRB[cval]);
                    } else if (cval === 165) {
                        /* 2211 */
                        rightbottom = interpolateX(maxV, br, tr);
                        leftbottom = interpolateX(maxV, bl, tl);
                        edges.push(isoBandEdgeRB[cval]);
                    } else if (cval === 20) {
                        /* 0110 */
                        bottomright = interpolateX(minV, bl, br);
                        topright = interpolateX(minV, tl, tr);
                        edges.push(isoBandEdgeBR[cval]);
                    } else if (cval === 150) {
                        /* 2112 */
                        bottomright = 1 - interpolateX(maxV, br, bl);
                        topright = 1 - interpolateX(maxV, tr, tl);
                        edges.push(isoBandEdgeBR[cval]);
                    } else if (cval === 80) {
                        /* 1100 */
                        righttop = interpolateX(minV, br, tr);
                        lefttop = interpolateX(minV, bl, tl);
                        edges.push(isoBandEdgeRT[cval]);
                    } else if (cval === 90) {
                        /* 1122 */
                        righttop = 1 - interpolateX(maxV, tr, br);
                        lefttop = 1 - interpolateX(maxV, tl, bl);
                        edges.push(isoBandEdgeRT[cval]);
                    } else if (cval === 65) {
                        /* 1001 */
                        bottomleft = 1 - interpolateX(minV, br, bl);
                        topleft = 1 - interpolateX(minV, tr, tl);
                        edges.push(isoBandEdgeBL[cval]);
                    } else if (cval === 105) {
                        /* 1221 */
                        bottomleft = interpolateX(maxV, bl, br);
                        topleft = interpolateX(maxV, tl, tr);
                        edges.push(isoBandEdgeBL[cval]);
                    } else if (cval === 160) {
                        /* 2200 */
                        righttop = interpolateX(maxV, br, tr);
                        rightbottom = interpolateX(minV, br, tr);
                        leftbottom = interpolateX(minV, bl, tl);
                        lefttop = interpolateX(maxV, bl, tl);
                        edges.push(isoBandEdgeRT[cval]);
                        edges.push(isoBandEdgeRB[cval]);
                    } else if (cval === 10) {
                        /* 0022 */
                        righttop = 1 - interpolateX(minV, tr, br);
                        rightbottom = 1 - interpolateX(maxV, tr, br);
                        leftbottom = 1 - interpolateX(maxV, tl, bl);
                        lefttop = 1 - interpolateX(minV, tl, bl);
                        edges.push(isoBandEdgeRT[cval]);
                        edges.push(isoBandEdgeRB[cval]);
                    } else if (cval === 130) {
                        /* 2002 */
                        bottomright = 1 - interpolateX(minV, br, bl);
                        bottomleft = 1 - interpolateX(maxV, br, bl);
                        topleft = 1 - interpolateX(maxV, tr, tl);
                        topright = 1 - interpolateX(minV, tr, tl);
                        edges.push(isoBandEdgeBR[cval]);
                        edges.push(isoBandEdgeBL[cval]);
                    } else if (cval === 40) {
                        /* 0220 */
                        bottomright = interpolateX(maxV, bl, br);
                        bottomleft = interpolateX(minV, bl, br);
                        topleft = interpolateX(minV, tl, tr);
                        topright = interpolateX(maxV, tl, tr);
                        edges.push(isoBandEdgeBR[cval]);
                        edges.push(isoBandEdgeBL[cval]);
                    }

                    /* 4th single pentagon cases */
                    else if (cval === 101) {
                            /* 1211 */
                            rightbottom = interpolateX(maxV, br, tr);
                            topleft = interpolateX(maxV, tl, tr);
                            edges.push(isoBandEdgeRB[cval]);
                        } else if (cval === 69) {
                            /* 1011 */
                            rightbottom = 1 - interpolateX(minV, tr, br);
                            topleft = 1 - interpolateX(minV, tr, tl);
                            edges.push(isoBandEdgeRB[cval]);
                        } else if (cval === 149) {
                            /* 2111 */
                            leftbottom = interpolateX(maxV, bl, tl);
                            topright = 1 - interpolateX(maxV, tr, tl);
                            edges.push(isoBandEdgeLB[cval]);
                        } else if (cval === 21) {
                            /* 0111 */
                            leftbottom = 1 - interpolateX(minV, tl, bl);
                            topright = interpolateX(minV, tl, tr);
                            edges.push(isoBandEdgeLB[cval]);
                        } else if (cval === 86) {
                            /* 1112 */
                            bottomright = 1 - interpolateX(maxV, br, bl);
                            lefttop = 1 - interpolateX(maxV, tl, bl);
                            edges.push(isoBandEdgeBR[cval]);
                        } else if (cval === 84) {
                            /* 1110 */
                            bottomright = interpolateX(minV, bl, br);
                            lefttop = interpolateX(minV, bl, tl);
                            edges.push(isoBandEdgeBR[cval]);
                        } else if (cval === 89) {
                            /* 1121 */
                            righttop = 1 - interpolateX(maxV, tr, br);
                            bottomleft = interpolateX(maxV, bl, br);
                            edges.push(isoBandEdgeBL[cval]);
                        } else if (cval === 81) {
                            /* 1101 */
                            righttop = interpolateX(minV, br, tr);
                            bottomleft = 1 - interpolateX(minV, br, bl);
                            edges.push(isoBandEdgeBL[cval]);
                        } else if (cval === 96) {
                            /* 1200 */
                            righttop = interpolateX(maxV, br, tr);
                            rightbottom = interpolateX(minV, br, tr);
                            lefttop = interpolateX(minV, bl, tl);
                            topleft = interpolateX(maxV, tl, tr);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeRB[cval]);
                        } else if (cval === 74) {
                            /* 1022 */
                            righttop = 1 - interpolateX(minV, tr, br);
                            rightbottom = 1 - interpolateX(maxV, tr, br);
                            lefttop = 1 - interpolateX(maxV, tl, bl);
                            topleft = 1 - interpolateX(minV, tr, tl);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeRB[cval]);
                        } else if (cval === 24) {
                            /* 0120 */
                            righttop = 1 - interpolateX(maxV, tr, br);
                            bottomright = interpolateX(maxV, bl, br);
                            bottomleft = interpolateX(minV, bl, br);
                            topright = interpolateX(minV, tl, tr);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeBL[cval]);
                        } else if (cval === 146) {
                            /* 2102 */
                            righttop = interpolateX(minV, br, tr);
                            bottomright = 1 - interpolateX(minV, br, bl);
                            bottomleft = 1 - interpolateX(maxV, br, bl);
                            topright = 1 - interpolateX(maxV, tr, tl);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeBL[cval]);
                        } else if (cval === 6) {
                            /* 0012 */
                            rightbottom = 1 - interpolateX(minV, tr, br);
                            bottomright = 1 - interpolateX(maxV, br, bl);
                            leftbottom = 1 - interpolateX(maxV, tl, bl);
                            lefttop = 1 - interpolateX(minV, tl, bl);
                            edges.push(isoBandEdgeRB[cval]);
                            edges.push(isoBandEdgeBR[cval]);
                        } else if (cval === 164) {
                            /* 2210 */
                            rightbottom = interpolateX(maxV, br, tr);
                            bottomright = interpolateX(minV, bl, br);
                            leftbottom = interpolateX(minV, bl, tl);
                            lefttop = interpolateX(maxV, bl, tl);
                            edges.push(isoBandEdgeRB[cval]);
                            edges.push(isoBandEdgeBR[cval]);
                        } else if (cval === 129) {
                            /* 2001 */
                            bottomleft = 1 - interpolateX(minV, br, bl);
                            leftbottom = interpolateX(maxV, bl, tl);
                            topleft = 1 - interpolateX(maxV, tr, tl);
                            topright = 1 - interpolateX(minV, tr, tl);
                            edges.push(isoBandEdgeBL[cval]);
                            edges.push(isoBandEdgeLB[cval]);
                        } else if (cval === 41) {
                            /* 0221 */
                            bottomleft = interpolateX(maxV, bl, br);
                            leftbottom = 1 - interpolateX(minV, tl, bl);
                            topleft = interpolateX(minV, tl, tr);
                            topright = interpolateX(maxV, tl, tr);
                            edges.push(isoBandEdgeBL[cval]);
                            edges.push(isoBandEdgeLB[cval]);
                        } else if (cval === 66) {
                            /* 1002 */
                            bottomright = 1 - interpolateX(minV, br, bl);
                            bottomleft = 1 - interpolateX(maxV, br, bl);
                            lefttop = 1 - interpolateX(maxV, tl, bl);
                            topleft = 1 - interpolateX(minV, tr, tl);
                            edges.push(isoBandEdgeBR[cval]);
                            edges.push(isoBandEdgeBL[cval]);
                        } else if (cval === 104) {
                            /* 1220 */
                            bottomright = interpolateX(maxV, bl, br);
                            bottomleft = interpolateX(minV, bl, br);
                            lefttop = interpolateX(minV, bl, tl);
                            topleft = interpolateX(maxV, tl, tr);
                            edges.push(isoBandEdgeBL[cval]);
                            edges.push(isoBandEdgeTL[cval]);
                        } else if (cval === 144) {
                            /* 2100 */
                            righttop = interpolateX(minV, br, tr);
                            leftbottom = interpolateX(minV, bl, tl);
                            lefttop = interpolateX(maxV, bl, tl);
                            topright = 1 - interpolateX(maxV, tr, tl);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeLT[cval]);
                        } else if (cval === 26) {
                            /* 0122 */
                            righttop = 1 - interpolateX(maxV, tr, br);
                            leftbottom = 1 - interpolateX(maxV, tl, bl);
                            lefttop = 1 - interpolateX(minV, tl, bl);
                            topright = interpolateX(minV, tl, tr);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeLT[cval]);
                        } else if (cval === 36) {
                            /* 0210 */
                            rightbottom = interpolateX(maxV, br, tr);
                            bottomright = interpolateX(minV, bl, br);
                            topleft = interpolateX(minV, tl, tr);
                            topright = interpolateX(maxV, tl, tr);
                            edges.push(isoBandEdgeRB[cval]);
                            edges.push(isoBandEdgeBR[cval]);
                        } else if (cval === 134) {
                            /* 2012 */
                            rightbottom = 1 - interpolateX(minV, tr, br);
                            bottomright = 1 - interpolateX(maxV, br, bl);
                            topleft = 1 - interpolateX(maxV, tr, tl);
                            topright = 1 - interpolateX(minV, tr, tl);
                            edges.push(isoBandEdgeRB[cval]);
                            edges.push(isoBandEdgeBR[cval]);
                        } else if (cval === 9) {
                            /* 0021 */
                            righttop = 1 - interpolateX(minV, tr, br);
                            rightbottom = 1 - interpolateX(maxV, tr, br);
                            bottomleft = interpolateX(maxV, bl, br);
                            leftbottom = 1 - interpolateX(minV, tl, bl);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeRB[cval]);
                        } else if (cval === 161) {
                            /* 2201 */
                            righttop = interpolateX(maxV, br, tr);
                            rightbottom = interpolateX(minV, br, tr);
                            bottomleft = 1 - interpolateX(minV, br, bl);
                            leftbottom = interpolateX(maxV, bl, tl);
                            edges.push(isoBandEdgeRT[cval]);
                            edges.push(isoBandEdgeRB[cval]);
                        }

                        /* 5th single hexagon cases */
                        else if (cval === 37) {
                                /* 0211 */
                                rightbottom = interpolateX(maxV, br, tr);
                                leftbottom = 1 - interpolateX(minV, tl, bl);
                                topleft = interpolateX(minV, tl, tr);
                                topright = interpolateX(maxV, tl, tr);
                                edges.push(isoBandEdgeRB[cval]);
                                edges.push(isoBandEdgeLB[cval]);
                            } else if (cval === 133) {
                                /* 2011 */
                                rightbottom = 1 - interpolateX(minV, tr, br);
                                leftbottom = interpolateX(maxV, bl, tl);
                                topleft = 1 - interpolateX(maxV, tr, tl);
                                topright = 1 - interpolateX(minV, tr, tl);
                                edges.push(isoBandEdgeRB[cval]);
                                edges.push(isoBandEdgeLB[cval]);
                            } else if (cval === 148) {
                                /* 2110 */
                                bottomright = interpolateX(minV, bl, br);
                                leftbottom = interpolateX(minV, bl, tl);
                                lefttop = interpolateX(maxV, bl, tl);
                                topright = 1 - interpolateX(maxV, tr, tl);
                                edges.push(isoBandEdgeBR[cval]);
                                edges.push(isoBandEdgeLT[cval]);
                            } else if (cval === 22) {
                                /* 0112 */
                                bottomright = 1 - interpolateX(maxV, br, bl);
                                leftbottom = 1 - interpolateX(maxV, tl, bl);
                                lefttop = 1 - interpolateX(minV, tl, bl);
                                topright = interpolateX(minV, tl, tr);
                                edges.push(isoBandEdgeBR[cval]);
                                edges.push(isoBandEdgeLT[cval]);
                            } else if (cval === 82) {
                                /* 1102 */
                                righttop = interpolateX(minV, br, tr);
                                bottomright = 1 - interpolateX(minV, br, bl);
                                bottomleft = 1 - interpolateX(maxV, br, bl);
                                lefttop = 1 - interpolateX(maxV, tl, bl);
                                edges.push(isoBandEdgeRT[cval]);
                                edges.push(isoBandEdgeBL[cval]);
                            } else if (cval === 88) {
                                /* 1120 */
                                righttop = 1 - interpolateX(maxV, tr, br);
                                bottomright = interpolateX(maxV, bl, br);
                                bottomleft = interpolateX(minV, bl, br);
                                lefttop = interpolateX(minV, bl, tl);
                                edges.push(isoBandEdgeRT[cval]);
                                edges.push(isoBandEdgeBL[cval]);
                            } else if (cval === 73) {
                                /* 1021 */
                                righttop = 1 - interpolateX(minV, tr, br);
                                rightbottom = 1 - interpolateX(maxV, tr, br);
                                bottomleft = interpolateX(maxV, bl, br);
                                topleft = 1 - interpolateX(minV, tr, tl);
                                edges.push(isoBandEdgeRT[cval]);
                                edges.push(isoBandEdgeRB[cval]);
                            } else if (cval === 97) {
                                /* 1201 */
                                righttop = interpolateX(maxV, br, tr);
                                rightbottom = interpolateX(minV, br, tr);
                                bottomleft = 1 - interpolateX(minV, br, bl);
                                topleft = interpolateX(maxV, tl, tr);
                                edges.push(isoBandEdgeRT[cval]);
                                edges.push(isoBandEdgeRB[cval]);
                            } else if (cval === 145) {
                                /* 2101 */
                                righttop = interpolateX(minV, br, tr);
                                bottomleft = 1 - interpolateX(minV, br, bl);
                                leftbottom = interpolateX(maxV, bl, tl);
                                topright = 1 - interpolateX(maxV, tr, tl);
                                edges.push(isoBandEdgeRT[cval]);
                                edges.push(isoBandEdgeLB[cval]);
                            } else if (cval === 25) {
                                /* 0121 */
                                righttop = 1 - interpolateX(maxV, tr, br);
                                bottomleft = interpolateX(maxV, bl, br);
                                leftbottom = 1 - interpolateX(minV, tl, bl);
                                topright = interpolateX(minV, tl, tr);
                                edges.push(isoBandEdgeRT[cval]);
                                edges.push(isoBandEdgeLB[cval]);
                            } else if (cval === 70) {
                                /* 1012 */
                                rightbottom = 1 - interpolateX(minV, tr, br);
                                bottomright = 1 - interpolateX(maxV, br, bl);
                                lefttop = 1 - interpolateX(maxV, tl, bl);
                                topleft = 1 - interpolateX(minV, tr, tl);
                                edges.push(isoBandEdgeRB[cval]);
                                edges.push(isoBandEdgeBR[cval]);
                            } else if (cval === 100) {
                                /* 1210 */
                                rightbottom = interpolateX(maxV, br, tr);
                                bottomright = interpolateX(minV, bl, br);
                                lefttop = interpolateX(minV, bl, tl);
                                topleft = interpolateX(maxV, tl, tr);
                                edges.push(isoBandEdgeRB[cval]);
                                edges.push(isoBandEdgeBR[cval]);
                            }

                            /* 8-sided cases */
                            else if (cval === 34) {
                                    /* 0202 || 2020 with flipped == 0 */
                                    if (flipped === 0) {
                                        righttop = 1 - interpolateX(minV, tr, br);
                                        rightbottom = 1 - interpolateX(maxV, tr, br);
                                        bottomright = interpolateX(maxV, bl, br);
                                        bottomleft = interpolateX(minV, bl, br);
                                        leftbottom = interpolateX(minV, bl, tl);
                                        lefttop = interpolateX(maxV, bl, tl);
                                        topleft = 1 - interpolateX(maxV, tr, tl);
                                        topright = 1 - interpolateX(minV, tr, tl);
                                    } else {
                                        righttop = interpolateX(maxV, br, tr);
                                        rightbottom = interpolateX(minV, br, tr);
                                        bottomright = 1 - interpolateX(minV, br, bl);
                                        bottomleft = 1 - interpolateX(maxV, br, bl);
                                        leftbottom = 1 - interpolateX(maxV, tl, bl);
                                        lefttop = 1 - interpolateX(minV, tl, bl);
                                        topleft = interpolateX(minV, tl, tr);
                                        topright = interpolateX(maxV, tl, tr);
                                    }
                                    edges.push(isoBandEdgeRT[cval]);
                                    edges.push(isoBandEdgeRB[cval]);
                                    edges.push(isoBandEdgeLB[cval]);
                                    edges.push(isoBandEdgeLT[cval]);
                                } else if (cval === 35) {
                                    /* flipped == 1 state for 0202, and 2020 with flipped == 4*/
                                    if (flipped === 4) {
                                        righttop = 1 - interpolateX(minV, tr, br);
                                        rightbottom = 1 - interpolateX(maxV, tr, br);
                                        bottomright = interpolateX(maxV, bl, br);
                                        bottomleft = interpolateX(minV, bl, br);
                                        leftbottom = interpolateX(minV, bl, tl);
                                        lefttop = interpolateX(maxV, bl, tl);
                                        topleft = 1 - interpolateX(maxV, tr, tl);
                                        topright = 1 - interpolateX(minV, tr, tl);
                                    } else {
                                        righttop = interpolateX(maxV, br, tr);
                                        rightbottom = interpolateX(minV, br, tr);
                                        bottomright = 1 - interpolateX(minV, br, bl);
                                        bottomleft = 1 - interpolateX(maxV, br, bl);
                                        leftbottom = 1 - interpolateX(maxV, tl, bl);
                                        lefttop = 1 - interpolateX(minV, tl, bl);
                                        topleft = interpolateX(minV, tl, tr);
                                        topright = interpolateX(maxV, tl, tr);
                                    }
                                    edges.push(isoBandEdgeRT[cval]);
                                    edges.push(isoBandEdgeRB[cval]);
                                    edges.push(isoBandEdgeBL[cval]);
                                    edges.push(isoBandEdgeLT[cval]);
                                } else if (cval === 136) {
                                    /* 2020 || 0202 with flipped == 0 */
                                    if (flipped === 0) {
                                        righttop = interpolateX(maxV, br, tr);
                                        rightbottom = interpolateX(minV, br, tr);
                                        bottomright = 1 - interpolateX(minV, br, bl);
                                        bottomleft = 1 - interpolateX(maxV, br, bl);
                                        leftbottom = 1 - interpolateX(maxV, tl, bl);
                                        lefttop = 1 - interpolateX(minV, tl, bl);
                                        topleft = interpolateX(minV, tl, tr);
                                        topright = interpolateX(maxV, tl, tr);
                                    } else {
                                        righttop = 1 - interpolateX(minV, tr, br);
                                        rightbottom = 1 - interpolateX(maxV, tr, br);
                                        bottomright = interpolateX(maxV, bl, br);
                                        bottomleft = interpolateX(minV, bl, br);
                                        leftbottom = interpolateX(minV, bl, tl);
                                        lefttop = interpolateX(maxV, bl, tl);
                                        topleft = 1 - interpolateX(maxV, tr, tl);
                                        topright = 1 - interpolateX(minV, tr, tl);
                                    }
                                    edges.push(isoBandEdgeRT[cval]);
                                    edges.push(isoBandEdgeRB[cval]);
                                    edges.push(isoBandEdgeLB[cval]);
                                    edges.push(isoBandEdgeLT[cval]);
                                }

                                /* 6-sided polygon cases */
                                else if (cval === 153) {
                                        /* 0101 with flipped == 0 || 2121 with flipped == 2 */
                                        if (flipped === 0) {
                                            righttop = interpolateX(minV, br, tr);
                                            bottomleft = 1 - interpolateX(minV, br, bl);
                                            leftbottom = 1 - interpolateX(minV, tl, bl);
                                            topright = interpolateX(minV, tl, tr);
                                        } else {
                                            righttop = 1 - interpolateX(maxV, tr, br);
                                            bottomleft = interpolateX(maxV, bl, br);
                                            leftbottom = interpolateX(maxV, bl, tl);
                                            topright = 1 - interpolateX(maxV, tr, tl);
                                        }
                                        edges.push(isoBandEdgeRT[cval]);
                                        edges.push(isoBandEdgeBL[cval]);
                                    } else if (cval === 102) {
                                        /* 1010 with flipped == 0 || 1212 with flipped == 2 */
                                        if (flipped === 0) {
                                            rightbottom = 1 - interpolateX(minV, tr, br);
                                            bottomright = interpolateX(minV, bl, br);
                                            lefttop = interpolateX(minV, bl, tl);
                                            topleft = 1 - interpolateX(minV, tr, tl);
                                        } else {
                                            rightbottom = interpolateX(maxV, br, tr);
                                            bottomright = 1 - interpolateX(maxV, br, bl);
                                            lefttop = 1 - interpolateX(maxV, tl, bl);
                                            topleft = interpolateX(maxV, tl, tr);
                                        }
                                        edges.push(isoBandEdgeRB[cval]);
                                        edges.push(isoBandEdgeLT[cval]);
                                    } else if (cval === 155) {
                                        /* 0101 with flipped == 4 || 2121 with flipped == 1 */
                                        if (flipped === 4) {
                                            righttop = interpolateX(minV, br, tr);
                                            bottomleft = 1 - interpolateX(minV, br, bl);
                                            leftbottom = 1 - interpolateX(minV, tl, bl);
                                            topright = interpolateX(minV, tl, tr);
                                        } else {
                                            righttop = 1 - interpolateX(maxV, tr, br);
                                            bottomleft = interpolateX(maxV, bl, br);
                                            leftbottom = interpolateX(maxV, bl, tl);
                                            topright = 1 - interpolateX(maxV, tr, tl);
                                        }
                                        edges.push(isoBandEdgeRT[cval]);
                                        edges.push(isoBandEdgeLB[cval]);
                                    } else if (cval === 103) {
                                        /* 1010 with flipped == 4 || 1212 with flipped == 1 */
                                        if (flipped === 4) {
                                            rightbottom = 1 - interpolateX(minV, tr, br);
                                            bottomright = interpolateX(minV, bl, br);
                                            lefttop = interpolateX(minV, bl, tl);
                                            topleft = 1 - interpolateX(minV, tr, tl);
                                        } else {
                                            rightbottom = interpolateX(maxV, br, tr);
                                            bottomright = 1 - interpolateX(maxV, br, bl);
                                            lefttop = 1 - interpolateX(maxV, tl, bl);
                                            topleft = interpolateX(maxV, tl, tr);
                                        }
                                        edges.push(isoBandEdgeRB[cval]);
                                        edges.push(isoBandEdgeBR[cval]);
                                    }

                                    /* 7-sided polygon cases */
                                    else if (cval === 152) {
                                            /* 2120 with flipped == 2 || 0102 with flipped == 0 */
                                            if (flipped === 0) {
                                                righttop = interpolateX(minV, br, tr);
                                                bottomright = 1 - interpolateX(minV, br, bl);
                                                bottomleft = 1 - interpolateX(maxV, br, bl);
                                                leftbottom = 1 - interpolateX(maxV, tl, bl);
                                                lefttop = 1 - interpolateX(minV, tl, bl);
                                                topright = interpolateX(minV, tl, tr);
                                            } else {
                                                righttop = 1 - interpolateX(maxV, tr, br);
                                                bottomright = interpolateX(maxV, bl, br);
                                                bottomleft = interpolateX(minV, bl, br);
                                                leftbottom = interpolateX(minV, bl, tl);
                                                lefttop = interpolateX(maxV, bl, tl);
                                                topright = 1 - interpolateX(maxV, tr, tl);
                                            }
                                            edges.push(isoBandEdgeRT[cval]);
                                            edges.push(isoBandEdgeBR[cval]);
                                            edges.push(isoBandEdgeBL[cval]);
                                        } else if (cval === 156) {
                                            /* 2120 with flipped == 1 || 0102 with flipped == 4 */
                                            if (flipped === 4) {
                                                righttop = interpolateX(minV, br, tr);
                                                bottomright = 1 - interpolateX(minV, br, bl);
                                                bottomleft = 1 - interpolateX(maxV, br, bl);
                                                leftbottom = 1 - interpolateX(maxV, tl, bl);
                                                lefttop = 1 - interpolateX(minV, tl, bl);
                                                topright = interpolateX(minV, tl, tr);
                                            } else {
                                                righttop = 1 - interpolateX(maxV, tr, br);
                                                bottomright = interpolateX(maxV, bl, br);
                                                bottomleft = interpolateX(minV, bl, br);
                                                leftbottom = interpolateX(minV, bl, tl);
                                                lefttop = interpolateX(maxV, bl, tl);
                                                topright = 1 - interpolateX(maxV, tr, tl);
                                            }
                                            edges.push(isoBandEdgeRT[cval]);
                                            edges.push(isoBandEdgeBL[cval]);
                                            edges.push(isoBandEdgeLT[cval]);
                                        } else if (cval === 137) {
                                            /* 2021 with flipped == 2 || 0201 with flipped == 0 */
                                            if (flipped === 0) {
                                                righttop = interpolateX(maxV, br, tr);
                                                rightbottom = interpolateX(minV, br, tr);
                                                bottomleft = 1 - interpolateX(minV, br, bl);
                                                leftbottom = 1 - interpolateX(minV, tl, bl);
                                                topleft = interpolateX(minV, tl, tr);
                                                topright = interpolateX(maxV, tl, tr);
                                            } else {
                                                righttop = 1 - interpolateX(minV, tr, br);
                                                rightbottom = 1 - interpolateX(maxV, tr, br);
                                                bottomleft = interpolateX(maxV, bl, br);
                                                leftbottom = interpolateX(maxV, bl, tl);
                                                topleft = 1 - interpolateX(maxV, tr, tl);
                                                topright = 1 - interpolateX(minV, tr, tl);
                                            }
                                            edges.push(isoBandEdgeRT[cval]);
                                            edges.push(isoBandEdgeRB[cval]);
                                            edges.push(isoBandEdgeBL[cval]);
                                        } else if (cval === 139) {
                                            /* 2021 with flipped == 1 || 0201 with flipped == 4 */
                                            if (flipped === 4) {
                                                righttop = interpolateX(maxV, br, tr);
                                                rightbottom = interpolateX(minV, br, tr);
                                                bottomleft = 1 - interpolateX(minV, br, bl);
                                                leftbottom = 1 - interpolateX(minV, tl, bl);
                                                topleft = interpolateX(minV, tl, tr);
                                                topright = interpolateX(maxV, tl, tr);
                                            } else {
                                                righttop = 1 - interpolateX(minV, tr, br);
                                                rightbottom = 1 - interpolateX(maxV, tr, br);
                                                bottomleft = interpolateX(maxV, bl, br);
                                                leftbottom = interpolateX(maxV, bl, tl);
                                                topleft = 1 - interpolateX(maxV, tr, tl);
                                                topright = 1 - interpolateX(minV, tr, tl);
                                            }
                                            edges.push(isoBandEdgeRT[cval]);
                                            edges.push(isoBandEdgeRB[cval]);
                                            edges.push(isoBandEdgeLB[cval]);
                                        } else if (cval === 98) {
                                            /* 1202 with flipped == 2 || 1020 with flipped == 0 */
                                            if (flipped === 0) {
                                                righttop = 1 - interpolateX(minV, tr, br);
                                                rightbottom = 1 - interpolateX(maxV, tr, br);
                                                bottomright = interpolateX(maxV, bl, br);
                                                bottomleft = interpolateX(minV, bl, br);
                                                lefttop = interpolateX(minV, bl, tl);
                                                topleft = 1 - interpolateX(minV, tr, tl);
                                            } else {
                                                righttop = interpolateX(maxV, br, tr);
                                                rightbottom = interpolateX(minV, br, tr);
                                                bottomright = 1 - interpolateX(minV, br, bl);
                                                bottomleft = 1 - interpolateX(maxV, br, bl);
                                                lefttop = 1 - interpolateX(maxV, tl, bl);
                                                topleft = interpolateX(maxV, tl, tr);
                                            }
                                            edges.push(isoBandEdgeRT[cval]);
                                            edges.push(isoBandEdgeRB[cval]);
                                            edges.push(isoBandEdgeLT[cval]);
                                        } else if (cval === 99) {
                                            /* 1202 with flipped == 1 || 1020 with flipped == 4 */
                                            if (flipped === 4) {
                                                righttop = 1 - interpolateX(minV, tr, br);
                                                rightbottom = 1 - interpolateX(maxV, tr, br);
                                                bottomright = interpolateX(maxV, bl, br);
                                                bottomleft = interpolateX(minV, bl, br);
                                                lefttop = interpolateX(minV, bl, tl);
                                                topleft = 1 - interpolateX(minV, tr, tl);
                                            } else {
                                                righttop = interpolateX(maxV, br, tr);
                                                rightbottom = interpolateX(minV, br, tr);
                                                bottomright = 1 - interpolateX(minV, br, bl);
                                                bottomleft = 1 - interpolateX(maxV, br, bl);
                                                lefttop = 1 - interpolateX(maxV, tl, bl);
                                                topleft = interpolateX(maxV, tl, tr);
                                            }
                                            edges.push(isoBandEdgeRT[cval]);
                                            edges.push(isoBandEdgeRB[cval]);
                                            edges.push(isoBandEdgeBL[cval]);
                                        } else if (cval === 38) {
                                            /* 0212 with flipped == 2 || 2010 with flipped == 0 */
                                            if (flipped === 0) {
                                                rightbottom = 1 - interpolateX(minV, tr, br);
                                                bottomright = interpolateX(minV, bl, br);
                                                leftbottom = interpolateX(minV, bl, tl);
                                                lefttop = interpolateX(maxV, bl, tl);
                                                topleft = 1 - interpolateX(maxV, tr, tl);
                                                topright = 1 - interpolateX(minV, tr, tl);
                                            } else {
                                                rightbottom = interpolateX(maxV, br, tr);
                                                bottomright = 1 - interpolateX(maxV, br, bl);
                                                leftbottom = 1 - interpolateX(maxV, tl, bl);
                                                lefttop = 1 - interpolateX(minV, tl, bl);
                                                topleft = interpolateX(minV, tl, tr);
                                                topright = interpolateX(maxV, tl, tr);
                                            }
                                            edges.push(isoBandEdgeRB[cval]);
                                            edges.push(isoBandEdgeLB[cval]);
                                            edges.push(isoBandEdgeLT[cval]);
                                        } else if (cval === 39) {
                                            /* 0212 with flipped == 1 || 2010 with flipped == 4 */
                                            if (flipped === 4) {
                                                rightbottom = 1 - interpolateX(minV, tr, br);
                                                bottomright = interpolateX(minV, bl, br);
                                                leftbottom = interpolateX(minV, bl, tl);
                                                lefttop = interpolateX(maxV, bl, tl);
                                                topleft = 1 - interpolateX(maxV, tr, tl);
                                                topright = 1 - interpolateX(minV, tr, tl);
                                            } else {
                                                rightbottom = interpolateX(maxV, br, tr);
                                                bottomright = 1 - interpolateX(maxV, br, bl);
                                                leftbottom = 1 - interpolateX(maxV, tl, bl);
                                                lefttop = 1 - interpolateX(minV, tl, bl);
                                                topleft = interpolateX(minV, tl, tr);
                                                topright = interpolateX(maxV, tl, tr);
                                            }
                                            edges.push(isoBandEdgeRB[cval]);
                                            edges.push(isoBandEdgeBR[cval]);
                                            edges.push(isoBandEdgeLT[cval]);
                                        } else if (cval === 85) {
                                            righttop = 1;
                                            rightbottom = 0;
                                            bottomright = 1;
                                            bottomleft = 0;
                                            leftbottom = 0;
                                            lefttop = 1;
                                            topleft = 0;
                                            topright = 1;
                                        }

                    if (topleft < 0 || topleft > 1 || topright < 0 || topright > 1 || righttop < 0 || righttop > 1 || bottomright < 0 || bottomright > 1 || leftbottom < 0 || leftbottom > 1 || lefttop < 0 || lefttop > 1) {
                        console.log('MarchingSquaresJS-isoBands: ' + cval + ' ' + cval_real + ' ' + tl + ',' + tr + ',' + br + ',' + bl + ' ' + flipped + ' ' + topleft + ' ' + topright + ' ' + righttop + ' ' + rightbottom + ' ' + bottomright + ' ' + bottomleft + ' ' + leftbottom + ' ' + lefttop);
                    }

                    BandGrid.cells[j][i] = {
                        cval: cval,
                        cval_real: cval_real,
                        flipped: flipped,
                        topleft: topleft,
                        topright: topright,
                        righttop: righttop,
                        rightbottom: rightbottom,
                        bottomright: bottomright,
                        bottomleft: bottomleft,
                        leftbottom: leftbottom,
                        lefttop: lefttop,
                        edges: edges
                    };
                }
            }
        }

        return BandGrid;
    }

    function BandGrid2AreaPaths(grid) {
        var areas = [];
        var rows = grid.rows;
        var cols = grid.cols;
        var currentPolygon = [];

        for (var j = 0; j < rows; j++) {
            for (var i = 0; i < cols; i++) {
                if (typeof grid.cells[j][i] !== 'undefined' && grid.cells[j][i].edges.length > 0) {
                    /* trace back polygon path starting from this cell */

                    var cell = grid.cells[j][i];

                    /* get start coordinates */

                    var prev = getStartXY(cell),
                        next = null,
                        p = i,
                        q = j;

                    if (prev !== null) {
                        currentPolygon.push([prev.p[0] + p, prev.p[1] + q]);
                        //console.log(cell);
                        //console.log("coords: " + (prev.p[0] + p) + " " + (prev.p[1] + q));
                    }

                    do {
                        //console.log(p + "," + q);
                        //console.log(grid.cells[q][p]);
                        //console.log(grid.cells[q][p].edges);
                        //console.log("from : " + prev.x + " " + prev.y + " " + prev.o);

                        next = getExitXY(grid.cells[q][p], prev.x, prev.y, prev.o);
                        if (next !== null) {
                            //console.log("coords: " + (next.p[0] + p) + " " + (next.p[1] + q));
                            currentPolygon.push([next.p[0] + p, next.p[1] + q]);
                            p += next.x;
                            q += next.y;
                            prev = next;
                        } else {
                            //console.log("getExitXY() returned null!");
                            break;
                        }
                        //console.log("to : " + next.x + " " + next.y + " " + next.o);
                        /* special case, where we've reached the grid boundaries */
                        if (q < 0 || q >= rows || p < 0 || p >= cols || typeof grid.cells[q][p] === 'undefined') {
                            /* to create a closed path, we need to trace our way
                            arround the missing data, until we find an entry
                            point again
                            */

                            /* set back coordinates of current cell */
                            p -= next.x;
                            q -= next.y;

                            //console.log("reached boundary at " + p + " " + q);

                            var missing = traceOutOfGridPath(grid, p, q, next.x, next.y, next.o);
                            if (missing !== null) {
                                missing.path.forEach(function (pp) {
                                    //console.log("coords: " + (pp[0]) + " " + (pp[1]));
                                    currentPolygon.push(pp);
                                });
                                p = missing.i;
                                q = missing.j;
                                prev = missing;
                            } else {
                                break;
                            }
                            //console.log(grid.cells[q][p]);
                        }
                    } while (typeof grid.cells[q][p] !== 'undefined' && grid.cells[q][p].edges.length > 0);

                    areas.push(currentPolygon);
                    //console.log("next polygon");
                    //console.log(currentPolygon);
                    currentPolygon = [];
                    if (grid.cells[j][i].edges.length > 0) i--;
                }
            }
        }
        return areas;
    }

    function traceOutOfGridPath(grid, i, j, d_x, d_y, d_o) {
        var cell = grid.cells[j][i];
        var cval = cell.cval_real;
        var p = i + d_x,
            q = j + d_y;
        var path = [];
        var closed = false;

        while (!closed) {
            //console.log("processing cell " + p + "," + q + " " + d_x + " " + d_y + " " + d_o);
            if (typeof grid.cells[q] === 'undefined' || typeof grid.cells[q][p] === 'undefined') {
                //console.log("which is undefined");
                /* we can't move on, so we have to change direction to proceed further */

                /* go back to previous cell */
                q -= d_y;
                p -= d_x;
                cell = grid.cells[q][p];
                cval = cell.cval_real;

                /* check where we've left defined cells of the grid... */
                if (d_y === -1) {
                    /* we came from top */
                    if (d_o === 0) {
                        /* exit left */
                        if (cval & Node3) {
                            /* lower left node is within range, so we move left */
                            path.push([p, q]);
                            d_x = -1;
                            d_y = 0;
                            d_o = 0;
                        } else if (cval & Node2) {
                            /* lower right node is within range, so we move right */
                            path.push([p + 1, q]);
                            d_x = 1;
                            d_y = 0;
                            d_o = 0;
                        } else {
                            /* close the path */
                            path.push([p + cell.bottomright, q]);
                            d_x = 0;
                            d_y = 1;
                            d_o = 1;
                            closed = true;
                            break;
                        }
                    } else if (cval & Node3) {
                        path.push([p, q]);
                        d_x = -1;
                        d_y = 0;
                        d_o = 0;
                    } else if (cval & Node2) {
                        path.push([p + cell.bottomright, q]);
                        d_x = 0;
                        d_y = 1;
                        d_o = 1;
                        closed = true;
                        break;
                    } else {
                        path.push([p + cell.bottomleft, q]);
                        d_x = 0;
                        d_y = 1;
                        d_o = 0;
                        closed = true;
                        break;
                    }
                } else if (d_y === 1) {
                    /* we came from bottom */
                    //console.log("we came from bottom and hit a non-existing cell " + (p + d_x) + "," + (q + d_y) + "!");
                    if (d_o === 0) {
                        /* exit left */
                        if (cval & Node1) {
                            /* top right node is within range, so we move right */
                            path.push([p + 1, q + 1]);
                            d_x = 1;
                            d_y = 0;
                            d_o = 1;
                        } else if (!(cval & Node0)) {
                            /* found entry within same cell */
                            path.push([p + cell.topright, q + 1]);
                            d_x = 0;
                            d_y = -1;
                            d_o = 1;
                            closed = true;
                            //console.log("found entry from bottom at " + p + "," + q);
                            break;
                        } else {
                            path.push([p + cell.topleft, q + 1]);
                            d_x = 0;
                            d_y = -1;
                            d_o = 0;
                            closed = true;
                            break;
                        }
                    } else if (cval & Node1) {
                        path.push([p + 1, q + 1]);
                        d_x = 1;
                        d_y = 0;
                        d_o = 1;
                    } else {
                        /* move right */
                        path.push([p + 1, q + 1]);
                        d_x = 1;
                        d_y = 0;
                        d_o = 1;
                        //console.log("wtf");
                        //break;
                    }
                } else if (d_x === -1) {
                    /* we came from right */
                    //console.log("we came from right and hit a non-existing cell at " + (p + d_x) + "," + (q + d_y) + "!");
                    if (d_o === 0) {
                        //console.log("continue at bottom");
                        if (cval & Node0) {
                            path.push([p, q + 1]);
                            d_x = 0;
                            d_y = 1;
                            d_o = 0;
                            //console.log("moving upwards to " + (p + d_x) + "," + (q + d_y) + "!");
                        } else if (!(cval & Node3)) {
                            /* there has to be an entry into the regular grid again! */
                            //console.log("exiting top");
                            path.push([p, q + cell.lefttop]);
                            d_x = 1;
                            d_y = 0;
                            d_o = 1;
                            closed = true;
                            break;
                        } else {
                            //console.log("exiting bottom");
                            path.push([p, q + cell.leftbottom]);
                            d_x = 1;
                            d_y = 0;
                            d_o = 0;
                            closed = true;
                            break;
                        }
                    } else {
                        //console.log("continue at top");
                        if (cval & Node0) {
                            path.push([p, q + 1]);
                            d_x = 0;
                            d_y = 1;
                            d_o = 0;
                            //console.log("moving upwards to " + (p + d_x) + "," + (q + d_y) + "!");
                        } else {
                            /* */
                            console.log('MarchingSquaresJS-isoBands: wtf');
                            break;
                        }
                    }
                } else if (d_x === 1) {
                    /* we came from left */
                    //console.log("we came from left and hit a non-existing cell " + (p + d_x) + "," + (q + d_y) + "!");
                    if (d_o === 0) {
                        /* exit bottom */
                        if (cval & Node2) {
                            path.push([p + 1, q]);
                            d_x = 0;
                            d_y = -1;
                            d_o = 1;
                        } else {
                            path.push([p + 1, q + cell.rightbottom]);
                            d_x = -1;
                            d_y = 0;
                            d_o = 0;
                            closed = true;
                            break;
                        }
                    } else {
                        /* exit top */
                        if (cval & Node2) {
                            path.push([p + 1, q]);
                            d_x = 0;
                            d_y = -1;
                            d_o = 1;
                        } else if (!(cval & Node1)) {
                            path.push([p + 1, q + cell.rightbottom]);
                            d_x = -1;
                            d_y = 0;
                            d_o = 0;
                            closed = true;
                            break;
                        } else {
                            path.push([p + 1, q + cell.righttop]);
                            d_x = -1;
                            d_y = 0;
                            d_o = 1;
                            break;
                        }
                    }
                } else {
                    /* we came from the same cell */
                    console.log('MarchingSquaresJS-isoBands: we came from nowhere!');
                    break;
                }
            } else {
                /* try to find an entry into the regular grid again! */
                cell = grid.cells[q][p];
                cval = cell.cval_real;
                //console.log("which is defined");

                if (d_x === -1) {
                    if (d_o === 0) {
                        /* try to go downwards */
                        if (typeof grid.cells[q - 1] !== 'undefined' && typeof grid.cells[q - 1][p] !== 'undefined') {
                            d_x = 0;
                            d_y = -1;
                            d_o = 1;
                        } else if (cval & Node3) {
                            /* proceed searching in x-direction */
                            //console.log("proceeding in x-direction!");
                            path.push([p, q]);
                        } else {
                            /* we must have found an entry into the regular grid */
                            path.push([p + cell.bottomright, q]);
                            d_x = 0;
                            d_y = 1;
                            d_o = 1;
                            closed = true;
                            //console.log("found entry from bottom at " + p + "," + q);
                            break;
                        }
                    } else if (cval & Node0) {
                        /* proceed searchin in x-direction */
                        console.log('MarchingSquaresJS-isoBands: proceeding in x-direction!');
                    } else {
                        /* we must have found an entry into the regular grid */
                        console.log('MarchingSquaresJS-isoBands: found entry from top at ' + p + ',' + q);
                        break;
                    }
                } else if (d_x === 1) {
                    if (d_o === 0) {
                        console.log('MarchingSquaresJS-isoBands: wtf');
                        break;
                    } else {
                        /* try to go upwards */
                        if (typeof grid.cells[q + 1] !== 'undefined' && typeof grid.cells[q + 1][p] !== 'undefined') {
                            d_x = 0;
                            d_y = 1;
                            d_o = 0;
                        } else if (cval & Node1) {
                            path.push([p + 1, q + 1]);
                            d_x = 1;
                            d_y = 0;
                            d_o = 1;
                        } else {
                            /* found an entry point into regular grid! */
                            path.push([p + cell.topleft, q + 1]);
                            d_x = 0;
                            d_y = -1;
                            d_o = 0;
                            closed = true;
                            //console.log("found entry from bottom at " + p + "," + q);
                            break;
                        }
                    }
                } else if (d_y === -1) {
                    if (d_o === 1) {
                        /* try to go right */
                        if (typeof grid.cells[q][p + 1] !== 'undefined') {
                            d_x = 1;
                            d_y = 0;
                            d_o = 1;
                        } else if (cval & Node2) {
                            path.push([p + 1, q]);
                            d_x = 0;
                            d_y = -1;
                            d_o = 1;
                        } else {
                            /* found entry into regular grid! */
                            path.push([p + 1, q + cell.righttop]);
                            d_x = -1;
                            d_y = 0;
                            d_o = 1;
                            closed = true;
                            //console.log("found entry from top at " + p + "," + q);
                            break;
                        }
                    } else {
                        console.log('MarchingSquaresJS-isoBands: wtf');
                        break;
                    }
                } else if (d_y === 1) {
                    if (d_o === 0) {
                        //console.log("we came from bottom left and proceed to the left");
                        /* try to go left */
                        if (typeof grid.cells[q][p - 1] !== 'undefined') {
                            d_x = -1;
                            d_y = 0;
                            d_o = 0;
                        } else if (cval & Node0) {
                            path.push([p, q + 1]);
                            d_x = 0;
                            d_y = 1;
                            d_o = 0;
                        } else {
                            /* found an entry point into regular grid! */
                            path.push([p, q + cell.leftbottom]);
                            d_x = 1;
                            d_y = 0;
                            d_o = 0;
                            closed = true;
                            //console.log("found entry from bottom at " + p + "," + q);
                            break;
                        }
                    } else {
                        //console.log("we came from bottom right and proceed to the right");
                        console.log('MarchingSquaresJS-isoBands: wtf');
                        break;
                    }
                } else {
                    console.log('MarchingSquaresJS-isoBands: where did we came from???');
                    break;
                }
            }

            p += d_x;
            q += d_y;
            //console.log("going on to  " + p + "," + q + " via " + d_x + " " + d_y + " " + d_o);

            if (p === i && q === j) {
                /* bail out, once we've closed a circle path */
                break;
            }
        }

        //console.log("exit with " + p + "," + q + " " + d_x + " " + d_y + " " + d_o);
        return { path: path, i: p, j: q, x: d_x, y: d_y, o: d_o };
    }

    function deleteEdge(cell, edgeIdx) {
        delete cell.edges[edgeIdx];
        for (var k = edgeIdx + 1; k < cell.edges.length; k++) {
            cell.edges[k - 1] = cell.edges[k];
        }
        cell.edges.pop();
    }

    function getStartXY(cell) {

        if (cell.edges.length > 0) {
            var e = cell.edges[cell.edges.length - 1];
            //console.log("starting with edge " + e);
            var cval = cell.cval_real;
            switch (e) {
                case 0:
                    if (cval & Node1) {
                        /* node 1 within range */
                        return { p: [1, cell.righttop], x: -1, y: 0, o: 1 };
                    } else {
                        /* node 1 below or above threshold */
                        return { p: [cell.topleft, 1], x: 0, y: -1, o: 0 };
                    }
                case 1:
                    if (cval & Node2) {
                        return { p: [cell.topleft, 1], x: 0, y: -1, o: 0 };
                    } else {
                        return { p: [1, cell.rightbottom], x: -1, y: 0, o: 0 };
                    }
                case 2:
                    if (cval & Node2) {
                        return { p: [cell.bottomright, 0], x: 0, y: 1, o: 1 };
                    } else {
                        return { p: [cell.topleft, 1], x: 0, y: -1, o: 0 };
                    }
                case 3:
                    if (cval & Node3) {
                        return { p: [cell.topleft, 1], x: 0, y: -1, o: 0 };
                    } else {
                        return { p: [cell.bottomleft, 0], x: 0, y: 1, o: 0 };
                    }
                case 4:
                    if (cval & Node1) {
                        return { p: [1, cell.righttop], x: -1, y: 0, o: 1 };
                    } else {
                        return { p: [cell.topright, 1], x: 0, y: -1, o: 1 };
                    }
                case 5:
                    if (cval & Node2) {
                        return { p: [cell.topright, 1], x: 0, y: -1, o: 1 };
                    } else {
                        return { p: [1, cell.rightbottom], x: -1, y: 0, o: 0 };
                    }
                case 6:
                    if (cval & Node2) {
                        return { p: [cell.bottomright, 0], x: 0, y: 1, o: 1 };
                    } else {
                        return { p: [cell.topright, 1], x: 0, y: -1, o: 1 };
                    }
                case 7:
                    if (cval & Node3) {
                        return { p: [cell.topright, 1], x: 0, y: -1, o: 1 };
                    } else {
                        return { p: [cell.bottomleft, 0], x: 0, y: 1, o: 0 };
                    }
                case 8:
                    if (cval & Node2) {
                        return { p: [cell.bottomright, 0], x: 0, y: 1, o: 1 };
                    } else {
                        return { p: [1, cell.righttop], x: -1, y: 0, o: 1 };
                    }
                case 9:
                    if (cval & Node3) {
                        return { p: [1, cell.righttop], x: -1, y: 0, o: 1 };
                    } else {
                        return { p: [cell.bottomleft, 0], x: 0, y: 1, o: 0 };
                    }
                case 10:
                    if (cval & Node3) {
                        return { p: [0, cell.leftbottom], x: 1, y: 0, o: 0 };
                    } else {
                        return { p: [1, cell.righttop], x: -1, y: 0, o: 1 };
                    }
                case 11:
                    if (cval & Node0) {
                        return { p: [1, cell.righttop], x: -1, y: 0, o: 1 };
                    } else {
                        return { p: [0, cell.lefttop], x: 1, y: 0, o: 1 };
                    }
                case 12:
                    if (cval & Node2) {
                        return { p: [cell.bottomright, 0], x: 0, y: 1, o: 1 };
                    } else {
                        return { p: [1, cell.rightbottom], x: -1, y: 0, o: 0 };
                    }
                case 13:
                    if (cval & Node3) {
                        return { p: [1, cell.rightbottom], x: -1, y: 0, o: 0 };
                    } else {
                        return { p: [cell.bottomleft, 0], x: 0, y: 1, o: 0 };
                    }
                case 14:
                    if (cval & Node3) {
                        return { p: [0, cell.leftbottom], x: 1, y: 0, o: 0 };
                    } else {
                        return { p: [1, cell.rightbottom], x: -1, y: 0, o: 0 };
                    }
                case 15:
                    if (cval & Node0) {
                        return { p: [1, cell.rightbottom], x: -1, y: 0, o: 0 };
                    } else {
                        return { p: [0, cell.lefttop], x: 1, y: 0, o: 1 };
                    }
                case 16:
                    if (cval & Node2) {
                        return { p: [cell.bottomright, 0], x: 0, y: 1, o: 1 };
                    } else {
                        return { p: [0, cell.leftbottom], x: 1, y: 0, o: 0 };
                    }
                case 17:
                    if (cval & Node0) {
                        return { p: [cell.bottomright, 0], x: 0, y: 1, o: 1 };
                    } else {
                        return { p: [0, cell.lefttop], x: 1, y: 0, o: 1 };
                    }
                case 18:
                    if (cval & Node3) {
                        return { p: [0, cell.leftbottom], x: 1, y: 0, o: 0 };
                    } else {
                        return { p: [cell.bottomleft, 0], x: 0, y: 1, o: 0 };
                    }
                case 19:
                    if (cval & Node0) {
                        return { p: [cell.bottomleft, 0], x: 0, y: 1, o: 0 };
                    } else {
                        return { p: [0, cell.lefttop], x: 1, y: 0, o: 1 };
                    }
                case 20:
                    if (cval & Node0) {
                        return { p: [cell.topleft, 1], x: 0, y: -1, o: 0 };
                    } else {
                        return { p: [0, cell.leftbottom], x: 1, y: 0, o: 0 };
                    }
                case 21:
                    if (cval & Node1) {
                        return { p: [0, cell.leftbottom], x: 1, y: 0, o: 0 };
                    } else {
                        return { p: [cell.topright, 1], x: 0, y: -1, o: 1 };
                    }
                case 22:
                    if (cval & Node0) {
                        return { p: [cell.topleft, 1], x: 0, y: -1, o: 0 };
                    } else {
                        return { p: [0, cell.lefttop], x: 1, y: 0, o: 1 };
                    }
                case 23:
                    if (cval & Node1) {
                        return { p: [0, cell.lefttop], x: 1, y: 0, o: 1 };
                    } else {
                        return { p: [cell.topright, 1], x: 0, y: -1, o: 1 };
                    }
                default:
                    console.log('MarchingSquaresJS-isoBands: edge index out of range!');
                    console.log(cell);
                    break;
            }
        }

        return null;
    }

    function getExitXY(cell, x, y, o) {

        var e,
            id_x,
            d_x,
            d_y,
            cval = cell.cval;
        var d_o;

        switch (x) {
            case -1:
                switch (o) {
                    case 0:
                        e = isoBandEdgeRB[cval];
                        d_x = isoBandNextXRB[cval];
                        d_y = isoBandNextYRB[cval];
                        d_o = isoBandNextORB[cval];
                        break;
                    default:
                        e = isoBandEdgeRT[cval];
                        d_x = isoBandNextXRT[cval];
                        d_y = isoBandNextYRT[cval];
                        d_o = isoBandNextORT[cval];
                        break;
                }
                break;
            case 1:
                switch (o) {
                    case 0:
                        e = isoBandEdgeLB[cval];
                        d_x = isoBandNextXLB[cval];
                        d_y = isoBandNextYLB[cval];
                        d_o = isoBandNextOLB[cval];
                        break;
                    default:
                        e = isoBandEdgeLT[cval];
                        d_x = isoBandNextXLT[cval];
                        d_y = isoBandNextYLT[cval];
                        d_o = isoBandNextOLT[cval];
                        break;
                }
                break;
            default:
                switch (y) {
                    case -1:
                        switch (o) {
                            case 0:
                                e = isoBandEdgeTL[cval];
                                d_x = isoBandNextXTL[cval];
                                d_y = isoBandNextYTL[cval];
                                d_o = isoBandNextOTL[cval];
                                break;
                            default:
                                e = isoBandEdgeTR[cval];
                                d_x = isoBandNextXTR[cval];
                                d_y = isoBandNextYTR[cval];
                                d_o = isoBandNextOTR[cval];
                                break;
                        }
                        break;
                    case 1:
                        switch (o) {
                            case 0:
                                e = isoBandEdgeBL[cval];
                                d_x = isoBandNextXBL[cval];
                                d_y = isoBandNextYBL[cval];
                                d_o = isoBandNextOBL[cval];
                                break;
                            default:
                                e = isoBandEdgeBR[cval];
                                d_x = isoBandNextXBR[cval];
                                d_y = isoBandNextYBR[cval];
                                d_o = isoBandNextOBR[cval];
                                break;
                        }
                        break;
                    default:
                        break;
                }
                break;
        }

        id_x = cell.edges.indexOf(e);
        if (typeof cell.edges[id_x] !== 'undefined') {
            deleteEdge(cell, id_x);
        } else {
            //console.log("wrong edges...");
            //console.log(x + " " + y + " " + o);
            //console.log(cell);
            return null;
        }

        cval = cell.cval_real;

        switch (e) {
            case 0:
                if (cval & Node1) {
                    /* node 1 within range */
                    x = cell.topleft;
                    y = 1;
                } else {
                    /* node 1 below or above threshold */
                    x = 1;
                    y = cell.righttop;
                }
                break;
            case 1:
                if (cval & Node2) {
                    x = 1;
                    y = cell.rightbottom;
                } else {
                    x = cell.topleft;
                    y = 1;
                }
                break;
            case 2:
                if (cval & Node2) {
                    x = cell.topleft;
                    y = 1;
                } else {
                    x = cell.bottomright;
                    y = 0;
                }
                break;
            case 3:
                if (cval & Node3) {
                    x = cell.bottomleft;
                    y = 0;
                } else {
                    x = cell.topleft;
                    y = 1;
                }
                break;
            case 4:
                if (cval & Node1) {
                    x = cell.topright;
                    y = 1;
                } else {
                    x = 1;
                    y = cell.righttop;
                }
                break;
            case 5:
                if (cval & Node2) {
                    x = 1;
                    y = cell.rightbottom;
                } else {
                    x = cell.topright;
                    y = 1;
                }
                break;
            case 6:
                if (cval & Node2) {
                    x = cell.topright;
                    y = 1;
                } else {
                    x = cell.bottomright;
                    y = 0;
                }
                break;
            case 7:
                if (cval & Node3) {
                    x = cell.bottomleft;
                    y = 0;
                } else {
                    x = cell.topright;
                    y = 1;
                }
                break;
            case 8:
                if (cval & Node2) {
                    x = 1;
                    y = cell.righttop;
                } else {
                    x = cell.bottomright;
                    y = 0;
                }
                break;
            case 9:
                if (cval & Node3) {
                    x = cell.bottomleft;
                    y = 0;
                } else {
                    x = 1;
                    y = cell.righttop;
                }
                break;
            case 10:
                if (cval & Node3) {
                    x = 1;
                    y = cell.righttop;
                } else {
                    x = 0;
                    y = cell.leftbottom;
                }
                break;
            case 11:
                if (cval & Node0) {
                    x = 0;
                    y = cell.lefttop;
                } else {
                    x = 1;
                    y = cell.righttop;
                }
                break;
            case 12:
                if (cval & Node2) {
                    x = 1;
                    y = cell.rightbottom;
                } else {
                    x = cell.bottomright;
                    y = 0;
                }
                break;
            case 13:
                if (cval & Node3) {
                    x = cell.bottomleft;
                    y = 0;
                } else {
                    x = 1;
                    y = cell.rightbottom;
                }
                break;
            case 14:
                if (cval & Node3) {
                    x = 1;
                    y = cell.rightbottom;
                } else {
                    x = 0;
                    y = cell.leftbottom;
                }
                break;
            case 15:
                if (cval & Node0) {
                    x = 0;
                    y = cell.lefttop;
                } else {
                    x = 1;
                    y = cell.rightbottom;
                }
                break;
            case 16:
                if (cval & Node2) {
                    x = 0;
                    y = cell.leftbottom;
                } else {
                    x = cell.bottomright;
                    y = 0;
                }
                break;
            case 17:
                if (cval & Node0) {
                    x = 0;
                    y = cell.lefttop;
                } else {
                    x = cell.bottomright;
                    y = 0;
                }
                break;
            case 18:
                if (cval & Node3) {
                    x = cell.bottomleft;
                    y = 0;
                } else {
                    x = 0;
                    y = cell.leftbottom;
                }
                break;
            case 19:
                if (cval & Node0) {
                    x = 0;
                    y = cell.lefttop;
                } else {
                    x = cell.bottomleft;
                    y = 0;
                }
                break;
            case 20:
                if (cval & Node0) {
                    x = 0;
                    y = cell.leftbottom;
                } else {
                    x = cell.topleft;
                    y = 1;
                }
                break;
            case 21:
                if (cval & Node1) {
                    x = cell.topright;
                    y = 1;
                } else {
                    x = 0;
                    y = cell.leftbottom;
                }
                break;
            case 22:
                if (cval & Node0) {
                    x = 0;
                    y = cell.lefttop;
                } else {
                    x = cell.topleft;
                    y = 1;
                }
                break;
            case 23:
                if (cval & Node1) {
                    x = cell.topright;
                    y = 1;
                } else {
                    x = 0;
                    y = cell.lefttop;
                }
                break;
            default:
                console.log('MarchingSquaresJS-isoBands: edge index out of range!');
                console.log(cell);
                return null;
        }

        if (typeof x === 'undefined' || typeof y === 'undefined' || typeof d_x === 'undefined' || typeof d_y === 'undefined' || typeof d_o === 'undefined') {
            console.log('MarchingSquaresJS-isoBands: undefined value!');
            console.log(cell);
            console.log(x + ' ' + y + ' ' + d_x + ' ' + d_y + ' ' + d_o);
        }
        return { p: [x, y], x: d_x, y: d_y, o: d_o };
    }

    function BandGrid2Areas(grid) {
        var areas = [];
        var area_idx = 0;

        grid.cells.forEach(function (g, j) {
            g.forEach(function (gg, i) {
                if (typeof gg !== 'undefined') {
                    var a = polygon_table[gg.cval](gg);
                    if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && isArray(a)) {
                        if (_typeof(a[0]) === 'object' && isArray(a[0])) {
                            if (_typeof(a[0][0]) === 'object' && isArray(a[0][0])) {
                                a.forEach(function (aa) {
                                    aa.forEach(function (aaa) {
                                        aaa[0] += i;
                                        aaa[1] += j;
                                    });
                                    areas[area_idx++] = aa;
                                });
                            } else {
                                a.forEach(function (aa) {
                                    aa[0] += i;
                                    aa[1] += j;
                                });
                                areas[area_idx++] = a;
                            }
                        } else {
                            console.log('MarchingSquaresJS-isoBands: bandcell polygon with malformed coordinates');
                        }
                    } else {
                        console.log('MarchingSquaresJS-isoBands: bandcell polygon with null coordinates');
                    }
                }
            });
        });

        return areas;
    }

    /**
     * Takes a grid {@link FeatureCollection} of {@link Point} features with z-values and an array of
     * value breaks and generates filled contour isobands.
     *
     * @name isobands
     * @param {FeatureCollection<Point>} pointGrid input points
     * @param {Array<number>} breaks where to draw contours
     * @param {Object} [options={}] options on output
     * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled
     * @param {Object} [options.commonProperties={}] GeoJSON properties passed to ALL isobands
     * @param {Array<Object>} [options.breaksProperties=[]] GeoJSON properties passed, in order, to the correspondent isoband (order defined by breaks)
     * @returns {FeatureCollection<MultiPolygon>} a FeatureCollection of {@link MultiPolygon} features representing isobands
     */
    function isobands(pointGrid, breaks, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        var zProperty = options.zProperty || 'elevation';
        var commonProperties = options.commonProperties || {};
        var breaksProperties = options.breaksProperties || [];

        // Validation
        collectionOf(pointGrid, 'Point', 'Input must contain Points');
        if (!breaks) throw new Error('breaks is required');
        if (!Array.isArray(breaks)) throw new Error('breaks is not an Array');
        if (!isObject(commonProperties)) throw new Error('commonProperties is not an Object');
        if (!Array.isArray(breaksProperties)) throw new Error('breaksProperties is not an Array');

        // Isoband methods
        var matrix = gridToMatrix(pointGrid, { zProperty: zProperty, flip: true });
        var contours = createContourLines(matrix, breaks, zProperty);
        contours = rescaleContours(contours, matrix, pointGrid);

        var multipolygons = contours.map(function (contour, index) {
            if (breaksProperties[index] && !isObject(breaksProperties[index])) {
                throw new Error('Each mappedProperty is required to be an Object');
            }
            // collect all properties
            var contourProperties = Object.assign({}, commonProperties, breaksProperties[index]);
            contourProperties[zProperty] = contour[zProperty];
            var multiP = multiPolygon(contour.groupedRings, contourProperties);
            return multiP;
        });

        return featureCollection(multipolygons);
    }

    /**
     * Creates the contours lines (featuresCollection of polygon features) from the 2D data grid
     *
     * Marchingsquares process the grid data as a 3D representation of a function on a 2D plane, therefore it
     * assumes the points (x-y coordinates) are one 'unit' distance. The result of the IsoBands function needs to be
     * rescaled, with turfjs, to the original area and proportions on the map
     *
     * @private
     * @param {Array<Array<number>>} matrix Grid Data
     * @param {Array<number>} breaks Breaks
     * @param {string} [property='elevation'] Property
     * @returns {Array<any>} contours
     */
    function createContourLines(matrix, breaks, property) {

        var contours = [];
        for (var i = 1; i < breaks.length; i++) {
            var lowerBand = +breaks[i - 1]; // make sure the breaks value is a number
            var upperBand = +breaks[i];

            var isobandsCoords = isoBands(matrix, lowerBand, upperBand - lowerBand);
            // as per GeoJson rules for creating a Polygon, make sure the first element
            // in the array of LinearRings represents the exterior ring (i.e. biggest area),
            // and any subsequent elements represent interior rings (i.e. smaller area);
            // this avoids rendering issues of the MultiPolygons on the map
            var nestedRings = orderByArea(isobandsCoords);
            var groupedRings = groupNestedRings(nestedRings);
            var obj = {};
            obj['groupedRings'] = groupedRings;
            obj[property] = lowerBand + '-' + upperBand;
            contours.push(obj);
        }
        return contours;
    }

    /**
     * Transform isobands of 2D grid to polygons for the map
     *
     * @private
     * @param {Array<any>} contours Contours
     * @param {Array<Array<number>>} matrix Grid Data
     * @param {Object} points Points by Latitude
     * @returns {Array<any>} contours
     */
    function rescaleContours(contours, matrix, points$$1) {

        // get dimensions (on the map) of the original grid
        var gridBbox = bbox(points$$1); // [ minX, minY, maxX, maxY ]
        var originalWidth = gridBbox[2] - gridBbox[0];
        var originalHeigth = gridBbox[3] - gridBbox[1];

        // get origin, which is the first point of the last row on the rectangular data on the map
        var x0 = gridBbox[0];
        var y0 = gridBbox[1];
        // get number of cells per side
        var matrixWidth = matrix[0].length - 1;
        var matrixHeight = matrix.length - 1;
        // calculate the scaling factor between matrix and rectangular grid on the map
        var scaleX = originalWidth / matrixWidth;
        var scaleY = originalHeigth / matrixHeight;

        var resize = function resize(point$$1) {
            point$$1[0] = point$$1[0] * scaleX + x0;
            point$$1[1] = point$$1[1] * scaleY + y0;
        };

        // resize and shift each point/line of the isobands
        contours.forEach(function (contour) {
            contour.groupedRings.forEach(function (lineRingSet) {
                lineRingSet.forEach(function (lineRing) {
                    lineRing.forEach(resize);
                });
            });
        });
        return contours;
    }

    /*  utility functions */

    /**
     * Returns an array of coordinates (of LinearRings) in descending order by area
     *
     * @private
     * @param {Array<LineString>} ringsCoords array of closed LineString
     * @returns {Array} array of the input LineString ordered by area
     */
    function orderByArea(ringsCoords) {
        var ringsWithArea = [];
        var areas = [];
        ringsCoords.forEach(function (coords) {
            // var poly = polygon([points]);
            var ringArea = area(polygon([coords]));
            // create an array of areas value
            areas.push(ringArea);
            // associate each lineRing with its area
            ringsWithArea.push({ ring: coords, area: ringArea });
        });
        areas.sort(function (a, b) {
            // bigger --> smaller
            return b - a;
        });
        // create a new array of linearRings coordinates ordered by their area
        var orderedByArea = [];
        areas.forEach(function (area$$1) {
            for (var lr = 0; lr < ringsWithArea.length; lr++) {
                if (ringsWithArea[lr].area === area$$1) {
                    orderedByArea.push(ringsWithArea[lr].ring);
                    ringsWithArea.splice(lr, 1);
                    break;
                }
            }
        });
        return orderedByArea;
    }

    /**
     * Returns an array of arrays of coordinates, each representing
     * a set of (coordinates of) nested LinearRings,
     * i.e. the first ring contains all the others
     *
     * @private
     * @param {Array} orderedLinearRings array of coordinates (of LinearRings) in descending order by area
     * @returns {Array<Array>} Array of coordinates of nested LinearRings
     */
    function groupNestedRings(orderedLinearRings) {
        // create a list of the (coordinates of) LinearRings
        var lrList = orderedLinearRings.map(function (lr) {
            return { lrCoordinates: lr, grouped: false };
        });
        var groupedLinearRingsCoords = [];
        while (!allGrouped(lrList)) {
            for (var i = 0; i < lrList.length; i++) {
                if (!lrList[i].grouped) {
                    // create new group starting with the larger not already grouped ring
                    var group = [];
                    group.push(lrList[i].lrCoordinates);
                    lrList[i].grouped = true;
                    var outerMostPoly = polygon([lrList[i].lrCoordinates]);
                    // group all the rings contained by the outermost ring
                    for (var j = i + 1; j < lrList.length; j++) {
                        if (!lrList[j].grouped) {
                            var lrPoly = polygon([lrList[j].lrCoordinates]);
                            if (isInside(lrPoly, outerMostPoly)) {
                                group.push(lrList[j].lrCoordinates);
                                lrList[j].grouped = true;
                            }
                        }
                    }
                    // insert the new group
                    groupedLinearRingsCoords.push(group);
                }
            }
        }
        return groupedLinearRingsCoords;
    }

    /**
     * @private
     * @param {Polygon} testPolygon polygon of interest
     * @param {Polygon} targetPolygon polygon you want to compare with
     * @returns {boolean} true if test-Polygon is inside target-Polygon
     */
    function isInside(testPolygon, targetPolygon) {
        var points$$1 = explode(testPolygon);
        for (var i = 0; i < points$$1.features.length; i++) {
            if (!booleanPointInPolygon(points$$1.features[i], targetPolygon)) {
                return false;
            }
        }
        return true;
    }

    /**
     * @private
     * @param {Array<Object>} list list of objects which might contain the 'group' attribute
     * @returns {boolean} true if all the objects in the list are marked as grouped
     */
    function allGrouped(list) {
        for (var i = 0; i < list.length; i++) {
            if (list[i].grouped === false) {
                return false;
            }
        }
        return true;
    }

    /**
     * @license GNU Affero General Public License.
     * Copyright (c) 2015, 2015 Ronny Lorenz <ronny@tbi.univie.ac.at>
     * v. 1.2.0
     * https://github.com/RaumZeit/MarchingSquares.js
     */

    /**
     * Compute the isocontour(s) of a scalar 2D field given
     * a certain threshold by applying the Marching Squares
     * Algorithm. The function returns a list of path coordinates
     */
    var defaultSettings$1 = {
        successCallback: null,
        verbose: false
    };

    var settings$1 = {};

    function isoContours(data, threshold, options) {
        /* process options */
        options = options ? options : {};

        var optionKeys = Object.keys(defaultSettings$1);

        for (var i = 0; i < optionKeys.length; i++) {
            var key = optionKeys[i];
            var val = options[key];
            val = typeof val !== 'undefined' && val !== null ? val : defaultSettings$1[key];

            settings$1[key] = val;
        }

        if (settings$1.verbose) console.log('MarchingSquaresJS-isoContours: computing isocontour for ' + threshold);

        var ret = contourGrid2Paths(computeContourGrid(data, threshold));

        if (typeof settings$1.successCallback === 'function') settings$1.successCallback(ret);

        return ret;
    }

    /*
      Thats all for the public interface, below follows the actual
      implementation
    */

    /*
    ################################
    Isocontour implementation below
    ################################
    */

    /* assume that x1 == 1 &&  x0 == 0 */
    function interpolateX$1(y, y0, y1) {
        return (y - y0) / (y1 - y0);
    }

    /* compute the isocontour 4-bit grid */
    function computeContourGrid(data, threshold) {
        var rows = data.length - 1;
        var cols = data[0].length - 1;
        var ContourGrid = { rows: rows, cols: cols, cells: [] };

        for (var j = 0; j < rows; ++j) {
            ContourGrid.cells[j] = [];
            for (var i = 0; i < cols; ++i) {
                /* compose the 4-bit corner representation */
                var cval = 0;

                var tl = data[j + 1][i];
                var tr = data[j + 1][i + 1];
                var br = data[j][i + 1];
                var bl = data[j][i];

                if (isNaN(tl) || isNaN(tr) || isNaN(br) || isNaN(bl)) {
                    continue;
                }
                cval |= tl >= threshold ? 8 : 0;
                cval |= tr >= threshold ? 4 : 0;
                cval |= br >= threshold ? 2 : 0;
                cval |= bl >= threshold ? 1 : 0;

                /* resolve ambiguity for cval == 5 || 10 via averaging */
                var flipped = false;
                if (cval === 5 || cval === 10) {
                    var average = (tl + tr + br + bl) / 4;
                    if (cval === 5 && average < threshold) {
                        cval = 10;
                        flipped = true;
                    } else if (cval === 10 && average < threshold) {
                        cval = 5;
                        flipped = true;
                    }
                }

                /* add cell to ContourGrid if it contains edges */
                if (cval !== 0 && cval !== 15) {
                    var top, bottom, left, right;
                    top = bottom = left = right = 0.5;
                    /* interpolate edges of cell */
                    if (cval === 1) {
                        left = 1 - interpolateX$1(threshold, tl, bl);
                        bottom = 1 - interpolateX$1(threshold, br, bl);
                    } else if (cval === 2) {
                        bottom = interpolateX$1(threshold, bl, br);
                        right = 1 - interpolateX$1(threshold, tr, br);
                    } else if (cval === 3) {
                        left = 1 - interpolateX$1(threshold, tl, bl);
                        right = 1 - interpolateX$1(threshold, tr, br);
                    } else if (cval === 4) {
                        top = interpolateX$1(threshold, tl, tr);
                        right = interpolateX$1(threshold, br, tr);
                    } else if (cval === 5) {
                        top = interpolateX$1(threshold, tl, tr);
                        right = interpolateX$1(threshold, br, tr);
                        bottom = 1 - interpolateX$1(threshold, br, bl);
                        left = 1 - interpolateX$1(threshold, tl, bl);
                    } else if (cval === 6) {
                        bottom = interpolateX$1(threshold, bl, br);
                        top = interpolateX$1(threshold, tl, tr);
                    } else if (cval === 7) {
                        left = 1 - interpolateX$1(threshold, tl, bl);
                        top = interpolateX$1(threshold, tl, tr);
                    } else if (cval === 8) {
                        left = interpolateX$1(threshold, bl, tl);
                        top = 1 - interpolateX$1(threshold, tr, tl);
                    } else if (cval === 9) {
                        bottom = 1 - interpolateX$1(threshold, br, bl);
                        top = 1 - interpolateX$1(threshold, tr, tl);
                    } else if (cval === 10) {
                        top = 1 - interpolateX$1(threshold, tr, tl);
                        right = 1 - interpolateX$1(threshold, tr, br);
                        bottom = interpolateX$1(threshold, bl, br);
                        left = interpolateX$1(threshold, bl, tl);
                    } else if (cval === 11) {
                        top = 1 - interpolateX$1(threshold, tr, tl);
                        right = 1 - interpolateX$1(threshold, tr, br);
                    } else if (cval === 12) {
                        left = interpolateX$1(threshold, bl, tl);
                        right = interpolateX$1(threshold, br, tr);
                    } else if (cval === 13) {
                        bottom = 1 - interpolateX$1(threshold, br, bl);
                        right = interpolateX$1(threshold, br, tr);
                    } else if (cval === 14) {
                        left = interpolateX$1(threshold, bl, tl);
                        bottom = interpolateX$1(threshold, bl, br);
                    } else {
                        console.log('MarchingSquaresJS-isoContours: Illegal cval detected: ' + cval);
                    }
                    ContourGrid.cells[j][i] = {
                        cval: cval,
                        flipped: flipped,
                        top: top,
                        right: right,
                        bottom: bottom,
                        left: left
                    };
                }
            }
        }

        return ContourGrid;
    }

    function isSaddle(cell) {
        return cell.cval === 5 || cell.cval === 10;
    }

    function isTrivial(cell) {
        return cell.cval === 0 || cell.cval === 15;
    }

    function clearCell(cell) {
        if (!isTrivial(cell) && cell.cval !== 5 && cell.cval !== 10) {
            cell.cval = 15;
        }
    }

    function getXY(cell, edge) {
        if (edge === 'top') {
            return [cell.top, 1.0];
        } else if (edge === 'bottom') {
            return [cell.bottom, 0.0];
        } else if (edge === 'right') {
            return [1.0, cell.right];
        } else if (edge === 'left') {
            return [0.0, cell.left];
        }
    }

    function contourGrid2Paths(grid) {
        var paths = [];
        var path_idx = 0;
        var rows = grid.rows;
        var cols = grid.cols;
        var epsilon = 1e-7;

        grid.cells.forEach(function (g, j) {
            g.forEach(function (gg, i) {
                if (typeof gg !== 'undefined' && !isSaddle(gg) && !isTrivial(gg)) {
                    var p = tracePath(grid.cells, j, i);
                    var merged = false;
                    /* we may try to merge paths at this point */
                    if (p.info === 'mergeable') {
                        /*
                        search backwards through the path array to find an entry
                        that starts with where the current path ends...
                        */
                        var x = p.path[p.path.length - 1][0],
                            y = p.path[p.path.length - 1][1];

                        for (var k = path_idx - 1; k >= 0; k--) {
                            if (Math.abs(paths[k][0][0] - x) <= epsilon && Math.abs(paths[k][0][1] - y) <= epsilon) {
                                for (var l = p.path.length - 2; l >= 0; --l) {
                                    paths[k].unshift(p.path[l]);
                                }
                                merged = true;
                                break;
                            }
                        }
                    }
                    if (!merged) paths[path_idx++] = p.path;
                }
            });
        });

        return paths;
    }

    /*
      construct consecutive line segments from starting cell by
      walking arround the enclosed area clock-wise
      */
    function tracePath(grid, j, i) {
        var maxj = grid.length;
        var p = [];
        var dxContour = [0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 1, 1, -1, 0, -1, 0];
        var dyContour = [0, -1, 0, 0, 1, 1, 1, 1, 0, -1, 0, 0, 0, -1, 0, 0];
        var dx, dy;
        var startEdge = ['none', 'left', 'bottom', 'left', 'right', 'none', 'bottom', 'left', 'top', 'top', 'none', 'top', 'right', 'right', 'bottom', 'none'];
        var nextEdge = ['none', 'bottom', 'right', 'right', 'top', 'top', 'top', 'top', 'left', 'bottom', 'right', 'right', 'left', 'bottom', 'left', 'none'];
        var edge;

        var startCell = grid[j][i];
        var currentCell = grid[j][i];

        var cval = currentCell.cval;
        var edge = startEdge[cval];

        var pt = getXY(currentCell, edge);

        /* push initial segment */
        p.push([i + pt[0], j + pt[1]]);
        edge = nextEdge[cval];
        pt = getXY(currentCell, edge);
        p.push([i + pt[0], j + pt[1]]);
        clearCell(currentCell);

        /* now walk arround the enclosed area in clockwise-direction */
        var k = i + dxContour[cval];
        var l = j + dyContour[cval];
        var prev_cval = cval;

        while (k >= 0 && l >= 0 && l < maxj && (k != i || l != j)) {
            currentCell = grid[l][k];
            if (typeof currentCell === 'undefined') {
                /* path ends here */
                //console.log(k + " " + l + " is undefined, stopping path!");
                break;
            }
            cval = currentCell.cval;
            if (cval === 0 || cval === 15) {
                return { path: p, info: 'mergeable' };
            }
            edge = nextEdge[cval];
            dx = dxContour[cval];
            dy = dyContour[cval];
            if (cval === 5 || cval === 10) {
                /* select upper or lower band, depending on previous cells cval */
                if (cval === 5) {
                    if (currentCell.flipped) {
                        /* this is actually a flipped case 10 */
                        if (dyContour[prev_cval] === -1) {
                            edge = 'left';
                            dx = -1;
                            dy = 0;
                        } else {
                            edge = 'right';
                            dx = 1;
                            dy = 0;
                        }
                    } else {
                        /* real case 5 */
                        if (dxContour[prev_cval] === -1) {
                            edge = 'bottom';
                            dx = 0;
                            dy = -1;
                        }
                    }
                } else if (cval === 10) {
                    if (currentCell.flipped) {
                        /* this is actually a flipped case 5 */
                        if (dxContour[prev_cval] === -1) {
                            edge = 'top';
                            dx = 0;
                            dy = 1;
                        } else {
                            edge = 'bottom';
                            dx = 0;
                            dy = -1;
                        }
                    } else {
                        /* real case 10 */
                        if (dyContour[prev_cval] === 1) {
                            edge = 'left';
                            dx = -1;
                            dy = 0;
                        }
                    }
                }
            }
            pt = getXY(currentCell, edge);
            p.push([k + pt[0], l + pt[1]]);
            clearCell(currentCell);
            k += dx;
            l += dy;
            prev_cval = cval;
        }

        return { path: p, info: 'closed' };
    }

    /**
     * Takes a {@link Point} grid and returns a correspondent matrix {Array<Array<number>>}
     * of the 'property' values
     *
     * @name gridToMatrix
     * @param {FeatureCollection<Point>} grid of points
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled
     * @param {boolean} [options.flip=false] returns the matrix upside-down
     * @param {boolean} [options.flags=false] flags, adding a `matrixPosition` array field ([row, column]) to its properties,
     * the grid points with coordinates on the matrix
     * @returns {Array<Array<number>>} matrix of property values
     * @example
     *   var extent = [-70.823364, -33.553984, -70.473175, -33.302986];
     *   var cellSize = 3;
     *   var grid = turf.pointGrid(extent, cellSize);
     *   // add a random property to each point between 0 and 60
     *   for (var i = 0; i < grid.features.length; i++) {
     *     grid.features[i].properties.elevation = (Math.random() * 60);
     *   }
     *   gridToMatrix(grid);
     *   //= [
     *     [ 1, 13, 10,  9, 10, 13, 18],
     *     [34,  8,  5,  4,  5,  8, 13],
     *     [10,  5,  2,  1,  2,  5,  4],
     *     [ 0,  4, 56, 19,  1,  4,  9],
     *     [10,  5,  2,  1,  2,  5, 10],
     *     [57,  8,  5,  4,  5,  0, 57],
     *     [ 3, 13, 10,  9,  5, 13, 18],
     *     [18, 13, 10,  9, 78, 13, 18]
     *   ]
     */
    function gridToMatrix$1(grid, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        var zProperty = options.zProperty || 'elevation';
        var flip = options.flip;
        var flags = options.flags;

        // validation
        collectionOf(grid, 'Point', 'input must contain Points');

        var pointsMatrix = sortPointsByLatLng$1(grid, flip);

        var matrix = [];
        // create property matrix from sorted points
        // looping order matters here
        for (var r = 0; r < pointsMatrix.length; r++) {
            var pointRow = pointsMatrix[r];
            var row = [];
            for (var c = 0; c < pointRow.length; c++) {
                var point$$1 = pointRow[c];
                // Check if zProperty exist
                if (point$$1.properties[zProperty]) row.push(point$$1.properties[zProperty]);else row.push(0);
                // add flags
                if (flags === true) point$$1.properties.matrixPosition = [r, c];
            }
            matrix.push(row);
        }

        return matrix;
    }

    /**
     * Sorts points by latitude and longitude, creating a 2-dimensional array of points
     *
     * @private
     * @param {FeatureCollection<Point>} points GeoJSON Point features
     * @param {boolean} [flip=false] returns the matrix upside-down
     * @returns {Array<Array<Point>>} points ordered by latitude and longitude
     */
    function sortPointsByLatLng$1(points$$1, flip) {
        var pointsByLatitude = {};

        // divide points by rows with the same latitude
        featureEach(points$$1, function (point$$1) {
            var lat = getCoords(point$$1)[1];
            if (!pointsByLatitude[lat]) pointsByLatitude[lat] = [];
            pointsByLatitude[lat].push(point$$1);
        });

        // sort points (with the same latitude) by longitude
        var orderedRowsByLatitude = Object.keys(pointsByLatitude).map(function (lat) {
            var row = pointsByLatitude[lat];
            var rowOrderedByLongitude = row.sort(function (a, b) {
                return getCoords(a)[0] - getCoords(b)[0];
            });
            return rowOrderedByLongitude;
        });

        // sort rows (of points with the same latitude) by latitude
        var pointMatrix = orderedRowsByLatitude.sort(function (a, b) {
            if (flip) return getCoords(a[0])[1] - getCoords(b[0])[1];else return getCoords(b[0])[1] - getCoords(a[0])[1];
        });

        return pointMatrix;
    }

    /**
     * Takes a grid {@link FeatureCollection} of {@link Point} features with z-values and an array of
     * value breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).
     *
     * @name isolines
     * @param {FeatureCollection<Point>} pointGrid input points
     * @param {Array<number>} breaks values of `zProperty` where to draw isolines
     * @param {Object} [options={}] Optional parameters
     * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled
     * @param {Object} [options.commonProperties={}] GeoJSON properties passed to ALL isolines
     * @param {Array<Object>} [options.breaksProperties=[]] GeoJSON properties passed, in order, to the correspondent isoline;
     * the breaks array will define the order in which the isolines are created
     * @returns {FeatureCollection<MultiLineString>} a FeatureCollection of {@link MultiLineString} features representing isolines
     * @example
     * // create a grid of points with random z-values in their properties
     * var extent = [0, 30, 20, 50];
     * var cellWidth = 100;
     * var pointGrid = turf.pointGrid(extent, cellWidth, {units: 'miles'});
     *
     * for (var i = 0; i < pointGrid.features.length; i++) {
     *     pointGrid.features[i].properties.temperature = Math.random() * 10;
     * }
     * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
     *
     * var lines = turf.isolines(pointGrid, breaks, {zProperty: 'temperature'});
     *
     * //addToMap
     * var addToMap = [lines];
     */
    function isolines(pointGrid, breaks, options) {
        // Optional parameters
        options = options || {};
        if (!isObject(options)) throw new Error('options is invalid');
        var zProperty = options.zProperty || 'elevation';
        var commonProperties = options.commonProperties || {};
        var breaksProperties = options.breaksProperties || [];

        // Input validation
        collectionOf(pointGrid, 'Point', 'Input must contain Points');
        if (!breaks) throw new Error('breaks is required');
        if (!Array.isArray(breaks)) throw new Error('breaks must be an Array');
        if (!isObject(commonProperties)) throw new Error('commonProperties must be an Object');
        if (!Array.isArray(breaksProperties)) throw new Error('breaksProperties must be an Array');

        // Isoline methods
        var matrix = gridToMatrix$1(pointGrid, { zProperty: zProperty, flip: true });
        var createdIsoLines = createIsoLines(matrix, breaks, zProperty, commonProperties, breaksProperties);
        var scaledIsolines = rescaleIsolines(createdIsoLines, matrix, pointGrid);

        return featureCollection(scaledIsolines);
    }

    /**
     * Creates the isolines lines (featuresCollection of MultiLineString features) from the 2D data grid
     *
     * Marchingsquares process the grid data as a 3D representation of a function on a 2D plane, therefore it
     * assumes the points (x-y coordinates) are one 'unit' distance. The result of the isolines function needs to be
     * rescaled, with turfjs, to the original area and proportions on the map
     *
     * @private
     * @param {Array<Array<number>>} matrix Grid Data
     * @param {Array<number>} breaks Breaks
     * @param {string} zProperty name of the z-values property
     * @param {Object} [commonProperties={}] GeoJSON properties passed to ALL isolines
     * @param {Object} [breaksProperties=[]] GeoJSON properties passed to the correspondent isoline
     * @returns {Array<MultiLineString>} isolines
     */
    function createIsoLines(matrix, breaks, zProperty, commonProperties, breaksProperties) {
        var results = [];
        for (var i = 1; i < breaks.length; i++) {
            var threshold = +breaks[i]; // make sure it's a number

            var properties = Object.assign({}, commonProperties, breaksProperties[i]);
            properties[zProperty] = threshold;
            var isoline = multiLineString(isoContours(matrix, threshold), properties);

            results.push(isoline);
        }
        return results;
    }

    /**
     * Translates and scales isolines
     *
     * @private
     * @param {Array<MultiLineString>} createdIsoLines to be rescaled
     * @param {Array<Array<number>>} matrix Grid Data
     * @param {Object} points Points by Latitude
     * @returns {Array<MultiLineString>} isolines
     */
    function rescaleIsolines(createdIsoLines, matrix, points$$1) {

        // get dimensions (on the map) of the original grid
        var gridBbox = bbox(points$$1); // [ minX, minY, maxX, maxY ]
        var originalWidth = gridBbox[2] - gridBbox[0];
        var originalHeigth = gridBbox[3] - gridBbox[1];

        // get origin, which is the first point of the last row on the rectangular data on the map
        var x0 = gridBbox[0];
        var y0 = gridBbox[1];

        // get number of cells per side
        var matrixWidth = matrix[0].length - 1;
        var matrixHeight = matrix.length - 1;

        // calculate the scaling factor between matrix and rectangular grid on the map
        var scaleX = originalWidth / matrixWidth;
        var scaleY = originalHeigth / matrixHeight;

        var resize = function resize(point$$1) {
            point$$1[0] = point$$1[0] * scaleX + x0;
            point$$1[1] = point$$1[1] * scaleY + y0;
        };

        // resize and shift each point/line of the createdIsoLines
        createdIsoLines.forEach(function (isoline) {
            coordEach(isoline, resize);
        });
        return createdIsoLines;
    }

    var IsolineCalc = function () {
      function IsolineCalc() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, IsolineCalc);

        this.setData(data);
      }

      createClass(IsolineCalc, [{
        key: "setData",
        value: function setData(_ref) {
          var points = _ref.points,
              breaks = _ref.breaks,
              options = _ref.options;

          this._points = points;
          this._breaks = breaks;
          this._options = options;
        }

        /**
         * @returns {IsolineCalc}
         */

      }, {
        key: "calcIsolines",
        value: function calcIsolines() {
          this.pointGrid = this._getPointGrid();
          // get isolines
          this.multiLineStringFeatures = this._getLines(this.pointGrid);
          this.polylines = this._transformMultiToArray(this.multiLineStringFeatures);
          // get polygons
          this.multiPolygonFeature = this._getPolygons(this.pointGrid);
          this.polygons = this._transformMultiToArray(this.multiPolygonFeature);
          return this;
        }
      }, {
        key: "createBoundsFromPoints",
        value: function createBoundsFromPoints() {
          var _getMinAndMax2 = this._getMinAndMax(this._points),
              min = _getMinAndMax2.min,
              max = _getMinAndMax2.max;

          this._options.bounds = [[min[0] - 0.3, min[1] - 0.3], [max[0] + 0.3, max[1] + 0.3]];
        }

        /**
         * @returns {IsolineCalc}
         */

      }, {
        key: "recaclOnEmpty",
        value: function recaclOnEmpty() {
          if (this.hasBoundsInOptions() === false && this.lastCalcGeometryEmpty() === true) {
            var warnMsg = 'Polylines and polygons are empty, recacl with bounds from points. ' + 'You can set isolines bounds manually: ' + 'L.leafletIsolines(points, breaks, {bounds: [[lat,lng],[lat,lng]]})';
            if (self && self.console) {
              self.console.warn(warnMsg);
            } else {
              console.warn(warnMsg);
            }
            this.createBoundsFromPoints();
            this.calcIsolines();
          }
          return this;
        }
      }, {
        key: "hasBoundsInOptions",
        value: function hasBoundsInOptions() {
          return this._options.bounds && this._options.bounds.length > 0;
        }
      }, {
        key: "lastCalcGeometryEmpty",
        value: function lastCalcGeometryEmpty() {
          return this._geometryEmpty(this.multiLineStringFeatures) === true && this._geometryEmpty(this.multiPolygonFeature) === true;
        }
      }, {
        key: "getComputedPoly",
        value: function getComputedPoly() {
          return {
            points: this._points,
            breaks: this._breaks,
            polygons: this.polygons,
            polylines: this.polylines
          };
        }
      }, {
        key: "_geometryEmpty",
        value: function _geometryEmpty() {
          var feature = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          for (var i = 0; i < feature.features.length; i++) {
            if (feature.features[i].geometry && feature.features[i].geometry.coordinates.length > 0) {
              return false;
            }
          }
          return true;
        }
      }, {
        key: "_transformMultiToArray",
        value: function _transformMultiToArray(multi) {
          var polylines = [];
          multi.features.forEach(function (v) {
            if (v.geometry.coordinates.length > 0) {
              v.geometry.coordinates.forEach(function (coordinates) {
                polylines.push({
                  coordinates: coordinates,
                  properties: v.properties
                });
              });
            }
          });
          return polylines;
        }
      }, {
        key: "_getPolygons",
        value: function _getPolygons(pointGrid) {
          return isobands(pointGrid, this._breaks, {
            zProperty: this._options.propertyName
          });
        }
      }, {
        key: "_getLines",
        value: function _getLines(pointGrid) {
          return isolines(pointGrid, this._breaks, {
            zProperty: this._options.propertyName
          });
        }
      }, {
        key: "_getFlatArray",
        value: function _getFlatArray(input, tmp) {
          var _this = this;

          if (Array.isArray(input) && Array.isArray(input[0])) {
            input.forEach(function (v) {
              _this._getFlatArray(v, tmp);
            });
          } else {
            tmp.push([input[0], input[1]]);
          }
        }
      }, {
        key: "_getMinAndMax",
        value: function _getMinAndMax(bounds) {
          var flatBounds = [];
          this._getFlatArray(bounds, flatBounds);
          var min = [Infinity, Infinity];
          var max = [-Infinity, -Infinity];
          flatBounds.forEach(function (p) {
            if (p[0] > max[0]) {
              max[0] = p[0];
            }
            if (p[1] > max[1]) {
              max[1] = p[1];
            }
            if (p[0] < min[0]) {
              min[0] = p[0];
            }
            if (p[1] < min[1]) {
              min[1] = p[1];
            }
          });
          return {
            min: min,
            max: max
          };
        }
      }, {
        key: "_getPointGrid",
        value: function _getPointGrid() {
          var points = this._points.slice();
          if (this.hasBoundsInOptions()) {
            var _getMinAndMax3 = this._getMinAndMax(this._options.bounds),
                min = _getMinAndMax3.min,
                max = _getMinAndMax3.max;

            points.push([].concat(toConsumableArray(min), [0]));
            points.push([].concat(toConsumableArray(max), [0]));
          }
          var feature = this._pointsToFeatureCollection(points, this._options.propertyName);
          return interpolate(feature, this._options.interpolateCellSize, {
            gridType: 'points',
            property: this._options.propertyName
          });
        }
      }, {
        key: "_pointsToFeatureCollection",
        value: function _pointsToFeatureCollection(points, prop) {
          var features = [];
          points.forEach(function (v) {
            if (v[0] && v[1]) {
              features.push({
                type: 'Feature',
                geometry: {
                  type: 'Point',
                  coordinates: [+v[0], +v[1]]
                },
                properties: defineProperty({}, prop, v[2] || 0)
              });
            }
          });
          return {
            type: 'FeatureCollection',
            features: features
          };
        }
      }]);
      return IsolineCalc;
    }();

    var WorkerEmulate = function () {
      function WorkerEmulate() {
        classCallCheck(this, WorkerEmulate);

        this._cb = null;
      }

      createClass(WorkerEmulate, [{
        key: 'postMessage',
        value: function postMessage(data) {
          var startAt = +new Date();
          try {
            var isolineCalc = new IsolineCalc(data);
            var computedData = isolineCalc.calcIsolines().recaclOnEmpty().getComputedPoly();
            this._cb({
              data: _extends({}, computedData, {
                startAt: startAt
              })
            });
          } catch (e) {
            var error = e.toString();
            this._cb({
              data: { error: error, startAt: startAt }
            });
            console.error(e);
          }
        }
      }, {
        key: 'onComplete',
        value: function onComplete(cb) {
          this._cb = cb;
        }
      }]);
      return WorkerEmulate;
    }();

    function create() {
      // prevent object assign error in IE
      // source: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
      if (!Object.assign) {
        Object.defineProperty(Object, 'assign', {
          enumerable: false,
          configurable: true,
          writable: true,
          value: function value(target, firstSource) {

            if (target === undefined || target === null) {
              throw new TypeError('Cannot convert first argument to object');
            }

            var to = Object(target);
            for (var i = 1; i < arguments.length; i++) {
              var nextSource = arguments[i];
              if (nextSource === undefined || nextSource === null) {
                continue;
              }

              var keysArray = Object.keys(Object(nextSource));
              for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                var nextKey = keysArray[nextIndex];
                var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                if (desc !== undefined && desc.enumerable) {
                  to[nextKey] = nextSource[nextKey];
                }
              }
            }
            return to;
          }
        });
      }
    }

    /* global L */

    var LeafletIsolines = L.Layer.extend({
      options: {
        propertyName: 'value',
        interpolateCellSize: 4,
        isolyneCaption: function isolyneCaption(propVal) {
          return propVal.toString();
        },
        polylineOptions: function polylineOptions(propVal, dataObj) {
          return {
            color: getDefaultColor(propVal),
            fillColor: getDefaultColor(propVal)
          };
        },
        polygonOptions: function polygonOptions(propVal, dataObj) {
          return {
            color: getDefaultColor(propVal),
            fillColor: getDefaultColor(propVal)
          };
        },
        isolineMarkerOptions: function isolineMarkerOptions(propVal, dataObj) {
          return {};
        },
        bounds: [],
        showPolylines: true,
        showPolygons: true,
        showIsolineMarkers: true,
        enableCache: false,
        dontUseWorker: false
      },
      outputCache: {},
      _data: null,
      _isolinesLayers: [],
      _points: [],
      _breaks: [0, 1, 2, 3, 4, 5],
      initialize: function initialize() {
        var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var breaks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        this._points = points;
        this._breaks = breaks;
        try {
          create();
          for (var optKey in this.options) {
            if (options.hasOwnProperty(optKey) === false) {
              options[optKey] = this.options[optKey];
            } else if (_typeof(options[optKey]) !== _typeof(this.options[optKey])) {
              throw new Error(optKey + ' option must be a ' + _typeof(this.options[optKey]));
            }
          }
          L.Util.setOptions(this, options);
          if (!window.leafletIsolinesOutputCache) {
            window.leafletIsolinesOutputCache = {};
          }
          this.outputCache = window.leafletIsolinesOutputCache;
        } catch (e) {
          this._handleError(e);
          return;
        }

        try {
          this._createWorker();
        } catch (e) {
          console.warn('worker init error, calc may be slow');
          this._createEmulateWorker();
        }
      },
      _createWorker: function _createWorker() {
        var _this = this;

        if (this.options.dontUseWorker === true) {
          this._createEmulateWorker();
          return;
        }
        this._isolinesWorker = new IsolinesWorker();
        this._isolinesWorker.addEventListener('error', function (e) {
          if (detectIE()) {
            console.warn('ie worker error, recalc without worker');
            _this._createEmulateWorker();
            _this.calc();
          } else {
            _this._handleError(e);
          }
        });
        this._isolinesWorker.addEventListener('message', function (e) {
          return _this._onIsolinesCalcComplete(e);
        });
      },
      _createEmulateWorker: function _createEmulateWorker() {
        var _this2 = this;

        this._isolinesWorker = new WorkerEmulate();
        this._isolinesWorker.onComplete(function (e) {
          return _this2._onIsolinesCalcComplete(e);
        });
      },
      _onIsolinesCalcComplete: function _onIsolinesCalcComplete(_ref) {
        var data = _ref.data;

        try {
          if (data.error) {
            throw new Error(data.error);
          }
          this._data = data;
          this.saveInCache(data);
          this._drawIsolines();
        } catch (e) {
          this._handleError(e);
        } finally {
          var endAt = +new Date();
          var generatedTime = endAt - data.startAt;
          this.fire('end', {
            generatedTime: generatedTime
          });
        }
      },
      onAdd: function onAdd(map) {
        this._map = map;
        this.setData(this._points, this._breaks);
      },
      addTo: function addTo(map) {
        map.addLayer(this);
        // this.setData(this._points, this._breaks)
        return this;
      },
      onRemove: function onRemove() {
        this.removeIsolines();
        return this;
      },
      setData: function setData(points, breaks) {
        this._points = points || this._points;
        this._breaks = breaks || this._breaks;
        this.calc();
      },
      calc: function calc() {
        this.fire('start');
        var data = {
          points: this._points,
          breaks: this._breaks,
          options: this.options
        };
        if (this._isInCache(data.points)) {
          this._onIsolinesCalcComplete({
            data: this._getFromCache(data.points)
          });
          return;
        }
        this._isolinesWorker.postMessage(JSON.parse(JSON.stringify(data, this._avoidCircularReference(data))));
      },
      _avoidCircularReference: function _avoidCircularReference(obj) {
        return function (key, value) {
          return key && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && obj === value ? undefined : value;
        };
      },
      _drawPolylines: function _drawPolylines() {
        var _this3 = this;

        this._data.polylines.forEach(function (v) {
          var _v$coordinates = v.coordinates,
              coordinates = _v$coordinates === undefined ? [] : _v$coordinates,
              _v$properties = v.properties,
              properties = _v$properties === undefined ? {} : _v$properties;

          if (coordinates.length > 0) {
            var caption = _this3.options.isolyneCaption ? _this3.options.isolyneCaption(properties[_this3.options.propertyName]) : properties[_this3.options.propertyName];
            var layerPolyline = _this3.createPolyline(coordinates, _this3.options.polylineOptions(properties[_this3.options.propertyName], v));
            layerPolyline.addTo(_this3._map);
            _this3._isolinesLayers.push(layerPolyline);
            if (caption && _this3.options.showIsolineMarkers) {
              var marker = _this3.createIsolineMarker(layerPolyline, caption, _this3.options.isolineMarkerOptions(properties[_this3.options.propertyName], v), coordinates);
              marker.addTo(_this3._map);
              _this3._isolinesLayers.push(marker);
              _this3.fire('isolineMarker.add', {
                marker: marker,
                coordinates: coordinates,
                properties: properties
              });
            }
            _this3.fire('polyline.add', {
              layerPolyline: layerPolyline,
              coordinates: coordinates,
              properties: properties
            });
          }
        });
      },
      _drawPolygons: function _drawPolygons() {
        var _this4 = this;

        this._data.polygons.forEach(function (v) {
          var _v$coordinates2 = v.coordinates,
              coordinates = _v$coordinates2 === undefined ? [] : _v$coordinates2,
              _v$properties2 = v.properties,
              properties = _v$properties2 === undefined ? {} : _v$properties2;

          if (coordinates.length > 0) {
            var layerPolygon = _this4.createPolygon(coordinates, _this4.options.polygonOptions(properties[_this4.options.propertyName], v));
            layerPolygon.addTo(_this4._map);
            _this4._isolinesLayers.push(layerPolygon);
            _this4.fire('polygon.add', {
              layerPolygon: layerPolygon,
              coordinates: coordinates,
              properties: properties
            });
          }
        });
      },
      _drawIsolines: function _drawIsolines() {
        this.removeIsolines();
        this.options.showPolylines && this._drawPolylines();
        this.options.showPolygons && this._drawPolygons();
      },
      redrawIsolines: function redrawIsolines() {
        this._drawIsolines();
      },
      createPolygon: function createPolygon(coordinates, options) {
        return L.polygon(coordinates, options);
      },
      createIsolineMarker: function createIsolineMarker(polyline, caption, options, coordinates) {
        return L.marker.isolineMarker(polyline, caption, options, coordinates);
      },
      createPolyline: function createPolyline(coordinates, options) {
        if (!L.polylineDecorator) {
          // console.warn('You can use https://github.com/bbecquet/Leaflet.PolylineDecorator for draw polylines')
          return L.polyline(coordinates, options);
        }
        return L.polylineDecorator(coordinates, options);
      },
      saveInCache: function saveInCache(output) {
        this.outputCache[this._getCacheId(output.points)] = Object.assign(output, {
          savedAt: +new Date()
        });
      },
      _isInCache: function _isInCache() {
        var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        return this.options.enableCache && this.outputCache.hasOwnProperty(this._getCacheId(points));
      },
      _getFromCache: function _getFromCache() {
        var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        return this.outputCache[this._getCacheId(points)];
      },

      /**
       * id = len-firstPoint.lat-firstPoint.lng-lastPoint.lat-lastPoint.lng
       * @param points
       * @returns {string}
       * @private
       */
      _getCacheId: function _getCacheId() {
        var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        return points.length + '-' + points[0][0] + '-' + points[0][1] + points[points.length - 1][0] + '-' + points[points.length - 1][1];
      },
      removeIsolines: function removeIsolines() {
        this._isolinesLayers.forEach(function (v) {
          v.remove();
        });
        this._isolinesLayers = [];
      },
      _handleError: function _handleError(e) {
        var _this5 = this;

        console.error(e);
        setTimeout(function () {
          _this5.fire('error', {
            msg: e.toString()
          });
        }, 0);
      }
    });

    /* global L */

    var index = (function () {
      L.leafletIsolines = function (points, breaks, options) {
        return new LeafletIsolines(points, breaks, options);
      };
    })();

    return index;

})));
//# sourceMappingURL=leaflet-isolines.js.map
